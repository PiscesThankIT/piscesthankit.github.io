<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于作者</title>
    <url>/about-me/</url>
    <content><![CDATA[<p>本博客旨在解决 Magento 2 的应用问题，更注重深度挖掘。 博主的信念是 Magento 是一个优秀的开源程序，值得被更多人探索和应用。如能为 Magento 在国内的推广尽绵薄之力，将是我莫大的荣幸。 君子性非异也，善假于物也。希望对诸君有所帮助。</p>
<h2 id="关于版权"><a href="#关于版权" class="headerlink" title="关于版权"></a><a href="#%E5%85%B3%E4%BA%8E%E7%89%88%E6%9D%83"></a>关于版权</h2><p>除非注明转载，否则本博客下文章皆为原创或原创翻译。转载请注明出处。</p>
<h2 id="联系信息"><a href="#联系信息" class="headerlink" title="联系信息"></a><a href="#%E8%81%94%E7%B3%BB%E4%BF%A1%E6%81%AF"></a>联系信息</h2><p>QQ 1518525862 <img src="/wp-content/uploads/2016/08/qrcode_1473317238295-150x150.jpg" alt="qrcode_1473317238295"> 微信 <img src="/wp-content/uploads/2016/08/mmqrcode1473308737790-150x150.jpg" alt="mmqrcode1473308737790"> 邮箱：<a href="mailto:&#119;&#117;&#113;&#x69;&#x6f;&#x6e;&#x67;&#49;&#53;&#49;&#x38;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#119;&#117;&#113;&#x69;&#x6f;&#x6e;&#x67;&#49;&#53;&#49;&#x38;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a> 如果觉得我的东西对您有帮助，可以捐赠我 o(*^▽^*)o~♪ 支付宝支持 <img src="/wp-content/uploads/2016/08/1473317716916-150x150.jpg" alt="1473317716916"> 微信支持 <img src="/wp-content/uploads/2016/08/mm_facetoface_collect_qrcode_1473317893092-150x150.png" alt="mm_facetoface_collect_qrcode_1473317893092"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>关于 PSR</title>
    <url>/about-psr/</url>
    <content><![CDATA[<p><em>前言：勿在浮沙筑高楼。在本站 PHP 的分类目录下，博主将尽可能地收集、整理和分享 PHP 相关的知识，希望能够帮助自己夯实基础，同时也能给一些朋友帮助。</em></p>
<p>PSR 的全称是 PHP Framework Recommendations ，他是由 PHP FIG 组织制定的 PHP 规范， 是 PHP 开发的实践标准之一。</p>
<p>项目的目的在于：通过框架作者或者框架的代表之间的讨论，以最低程度的限制，制定一个协作标准，各个框架遵循统一的编码规范，避免各家自行发展的风格阻碍了 PHP 的发展，解决程序设计师由来已久的困扰。</p>
<p>以上摘自<a href="https://psr.phphub.org/">PHP 标准规范中文版</a><br>该站主要针对<strong>已通过</strong> 的 PSR 进行翻译，内容比较全面，排版也很舒服，给他们点个赞！</p>
<p>PSR 的官方网址：<a href="http://www.php-fig.org/psr/">http://www.php-fig.org/psr/</a></p>
<h2 id="已经通过的规范索引"><a href="#已经通过的规范索引" class="headerlink" title="已经通过的规范索引"></a><a href="#%E5%B7%B2%E7%BB%8F%E9%80%9A%E8%BF%87%E7%9A%84%E8%A7%84%E8%8C%83%E7%B4%A2%E5%BC%95"></a>已经通过的规范索引</h2><p>PSR-1 基础编码规范 Basic Coding Standard<br>PSR-2 编码风格规范 Coding Style Guide<br>PSR-3 日志接口规范 Logger Interface<br>PSR-4 自动加载规范 Autoloading Standard<br>PSR-6 缓存接口规范 Caching Interface<br>PSR-7 HTTP 消息接口规范 HTTP Message Interface</p>
<p>PSR-0 Autoloading Standard 这个已经在 2014-10-21 日被标记为废除，由 PSR-4 替代。</p>
<h2 id="Magento-遵循的规范"><a href="#Magento-遵循的规范" class="headerlink" title="Magento 遵循的规范"></a><a href="#magento-%E9%81%B5%E5%BE%AA%E7%9A%84%E8%A7%84%E8%8C%83"></a>Magento 遵循的规范</h2><p>Magento 的核心开发团队使用 PSR-1 和 PSR-2 规范，推荐 Magento 的开发者也使用相同规范。参考：<a href="http://devdocs.magento.com/guides/v2.1/coding-standards/code-standard-php.html">PHP coding standard</a></p>
<p>可以用 <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a> 去进行检查是否符合某个规范。</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>关于 view.xml</title>
    <url>/about-view-xml/</url>
    <content><![CDATA[<p>在<a href="/how-to-create-magento-2-frontend-theme/">如何创建 Magneto 2 前端主题</a>中提到用<code>view.xml</code>来配置前端产品图片的属性（高度宽度什么的）。本篇主要归纳总结<code>view.xml</code>相关的内容。</p>
<p>文件位置<code>&lt;theme_dir&gt;/etc/view.xml</code>。<br>我们来看<code>Blank</code>主题的<code>view.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;media&gt;</span><br><span class="line">    // Part-1</span><br><span class="line">    &lt;images module=&quot;Magento_Catalog&quot;&gt;</span><br><span class="line">        &lt;image id=&quot;bundled_product_customization_page&quot; type=&quot;thumbnail&quot;&gt;</span><br><span class="line">            &lt;width&gt;140&lt;/width&gt;</span><br><span class="line">            &lt;height&gt;140&lt;/height&gt;</span><br><span class="line">        &lt;/image&gt;</span><br><span class="line">        ......</span><br><span class="line">    &lt;/images&gt;</span><br><span class="line">&lt;/media&gt;</span><br><span class="line">// Part-2</span><br><span class="line">&lt;vars module=&quot;Magento_Catalog&quot;&gt;</span><br><span class="line">    &lt;!-- Gallery and magnifier theme settings. Start --&gt;</span><br><span class="line">    &lt;var name=&quot;gallery&quot;&gt;</span><br><span class="line">        &lt;var name=&quot;nav&quot;&gt;thumbs&lt;/var&gt; &lt;!-- Gallery navigation style (false/thumbs/dots) --&gt;</span><br><span class="line">        .....</span><br><span class="line">    &lt;/var&gt;</span><br><span class="line">    &lt;var name=&quot;magnifier&quot;&gt;</span><br><span class="line">        ......</span><br><span class="line">    &lt;/var&gt;</span><br><span class="line">    &lt;var name=&quot;breakpoints&quot;&gt;</span><br><span class="line">        ......</span><br><span class="line">    &lt;/var&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/vars&gt;</span><br><span class="line">......</span><br><span class="line">// Part-3</span><br><span class="line">&lt;exclude&gt;</span><br><span class="line">    &lt;item type=&quot;file&quot;&gt;Lib::jquery/jquery.min.js&lt;/item&gt;</span><br><span class="line">    &lt;item type=&quot;file&quot;&gt;Lib::jquery/jquery-ui-1.9.2.js&lt;/item&gt;</span><br><span class="line">    &lt;item type=&quot;file&quot;&gt;Lib::jquery/jquery.ba-hashchange.min.js&lt;/item&gt;</span><br><span class="line">    ......</span><br><span class="line">&lt;/exclude&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part-1"></a><a href="#part-1"></a>Part-1</h2><p>举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;image id=&quot;related_products_list&quot; type=&quot;small_image&quot;&gt;</span><br><span class="line">    &lt;width&gt;152&lt;/width&gt;</span><br><span class="line">    &lt;height&gt;190&lt;/height&gt;</span><br><span class="line">&lt;/image&gt;</span><br></pre></td></tr></table></figure>

<p>这里的<code>id</code>用在了<code>vendor/magento/module-catalog/view/frontend/templates/product/list/items.phtml</code>模板中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &#x27;related&#x27;:</span><br><span class="line">    /** @var \Magento\Catalog\Block\Product\ProductList\Related $block */</span><br><span class="line">    if ($exist = $block-&gt;getItems()-&gt;getSize()) &#123;</span><br><span class="line">        $type = &#x27;related&#x27;;</span><br><span class="line">        $class = $type;</span><br><span class="line"></span><br><span class="line">        $image = &#x27;related_products_list&#x27;;</span><br><span class="line">        $title = __(&#x27;Related Products&#x27;);</span><br><span class="line">        $items = $block-&gt;getItems();</span><br><span class="line">        $limit = 0;</span><br><span class="line">        $shuffle = 0;</span><br><span class="line">        $canItemsAddToCart = $block-&gt;canItemsAddToCart();</span><br><span class="line"></span><br><span class="line">        $showWishlist = true;</span><br><span class="line">        $showCompare = true;</span><br><span class="line">        $showCart = false;</span><br><span class="line">        $templateType = null;</span><br><span class="line">        $description = false;</span><br><span class="line">    &#125;</span><br><span class="line">break;</span><br></pre></td></tr></table></figure>

<p>上面代码中的<code>$image</code>的值和上面的<code>id</code>是一致的，通过该<code>id</code>获得图片的配置尺寸。图片的输出是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php echo $block-&gt;getImage($_item, $image)-&gt;toHtml(); ?&gt;</span><br></pre></td></tr></table></figure>

<p>如果主题没有<code>view.xml</code>那么就会使用<code>fallback theme</code>（一直向上找他的父主题）。</p>
<p>当你要做一些修改的时候，一般会完整拷贝一个<code>view.xml</code>文件过去，然后在他的基础上进行修改，因为<code>view.xml</code>的节点并不会合并。就是说，如果你的主题中有<code>view.xml</code>，那么就会使用它，如果你里面缺少一些节点，是不会向上查找父主题，并进行合并节点的。</p>
<p>修改后需要运行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento catalog:images:resize</span><br></pre></td></tr></table></figure>

<p>这个命令会重新生成新的尺寸的图片。</p>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part-2"></a><a href="#part-2"></a>Part-2</h2><p>这部分是负责配置 <a href="http://devdocs.magento.com/guides/v2.1/javascript-dev-guide/widgets/widget_gallery.html#configure-gallery-options-in-viewxml">Gallery widget</a>。就是产品页大图片放大镜那里。</p>
<p>这一部分可以参考<a href="/alan-magento-2-javascript-init-scripts/">Magento 2 Javascript Init Scripts</a></p>
<h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part-3"></a><a href="#part-3"></a>Part-3</h2><p>直接看参考文档的最后一个。看起来<code>exclude</code>节点中的文件不会被合并，每次都会单独加载。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/themes/theme-images.html">Configure images properties for a theme</a><br><a href="http://magento.stackexchange.com/questions/122569/magento-2-change-default-product-images-sizes">Magento 2 &gt; Change default product images sizes</a><br><a href="http://magento.stackexchange.com/questions/96510/what-does-the-exclude-tag-in-magento-2s-view-xml-file-do">What does the “exclude” Tag in Magento 2’s view.xml file do</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>view.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>管理员账户</title>
    <url>/admin-account/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-account.html">原文地址</a></em><br>您的管理员账户在安装时已经初步建好了，可能包含占位符信息还不不完整。您可以随时修改您的账户名、密码，更改姓名和邮箱地址。<br>要了解更多关于管理员用户(Admin users)和角色的，请参阅权限。</p>
<h2 id="编辑您的账户信息："><a href="#编辑您的账户信息：" class="headerlink" title="编辑您的账户信息："></a><a href="#%E7%BC%96%E8%BE%91%E6%82%A8%E7%9A%84%E8%B4%A6%E6%88%B7%E4%BF%A1%E6%81%AF%EF%BC%9A"></a>编辑您的账户信息：</h2><ol>
<li>管理后台右上角，点击「账户」(Account)<img src="/wp-content/uploads/2016/08/btn-account.png">图标，选择「账户设置」(Account Setting)</li>
<li>您可以对账户信息进行必要的修改了，如果您修改了登录所需的信息，一定要写下来以免忘记哦。</li>
<li>完成后，点击「保存账户信息」(Save Account)<br><img src="/wp-content/uploads/2016/08/admin-account-information_thumb_0_0.png" alt="Account Information"></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>操作控件</title>
    <url>/admin-actions-control/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-actions-control.html">原文网址</a></em></p>
<p>与表格中的记录打交道，您可以通过操作控件对一条或多条记录进行操作。操作控件中列出了可对特定数据类型进行的操作。例如，对于商品记录，您可以用操作控件修改选中商品的属性，将其状态由”disabled”不可用的为”enabled”可用的，或者从数据库中删掉这条记录。</p>
<p>您可以做出尽量多的必要修改然后一次提交。这样比对每个商品分别修改要更快。</p>
<p>不同的列表有不同的操作控件列表，而且根据你所选择的操作命令，可能会出现更多选项。例如，修改一组记录的状态，操作控件边上会出现一个可选的状态选项。（此处2.1版本状态选项一直都在）<br><img src="/wp-content/uploads/2016/08/actions-change-status_thumb_0_0.png"></p>
<h2 id="第一步：选择记录"><a href="#第一步：选择记录" class="headerlink" title="第一步：选择记录"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E8%AE%B0%E5%BD%95"></a>第一步：选择记录</h2><p>第一列的复选框用来标记记录是否选中。过滤控件可以用来缩小范围。</p>
<ol>
<li>勾选复选框来选中记录，或者使用批量工具(Mass Actions)来选择一组数据<ul>
<li>全选&#x2F;全不选</li>
</ul>
</li>
<li>如果需要，给每列设置筛选条件仅显示您要包含的记录</li>
</ol>
<h2 id="第二步：操作选中的记录"><a href="#第二步：操作选中的记录" class="headerlink" title="第二步：操作选中的记录"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E6%93%8D%E4%BD%9C%E9%80%89%E4%B8%AD%E7%9A%84%E8%AE%B0%E5%BD%95"></a>第二步：操作选中的记录</h2><ol>
<li>选择您要进行的操作</li>
<li>点击 <strong>提交</strong>(Submit)</li>
</ol>
<h3 id="例子：修改属性"><a href="#例子：修改属性" class="headerlink" title="例子：修改属性"></a><a href="#%E4%BE%8B%E5%AD%90%EF%BC%9A%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7"></a>例子：修改属性</h3><ol>
<li>列表中勾选上要修改的记录</li>
<li>点击 Actions 中的 <strong>修改属性</strong>(Update Attributes)然后点提交。修改属性页面列出了可以修改的属性，并且分组显示，左侧是他的分组。<img src="/wp-content/uploads/2016/08/action-update-attributes_thumb_0_0.png"></li>
<li>选中<strong>修改</strong>(Change)复选框，然后进行修改。</li>
<li>保存<br>.</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>控制面板</title>
    <url>/admin-dashboard/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-dashboard.html">原文地址</a></em></p>
<p>控制面板通常是您登录管理后台后见到的第一个页面，提供您店铺中销售和客户活动信息的简要概述。左边快照是店铺开张以来所有销售额、平均每单金额、最后五笔订单以及客户搜索词。图表展示了所选时间范围内订单和销量。您可以通过图表上方的选项卡切换视图(Orders 还是 Amounts).底部的选项卡提供有关畅销商品、浏览最多商品、新客户和买的最多的客户的快报。</p>
<p>控制面板是默认的管理后台起始页面。不过您可以修改设置让您登录后第一个页面是别的页面。您还可以设置控制面板中报告所使用的起始日期，并禁用图表展示。</p>
<p>您可以为每个店铺视图(store view)生成控制面板的快照报告。页面底部的选项卡总括了指定时间段内最畅的销商品，浏览最多的商品，新的客户，以及买的最多的客户。（不要问我为什么重复了。。）</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-dashboard_thumb_0_0.png"></p>
<h2 id="设置图表"><a href="#设置图表" class="headerlink" title="设置图表"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%9B%BE%E8%A1%A8"></a>设置图表</h2><ol>
<li><p>在 Admin 主菜单中，点击<strong>店铺</strong>(Stores)，在<strong>设置</strong>(Settings)下选择<strong>设置</strong>(Configuration),之后执行下面的任一操作。</p>
<ul>
<li><h3 id="启用图表"><a href="#启用图表" class="headerlink" title="启用图表"></a><a href="#%E5%90%AF%E7%94%A8%E5%9B%BE%E8%A1%A8"></a>启用图表</h3><ol>
<li><p>左侧面板，在<strong>高级</strong>(Advanced)之下，选择<strong>管理员</strong>(Admin)</p>
</li>
<li><p>在<strong>控制面板</strong>(Dashboard)部分，选择<strong>启用图表</strong>(Enable Charts)为<strong>是</strong>(Yes)  </p>
<p><img src="/wp-content/uploads/2016/08/config-advanced-admin-dashboard_thumb_0_0.png"></p>
</li>
</ol>
</li>
<li><h3 id="设置起始日期"><a href="#设置起始日期" class="headerlink" title="设置起始日期"></a><a href="#%E8%AE%BE%E7%BD%AE%E8%B5%B7%E5%A7%8B%E6%97%A5%E6%9C%9F"></a>设置起始日期</h3><ol>
<li><p>左侧面板<strong>常规</strong>(General)&gt;<strong>报告</strong>(Reports)</p>
</li>
<li><p>在<strong>控制面板</strong>(Dashboard)部分，做如下操作：<br>a. set <strong>Year-To-Date Starts</strong> to the <strong>Month</strong> and <strong>Day</strong>.<br>b. Set <strong>Current Month Starts</strong> to the <strong>Day</strong>.</p>
<p><img src="/wp-content/uploads/2016/08/config-general-reports-dashboard_thumb_0_0.png"></p>
<p>（此处没看明白，各位看官有明白的望不吝赐教，补充更正。）</p>
</li>
</ol>
</li>
<li><h3 id="选择数据源"><a href="#选择数据源" class="headerlink" title="选择数据源"></a><a href="#%E9%80%89%E6%8B%A9%E6%95%B0%E6%8D%AE%E6%BA%90"></a>选择数据源</h3><p>如果您要处理的数据比较多，您可以关闭展示实时数据以优化控制面板的性能。</p>
</li>
</ul>
<ol>
<li>在左侧面板中，点击<strong>销售</strong>(Sales)让他展开，再选择展开的菜单<strong>销售</strong></li>
<li>点击展开<strong>控制面板</strong>(Dashboard)，做如下操作：<ul>
<li><p>要实时数据，设置<strong>使用聚合数据 (测试版)</strong>(Use Aggregated Data (beta))为<strong>是</strong></p>
</li>
<li><p>使用历史数据，设置<strong>使用聚合数据 (测试版)</strong>(Use Aggregated Data (beta))为<strong>否</strong>  </p>
<p><img src="/wp-content/uploads/2016/08/config-sales-dashboard_thumb_0_0.png"></p>
</li>
</ul>
</li>
</ol>
<ul>
<li><h3 id="更改起始页面"><a href="#更改起始页面" class="headerlink" title="更改起始页面"></a><a href="#%E6%9B%B4%E6%94%B9%E8%B5%B7%E5%A7%8B%E9%A1%B5%E9%9D%A2"></a>更改起始页面</h3><ol>
<li><p>左侧面板，点击展开<strong>高级</strong>(Advanced) &gt; <strong>管理员</strong>(Admin)</p>
</li>
<li><p>点击展开<strong>起始页</strong>(Startup Page)</p>
</li>
<li><p>选择您想要的起始页面，列表列出了后台所有的页面。  </p>
<p><img src="/wp-content/uploads/2016/08/config-advanced-admin-startup-page_thumb_0_0.png"></p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>完成后，点击<strong>保存设置</strong>(Save Config)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>后台全局搜索</title>
    <url>/admin-global-search/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-global-search.html">原文地址</a></em></p>
<p>头部的放大镜搜索框可以用来查找数据库中的任何记录，包括客户、商品、订单、相关属性。例如，你输入一个客户的名字，结果可能包含客户记录，可能也包含和这个名字相关的订单。<br><img src="/wp-content/uploads/2016/08/admin-search.png" alt="Search"></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a><a href="#%E6%90%9C%E7%B4%A2"></a>搜索</h2><ol>
<li><p>点击头部的放大镜<img src="/wp-content/uploads/2016/08/btn-search_21x18.png">图标打开搜索框，然后做以下操作：</p>
<ul>
<li>找相近结果，输入你要找的东西的开头几个字或字母</li>
<li>找完全匹配的结果，输入你要找的东西的全称，可以是多个字词</li>
</ul>
</li>
<li><p>在返回的搜索结果中，点击就可以查看记录了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>表格布局</title>
    <url>/admin-grid-layout/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-grid-layout.html">原文网址</a></em></p>
<p>您可以根据需要修改表格中展示的列，哪些展示哪些不展示，改变他们的顺序并保存为视图(Views)。默认情况下，显示20个中的9个（实际上是19个中的9个显示）<br><img src="/wp-content/uploads/2016/08/admin-grid-columns_thumb_0_0.png"></p>
<h2 id="更改是否显示列"><a href="#更改是否显示列" class="headerlink" title="更改是否显示列"></a><a href="#%E6%9B%B4%E6%94%B9%E6%98%AF%E5%90%A6%E6%98%BE%E7%A4%BA%E5%88%97"></a>更改是否显示列</h2><ol>
<li>右上角，点击<strong>列</strong>(Columns)<img src="/wp-content/uploads/2016/08/btn-columns_15x18.png">控件，然后可以做以下操作：<ul>
<li>要在表格中展示的打勾</li>
<li>不要再表格中显示的去掉勾</li>
</ul>
</li>
<li>记得下拉浏览所有可用的列</li>
</ol>
<h2 id="移动列"><a href="#移动列" class="headerlink" title="移动列"></a><a href="#%E7%A7%BB%E5%8A%A8%E5%88%97"></a>移动列</h2><ol>
<li>点击列的标题，按住不放</li>
<li>拖动到新的位置，然后松开</li>
</ol>
<h2 id="保存表格的视图"><a href="#保存表格的视图" class="headerlink" title="保存表格的视图"></a><a href="#%E4%BF%9D%E5%AD%98%E8%A1%A8%E6%A0%BC%E7%9A%84%E8%A7%86%E5%9B%BE"></a>保存表格的视图</h2><ol>
<li>点击<strong>视图</strong>(View)<img src="/wp-content/uploads/2016/08/btn-default-view_19x18.png">点击<strong>保存当前视图</strong>(Save Current View)</li>
<li>输入视图的名称，然后点击箭头<img src="/wp-content/uploads/2016/08/btn-save-all-changes_19x18.png">保存。当前视图名就变成您刚刚建立的那个视图了。</li>
</ol>
<h2 id="修改表格视图"><a href="#修改表格视图" class="headerlink" title="修改表格视图"></a><a href="#%E4%BF%AE%E6%94%B9%E8%A1%A8%E6%A0%BC%E8%A7%86%E5%9B%BE"></a>修改表格视图</h2><p>点击<strong>视图</strong>(View)<img src="/wp-content/uploads/2016/08/btn-default-view_19x18.png">，然后做下列操作：</p>
<ul>
<li>点击视图名称切换另一个视图</li>
<li>修改视图的名字，点击<strong>编辑</strong>(Edit)<img src="/wp-content/uploads/2016/08/btn-edit_18x18.png">图标，进行修改。</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>管理后台菜单</title>
    <url>/admin-menu/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-menu.html">原文地址</a></em><br>左边的侧边栏就是管理后台的主菜单了，专为台式机和移动设备而设计。弹出菜单提供了所有日常的店铺管理所需的工具。</p>
<p>控制面板<br>控制面板提供您店铺中销售和客户活动信息的简要概述，并且通常是您登录管理后台见到的第一个页面。<br><img src="/wp-content/uploads/2016/08/admin-menu-dashboard_212x127.png"></p>
<p>销售<br>在销售菜单里您可以找到关于订单处理，发票，发货，贷项通知单(credit memo)和交易(transitions)相关的一切。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-sales_212x101.png"></p>
<p>商品<br>商品(products)菜单控制与商品目录和库存相关的一切。<br><img src="/wp-content/uploads/2016/08/admin-menu-products_212x121.png"></p>
<p>客户<br>在客户菜单中您可以管理客户的账户，看到哪些客户正在线。<br><img src="/wp-content/uploads/2016/08/admin-menu-customers_212x127.png"></p>
<p>营销<br>在营销菜单中，您可以设置目录和购物车价格规则以及优惠券。满足特定条件时价格规则就会触发一些操作。<br><img src="/wp-content/uploads/2016/08/admin-menu-marketing_212x121.png"></p>
<p>内容<br>内容菜单是您管理店铺内容和设计的地方。您将学习如何创建页面(pages)，内容块(blocks),前端应用程序，以及如何如何展示您的店铺。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-content_212x119.png"></p>
<p>报告<br>报告菜单提供的报告范围广泛，包括销售，购物车，商品，客户，标签，评论，和搜索字词，让您深入了解您店铺的每一个方面。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-reports_212x111.png"></p>
<p>店铺<br>店铺菜单包含了配置和维护店铺各个方面的工具。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-stores_212x120.png"></p>
<p>系统<br>系统菜单包括安装插件(extensions)，和管理与其他应用集成所需要的Web Services工具。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-system_212x122.png"></p>
<p>寻找合作伙伴&amp;插件<br>在这里，您可以为您的店铺找到官方市场上的 Magento 合作伙伴和解决方案。</p>
<p><img src="/wp-content/uploads/2016/08/magento-marketplace-partners-extensions_212x146.png"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>后台消息收件箱</title>
    <url>/admin-message-inbox/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-message-inbox.html">原文地址</a></em></p>
<p>您的店铺会定期接收 Magento 的消息。消息内容可能是系统更新、补丁、发布了新版本、预定的维护、即将发生的事，而且这些消息被划分成不同的重要性级别。头部的响铃图标表示收件箱中未读邮件的数量。</p>
<p><img src="/wp-content/uploads/2016/08/admin-inbox-summary_thumb_0_0.png" alt="Incoming Messages"></p>
<p>至关重要的消息则会出现在弹出窗口中，您一登陆就会看到它。除非您将这类消息标记为已读或是删除掉，否则每次登陆都会提醒您。</p>
<p><img src="/wp-content/uploads/2016/08/admin-message-incoming_thumb_0_0.png" alt="Message of Critical Importance"></p>
<p>通知列表中的消息按照严重程度、时间先后排序，越严重的越靠前，越新的消息越靠前。您可以通过操作命令标记一条消息为已读，查看详情或者从收件箱中移除他。</p>
<p>配置决定了收件箱更新的频次以及消息如何传输。如果您有一个安全的URL ，消息必须通过HTTPS进行传输。</p>
<h2 id="查看收到的消息"><a href="#查看收到的消息" class="headerlink" title="查看收到的消息"></a><a href="#%E6%9F%A5%E7%9C%8B%E6%94%B6%E5%88%B0%E7%9A%84%E6%B6%88%E6%81%AF"></a>查看收到的消息</h2><ol>
<li>点击头部的<strong>消息通知</strong>(Notification)图标，阅读摘要。您可以执行以下操作<ul>
<li>必要的话，点击消息，阅读全文</li>
<li>点击消息右侧的删除图标，删除消息</li>
<li>点击<strong>查看全部</strong>(See All)，进入通知列表</li>
</ul>
</li>
<li>对于至关重要的消息，您可以执行以下操作<ul>
<li>点击<strong>阅读详情</strong>(Read Details)</li>
<li>要关闭弹出窗口但保留消息，点击<strong>关闭</strong>(Close)</li>
</ul>
</li>
</ol>
<h2 id="查看所有通知"><a href="#查看所有通知" class="headerlink" title="查看所有通知"></a><a href="#%E6%9F%A5%E7%9C%8B%E6%89%80%E6%9C%89%E9%80%9A%E7%9F%A5"></a>查看所有通知</h2><ol>
<li>可以做一下操作：<ul>
<li>点击头部的<strong>消息通知</strong>(Notification)，在消息盒子的底部点击<strong>查看全部</strong>(See ALl)</li>
<li>侧边栏点击<strong>系统</strong>(System) &gt; <strong>其他设置</strong>(Other Settings) &gt; <strong>消息通知</strong>(Notifications)</li>
</ul>
</li>
<li>在<strong>操作</strong>(Action)列，可以做以下操作：<ul>
<li>阅读详情请点击<strong>阅读详情</strong>(Read Details)，会在新窗口打开超链接。</li>
<li>让消息留在收件箱，可以点击<strong>标记为已读</strong>(Mark As Read)</li>
<li>要删除消息，点击<strong>删除</strong>(Remove)<br><img src="/wp-content/uploads/2016/08/admin-notifications-mark-as-read_thumb_0_0.png" alt="All Notifications"></li>
</ul>
</li>
<li>作用于多条消息，您可以这样做：<ul>
<li>在第一列的多选框中打勾选中要操作的消息</li>
<li>需要的话，可以用表头第一列的<strong>批量操作</strong>(Mass Actions)（多选框上方不起眼的图标）</li>
</ul>
</li>
<li>选择以下操作中的一个<ul>
<li><strong>标记为已读</strong>(Mark as Read)</li>
<li><strong>移除</strong>(Remove)</li>
</ul>
</li>
<li>点击<strong>提交</strong>(Submit)完成操作</li>
</ol>
<h2 id="配置通知"><a href="#配置通知" class="headerlink" title="配置通知"></a><a href="#%E9%85%8D%E7%BD%AE%E9%80%9A%E7%9F%A5"></a>配置通知</h2><ol>
<li>在侧边栏，点击<strong>店铺</strong>(Stores)&gt; <strong>设置</strong> (Settings) &gt; <strong>设置</strong>(Configuration)</li>
<li>下拉找到<strong>高级</strong>(Advanced) &gt; <strong>系统</strong>(System)</li>
<li>展开<strong>消息通知</strong>(Notifications)部分，做以下操作：<ul>
<li>如果您的后台运行在 HTTPS 下，那么设置 <strong>使用HTTPS获取订阅</strong>(Use HTTPS to Get Feed) 为<strong>是</strong>(Yes)</li>
<li>设置<strong>更新频率</strong>(Update Frequency)决定消息收件箱的更新频率。时间间隔可以是1到24小时<br><img src="/wp-content/uploads/2016/08/config-advanced-system-notifications_thumb_0_0.png" alt="Notifications"></li>
</ul>
</li>
<li>完成后点击<strong>保存设置</strong>(Save Config)</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Admin 登录</title>
    <url>/admin-signin/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-signin.html">原文地址</a></em></p>
<p>您将学习的第一件事情是如何登陆和退出管理后台(Admin)，如何重置您的密码。该指南其余部分的说明都是为具有完整管理权限的用户所写，而且基于您已经成功登陆管理后台的假设。<br>要了解更多关于管理员用户(Admin users)和角色的，请参阅权限。</p>
<p><img src="/wp-content/uploads/2016/08/admin-login.png" alt="Admin Sign In"></p>
<h2 id="登录管理后台"><a href="#登录管理后台" class="headerlink" title="登录管理后台"></a><a href="#%E7%99%BB%E5%BD%95%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0"></a>登录管理后台</h2><ol>
<li>在浏览器地址栏中输入安装时填好的 URL ，后面接上管理后台的基础路径。默认的管理后台 URL 长这样：<code>http://www.yourdomain.com/admin</code><br>您可以保存他为书签或者快捷方式放到桌面上，方便访问。</li>
<li>输入管理员「账户名」(User Name)和「密码」(Password)</li>
<li>点击登陆(Sign In)</li>
</ol>
<h2 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a><a href="#%E9%87%8D%E7%BD%AE%E5%AF%86%E7%A0%81"></a>重置密码</h2><ol>
<li>如果您忘记了密码，请点击「忘记密码」(Forgot Your Password?)链接<br><img src="/wp-content/uploads/2016/08/admin-sign-in-forgot-password.png" alt="Forgot Password"></li>
<li>输入管理员账户的邮箱地址(Email Address)</li>
<li>点击「找回密码」(Retrieve Password)<br><em>管理员密码必须大于等于7位，包含字母和数字，了解更多请参阅配置后台安全</em></li>
</ol>
<h2 id="退出管理后台"><a href="#退出管理后台" class="headerlink" title="退出管理后台"></a><a href="#%E9%80%80%E5%87%BA%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0"></a>退出管理后台</h2><p>右上角点击「账户」(Account)<img src="/wp-content/uploads/2016/08/btn-account.png">图标，在弹出菜单里选择「退出」(Sign Out)<br><img src="/wp-content/uploads/2016/08/admin-sign-out_thumb_0_0.png" alt="Sign Out"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>管理工具</title>
    <url>/admin-workspace/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-workspace.html">原文地址</a></em><br>后台工作区提供了您运营店铺所需的所有工具，数据和内容。主要的页面有一个表格控件，列出了数据部分，还提供了一套工具来进行搜索、排序、过滤、选中、和应用某操作。<br><img src="/wp-content/uploads/2016/08/admin-workspace_thumb_0_0.png" alt="Admin Workspace"></p>
<h2 id="工作区的控件"><a href="#工作区的控件" class="headerlink" title="工作区的控件"></a><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E7%9A%84%E6%8E%A7%E4%BB%B6"></a>工作区的控件</h2><p>控件名称</p>
<p>描述</p>
<p>搜索</p>
<p>全局搜索可以用来查找数据库中的任何记录，包括客户、商品、订单、相关属性。</p>
<p>排序</p>
<p>点击表头可以进行排序</p>
<p>过滤</p>
<p>可以对列进行过滤缩小范围</p>
<p>分页</p>
<p>分页查看</p>
<p>操作</p>
<p>可以进行批量操作</p>
<p>批量工具</p>
<p>用来进行多选，全选全不选</p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/admin-dashboard/">控制面板</a></li>
<li><a href="/admin-message-inbox/">后台消息收件箱</a></li>
<li><a href="/admin-global-search/">后台全局搜索</a></li>
<li><a href="/grid-controls/">表格控件</a><ul>
<li><a href="/admin-grid-layout/">表格布局</a></li>
</ul>
</li>
<li><a href="/admin-actions-control/">操作控件</a></li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>管理后台</title>
    <url>/admin/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin.html">原文网址</a></em></p>
<p>您的店铺 Admin 是受密码保护的后台。在后台您可以设置产品，进行促销，管理订单以及执行其他管理任务。所有的基本设置事项和店铺管理操作都是由管理员完成的。</p>
<p>最初的登录凭证是在 Magento 安装过程中设置的，如果您忘记了密码，会发送临时密码到与管理员账户相关的邮箱中。为了增强安全性，您可以设置店铺登录的用户名和密码区分大小写。为了增强安全性，您可以设置管理员登录需要输入验证码。要了解更多，请参阅设置管理员账户安全</p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/admin-signin/%E2%80%8E">Admin 登录</a></li>
<li><a href="/admin-account/">管理员账户</a></li>
<li><a href="/admin-menu/">管理后台菜单</a></li>
<li><a href="/admin-workspace/">管理工具</a><ul>
<li><a href="/admin-dashboard/">控制面板</a></li>
<li><a href="/admin-message-inbox/">后台消息收件箱</a></li>
<li><a href="/admin-global-search/">后台全局搜索</a></li>
<li><a href="/grid-controls/">表格控件</a><ul>
<li><a href="/admin-grid-layout/">表格布局</a></li>
</ul>
</li>
<li><a href="/admin-actions-control/">操作控件</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 ES6 Template Literals</title>
    <url>/alan-magento-2-ec6-template-literals/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento_2_ec6_template_literals/">原文地址</a> 今天我们将了解 ES6 template literals （模板字符串）。Template literals 是 javascript 的新特性，Magento 2 的 UI Component 系统部分核心功能依赖它。Template literals 本身就是一个需要理解的重要概念，但是更重要的是要理解 Magento 在 template literals 之上创建的额外抽象层。还有 Magento 的 <code>uiClass</code> object system 是怎么把它吸收进来的。 开始前，需要感谢 “bassplayer7” ，他在 <a href="https://magento.stackexchange.com/questions/137689/sigil-strings-in-magento-2s-requirejs-files/137716#137716">StackExchange 上的回答</a>，提供了完成该篇文章所需要的重要信息。</p>
<h2 id="ES6-Template-Literals"><a href="#ES6-Template-Literals" class="headerlink" title="ES6 Template Literals"></a><a href="#es6-template-literals"></a>ES6 Template Literals</h2><p>很多人的第一个问题可能是 —— ES6 是什么鬼？ ES 是 ECMAScript 的缩写，ECMA 是 <a href="https://en.wikipedia.org/wiki/Ecma_International">Ecma_International</a> 的缩写，他是一个将各种 javascript&#x2F;jscript&#x2F;actionscript 编程语言标准化的机构。 <a href="http://es6-features.org/#Constants">ECMAScript 6</a> 是该标准的最新版本。浏览器厂商（Apple, Google, Firefox）正在根据 ES6 标准实现功能（类似于 HTML 是怎样推出的）。 其中一个功能正是 template literals 。Template literals 让 javascript 具备了简单的、内置的模板语言。我们将在 Google Chrome Console 中运行一些 template literal 示例代码，但是你是可以在任何支持 ES6 标准的 javascript 环境中运行这些示例代码的。 Template literals 最简单的形式和字符串的区别很小。看下面的<code>Hello World</code> 文本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; results = `Hello World`</span><br><span class="line">&gt; console.log(results);</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure>

<p>注意，我们把 “Hello World” 放在了重音符中（就是这个符号：<strong>`</strong> 中） 放在重音符中的文本表示，这个字符串是一个 template literal 到目前为止，字符串和模板字符串（Template literal）没什么特别大的区别。Template literals are (from a userland perspective) immediately rendered as strings</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; var results = `Hello World`</span><br><span class="line">&gt; var type    = typeof results;</span><br><span class="line">&gt; console.log(type)</span><br><span class="line">string</span><br></pre></td></tr></table></figure>

<p><code>results</code> 变量看起来和 string 没什么区别，反正到目前为止，template literals 看起来没什么用。 当然了，如果他们没有什么用的话，我们也不会写文章说它了。Template literals 支持 <strong>template variables&#x2F;placeholders</strong> ，看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; var salutation = &quot;Goodbye&quot;</span><br><span class="line">&gt; var results = `$&#123;salutation&#125; World`</span><br><span class="line">&gt; console.log(results);</span><br></pre></td></tr></table></figure>

<p><code>$&#123;salutation&#125;</code> 就是一个 template literal variable (or placeholder) 这些变量从 js 当前作用域中获得。所以 js 会把 <code>$&#123;salutation&#125;</code> 替换成 <code>Goodbye</code> 。 js 会这么做是因为我们给全局变量 <code>salutation</code> 赋值为 <code>Goodbye</code> 。 要了解更多 template literals <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">请访问 Mozilla developer network</a> ，会讲更多高级特性，比如 <code>tag</code> 。</p>
<h2 id="Browser-Support-and-Magento-2"><a href="#Browser-Support-and-Magento-2" class="headerlink" title="Browser Support and Magento 2"></a><a href="#browser-support-and-magento-2"></a>Browser Support and Magento 2</h2><p>跟其他 js 新特性一样，客户端开发者在使用前需要特别注意浏览器是否支持该特性。目前不是所有浏览器都支持 Template literals ，在老的浏览器上使用他们会导致错误。 Magento 2 的开发者通过创建 RequireJS 模块来 rendering template literals 去绕过使用限制。这个模块的 id 就是 <code>mage/utils/template</code> ，所以你可以像下面这样使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 注意要在 Magento 页面中打开 debugger</span><br><span class="line">//requires an enviornment bootstrapped with Magento 2</span><br><span class="line">//javascript.  i.e. open you debugger on a Magento page</span><br><span class="line"></span><br><span class="line">&gt; requirejs([&#x27;mage/utils/template&#x27;], function(templateRenderer)&#123;</span><br><span class="line">    window.salutation      = &#x27;Brave New&#x27;;</span><br><span class="line">    var templateLiteral = &#x27;$&#123;salutation&#125; World&#x27;;</span><br><span class="line">    var results         = templateRenderer.template(templateLiteral);</span><br><span class="line">    console.log(results);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Brave New World</span><br></pre></td></tr></table></figure>

<p>幕后，<code>mage/utils/template</code> 模块会检查浏览器对 template literal 的支持。如果支持，模块将使用浏览器原生的实现方式，如果不支持，模块将使用纯用户级的实现方式（速度更慢一点）。<a href="https://en.wikipedia.org/wiki/Polyfill">这被称为 polyfill</a> 这个模块很有用，但是有几点需要说明。首先，你会注意到我们需要把 <code>salutation</code> 变量搁到全局的命名空间上（在浏览器的 js 环境下指的是 “window”）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.salutation      = &#x27;Brave New&#x27;;</span><br><span class="line">var templateLiteral = &#x27;$&#123;salutation&#125; World&#x27;;</span><br></pre></td></tr></table></figure>

<p>原生的 template literals 会从当前作用域取值，但是 Magento 2 的模块（任何用户级代码）则不能自动地访问该作用域，因此，template literals 只能从全局作用域上取值。 看下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; requirejs([&#x27;mage/utils/template&#x27;], function(templateRenderer)&#123;</span><br><span class="line">        var salutation      = &#x27;Brave New&#x27;;</span><br><span class="line">        var templateLiteral = &#x27;$&#123;salutation&#125; World&#x27;;</span><br><span class="line">        var results         = templateRenderer.template(templateLiteral);</span><br><span class="line">        console.log(results);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>这里会报错(除非你定义了一个全局变量 salutation)：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">VM1627:1 Uncaught ReferenceError: salutation is not defined</span><br></pre></td></tr></table></figure>

<p>（这一段我也没看懂，所以放上原文） The second mage&#x2F;utils&#x2F;template caveat, and likely a direct result of the above scope problem, is Magento 2’s template literals have extra abilities that go above and beyond those defined in the standard.</p>
<h2 id="Binding-View-Variables-to-a-Template-Literal"><a href="#Binding-View-Variables-to-a-Template-Literal" class="headerlink" title="Binding View Variables to a Template Literal"></a><a href="#binding-view-variables-to-a-template-literal"></a>Binding View Variables to a Template Literal</h2><p>Magento 2 的 template litearls 允许你绑定特定的对象到特定的 template literal 上，然后通过特别的语法引用变量。就像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; requirejs([&#x27;mage/utils/template&#x27;], function(templateRenderer)&#123;</span><br><span class="line">        var viewVars        = &#123;</span><br><span class="line">            &#x27;salutation&#x27;:&#x27;What a Crazy&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">        var templateLiteral = &#x27;$&#123;salutation&#125; World&#x27;;</span><br><span class="line">        var results         = templateRenderer.template(templateLiteral, viewVars);</span><br><span class="line">        console.log(results);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<p>就是说，<code>template</code> 方法第二个参数接受一个对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">templateRenderer.template(templateLiteral, viewVars);</span><br></pre></td></tr></table></figure>

<p>但是上面的代码还是会报错。这是因为我们前面说过要用特殊的语法的。你需要在 <code>$&#123;&#125;</code> 里面用第二个 <code>$</code> 符号来引用对象。 就是说下面这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var templateLiteral = &#x27;$&#123;salutation&#125; World&#x27;;</span><br></pre></td></tr></table></figure>

<p>需要变成这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var templateLiteral = &#x27;$&#123;$.placeholder&#125; World&#x27;;</span><br></pre></td></tr></table></figure>

<p>这有点笨拙，不过还是很好理解的，只要明白 <code>$.</code> 指代你传递过去的对象。 下面这样就对了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;mage/utils/template&#x27;], function(templateRenderer)&#123;</span><br><span class="line">        var viewVars        = &#123;</span><br><span class="line">            &#x27;salutation&#x27;:&#x27;What a Crazy&#x27;</span><br><span class="line">        &#125;;</span><br><span class="line">        var templateLiteral = &#x27;$&#123;$.salutation&#125; World&#x27;;</span><br><span class="line">        var results         = templateRenderer.template(templateLiteral, viewVars);</span><br><span class="line">        console.log(results);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">What a Crazy World</span><br></pre></td></tr></table></figure>

<h2 id="Connection-to-UI-Components"><a href="#Connection-to-UI-Components" class="headerlink" title="Connection to UI Components"></a><a href="#connection-to-ui-components"></a>Connection to UI Components</h2><p>为什么我们要在讲 Magento 2 的 UI Component 系列文章中讲 template literals 呢？这是因为 template literals 已经被植入了 view model constructor object 系统中。 我们知道，Magento UI Components 使用的 Knockout.js view model constructor objects 是基于 <code>uiElement/Magento_Ui/js/lib/core/element/element</code> 模块的。(<a href="https://www.hellomagento2.com/alan_magento_2_simplest_ui_knockout_component/#configuring-a-view-model-constructor">不明白戳这里</a>) 下面是一个简单的例子，我们先创建一个 view model constructor ，然后用这个 constructor 去创建 view model</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; requirejs([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;&#125;);</span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    console.log(viewModel);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">UiClass &#123;_super: undefined, ignoreTmpls: Object, ...&#125;</span><br></pre></td></tr></table></figure>

<p>这个 view model constructor 有能力带 default 值进行实例化（因为 <code>uiElement</code> 继承自 <code>uiClass/Magento_Ui/js/lib/core/class</code>，这个父类是拥有这个能力的）如果你为 view model constructor 提供 default object ，像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">viewModelConstructor = Element.extend(&#123;</span><br><span class="line">    &#x27;defaults&#x27;:&#123;</span><br><span class="line">        &#x27;ourDefaultValue&#x27;:&#x27;Look at our value!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>那么所有通过这个 constructor 实例化的对象都会拥有 default 值 ourDefaultValue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; requirejs([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        &#x27;defaults&#x27;:&#123;</span><br><span class="line">            &#x27;ourDefaultValue&#x27;:&#x27;Look at our value!&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    console.log(viewModel.ourDefaultValue);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Look at our value!</span><br></pre></td></tr></table></figure>

<p>Magento 对象系统会是检查所有的 default 字符串，发现 template literal 就会自动计算出他们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; requirejs([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    window.salutation = &#x27;Hello&#x27;;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        &#x27;defaults&#x27;:&#123;</span><br><span class="line">            &#x27;message&#x27;:&#x27;$&#123;salutation&#125; World. &#x27;,</span><br><span class="line">            &#x27;salutation&#x27;:&#x27;Goodbye&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    console.log(viewModel.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Hello World.</span><br></pre></td></tr></table></figure>

<p>注意这里使用的是全局的 <code>salutation</code> 值。 看下面的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        &#x27;defaults&#x27;:&#123;</span><br><span class="line">            &#x27;message&#x27;:&#x27;$&#123;$.salutation&#125; World. &#x27;,</span><br><span class="line">            &#x27;salutation&#x27;:&#x27;Goodbye&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    console.log(viewModel.message);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Goodbye World.</span><br></pre></td></tr></table></figure>

<p>给 view model constructor 传递对象</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        &#x27;defaults&#x27;:&#123;</span><br><span class="line">            &#x27;message&#x27;:&#x27;$&#123;$.salutation&#125; World. &#x27;,</span><br><span class="line">            &#x27;salutation&#x27;:&#x27;Goodbye&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    viewModel = new viewModelConstructor(&#123;</span><br><span class="line">        &#x27;salutation&#x27;:&#x27;This is still a crazy&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    console.log(viewModel.message);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">This is still a crazy World.</span><br></pre></td></tr></table></figure>

<h2 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a><a href="#wrap-up"></a>Wrap Up</h2><p>本文揭示了想把 Magento 当作平台使用的开发者遇到的挑战之一。不仅有前沿 javaScript 概念，还有 Magento 通过不那么标准的方式(binding view variables)去扩展了这些概念，还有 Magento 是如何将这些概念吸收到自己的系统中去的（<code>uiClass</code> object system）。 如果没有上面的这些概念，那么你遇到下面这些代码的时候：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return Element.extend(&#123;</span><br><span class="line">    defaults: &#123;</span><br><span class="line">        clientConfig: &#123;</span><br><span class="line">            urls: &#123;</span><br><span class="line">                save: &#x27;$&#123; $.submit_url &#125;&#x27;,</span><br><span class="line">                beforeSave: &#x27;$&#123; $.validate_url &#125;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>就只能摸不着头脑干着急了。 现在我们了解了 Magento 的 ES6-like template literals .我们距离更进一步的探索又近了一步，下面我们将探索 Magento 是如何将后端数据放入 view model constructor 的 <code>default</code> 数组中的，还有 Magento 是如何处理 UI Component 生成的 data sources 的。 <a href="https://stackoverflow.com/questions/34270829/chrome-console-clear-assignment-and-variables">chrome console 中 var 声明的也是全局变量</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 Javascript Init Scripts（翻译）</title>
    <url>/alan-magento-2-javascript-init-scripts/</url>
    <content><![CDATA[<p><em><a href="http://alanstorm.com/magento_2_javascript_init_scripts/">原文地址</a></em> 在 Alan 的 <a href="http://alanstorm.com/category/magento-2/#magento_2_mvc">Magento 2 for PHP MVC</a>系列文章中，曾经提到 RequireJS 是 Magento 2 系统所有 JS 的基础。这的确是事实，但是 RequireJS 仅仅触及 Magento 中 javaScript 可能性的表面。 今天我们将探索 Magento 2 引入的各种系统，以执行非嵌入<code>&lt;script type=&quot;text/javascript&quot;&gt;</code>标签的 js 代码作为开始。</p>
<h2 id="JavaScript-Init-Methods"><a href="#JavaScript-Init-Methods" class="headerlink" title="JavaScript Init Methods"></a><a href="#javascript-init-methods"></a>JavaScript Init Methods</h2><p>Magento js init 方法解决了一些不同的问题： 第一，他提供了一种标准机制，阻止直接在页面中嵌入 js 代码的行为。 第二，提供了调用 RequireJS 模块程序的方式（通过 define 来定义）(原话：Second, they provide a way to invoke a stand alone RequireJS module (defined with define) <strong>as a program</strong>.) 第三，提供了给程序传递服务器端产生的 JSON 对象的方式。 第四，提供了一种方式，告诉程序哪个　DOM　节点（如果有的话）是它的作用对象。 记住这四点。They may help you if you’re struggling with the mental model behind these custom framework features.</p>
<h2 id="Setting-up-a-Module"><a href="#Setting-up-a-Module" class="headerlink" title="Setting up a Module"></a><a href="#setting-up-a-module"></a>Setting up a Module</h2><p>今天的教程和 Magento 的 PHP 不怎么相关，你可以在任何<code>phtml</code>模板上进行实验。 这里 Alan 没有提供示例代码，不过博主建了一个，可以去<a href="https://github.com/PiscesThankIT/JavascriptInitTutorial">https://github.com/PiscesThankIT/JavascriptInitTutorial</a>下载。 下载后启用它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:enable Pulsestorm_JavascriptInitTutorial</span><br><span class="line">$ php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>现在在浏览器中输入如下URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/pulsestorm_javascriptinittutorial/</span><br></pre></td></tr></table></figure>

<p>你应该看到<code>app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</code>模板被渲染出来了。</p>
<h2 id="Setting-up-a-RequireJS-Module"><a href="#Setting-up-a-RequireJS-Module" class="headerlink" title="Setting up a RequireJS Module"></a><a href="#setting-up-a-requirejs-module"></a>Setting up a RequireJS Module</h2><p>我们现在已经有了一个模块，下面我们创建一个 RequireJS 的模块。 创建如下文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/web/example.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    alert(&quot;A simple RequireJS module&quot;);</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这是个很简单的 RequireJS 模块。根据模块的文件位置以及 Magento 载入js 文件的方式，我们可以推得该模块的名称&#x2F;ID是<code>Pulsestorm_JavascriptInitTutorial/example</code> 下面，修改<code>content.phtml</code>文件成下面的样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    requirejs([&#x27;Pulsestorm_JavascriptInitTutorial/example&#x27;],function(example)&#123;</span><br><span class="line">        alert(&quot;Loaded&quot;);</span><br><span class="line">        console.log(example);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们创建了一个依赖<code>Pulsestorm_JavascriptInitTutorial/example</code>模块的程序。 浏览器中刷新<code>http://magento.example.com/pulsestorm_javascriptinittutorial/</code> URL，你应该看到 alert 弹出。 如果你觉得上面的内容不太熟悉，你可以参阅本站<a href="/alan-magento-2-and-requirejs/">Magento 2 and RequireJS (翻译)</a> 译者注：刷新浏览器后首先看到的是 A simple RequireJS module 弹出框，点击确定后，看到 Loaded 弹出框，点击确定后，在 Console 中看到输出的空对象。 页面载入时先执行了<code>Pulsestorm_JavascriptInitTutorial/example</code> 成功后返回值为空对象，传递给了回调函数的<code>example</code>。执行回调函数内部的alert 和 console 输出。</p>
<h2 id="X-Magento-Init"><a href="#X-Magento-Init" class="headerlink" title="X-Magento-Init"></a><a href="#x-magento-init"></a>X-Magento-Init</h2><p>首先我们来了解<code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code>初始化方法。这个方法最简单的用法是让你运行某个 RequireJS 模块。把<code>content.phtml</code>模板改成下面的样子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;</span><br><span class="line">    Hello World</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;two&quot; class=&quot;foo&quot;&gt;</span><br><span class="line">    Goodbye World</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>现在在重新载入页面，你应该看到 A simple RequireJS module 弹出框。这个是我们<code>example.js</code>中的定义的。 如果你从来没看过这种语法，可能觉得他看起来很怪。让我们一点一点来看一看。 首先是<code>&lt;script/&gt;</code>标签</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    //...</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这不是 javaScript 的标签。注意<code>type=&quot;text/x-magento-init&quot;</code>属性。如果浏览器不认识 script 标签中的值，它就会忽略该标签中的内容。Magento (其他现代前端框架类似)利用了这个行为来实现它自己的功能。Magento 中有 js 代码会查找带有<code>text/x-magento-init</code>属性的标签，这超出了本篇教程的范围。如果你想进一步探索的话，可以先看看这个<a href="http://magento.stackexchange.com/questions/89187/in-magento2-what-is-script-type-text-x-magento-init">this Stack Exchange question and answer</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&#123;</span><br><span class="line">    &quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Magento 会查找该对象的键，并且以 RequireJS 模块的方式将他载入进来。这里就是让<code>example.js</code>被载入的关键。 你很可能很想知道为什么这个对象没有值呢。你还可能很想知道为什么这个对象是另一个键为<code>*</code>的对象的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&#123;</span><br><span class="line">    &quot;*&quot;: &#123;/*...*/&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解释这些原因前，我们得先说一说 javascript components。</p>
<h2 id="Magento-JavaScript-Components"><a href="#Magento-JavaScript-Components" class="headerlink" title="Magento JavaScript Components"></a><a href="#magento-javascript-components"></a>Magento JavaScript Components</h2><p>上面的例子运行了一个 RequireJS 模块程序。Magento 经常用<code>x-magento-init</code>方法调用 RequireJS 模块程序。但是，<code>x-magento-init</code>真正强大的能力是创建<strong>Magento Javascript Component</strong> <strong>Magento Javascript Component are RequireJS modules that return a function。</strong> Magento’s system code will call this function in a specific way that exposes extra functionality. 下面我们来看例子。修改<code>example.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/web/example.js</span><br><span class="line">define([], function () &#123;</span><br><span class="line">    var mageJsComponent = function()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;A simple magento component.&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return mageJsComponent;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们定义了一个匿名函数，并将他分配给了<code>mageJsComponent</code>变量。然后我们返回他。 重新载入页面，你会看到 A Simple Magento Component 弹出框。 看起来可能有点蠢——如果 Magento 只是要调用它，返回一个 function 的意义是什么呢？你是对的，但是你对是因为我们少了点什么。修改<code>phtml</code>模板：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;</span><br><span class="line">    Hello World</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;two&quot; class=&quot;foo&quot;&gt;</span><br><span class="line">    Goodbye World</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>修改 RequireJS 模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/web/example.js</span><br><span class="line">define([], function () &#123;</span><br><span class="line">    var mageJsComponent = function(config)</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;Look in your browser&#x27;s console&quot;);</span><br><span class="line">        console.log(config);</span><br><span class="line">        //alert(config);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return mageJsComponent;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>重新载入页面，你可以看到 alert 中的信息变成了Look in your browser’s console。你在浏览器的 console 中会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Object &#123;config:&quot;value&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>When we create a Magento Javascript Component, Magento calls the returned function and includes the object from text&#x2F;x-magento-init</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>键是 RequireJS 模块名，值是我们要传递给该 component 的对象。 这些例子可能看起来又傻又抽象。但是，在实际使用的模块中，我们会使用 PHP 来生成 JSON。系统允许我们在 phtml 模板中 render the JSON，并将他们传递给 js 代码。这有助于避免使用 PHP 直接生成 js 代码，直接生成的做法会产生糟糕的代码，还可能引入错误或者安全问题。 结束<code>x-magento-init</code>之前，还有最后一点要说。记得前文说<code>x-magento-init</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">提供了给程序传递服务器端产生的 JSON 对象的方式。</span><br><span class="line">提供了一种方式，告诉程序哪个　DOM　节点（如果有的话）是它的作用对象。</span><br></pre></td></tr></table></figure>

<p>我们已经说过如何将服务器端生成的 JSON 传递给js 了，还没有说 DOM 节点。 修改<code>example.js</code>模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/web/example.js</span><br><span class="line">define([], function () &#123;</span><br><span class="line">    var mageJsComponent = function(config, node)</span><br><span class="line">    &#123;</span><br><span class="line">        console.log(config);</span><br><span class="line">        console.log(node);</span><br><span class="line">        //alert(config);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    return mageJsComponent;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们给<code>mageJsComponent</code>函数增加了一个参数。第二个参数就是我们程序要作用的 DOM node。但是，刷新页面，你会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Object &#123;config:&quot;value&quot;&#125;</span><br><span class="line">&gt; false</span><br></pre></td></tr></table></figure>

<p>Magento 确实传递了值给<code>node</code>——但值输出是<code>false</code>，这个值是什么呢？ Magento不能神奇地知道你要作用于哪个 DOM node。我们得告诉他。修改<code>phtml</code>模板：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;Hello World&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;two&quot; class=&quot;foo&quot;&gt;</span><br><span class="line">    Goodbye World</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;#one&quot;: &#123;</span><br><span class="line">            &quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们把原先的<code>*</code>改成了<code>#one</code>。之前我们用的<code>*</code>代表了这样一种特殊情形：当程序不需要作用于任何 DOM node 的时候。这个对象的键实际上是 CSS&#x2F;jQuery style selector 。这个键告诉<code>Pulsestorm_JavascriptInitTutorial/example</code>程序哪个 DOM node 是他的作用对象。现在我们刷新页面（记得刷新下缓存），我们会在 console 中看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Object &#123;config: &quot;value&quot;&#125;</span><br><span class="line">&gt; &lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;Hello World&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>你不仅可以使用id选择器，还可以用css class 选择器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/JavascriptInitTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&quot;.foo&quot;: &#123;</span><br><span class="line">    &quot;Pulsestorm_JavascriptInitTutorial/example&quot;:&#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 console 中会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Object &#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br><span class="line">&gt; &lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;Hello World&lt;/div&gt;</span><br><span class="line">&gt; Object &#123;&quot;config&quot;:&quot;value&quot;&#125;</span><br><span class="line">&gt; &lt;div id=&quot;one&quot; class=&quot;foo&quot;&gt;Goodbye World&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>通过这样的系统，Magento 鼓励开发者避免在 RequireJS 模块中硬编码 DOM nodes。The <code>x-magento-init</code> means there’s a system level path forward for building Javascript modules that rely on server side rendered JSON, and operate on any arbitrary DOM node. It’s always been possible for Magento module developers to implement their own systems for this sort of functionality, but Magento 2 provides a standard, built in way to achieve this.</p>
<h2 id="Data-mage-init-Attribute"><a href="#Data-mage-init-Attribute" class="headerlink" title="Data-mage-init Attribute"></a><a href="#data-mage-init-attribute"></a>Data-mage-init Attribute</h2><p>除了<code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code>方式，还有一种方式可以对特定的 DOM　node 调用实现类似功能，就是使用<code>data-mage-init</code>属性。 将 phtml 模板替换成以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-mage-init=&#x27;&#123;&quot;Pulsestorm_JavascriptInitTutorial/example&quot;: &#123;&quot;another&quot;:&quot;example&quot;&amp;#125;&amp;#125;&#x27;&gt;A single div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><code>cache:clean</code>后重新载入页面，在console 中你应该看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; Object &#123;another: &quot;example&quot;&#125;</span><br><span class="line">&gt; &lt;div&gt;A single div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里，我们给特定的div 增加了一个<code>data-mage-init</code>属性。这个属性的值是一个 JSON 对象。类似于<code>x-magento-init</code>，这个对象的键是我们要调用的 RequireJS 模块或是 Magento Javascript Component，他的值是要传递给js component config 参数的 JSON 对象。 <em>注意，我们的属性中使用的是单引号</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-mage-init=&#x27;...&#x27;&gt;A single div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这是必要的，<code>data-mage-init</code>属性会严格按照 JSON 格式解析，就是说 JSON 对象必须使用双引号，所以我们的属性就只能用单引号了。</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a><a href="#wrap-up"></a>Wrap up</h2><p>不管是用<code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code>还是用<code>data-mage-init</code>， both these techniques provide a standard, system unified way of introducing Javascript entry points onto your page.Many of Magento’s front end and back end UI features rely on this syntax, so even if you personally eschew them, understanding how these systems work is an important part of being a Magento 2 developer.</p>
<h2 id="示例代码下载"><a href="#示例代码下载" class="headerlink" title="示例代码下载"></a><a href="#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD"></a>示例代码下载</h2><p><a href="https://github.com/PiscesThankIT/JavascriptInitTutorial">https://github.com/PiscesThankIT/JavascriptInitTutorial</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Object Manager（翻译）</title>
    <url>/alan-magento-2-object-manager/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento_2_object_manager/">原文网址</a></p>
<p>原文发布时间：2015年7月10日</p>
<p>Magento 2 相比较 1 有很多变化，尽管你还能看到 1 的影子（EAV, areas, blocks 等），但是 Magento 2 核心团队经过几年努力，已经将 1 的核心换成了更成熟的，“enterprise-java” 类型的系统，更多的类、更多的对象、更多的设计模式。</p>
<p>尽管有些人可能会认为 Magento 2 代码复杂性增加了，Magento 2 核心团队还是花了很多时间来简化和澄清 Magento 1 中的设计。Magento 1 中 rewrite 系统（home grown class rewrite system —— based around blocks, models, and helpers）已经由以来注入容器&#x2F;对象管理器（Kiev grown dependency injection container&#x2F;object-manager system）代替了。</p>
<p>如果你对 Magento 1 的开发方法，一直是复制粘贴，菜谱式（cookbook style）的，那么 Magento 2 对你来说就是一个新的框架，你以前的方法恐怕不管用了。</p>
<p>但是，如果你对 1 的开发，是带着理解设计模式的实现、培养阅读源码的能力进行的，那么跟上 Magento 2 就只是小小的“颠簸”——而且，许多方面，这个“颠簸”是为了让开发更加稳定、可预测。</p>
<p>本文是 Alan 解释 Magento 2 object manager&#x2F;dependency-injection system 系列中的第一篇。我们将探索程序员在 Magento 2 中是怎样创建对象的，探索 Magento 2 的 object system 带来的额外特性，顺便讨论下相比较 Magento 1 的变化，探索 Magento 2 中的惯例。</p>
<h2 id="Magento-2-命令行框架"><a href="#Magento-2-命令行框架" class="headerlink" title="Magento 2 命令行框架"></a><a href="#magento-2-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A1%86%E6%9E%B6"></a>Magento 2 命令行框架</h2><p>Magento 2 的体系结构转变带来的巨大变化之一就是命令行框架。这不是从 Magento 1 中来的简单框架。相反，Magento 2 自带 <a href="http://symfony.com/doc/current/components/console.html">Symfony’s Console component</a>的完整实现。</p>
<p>安装完 Magento 2 后，打开终端，输入 <code>php bin/magento</code>，我们会看到很多系统自带的命令。</p>
<p>你应该会看到类似下面的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Magento CLI version 0.74.0-beta16</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"> command [options] [arguments]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> --help (-h)           Display this help message</span><br><span class="line"> --quiet (-q)          Do not output any message</span><br><span class="line"> --verbose (-vvvvvv) Increase the verbosity of messages: 1 for normal</span><br><span class="line">                       output, 2 for more verbose output and 3 for debug</span><br><span class="line"> --version (-V)        Display this application version</span><br><span class="line"> --ansi                Force ANSI output</span><br><span class="line"> --no-ansi             Disable ANSI output</span><br><span class="line"> --no-interaction (-n) Do not ask any interactive question</span><br><span class="line"></span><br><span class="line">Available commands:</span><br><span class="line"> help                                      Displays help for a command</span><br><span class="line"> list                                      Lists commands</span><br><span class="line"> //... full command list snipped ...</span><br></pre></td></tr></table></figure>

<p>除了自带许多有用的命令，第三方开发者也可以创建 Magento 模块来加入新的命令。</p>
<p>我们将使用命令行来运行本教程中的示例代码。命令行是一个对运行示例代码来说，很干净的好地方，我们不需要考虑你的代码到浏览器页面加载过程中经过的各种层，我们可以直接观察输出结果。</p>
<h2 id="安装示例代码"><a href="#安装示例代码" class="headerlink" title="安装示例代码"></a><a href="#%E5%AE%89%E8%A3%85%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81"></a>安装示例代码</h2><p>Alan 准备了示例代码<a href="https://github.com/astorm/magento2-tutorial-objectmanager1">magento2-tutorial-objectmanager1</a>，下载下来后解压出来，然后放到 app&#x2F;code 目录中，他的目录结构应该是 <code>app/code/Pulsestorm/TutorialObjectManager1/</code></p>
<p>然后运行下面的命令，应该会看到类似的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:status</span><br><span class="line">List of enabled modules:</span><br><span class="line">Magento_Store</span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line">List of disabled modules:</span><br><span class="line">Pulsestorm_TutorialObjectManager1</span><br></pre></td></tr></table></figure>

<p>我们的模块现在还是 disabled 状态。下面我们打开 <code>app/etc/config.php</code>，然后我们会看到类似的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/etc/config.php</span><br><span class="line">&lt;?php</span><br><span class="line">return array (</span><br><span class="line">  &#x27;modules&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;Magento_Store&#x27; =&gt; 1,</span><br><span class="line">    //... full module list snipped ...</span><br><span class="line">    &#x27;Magento_Wishlist&#x27; =&gt; 1,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><code>app/etc/config.php</code> 返回模块的数组，我们现在看见的都是系统自带的模块，下面我们把我们的模块加到列表最后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/etc/config.php</span><br><span class="line">&lt;?php</span><br><span class="line">return array (</span><br><span class="line">  &#x27;modules&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;Magento_Store&#x27; =&gt; 1,</span><br><span class="line">    //... full module list snipped ...</span><br><span class="line">    &#x27;Magento_Wishlist&#x27; =&gt; 1,</span><br><span class="line">    &#x27;Pulsestorm_TutorialObjectManager1&#x27; =&gt; 1,</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这时候我们运行 <code>module:status</code> ，我们的模块就会在 enabled 列表中了</p>
<p>和 Magento 1 一样，模块的全名由 “namespace” 文件名和 “module name” 文件名构成。但是需要注意以下几点：</p>
<ol>
<li>Magento 的 module namespace 是 <code>Magento</code> 不再是 <code>Mage</code></li>
<li><code>core</code>,<code>community</code>, <code>local</code> code pools 不再有，所有模块都在 <code>app/code</code> 下</li>
<li>原来 <code>app/etc/modules</code> 下的一堆 (module declaration files) xml 由更简单的，php 设置代替。</li>
</ol>
<p>在我（Alan）看来，Mage 到 Magento 的变化，是中立的，但是移除 code pools 和模块申明文件是有利的变化。</p>
<p>虽然<code>core</code>,<code>community</code>, <code>local</code> code pools 设计让系统所有者可以通过 code pool overrides 快速实现修改，但是这也导致商家更加不愿意升级系统，还有如果开发者修改了某个类过多的隐含 contract ，那么很可能导致微妙的系统问题。</p>
<p>Magento 1 中的模块声明文件的本意可能是设置哪些模块是 enabled 哪些不是，Magento 2 则通过简单的 on&#x2F;off 配置数组来实现。</p>
<h2 id="运行命令行和清除缓存"><a href="#运行命令行和清除缓存" class="headerlink" title="运行命令行和清除缓存"></a><a href="#%E8%BF%90%E8%A1%8C%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%92%8C%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98"></a>运行命令行和清除缓存</h2><p>ok 我们模块已经安装好了。下面我们得确保新命令 <code>ps:tutorial-object-manager-1</code> 添加到系统中了。在这之前，我们还有一件事情要做，那就是清理缓存。</p>
<p>从概念上来说，Magento 2 清理缓存和 Magento 1 中是一样的。第一次长长的运行后，Magento 会缓存结果，用于下次更快的载入。比如说，虽然我们已经把我们的新模块加入 configuration 中了，但是 Magento 的 configuration 被缓存了，所以系统实际上还不知道我们的模块哩。</p>
<p>我们可以通过 <code>php bin/magento cache:clean</code> 清理缓存。但是，尽管所有有类型的缓存都会被清除，但是还有一些缓存是没有类型的，所以清除命令结果并不是 100% 干净。Magento 1 包含很多没有类型的缓存（比如 Zend’s module column names），Magento 1 的缓存清理命令也不能删除这些没有类型的缓存。Magento 2 还很年轻，我们还没发现这些边缘情况，不过如果你不确定有没有清除干净的话，那么就可以使出终极手段 —— 手动移除 <code>var/cache</code> 目录下的所有文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -rf /path/to/magento/var/cache/*</span><br></pre></td></tr></table></figure>

<p>此外，Magento 2 某些情况下会自动生成类，虽然严格意义上不是缓存，但是清理这些生成的类有时候对你来说也很重要。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ rm -rf /path/to/magento/var/generation/*</span><br></pre></td></tr></table></figure>

<p>在 production 系统中，这么做要慎重，慎重，慎重。</p>
<p>清完缓存后，让我们来看看我们的命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento list</span><br><span class="line"></span><br><span class="line">//...</span><br><span class="line"></span><br><span class="line"> ps:tutorial-object-manager-1              A cli playground for testing</span><br><span class="line">                                           commands</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>下面运行这个命令看看：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">You did it!</span><br></pre></td></tr></table></figure>

<p>恭喜你！你成功的手动安装了一个 Magento 模块。</p>
<p>当然也可以通过命令行的方式来启用模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:enable Pulsestorm_TutorialObjectManager1</span><br><span class="line">The following modules have been enabled:</span><br><span class="line">- Pulsestorm_TutorialObjectManager1</span><br><span class="line"></span><br><span class="line">To make sure that the enabled modules are properly registered, run</span><br><span class="line">&#x27;setup:upgrade&#x27;.</span><br><span class="line"></span><br><span class="line">Cache cleared successfully.</span><br><span class="line">Generated classes cleared successfully.</span><br><span class="line"></span><br><span class="line">Alert: Generated static view files were not cleared. You can clear them</span><br><span class="line">using the --clear-static-content option. Failure to clear static view files</span><br><span class="line">might cause display issues in the Admin and storefront.</span><br></pre></td></tr></table></figure>

<p>上面作为理解，下面进入动手阶段。</p>
<h2 id="修改我们的命令"><a href="#修改我们的命令" class="headerlink" title="修改我们的命令"></a><a href="#%E4%BF%AE%E6%94%B9%E6%88%91%E4%BB%AC%E7%9A%84%E5%91%BD%E4%BB%A4"></a>修改我们的命令</h2><p>Magento 2 中每个 cli 命令都是由 php 类实现的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php</span><br><span class="line">protected function execute(InputInterface $input, OutputInterface $output)</span><br><span class="line">&#123;</span><br><span class="line">    $output-&gt;writeln(&quot;You did it!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而安后我们把它改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php    </span><br><span class="line">protected function execute(InputInterface $input, OutputInterface $output)</span><br><span class="line">&#123;</span><br><span class="line">    $output-&gt;writeln(&quot;Hello World!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再运行我们的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>

<p>我们上面做的事情就是传递一个字符串给 <code>writeln</code> 方法（等同于 echo 或者 print）。</p>
<h2 id="Magento-2-Objects"><a href="#Magento-2-Objects" class="headerlink" title="Magento 2 Objects"></a><a href="#magento-2-objects"></a>Magento 2 Objects</h2><p>当我们想实例化一个对象的时候，我们使用 <code>new</code> 关键字，让我们再 <code>execute</code> 方法中实验一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php</span><br><span class="line">protected function execute(InputInterface $input, OutputInterface $output)</span><br><span class="line">&#123;</span><br><span class="line">    $object = new \Pulsestorm\TutorialObjectManager1\Model\Example;</span><br><span class="line">    $message = $object-&gt;getHelloMessage();</span><br><span class="line">    $output-&gt;writeln(</span><br><span class="line">        $message</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再运行下我们的命令，结果是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">Hello Magento!</span><br></pre></td></tr></table></figure>

<p>我们做的事情是</p>
<ol>
<li>实例化 <code>Pulsestorm\TutorialObjectManager1\Model\Example</code></li>
<li>调用实例化后对象的方法 <code>getHelloWorld</code> 取得字符串</li>
<li><code>writeln</code> 输出字符串</li>
</ol>
<p>到这里都是简单的 php 用法。如果你不熟悉 php 的命名空间，那么这篇文章可能对你有用，<a href="https://alanstorm.com/php_namespace_primer/">PHP Primer: Namespaces</a></p>
<p>Magento 2 中没有任何机制不允许你使用 new 来实例化对象。但是如果你使用 Magengo 2 的高级特性(automatic constructor dependency injection, object proxying, etc)，那么你就需要使用 Magento 的 object manager。</p>
<p>试试下面的用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php</span><br><span class="line">protected function execute(InputInterface $input, OutputInterface $output)</span><br><span class="line">&#123;</span><br><span class="line">    $manager = $this-&gt;getObjectManager();</span><br><span class="line">    $object  = $manager-&gt;create(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br><span class="line">    $message = $object-&gt;getHelloMessage();</span><br><span class="line">    $output-&gt;writeln(</span><br><span class="line">        $message</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行命令，我们应该可以看到下面的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">Hello Magento!</span><br></pre></td></tr></table></figure>

<p>和之前的区别就在下面两行代码上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php      </span><br><span class="line">$manager = $this-&gt;getObjectManager();</span><br><span class="line">$object  = $manager-&gt;create(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br></pre></td></tr></table></figure>

<p>第一行的 <code>$manager = $this-&gt;getObjectManager();</code> 为我们取得 object manager 。这可不是开发插件时常用的做法 —— <code>getObjectManager</code> 是本次教程自己建的 helper 方法。现在我们只要知道 <code>getObjectManager</code> 会返回 Magento object manager 的实例。</p>
<p>object manager 是一个很特别的对象，Magento 中几乎所有的对象都是由它实例化的。代码中第二行做的就是实例化类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/TutorialObjectManager1/Command/Testbed.php</span><br><span class="line">$object  = $manager-&gt;create(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br></pre></td></tr></table></figure>

<p>我们调用 object manager 的 <code>create</code> 方法，以字符串的形式传递一个 php 类给它。object manager 就实例化了一个 <code>Pulsestorm\TutorialObjectManager1\Model\Example</code> 对象给我们。</p>
<p>这就是 Magento 2 的 object manager 最简单的形式。看起来这样做无足轻重，但是如果所有对象的实例化都是通过它，那么 Magento 的系统工程师们就可以给这些对象 “超能力”。</p>
<p>在介绍它的超能力之前，本文不能涵盖所有内容，所以有兴趣的可以查看源代码，Magento 的 object manager 源码位于下列类文件中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: lib/internal/Magento/Framework/ObjectManager/ObjectManager.php</span><br><span class="line">namespace Magento\Framework\ObjectManager;</span><br><span class="line"></span><br><span class="line">class ObjectManager implements \Magento\Framework\ObjectManagerInterface</span><br><span class="line">&#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你是 Magento 1 的开发者，那么 2 中的 object manager 就是 1 中以下方法的替代：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mage::getModel(...);</span><br><span class="line">Mage::helper(...);</span><br><span class="line">Mage::getSingleton(&#x27;core/layout&#x27;)-&gt;createBlock(...);</span><br></pre></td></tr></table></figure>

<p>Magento 2 中仍然存在 model,helper,block 这些概念，但是你再也不需要知道这个类的别名了（core&#x2F;template, model&#x2F;product, etc.）。object manager 可以实例化任何 php 类，不仅仅是 model, helper, block 对象。</p>
<h2 id="自动的单例对象"><a href="#自动的单例对象" class="headerlink" title="自动的单例对象"></a><a href="#%E8%87%AA%E5%8A%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E5%AF%B9%E8%B1%A1"></a>自动的单例对象</h2><p>今天我们将探讨 Magento 2 的 object manager 带给对象的超能力之一 —— 自动的单例对象。但是再讨论这个之前，我们得先明确单例的含义。</p>
<p>试试下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$manager = $this-&gt;getObjectManager();</span><br><span class="line">$object  = $manager-&gt;create(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br><span class="line">$object-&gt;message = &#x27;Hello PHP!&#x27;;</span><br><span class="line">$output-&gt;writeln(</span><br><span class="line">    $object-&gt;getHelloMessage()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$object  = $manager-&gt;create(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br><span class="line">$output-&gt;writeln(</span><br><span class="line">    $object-&gt;getHelloMessage()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>运行命令，我们会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">Hello PHP!</span><br><span class="line">Hello Magento!a</span><br></pre></td></tr></table></figure>

<p>代码与前面的类似，只是添加了一些东西。首先我们使用 object manager 从类 <code>Pulsestorm\TutorialObjectManager1\Model\Example</code> 实例化一个对象。然后我们给这个对象的 message 设置一个自定义的字符串，最后把它打印出来。第一段输出的是我们自定义的 message ，而第二段是默认的 message。</p>
<p>下面我们不用 object manager 的 <code>create</code> 方法，而是用 <code>get</code> 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$manager = $this-&gt;getObjectManager();</span><br><span class="line">$object  = $manager-&gt;get(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br><span class="line">$object-&gt;message = &#x27;Hello PHP!&#x27;;</span><br><span class="line">$output-&gt;writeln(</span><br><span class="line">    $object-&gt;getHelloMessage()</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$object  = $manager-&gt;get(&#x27;Pulsestorm\TutorialObjectManager1\Model\Example&#x27;);</span><br><span class="line">$output-&gt;writeln(</span><br><span class="line">    $object-&gt;getHelloMessage()</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>这次的结果就不同了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento ps:tutorial-object-manager-1</span><br><span class="line">Hello PHP!</span><br><span class="line">Hello PHP!</span><br></pre></td></tr></table></figure>

<p>第二次没有打印默认的 message ，而是打印了我们在第一个对象上设置的自定义 message。这是怎么回事呢？因为第二个对象就是第一个对象。</p>
<p>这就是 Magento object manager 的自动单例特性。（单例就是指一个单例对象的类只有一个实例存在）。如果系统中该单例对象的类已经存在，再实例话这个单例对象的类，还是会返回已经存在的那一个。这通常是通过向类的构造函数添加特殊代码来实现的，但是通过 Magento 2 的 object manager ，任何类都可以变成单例。</p>
<p>就我们上面的例子来说，第二次我们调用 <code>get</code> 的时候，Magento 返回给我们的对象还是那个我们设置了自定义 message 的对象。</p>
<p>如果你了解 Magento1 ，那么 <code>create/get</code> 的区别类似于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mage::getModel(...);</span><br><span class="line">Mage::getSingleton(...);</span><br></pre></td></tr></table></figure>

<p>这两个的区别。但是，Magento 2 中这个特性是对所有 class 都有用的，不仅仅是 model 对象。</p>
<p>自动的单例（Automatic singletons）只是 Magento 2 object manager 带给对象的超能力之一。下次我们将探讨 automatic constructor parameter dependency injection （这可是个大招），还有为啥 Magento 官方文档告诫我们不要使用 object manager (听上去有点自相矛盾)</p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 object manager</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2’s Base Javascript Class</title>
    <url>/alan-magento-2s-base-javascript-class/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento-2s-base-javascript-class/">原文地址</a></p>
<p>Magento 2 的核心 javascript library 实现了一个基于类的基础 object system（Magento 2’s core javascript library ships with a basic implementation of a class based object system），uiComponent 广泛地使用了这些基本类和对象。这个基本类就是 <code>Magento_Ui/js/lib/core/class</code> ，你可以通过 javascript 的 <code>new</code> 关键字来创建这个基础类的实例。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; requirejs([</span><br><span class="line">    &#x27;Magento_Ui/js/lib/core/class&#x27;,</span><br><span class="line">], function (Class) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    var o = new Class;</span><br><span class="line">    console.log(o);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">UiClass &#123;ignoreTmpls: &#123;…&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>你可以使用基础类的 <code>extend</code> 方法去创建子类。通过 <code>extend</code> 方法传递 key&#x2F;function 对去定义方法。Magento 的对象有一个类似 constructor 的方法叫做 <code>initialize</code>，它在实例化对象的时候被调用。你可以通过 <code>this._super()</code> 来调用父类的方法。只能在方法体中调用 <code>_super</code> —— 该方法并不是”公有的” (not exposed publicly)</p>
<p>在下面的例子中，我们定义两个类 A 和 B 。 A 继承基础类，B 继承 A，定义好类以后，我们实例化一个 B 类，然后调用该对象的 hello 方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([</span><br><span class="line">    &#x27;Magento_Ui/js/lib/core/class&#x27;,</span><br><span class="line">], function (Class) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    var A = Class.extend(&#123;</span><br><span class="line">        initialize: function () &#123;</span><br><span class="line">            this._super();</span><br><span class="line">            console.log(&quot;Called A&#x27;s initialize/constructor&quot;);</span><br><span class="line">            this.foo = &quot;foo&quot;;</span><br><span class="line">            this.bar = &quot;bar&quot;;</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        hello: function()&#123;</span><br><span class="line">            console.log(&quot;Hello&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var B = A.extend(&#123;</span><br><span class="line">        initialize: function () &#123;</span><br><span class="line">            this._super();</span><br><span class="line">            console.log(&quot;Called B&#x27;s initialize/constructor&quot;);</span><br><span class="line">            this.bar = &quot;BIG BAR&quot;;</span><br><span class="line">            this.baz = &quot;baz&quot;;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        hello: function()&#123;</span><br><span class="line">            this._super();</span><br><span class="line">            console.log(&quot;Hello Again&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    var object = new B;</span><br><span class="line">    object.hello();</span><br><span class="line">    console.log(object);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Called A&#x27;s initialize/constructor</span><br><span class="line">Called B&#x27;s initialize/constructor</span><br><span class="line">Hello</span><br><span class="line">Hello Again</span><br><span class="line">UiClass &#123;_super: undefined, ignoreTmpls: &#123;…&#125;, foo: &quot;foo&quot;, bar: &quot;BIG BAR&quot;, baz: &quot;baz&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><code>Magento_Ui/js/lib/core/class</code> 的别名是 <code>uiClass</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/magento/module-ui/view/base/requirejs-config.js</span><br><span class="line">15:            uiClass:        &#x27;Magento_Ui/js/lib/core/class&#x27;,</span><br></pre></td></tr></table></figure>

<p>所以下面这样也是等价的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([</span><br><span class="line">    &#x27;uiClass&#x27;,</span><br><span class="line">], function (Class) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    o = new Class;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>lib/core/element/element</code>(别名 <code>uiElement</code>) 继承自 <code>Magento_Ui/js/lib/core/class</code>，而 <code>lib/core/collection</code> (别名 <code>uiComponent</code>) 继承自 <code>uiElement</code></p>
<p>讲解基础类的是怎么实现的超出了本文的范围。不过 <code>extend</code> 方法是通过 Underscore JS 实现的，<code>_super</code> 则来自于 <code>mage/utils/wrapper</code> (也就是 <code>lib/web/mage/utils/wrapper.js</code>)</p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
      </tags>
  </entry>
  <entry>
    <title>The Curious Case of Magento 2 Mixins （翻译）</title>
    <url>/alan-the-curious-case-of-magento-2-mixins/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/the-curious-case-of-magento-2-mixins/">原文地址</a> 这篇要说的是 Magento 2 的 Mixins 。说它奇怪是因为 Mixins 这个命名不正确，有歧义，他其实是 RequireJS monkey patching 。（Monkey Patching 指的是在运行时动态修改模块、类或函数，通常是添加功能或修正缺陷。猴子补丁在代码运行时发挥作用，不会修改源码。） 本文的目标是教会大家用 Magento 2 js 方法安全地 overwrite js method。这已经超过了平常 RequireJS 工具的范畴。 我们将快速过一下几个概念，然后说一说 Magento js 系统相关的一些特性，最后讨论这个名称奇怪的 mixins 系统。</p>
<h2 id="什么是-Mixin-？"><a href="#什么是-Mixin-？" class="headerlink" title="什么是 Mixin ？"></a><a href="#%E4%BB%80%E4%B9%88%E6%98%AF-mixin-%EF%BC%9F"></a>什么是 Mixin ？</h2><p>Mixin 从某种角度看，是传统的类集成的替代方法。 传统的面向对象编程中，你可能像下面这样定义三个类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function foo()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A</span><br><span class="line">&#123;</span><br><span class="line">    public function bar()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C extends B</span><br><span class="line">&#123;</span><br><span class="line">    public function baz()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$object = new C;</span><br></pre></td></tr></table></figure>

<p>这样 <code>$object</code> 对象拥有 <code>baz</code> <code>bar</code> 和 <code>foo</code> 方法。 Mixins 提供了另一种方式。通过 Mixins ，你可以组合类的方法到你的类中。伪代码看起来是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    public function foo()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B</span><br><span class="line">&#123;</span><br><span class="line">    public function bar()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C</span><br><span class="line">&#123;</span><br><span class="line">    mixin A;</span><br><span class="line">    mixin B;</span><br><span class="line"></span><br><span class="line">    public function baz()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$object = new C;</span><br></pre></td></tr></table></figure>

<p>注意这里没有继承，class C 从 class A 和 class B 中获得方法。 <a href="http://php.net/manual/en/language.oop5.traits.php">PHP 的 Traits</a>就是一种简单的 mixin 系统。在 PHP 中，你必须显示地声明 traits ，然后在你地类中组合这些 traits 。Traits 自身不能被实例化，php 类也不能被当成 traits 用。 <a href="http://ruby-doc.com/docs/ProgrammingRuby/html/tut_modules.html">Ruby</a>通过 “include” 来组合别的模块的方法。 有些语言比如 Python 则通过多重继承来实现 Mixin</p>
<h2 id="Javascript-and-Mixins-Sitting-in-a-Tree"><a href="#Javascript-and-Mixins-Sitting-in-a-Tree" class="headerlink" title="Javascript and Mixins, Sitting in a Tree"></a><a href="#javascript-and-mixins,-sitting-in-a-tree"></a>Javascript and Mixins, Sitting in a Tree</h2><p>和 classes 不同，不同语言关于 mixin 的语法应该怎么写并没有形成共识。有些语言有明确的 mixins 而另一些语言只有事实上的 mixins Javascript 就是后者。js 不是基于类的语言，他是一种基于原型的语言。（所以可以说 js 没有类） 通过 underscore.js 的 <code>extend</code> 方法，你可以获得 mixin-like 的行为。像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = &#123;</span><br><span class="line">    foo:function()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">var b = &#123;</span><br><span class="line">    bar:function()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = _.extend(a, b);</span><br></pre></td></tr></table></figure>

<p>这样 c 对象拥有 foo 和 bar 方法。 比较有迷惑性的是，underscore.js 也有一个方法叫 <a href="https://underscorejs.org/#mixin">mixin</a> 不过这个方法是用来往 underscore js 对象自身加方法的。</p>
<h2 id="Magento-uiClass-Objects"><a href="#Magento-uiClass-Objects" class="headerlink" title="Magento uiClass Objects"></a><a href="#magento-uiclass-objects"></a>Magento uiClass Objects</h2><p>如果你已经阅读了 Alan Storm 的 <a href="https://alanstorm.com/category/magento-2/#magento-2-ui">UI Component 系列</a>，那么你已经熟悉 <a href="https://alanstorm.com/magento_2_uiclass_data_features/">Magento’s uiClass objects</a> 了。 这些对象也有一个 <code>extend</code> 方法。这个方法看起来和 underscore.js 的 <code>extend</code> 方法一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var b = &#123;</span><br><span class="line">    bar:function()&#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">UiClass = requirejs(&#x27;uiClass&#x27;);</span><br><span class="line"></span><br><span class="line">// class NewClass extends uiClass</span><br><span class="line">var NewClass = UiClass.extend(b);</span><br><span class="line"></span><br><span class="line">// class AnotherNewClass extends NewClass</span><br><span class="line">var AnotherNewClass = NewClass.extend(&#123;&#125;);</span><br><span class="line"></span><br><span class="line">var object = new NewClass;</span><br><span class="line">object.bar();</span><br></pre></td></tr></table></figure>

<p>不过，<code>uiClass extend</code> 方法的用途有点不一样。<code>uiClass extend</code> 的目的是在原来的 js constructoer function 的基础上创建一个新的 js constructor function。所以上面的 <code>NewClass</code> 没有 <code>bar</code> 方法，但是他实例化出来的对象有。 这看起来更像是直接继承，但是考虑到 <code>uiClass</code> 的实现细节，可能有些人就觉得叫 mixin 挺合适的。 下面我们要切换一个话题。</p>
<h2 id="Magento-2-RequireJS-Mixins"><a href="#Magento-2-RequireJS-Mixins" class="headerlink" title="Magento 2 RequireJS Mixins"></a><a href="#magento-2-requirejs-mixins"></a>Magento 2 RequireJS Mixins</h2><p>Magento 2 的 <code>requirejs-config.js</code> 文件有一个 <code>mixin</code> 用法。<code>mixin</code> 这个名字跟我们编程语言中的 mixin 的内涵没啥关系，暂时把他理解成一个名字就好。 虽然我们一直在吐槽这个名字取得不好，但是这功能本身还是很好很重要的哦。Magento 2 RequireJS mixins 让你监听任意 RequireJS module 的实例化，并且让你在实例化返回对象前可以修改他。 下面实验一下，首先我们弄一个空的模块来做实验。 可以通过 alan 的工具 <a href="https://github.com/astorm/pestle">pestle commands</a> 来创建一个空模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pestle.phar generate_module Pulsestorm RequireJsRewrite 0.0.1</span><br><span class="line">$ php bin/magento module:enable Pulsestorm_RequireJsRewrite</span><br><span class="line">$ php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>如果你想手动创建模块的话，看这里 <a href="https://www.hellomagento2.com/alan-magento-2-mvvm-mvc/">Magento 2 简介 —— 不再是 MVC</a> 下面创建一个 <code>requirejs-config.js</code> 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/RequireJsRewrite/view/base/requirejs-config.js</span><br><span class="line">var config = &#123;</span><br><span class="line">    &#x27;config&#x27;:&#123;</span><br><span class="line">        &#x27;mixins&#x27;: &#123;</span><br><span class="line">            &#x27;Magento_Customer/js/view/customer&#x27;: &#123;</span><br><span class="line">                &#x27;Pulsestorm_RequireJsRewrite/hook&#x27;:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后创建下面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/RequireJsRewrite/view/base/web/hook.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    console.log(&quot;Called this Hook.&quot;);</span><br><span class="line">    return function(targetModule)&#123;</span><br><span class="line">        targetModule.crazyPropertyAddedHere = &#x27;yes&#x27;;</span><br><span class="line">        return targetModule;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面打开 Magento 首页，你会在浏览器 console 中看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Called this Hook</span><br></pre></td></tr></table></figure>

<p>在浏览器的 console 中我们来看看这个模块 <code>Magento_Customer/js/view/customer</code>，我们会发现这个家伙已经有了一个新的属性 <code>crazyPropertyAddedHere</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; module = requirejs(&#x27;Magento_Customer/js/view/customer&#x27;);</span><br><span class="line">&gt; console.log(module.crazyPropertyAddedHere)</span><br><span class="line">&quot;yes&quot;</span><br></pre></td></tr></table></figure>

<p>也就是说上面的代码，我们修改了 <code>Magento_Customer/js/view/customer</code> 返回的对象。 如果合理使用的话，这个功能可是非常强大呢。</p>
<h2 id="What-Just-Happened"><a href="#What-Just-Happened" class="headerlink" title="What Just Happened?"></a><a href="#what-just-happened?"></a>What Just Happened?</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/RequireJsRewrite/view/base/requirejs-config.js</span><br><span class="line">var config = &#123;</span><br><span class="line">    &#x27;config&#x27;:&#123;</span><br><span class="line">        &#x27;mixins&#x27;: &#123;</span><br><span class="line">            &#x27;Magento_Customer/js/view/customer&#x27;: &#123;</span><br><span class="line">                &#x27;Pulsestorm_RequireJsRewrite/hook.js&#x27;:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>requirejs-config.js</code> 文件让每个 Magento module 都可以给 RequireJS 加配置。可以查看这里 <a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/">Magento 2 and RequireJS</a> <code>mixins</code> 这个配置不是 RequireJS 里面的，<a href="https://magento.stackexchange.com/questions/142826/how-are-the-things-magento-2-calls-mixins-implemented">这是 Magento 引入的</a>。这一段就是告诉 Magento ，请你监听 <code>Magento_Customer/js/view/customer</code> 模块，然后让 <code>Pulsestorm_RequireJsRewrite/hook</code> 干活。 然后我们就定义了 <code>Pulsestorm_RequireJsRewrite/hook</code> 模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/RequireJsRewrite/view/base/web/hook.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    console.log(&quot;Called this Hook.&quot;);</span><br><span class="line">    return function(targetModule)&#123;</span><br><span class="line">        targetModule.crazyPropertyAddedHere = &#x27;yes&#x27;;</span><br><span class="line">        return targetModule;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果你不清楚 RequireJS 模块名字和 URL 之间的关系，请阅读 <a href="https://alanstorm.com/category/magento-2/#magento-2-mvc">Magento 2 for PHP MVC Developers 系列</a> “listener&#x2F;hook” 的模块都是标准的 RequireJS 模块。他们需要返回一个 callable object (比如 js 的 function)。上面返回的 function 就是模块 loading 后要执行的。他有一个参数 （targetModule），这个参数代表 <code>Magento_Customer/js/view/customer</code> 返回的东东。 不管咱们的 <code>Pulsestorm_RequireJsRewrite/hook</code> 返回什么，它都被当作跟原来一样的东东。这就是为啥 <code>Magento_Customer/js/view/customer</code> 拥有了 <code>crazyPropertyAddedHere</code> 属性。</p>
<h2 id="Class-Rewrites-for-Javascript"><a href="#Class-Rewrites-for-Javascript" class="headerlink" title="Class Rewrites for Javascript"></a><a href="#class-rewrites-for-javascript"></a>Class Rewrites for Javascript</h2><p>上面我们增加了新的属性，我们还可以替换掉原来模块的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([], function()&#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    console.log(&quot;Called this Hook.&quot;);</span><br><span class="line">    return function(targetModule)&#123;</span><br><span class="line">        targetModule.someMethod = function()&#123;</span><br><span class="line">            //replacement for `someMethod</span><br><span class="line">        &#125;</span><br><span class="line">        return targetModule;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果我们监听的模块返回的是基于 <code>uiClass</code> 的对象呢？你可以用 <code>uiClass</code> 的 <code>extend</code> 方法，但是用 <code>uiClass</code> 的 <code>_super()</code> 调用其父类的方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([], function()&#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    console.log(&quot;Called this Hook.&quot;);</span><br><span class="line">    return function(targetModule)&#123;</span><br><span class="line">        //if targetModule is a uiClass based object</span><br><span class="line">        return targetModule.extend(&#123;</span><br><span class="line">            someMethod:function()</span><br><span class="line">            &#123;</span><br><span class="line">                var result = this._super(); //call parent method</span><br><span class="line"></span><br><span class="line">                //do your new stuff</span><br><span class="line"></span><br><span class="line">                return result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个功能很强大，但是跟 Magento 1 的 class rewrite 和 Magento 2 的 <code>&lt;preference&gt;</code> 一样，这个是“赢家通吃”的。比如多个开发修改同一个 function ，那么最终只有一个人的代码生效。 好在 Magento 应对这种情况还是有解决办法的，那就是使用 <code>mage/utils/wrapper</code></p>
<h2 id="Wrapping-Function-Calls"><a href="#Wrapping-Function-Calls" class="headerlink" title="Wrapping Function Calls"></a><a href="#wrapping-function-calls"></a>Wrapping Function Calls</h2><p><code>mage/utils/wrapper</code> 类似 <a href="https://alanstorm.com/magento_2_object_manager_plugin_system/">Magento 2 backend around plugin</a> 下面举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var example = &#123;&#125;;</span><br><span class="line">example.foo = function ()&#123;</span><br><span class="line">    console.log(&quot;Called foo&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var wrapper = requirejs(&#x27;mage/utils/wrapper&#x27;);</span><br><span class="line"></span><br><span class="line">var wrappedFunction = wrapper.wrap(example.foo, function(originalFunction)&#123;         console.log(&quot;Before&quot;);</span><br><span class="line">    originalFunction();</span><br><span class="line">    console.log(&quot;After&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//call wrapped function</span><br><span class="line">wrappedFunction();</span><br><span class="line"></span><br><span class="line">//change method definition to use wrapped function</span><br><span class="line">example.foo = wrappedFunction;</span><br></pre></td></tr></table></figure>

<p>如果你找个 magento 的站点实验下，那么我们可以看到下面这样的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before</span><br><span class="line">Called foo</span><br><span class="line">After</span><br></pre></td></tr></table></figure>

<p><code>wrap</code> 方法接受两个参数。第一个是原来的 function （拿饺子打比方，就是饺子馅），第二个参数是你要增加的东西（饺子皮）。<code>originalFunction</code> 指代 example.foo 。 wrapper 模块的作用是不用改原有的代码，就把一个已有的 function 和新的代码包在一起。 wrapper 带来的好处还有，如果好几个人 wrap 同一段代码，那么他们都是有效的，而不会出现像上面那样 “赢家通吃” 的局面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var wrappedFunction2 = wrapper.wrap(wrappedFunction, function(originalFunction)&#123;</span><br><span class="line">    console.log(&quot;Before 2&quot;);</span><br><span class="line">    originalFunction();</span><br><span class="line">    console.log(&quot;After 2&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">wrappedFunction2();</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Before 2</span><br><span class="line">VM502:9 Before</span><br><span class="line">VM502:3 Called foo</span><br><span class="line">VM502:11 After</span><br><span class="line">VM545:4 After 2</span><br></pre></td></tr></table></figure>

<p>所以上面我们“赢家通吃”的代码可以改进为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;mage/utils/wrapper&#x27;], function(wrapper)&#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    console.log(&quot;Called this Hook.&quot;);</span><br><span class="line">    return function(targetModule)&#123;</span><br><span class="line"></span><br><span class="line">        var newFunction = targetModule.someFunction;</span><br><span class="line">        var newFunction = wrapper.wrap(newFunction, function(original)&#123;</span><br><span class="line">            //do extra stuff</span><br><span class="line"></span><br><span class="line">            //call original method</span><br><span class="line">            var result = original();</span><br><span class="line"></span><br><span class="line">            //do extra stuff</span><br><span class="line"></span><br><span class="line">            //return original value</span><br><span class="line">            return result;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        targetModule.someFunction = newFunction;</span><br><span class="line">        return targetModule;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Why-Call-this-a-Mixin"><a href="#Why-Call-this-a-Mixin" class="headerlink" title="Why Call this a Mixin"></a><a href="#why-call-this-a-mixin"></a>Why Call this a Mixin</h2><p>不纠结，不翻译，嘿嘿。。</p>
<h2 id="相关参考"><a href="#相关参考" class="headerlink" title="相关参考"></a><a href="#%E7%9B%B8%E5%85%B3%E5%8F%82%E8%80%83"></a>相关参考</h2><p><a href="https://www.hellomagento2.com/alan_magento-2s-base-javascript-class/">Magento 2’s Base Javascript Class</a> <a href="https://www.hellomagento2.com/alan_magento_2_simplest_ui_knockout_component/">Magento 2: Simplest UI Knockout Component</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>Magento 2 Mixins</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云 ECS 安装 Magento 2 (原创)</title>
    <url>/aliyun-ecs-install-magento-2/</url>
    <content><![CDATA[<h2 id="Magento2-系统要求"><a href="#Magento2-系统要求" class="headerlink" title="Magento2 系统要求"></a><a href="#magento2-%E7%B3%BB%E7%BB%9F%E8%A6%81%E6%B1%82"></a>Magento2 系统要求</h2><p>官方参考网址：<br><a href="http://devdocs.magento.com/guides/v2.0/install-gde/system-requirements.html">http://devdocs.magento.com/guides/v2.0/install-gde/system-requirements.html</a></p>
<h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F"></a>操作系统</h3><p>Linux x86-64 (RedHat Enterprise Linux (RHEL), CentOS, Ubuntu, Debian 等)</p>
<h3 id="web-服务器软件"><a href="#web-服务器软件" class="headerlink" title="web 服务器软件"></a><a href="#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6"></a>web 服务器软件</h3><ol>
<li>Apache 2.2 或者 2.4 (必须打开 mod_rewrite)</li>
<li>nginx 1.8 (or latest mainline version)</li>
</ol>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93"></a>数据库</h3><p>MySQL 5.6 或者 5.7</p>
<h3 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a><a href="#php"></a>PHP</h3><p>Update: 下面的要求特指 Magneto 2.1.0 后续版本有差异，请参考官方获得最新的消息</p>
<ol>
<li>5.6.x</li>
<li>5.5.x ( x 大于 22)</li>
<li>7.0.2 至 7.1.0 (除了 7.0.5 和 7.0.4) (7.0.4 官文没有说，但 github 上有 bug 亲测不可用)</li>
<li>php 扩展<br>bc-math (ee版本才需要)<br>curl<br>gd 或者 ImageMagick 6.3.7及以上版本 也可以两个都装<br>intl<br>mbstring<br>mcrypt<br>mhash<br>openssl<br>PDO&#x2F;MySQL<br>SimpleXML<br>soap<br>xml<br>xsl<br>zip<br>PHP 7 only:<br>json<br>iconv</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a href="#%E5%85%B6%E4%BB%96"></a>其他</h3><p>暂时不考虑</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><a href="#%E7%9B%AE%E6%A0%87"></a>目标</h2><p>阿里云 ECS 操作系统 Ubuntu 14.04 64位<br>Apache 2.4<br>MySQL 5.7<br>PHP 7 (据说速度比 PHP 5 提高25%)<br>Magento 2.1.0</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><a href="#%E5%87%86%E5%A4%87"></a>准备</h2><p><em>下面的软件可以去这里下：<a href="http://pan.baidu.com/s/1skJVqiD">http://pan.baidu.com/s/1skJVqiD</a></em></p>
<h3 id="Magento-2-的安装包"><a href="#Magento-2-的安装包" class="headerlink" title="Magento 2 的安装包"></a><a href="#magento-2-%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85"></a>Magento 2 的安装包</h3><ol>
<li>官方下载地址：<br><a href="https://www.magentocommerce.com/download">https://www.magentocommerce.com/download</a></li>
<li>Composer</li>
<li>GitHub</li>
</ol>
<p><em>他们的目录略有不同，个人觉得第一种比较容易哈，下面我们下载 Magento 2.1.0 版本，带 Sample Data的</em></p>
<h3 id="FTP-工具"><a href="#FTP-工具" class="headerlink" title="FTP 工具"></a><a href="#ftp-%E5%B7%A5%E5%85%B7"></a>FTP 工具</h3><p>一会儿需要用FTP上传到服务器上</p>
<blockquote>
<p>个人用的是FileZilla Client</p>
</blockquote>
<h3 id="远程登陆工具"><a href="#远程登陆工具" class="headerlink" title="远程登陆工具"></a><a href="#%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E5%B7%A5%E5%85%B7"></a>远程登陆工具</h3><p>用它来远程连接服务器</p>
<blockquote>
<p>个人用的是Putty</p>
</blockquote>
<h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a><a href="#apache"></a>Apache</h2><p>用远程登陆工具登上服务器</p>
<h3 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a><a href="#%E5%AE%89%E8%A3%85-apache"></a>安装 Apache</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">apt-get -y install apache2</span><br><span class="line">apache2 -v</span><br></pre></td></tr></table></figure>

<h3 id="Enable-rewrites-and-htaccess"><a href="#Enable-rewrites-and-htaccess" class="headerlink" title="Enable rewrites and .htaccess"></a><a href="#enable-rewrites-and-.htaccess"></a>Enable rewrites and .htaccess</h3><ol>
<li><p>启用Apache rewrite 模块<br><code>a2enmod rewrite</code></p>
</li>
<li><p>配置允许存在于.htaccess中的指令<br><code>vi /etc/apache2/sites-available/000-default.conf</code><br>在文件末尾添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line"> AllowOverride  all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Apache<br><code>service apache2 restart</code></p>
</li>
</ol>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><a href="#mysql"></a>MySQL</h2><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a><a href="#%E5%AE%89%E8%A3%85mysql"></a>安装MySQL</h3><p>(Ubuntu 自带的源目前没有MySQL 5.7)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">apt-get -y upgrade</span><br><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository -y ppa:ondrej/mysql-5.7</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install mysql-server-5.7</span><br></pre></td></tr></table></figure>

<p>mysql-client 也会自动装好的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -V</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h3 id="新建一个数据库-demomagento-并授权给用户-demomagento-密码是-Magento"><a href="#新建一个数据库-demomagento-并授权给用户-demomagento-密码是-Magento" class="headerlink" title="新建一个数据库 demomagento 并授权给用户 demomagento 密码是 Magento"></a><a href="#%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%BA%93-demomagento-%E5%B9%B6%E6%8E%88%E6%9D%83%E7%BB%99%E7%94%A8%E6%88%B7-demomagento-%E5%AF%86%E7%A0%81%E6%98%AF-magento"></a>新建一个数据库 demomagento 并授权给用户 demomagento 密码是 Magento</h3><p>(仅作演示用)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database demomagento;</span><br><span class="line">GRANT ALL ON demomagento.* TO demomagento@localhost IDENTIFIED BY &#x27;Magento&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="PHP-1"><a href="#PHP-1" class="headerlink" title="PHP"></a><a href="#php"></a>PHP</h2><h3 id="安装-PHP-和扩展"><a href="#安装-PHP-和扩展" class="headerlink" title="安装 PHP 和扩展"></a><a href="#%E5%AE%89%E8%A3%85-php-%E5%92%8C%E6%89%A9%E5%B1%95"></a>安装 PHP 和扩展</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line">apt-get -y update</span><br><span class="line">apt-get install -y php7.0 libapache2-mod-php7.0 php7.0 php7.0-common php7.0-gd php7.0-mysql php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl php7.0-mbstring php7.0-zip php7.0-bcmath php7.0-iconv</span><br></pre></td></tr></table></figure>

<p>查看版本<br><code>php -v</code></p>
<h3 id="修改-PHP-设置"><a href="#修改-PHP-设置" class="headerlink" title="修改 PHP 设置"></a><a href="#%E4%BF%AE%E6%94%B9-php-%E8%AE%BE%E7%BD%AE"></a>修改 PHP 设置</h3><p><code>vi /etc/php/7.0/apache2/php.ini</code></p>
<p>该文件是apache使用的配置文件，可通过phpinfo() 找到他。还有一个php.ini配置文件用于命令行，可以通过<code>php -i grep php.ini</code>找到，就像<code>/etc/php/7.0/cli/php.ini</code></p>
<p>对两个<code>php.ini</code>做如下修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date.timezone = &quot;Asia/Shanghai&quot;</span><br><span class="line">memory_limit = 1024M</span><br></pre></td></tr></table></figure>

<p>memory_limit 的配置官方是这样说的</p>
<ol>
<li>Compiling code, 768M</li>
<li>Deploying static asses, 768M</li>
<li>Installing and updating Magento components from Magento Marketplace, 1G</li>
<li>Testing, 2G</li>
</ol>
<h2 id="可以-ping-通但访问超时"><a href="#可以-ping-通但访问超时" class="headerlink" title="可以 ping 通但访问超时"></a><a href="#%E5%8F%AF%E4%BB%A5-ping-%E9%80%9A%E4%BD%86%E8%AE%BF%E9%97%AE%E8%B6%85%E6%97%B6"></a>可以 ping 通但访问超时</h2><p>很可能是防火墙的问题<br><code>ufw allow 80/tcp</code></p>
<h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a><a href="#%E8%AE%BF%E9%97%AE%E6%B5%8B%E8%AF%95"></a>访问测试</h2><p>这时候我们应该可以访问默认的页面了</p>
<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a><a href="#%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7"></a>添加用户</h2><p><code>useradd -r -m -s /bin/bash ThankIT</code><br>配置用户的密码<br><code>passwd ThankIT</code><br>寻找 apache 的 user (www-data)<br><code>ps aux grep apache</code><br>www-data 的 group 也是www-data<br><code>groups www-data</code><br>把 ThankIT 用户创建的任何文件都分配给 www-data 组<br><code>usermod -g www-data ThankIT</code><br>验证下 ThankIT 在 www-data 组<br><code>groups ThankIT</code></p>
<h2 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a><a href="#%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA"></a>配置虚拟主机</h2><p>切换成 ThankIT 用户<br><code>su ThankIT</code><br>在<code>/home/ThankIT</code> 下建立文件夹 www<br><code>mkdir www</code><br><code>/home/ThankIT/www</code> 将作为虚拟主机的根目录，对应原来的 <code>/var/www/html</code><br><code>vi /etc/apache2/apache2.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /&gt;</span><br><span class="line">    Require all denied</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>改为 <code>Require all granted</code></p>
<p><code>vi /etc/apache2/sites-available/000-default.conf</code><br>修改DocumentRoot 为 <code>/home/ThankIT/www/M210</code></p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /home/ThankIT/www/M210&gt;</span><br><span class="line">    Options Indexes FollowSymLinks MultiViews</span><br><span class="line">    AllowOverride all</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p><code>service apache2 restart</code></p>
<h2 id="搭建-ftp-并上传"><a href="#搭建-ftp-并上传" class="headerlink" title="搭建 ftp 并上传"></a><a href="#%E6%90%AD%E5%BB%BA-ftp-%E5%B9%B6%E4%B8%8A%E4%BC%A0"></a>搭建 ftp 并上传</h2><p>安装 vsftpd<br><code>apt-get install vsftpd</code><br><code>ufw allow 21/tcp</code><br><code>vi /etc/vsftpd.conf</code><br>将 <code>write_enable=YES</code> 前的 # 删除<br>将 <code>local_umask=002</code> 前的 # 删除<br><code>service vsftpd restart</code></p>
<p>上传准备好的 Magento 2.1.0 ZIP 文件</p>
<h2 id="安装-Magento-2-1-0"><a href="#安装-Magento-2-1-0" class="headerlink" title="安装 Magento 2.1.0"></a><a href="#%E5%AE%89%E8%A3%85-magento-2.1.0"></a>安装 Magento 2.1.0</h2><h3 id="安装解压缩软件"><a href="#安装解压缩软件" class="headerlink" title="安装解压缩软件"></a><a href="#%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6"></a>安装解压缩软件</h3><p><code>apt-get install unzip</code></p>
<h3 id="解压缩并修改权限"><a href="#解压缩并修改权限" class="headerlink" title="解压缩并修改权限"></a><a href="#%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%B9%B6%E4%BF%AE%E6%94%B9%E6%9D%83%E9%99%90"></a>解压缩并修改权限</h3><p><code>unzip -d M210 Magentoce2.1.0.zip</code></p>
<h3 id="切换-ThankIT-用户并修改文件权限"><a href="#切换-ThankIT-用户并修改文件权限" class="headerlink" title="切换 ThankIT 用户并修改文件权限"></a><a href="#%E5%88%87%E6%8D%A2-thankit-%E7%94%A8%E6%88%B7%E5%B9%B6%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90"></a>切换 ThankIT 用户并修改文件权限</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su ThankIT</span><br><span class="line">cd /home/ThankIT/www/M210 &amp;&amp; find var vendor pub/static pub/media app/etc -type f -exec chmod g+w &#123;&#125; \; &amp;&amp; find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws &#123;&#125; \; &amp;&amp; chown -R :www-data . &amp;&amp; chmod u+x bin/magento</span><br></pre></td></tr></table></figure>

<h3 id="用浏览器打开网站开始安装-…-安装完成。"><a href="#用浏览器打开网站开始安装-…-安装完成。" class="headerlink" title="用浏览器打开网站开始安装 … 安装完成。"></a><a href="#%E7%94%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E6%89%93%E5%BC%80%E7%BD%91%E7%AB%99%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85-...-%E5%AE%89%E8%A3%85%E5%AE%8C%E6%88%90%E3%80%82"></a>用浏览器打开网站开始安装 … 安装完成。</h3>]]></content>
      <categories>
        <category>Magento 开发教程</category>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>ECS</tag>
        <tag>LAMP</tag>
        <tag>安装</tag>
        <tag>推荐</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>安卓反编译工具的使用</title>
    <url>/android-decompiler/</url>
    <content><![CDATA[<p><em>仅供学习，别做坏事，尊重别人的劳动成果！</em> 通过解压缩，apk 文件可以得到 res 下的图片资源，但是 xml 类的资源，打开时乱码，也不能看 java 代码，他被打包到 classes.dex 中了。</p>
<ul>
<li>apktool: 获取资源文件，提取图片文件，布局文件，还有一些 XML 的资源文件</li>
<li>dex2jar：将 apk 反编译成 Java 源码 （将 classes.dex 转化为 jar 文件）</li>
<li>jd-gui: 查看 jar 文件</li>
</ul>
<h2 id="apktool"><a href="#apktool" class="headerlink" title="apktool"></a><a href="#apktool"></a>apktool</h2><p>将 apk 复制到 apktool 同一目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apktool.bat d test.apk</span><br></pre></td></tr></table></figure>

<p>然后可以看到生成的 test 文件夹，就有我们想要的资源。 其中 d 是 decode 的意思，表示我们要对 test.apk 这个文件进行解码。那除了这个基本用法之外，我们还可以再加上一些附加参数来控制decode的更多行为：</p>
<ul>
<li>-f 如果目标文件夹已存在，则强制删除现有文件夹（默认如果目标文件夹已存在，则解码失败）。</li>
<li>-o 指定解码目标文件夹的名称（默认使用APK文件的名字来命名目标文件夹）。</li>
<li>-s 不反编译dex文件，也就是说classes.dex文件会被保留（默认会将dex文件解码成smali文件）。</li>
<li>-r 不反编译资源文件，也就是说resources.arsc文件会被保留（默认会将resources.arsc解码成具体的资源文件）。</li>
</ul>
<h2 id="dex2jar"><a href="#dex2jar" class="headerlink" title="dex2jar"></a><a href="#dex2jar"></a>dex2jar</h2><p>把 apk 解压后的 classes.dex 复制到 dex2jar.bat 所在的目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d2j-dex2jar.bat classes.dex</span><br></pre></td></tr></table></figure>

<p>然后我们就得到了 classes-dex2jar.jar 文件</p>
<h2 id="jd-jui"><a href="#jd-jui" class="headerlink" title="jd-jui"></a><a href="#jd-jui"></a>jd-jui</h2><p>然后用 jd-jui 来打开上面的 classes-dex2jar.jar 就可以看见代码了。</p>
<h2 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a><a href="#%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7"></a>在线工具</h2><p>分享一个在线的，如果你有梯子的话。 <a href="http://www.javadecompilers.com/apk">http://www.javadecompilers.com/apk</a> 效果和上面的工具是差不多的，但是更方便。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="http://www.runoob.com/w3cnote/android-tutorial-decompile-apk-get-code-resources.html">反编译APK获取代码&amp;资源</a> <a href="http://blog.csdn.net/guolin_blog/article/details/49738023">Android安全攻防战，反编译与混淆技术完全解析（上）</a> <a href="http://www.mottoin.com/89035.html">脱壳</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>attribute sets and attribute groups</title>
    <url>/attribute-sets-and-attribute-groups/</url>
    <content><![CDATA[<p><img src="/wp-content/uploads/2019/06/eav_entity_type.png"> Every entity type have some attributes. Attribute set is used to classify attributes. For example, when you create a new product, you can choose using which attribute set. Theoretically, every entity type can have multiple attribute sets, but, generally, only catalog_product has multiple attribute sets. Attribute group is used to group attributes on an edit page under an accordian to make attributes easier to fnd. For exmaple: catalog_category has six groups. So we can see six sections. <img src="/wp-content/uploads/2019/06/eav_groups.png"> Table <code>eav_entity_attribute</code> stores the relationship between attribute and attribute group.</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>百度蜘蛛 IP 段</title>
    <url>/baidu-spider-ip/</url>
    <content><![CDATA[<p>博主真是为本站的收录操碎了心哪！每天眼巴巴盼着百度收录内页，可是每天都是老样子，只收录了首页。上一篇<a href="/view_apache_log/">查看 Apache 日志</a>就检查了百度的蜘蛛到底来没来过。来是来过了，为啥还不收录呢？今天又挖呀挖，发现百度蜘蛛的 IP 段还有含义呢！</p>
<p>还是一样，查看 Apache 的日志，然后根据<code>http://www.baidu.com/search/spider.html</code> 找到百度蜘蛛爬行的记录，我的网站百度蜘蛛的 IP 段目前只有三个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123.125.71.* （最多）</span><br><span class="line">220.181.108.*</span><br><span class="line">180.76.15.*</span><br></pre></td></tr></table></figure>

<p>以下内容是根据网络内容整理的，没有官方说明哈，大家可以自行搜索了解更多百度蜘蛛的 IP 段含义。有很多 IP 段，这里我就只列出我遇到的 IP 段含义。</p>
<p>先上一张图，吊一吊胃口，哈哈！</p>
<p><img src="/wp-content/uploads/2016/09/baidu_spider_ip_cute.jpg"></p>
<h2 id="123-开头的"><a href="#123-开头的" class="headerlink" title="123 开头的"></a><a href="#123-%E5%BC%80%E5%A4%B4%E7%9A%84"></a>123 开头的</h2><p>新站都是123开头的，这窝就放心了。说明在考察期。<br>如果是老站，并且曾经是220开头的，现在成120开头的了，这就要注意啦，是不是最近不好好写内容，还是网站结构改太多了。</p>
<h2 id="220-开头的"><a href="#220-开头的" class="headerlink" title="220 开头的"></a><a href="#220-%E5%BC%80%E5%A4%B4%E7%9A%84"></a>220 开头的</h2><p>正常抓取，根据最后一位还可以细分，这个嘛，没有实践没有发言权，博主只要知道本站是正常的就放心了。</p>
<h2 id="180-开头的"><a href="#180-开头的" class="headerlink" title="180 开头的"></a><a href="#180-%E5%BC%80%E5%A4%B4%E7%9A%84"></a>180 开头的</h2><p>据说是提权蜘蛛，流量有一定增长。只是据说。。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>漫谈网上商城系统——从技术角度进行比较</title>
    <url>/bibi-ecommerce-platform/</url>
    <content><![CDATA[<p><em>声明：本文仅代表博主个人观点，博主会努力保持客观公正，但难免有个人偏见，望各位看官轻拍。如有错误疏漏，欢迎更正补充。本文原创，非商业转载请注明出处。商业转载请联系本人。</em></p>
<h2 id="网上商城系统本质上是什么"><a href="#网上商城系统本质上是什么" class="headerlink" title="网上商城系统本质上是什么"></a><a href="#%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E6%9C%AC%E8%B4%A8%E4%B8%8A%E6%98%AF%E4%BB%80%E4%B9%88"></a>网上商城系统本质上是什么</h2><p>网上商城系统就是网上的店铺呗，客户浏览我们的商品，下单，付款，我们发货呗。<br>那么从技术上来讲，网上商城系统是什么呢？讲这个，是因为经常有业务员或推广人员，用一些高大上的词汇来忽悠人，让你感觉，哇，好复杂好高级的样子，哇，不贵啊！然后就入坑了。商城系统和普通的网页采用的技术是一样的，只是围绕着购物这个流程，需要考虑的也更多。就好像建房子采用的手段、材料基本一致嘛！<br>再抽象一下，网上商城传递的是信息，我们一般通过操作数据库来输入输出这些信息。</p>
<h2 id="商城系统何其多"><a href="#商城系统何其多" class="headerlink" title="商城系统何其多"></a><a href="#%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E4%BD%95%E5%85%B6%E5%A4%9A"></a>商城系统何其多</h2><p>就好像我们需要一个店铺来卖东西，我们可以跟商场租间店铺，或者用自己家的房子一样，网上商城系统也可以分成两类：一类是购物集市，例如国内的淘宝、京东，国外的ebay,shopify等。你可以跟他租店铺，至于说免费什么的，那是他的盈利模式神马的，这里不讨论，反正本质上你就是跟他租。租他的当然要按人家的规则啦。还有一种就是自己建店铺，我的地盘我做主。各种开源商城系统或者商用商城系统就是帮你自己建店铺的啦。</p>
<p>本文主要是讨论第二种，帮你搭建网上店铺的各种商城系统。</p>
<h2 id="网上商城系统的发展"><a href="#网上商城系统的发展" class="headerlink" title="网上商城系统的发展"></a><a href="#%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95"></a>网上商城系统的发展</h2><p>我看这个小标题都可以写一篇论文甚至一本书了。吓死宝宝了。<br>就选几个代表吧</p>
<p>平台类：<br>淘宝成立于2003年<br>京东开始做电子商务是2004年<br>ebay成立于1995年<br>亚马逊成立于1995年<br>shopify 成立与2006年<br>总的来说，国内的发展比国外晚一些，当然现在已经缩短了。</p>
<p>开源系统：</p>
<h4 id="ecshop"><a href="#ecshop" class="headerlink" title="ecshop"></a><a href="#ecshop"></a>ecshop</h4><p>ecshop 国内的，发布的第一个版本是2006年，网上搜索到的结果是08年被收购后就没有新版本出了（官网没有找到历史版本日志，所以无法给出确切的版本和时间），目前已经基本停止维护。要求PHP版本在5.0以上5.6以下。这就很能说明问题了，php 现在都出7了。再来说说ecshop 的代码写得怎么样。下面是ECSHOP创始人的原话，<a href="https://www.zhihu.com/question/19658669">原文地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">作为 ECSHOP 的创始人，我也说两句，ECSHOP 整个系统架构是 2006、2007 年时写就的，之后也没有特别大的改动，按照我们当时团队以目前的眼光看，也是落后的了。</span><br><span class="line">最大的要做的改动，一个是要改成单入口方式，第二个是至少以类封装的方式写代码，把过程型的代码最小化，第三个就是更加的 MVC 化一些。</span><br><span class="line">至于大规模下的负载能力，其实当时就没考虑做太大规模的店的事情，毕竟那是06、07年。不过论小规模负载下的性能，我们还是有自信的。</span><br><span class="line">如果论代码细节，我们07年给摩托罗拉做项目的时候，摩托罗拉曾经找专门的公司评价过代码质量，最后的结果你应该也可以知道的。</span><br><span class="line"></span><br><span class="line">作者：高春辉</span><br></pre></td></tr></table></figure>

<p>安全方面，请自行百度，ecshop 漏洞，相信各位看官会对搜索结果如此之多，会表示吃惊的。</p>
<h3 id="zenCart"><a href="#zenCart" class="headerlink" title="zenCart"></a><a href="#zencart"></a>zenCart</h3><p>zenCart 2003年从osCommerce 中独立出来的分支，十年前版本就是1.3.8，十年后的今天是1.5.4，依然是意大利面式的PHP和html 混合着。</p>
<h3 id="openCart"><a href="#openCart" class="headerlink" title="openCart"></a><a href="#opencart"></a>openCart</h3><p>openCart 的数据表结构和程序结构跟 zencart 都非常相似。但代码和结构都漂亮了许多。(<a href="https://www.zhihu.com/question/20441803">该句引用自知乎，原文地址</a>)</p>
<h3 id="wooCommerce"><a href="#wooCommerce" class="headerlink" title="wooCommerce"></a><a href="#woocommerce"></a>wooCommerce</h3><p>wooCommerce 实际上wordpress 的扩展插件，由于wordpress 的广泛使用。轻量适合产品不多的情况。</p>
<h3 id="magento"><a href="#magento" class="headerlink" title="magento"></a><a href="#magento"></a>magento</h3><p>magento 2008年发布第一个版本，2011年三月获得EBAY战略投资。他的定位是企业级的商务系统，最大的特点是可扩展性非常强大。规范的代码标准，强大的社区，模块化的体系，简直就是商城系统中的“绝世好剑”。而且2015年5月发布的Magento 2.0，采用的技术栈更上一层楼。（比起死乞白赖吃老本强出不知道多少，额，不客观了。。）<br>magento 的问题在于，他的门槛要稍微高些，因为他有自己的逻辑。这么说吧，看过几天php的，就能看懂上述简单的PHP模板式的系统，但是要来看 magento 没有一些功力是办不到的。如果有现成的教程除外。另外，由于他更加复杂，中文化的工作量不少，这也制约了 magento 在国内的发展。</p>
<h2 id="网上商城系统占有率（2015年十月）"><a href="#网上商城系统占有率（2015年十月）" class="headerlink" title="网上商城系统占有率（2015年十月）"></a><a href="#%E7%BD%91%E4%B8%8A%E5%95%86%E5%9F%8E%E7%B3%BB%E7%BB%9F%E5%8D%A0%E6%9C%89%E7%8E%87%EF%BC%882015%E5%B9%B4%E5%8D%81%E6%9C%88%EF%BC%89"></a>网上商城系统占有率（2015年十月）</h2><p>最后贴上一张网上商城系统全球的市场占有率情况：<br><a href="https://blog.aheadworks.com/2015/10/ecommerce-platforms-popularity-october-2015-top-five-solutions-take-three-quarters-of-the-market/">图片来源</a></p>
<p><img src="/wp-content/uploads/2016/08/bibi-ecommerce-platform-chart.png"></p>
<p>未完待续。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>新增 Blocks (Adding New Blocks)</title>
    <url>/block-add/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/cms/block-add.html">原文地址</a></p>
<p>自定义的 blocks 可以被加到页面，一组页面，甚至另一个 blocks 中。你可以在 blocks 中放一个图片轮播，然后把这个 block 放在首页上。</p>
<p>Blocks 的工作区和 pages 的工作区使用的是相同的控件，来帮助你查找 blocks 以及日常维护操作。</p>
<p><img src="/wp-content/uploads/2016/11/blocks-workspace.png" alt="Blocks Workspace"></p>
<h2 id="创建-block"><a href="#创建-block" class="headerlink" title="创建 block"></a><a href="#%E5%88%9B%E5%BB%BA-block"></a>创建 block</h2><ol>
<li><p>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Elements</strong> 下，选择 <strong>Blocks</strong></p>
</li>
<li><p>右上角点击 <strong>Add New Block</strong>，然后，做如下事情：<br>a. 填入 <strong>Block Title</strong><br>b. 填入 <strong>Identifier</strong>，他得是唯一的，使用小写字符，并且使用下划线，不要用空格。<br>c. 选择 Block 可用的 <strong>Store View(s)</strong><br>d. 设置 <strong>Status</strong> 为 “Enabled”，这样改 block 才是可见的。<br>e. 完成 <strong>Content</strong> 内容</p>
<ul>
<li>你可以使用编辑器来格式化内容，创建链接，表格，图片等等。</li>
<li>如果你更喜欢用 HTML 代码，点击 Show&#x2F;Hide Editor</li>
</ul>
</li>
<li><p>完成后，点击 <strong>Save Block</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>定位 Blocks (Positioning Blocks)</title>
    <url>/block-position/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/block-position.html">原文地址</a></em></p>
<p>控制 page layout 和 blocks 位置的代码被写在 XML widget 中，这使得放置 block 在页面的特定位置变得比较容易，即时是放置在特定的产品页或分类目录中，也很容易不需要写任何代码。你可以从列表中选择选项，而不用记住所有可能的组合。</p>
<p>下面的列表展示了不同 page 类型下，blocks 被放置的经典位置。了解更多，请参考 <a href="http://docs.magento.com/m2/ce/user_guide/design/page-layout-standard.html">Standard Page Layouts</a></p>
<h2 id="Category-and-CMS-Pages"><a href="#Category-and-CMS-Pages" class="headerlink" title="Category and CMS Pages"></a><a href="#category-and-cms-pages"></a>Category and CMS Pages</h2><p>BLOCK REFERENCE</p>
<p>POSITION</p>
<p>Breadcrumbs</p>
<p>The navigation aid at the top of many pages that shows your current location as a link. Any additional content placed in the Breadcrumbs reference floats to the right of the breadcrumbs, if displayed.</p>
<p>Left Column</p>
<p>Content is added to the left column.</p>
<p>Main Content Area</p>
<p>Content is added to the main content area.</p>
<p>My Cart Extra Actions</p>
<p>Content appears below the Cart Subtotal in the My Cart popup located within the top link.</p>
<p>Navigation Bar</p>
<p>Content appears below the main navigation bar.</p>
<p>Page Bottom</p>
<p>Content appears at the bottom of the page.</p>
<p>Page Footer</p>
<p>Content appears above the footer of the page.</p>
<p>Page Header</p>
<p>Content appears below the header of the page.</p>
<p>Page Top</p>
<p>Content appears at the top of the page.</p>
<p>Right Column</p>
<p>Content appears in the right column.</p>
<p>Store Language</p>
<p>Content appears in the upper-left corner of the header.</p>
<h2 id="Product-Page"><a href="#Product-Page" class="headerlink" title="Product Page"></a><a href="#product-page"></a>Product Page</h2><p>BLOCK REFERENCE</p>
<p>POSITION</p>
<p>Alert URLs</p>
<p>Content appears below the title of the product on the product detail page.</p>
<p>Bottom Block Options Wrapper</p>
<p>If custom options are added, content appears below the Add to Cart button.</p>
<p>Breadcrumbs</p>
<p>Content appears to the right of breadcrumbs—the navigation aid that provides links as a path—that’s showcased below the navigation bar.</p>
<p>Info Column Options Wrapper</p>
<p>If a custom options are added, content appears to the right. The same location applies to configurable options.</p>
<p>Left Column</p>
<p>Content appears below the left column blocks.</p>
<p>Main Content Area</p>
<p>Content appears below the main content area.</p>
<p>My Cart Extra Actions</p>
<p>Content appears below the Cart Subtotal in the My Cart popup located within the top link.</p>
<p>Navigation Bar</p>
<p>Content appears below the main navigation bar.</p>
<p>Page Bottom</p>
<p>Content appears at the bottom of the page.</p>
<p>Page Footer</p>
<p>Content appears above the footer of the page.</p>
<p>Page Header</p>
<p>Content appears below the header of the page.</p>
<p>Page Top</p>
<p>Content appears at the top of the page.</p>
<p>PayPal Express Checkout (Payflow Edition) Shortcut Wrapper</p>
<p>If the PayPal payment method is enabled, content appears below the PayPal buy button.</p>
<p>PayPal Express Checkout Shortcut Wrapper</p>
<p>If the PayPal payment method is enabled, content appears below the PayPal buy button.</p>
<p>Product Tags List</p>
<p>Content appears below the products tag bar.</p>
<p>Product View Extra Hint</p>
<p>Content appears below the main top price of the product.</p>
<p>Right Column</p>
<p>Content appears below the right column blocks.</p>
<p>Store Language</p>
<p>Content appears to the right of the language chooser.</p>
<p>Tags List Before</p>
<p>Content appears above the Add Your Tags field.</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Block’s view model</title>
    <url>/blocks-view-model/</url>
    <content><![CDATA[<p>You will probably aggree that: Templates should only be about representation, and should not contain business logic. Magento’s blocks perform or provide business logic for the templates. One problem with inheriting the template block is the constructor is very large. This makes testing and reusability difcult. The answer to this is using a View Mode. While the block is responsible for outputting its contents and the view model handles the logic. For example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;block class=&quot;Magento\Backend\Block\Template&quot; name=&quot;admin.temando.batch.solve&quot;&gt;</span><br><span class="line">    &lt;arguments&gt;</span><br><span class="line">        &lt;argument name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;Temando_Shipping::batch/solve.phtml&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;viewModel&quot; xsi:type=&quot;object&quot;&gt;Temando\Shipping\ViewModel\Batch\BatchDetails&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;supportViewModel&quot; xsi:type=&quot;object&quot;&gt;Temando\Shipping\ViewModel\Account\Support&lt;/argument&gt;</span><br><span class="line">    &lt;/arguments&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure>

<p>Now, you can get your view model by using <code>$viewModel = $block-&gt;getData(&#39;viewModel&#39;);</code> in your template. This is because <code>Magento\Framework\View\Element\AbstractBlock</code> extends <code>\Magento\Framework\DataObject</code>.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://firegento.com/blog/2017/12/07/better-blocks-magento-2-php-view-models/">Better Blocks: Magento 2 PHP View Models</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Blocks</title>
    <url>/blocks/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/blocks.html">原文地址</a></em></p>
<p>一个 block 是一个可以放置在页面的任何位置的模块化的单元。Content blocks 有时候称之为 static blocks 或者 CMS blocks。可以用它来战士固定的信息，比如文本、图像、嵌入的视频，以及来自于 widget 、数据库或其他地方的动态信息。主页的大多数元素都是 blocks，他们很容易管理。</p>
<p>你不用写一行代码就可以创建自定义的 blocks，并把他们放置到页面的特定位置。还可以通过创建 layout update XML 来定义 blocks 及其位置。</p>
<p><img src="/wp-content/uploads/2016/11/storefront-blocks-home-page_thumb_0_0.png" alt="Blocks on Home Page"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>bootstrap 多级导航 PC 手机解决方案</title>
    <url>/bootstrap-mulilevel-navbar-pc-mobile/</url>
    <content><![CDATA[<h1 id="bootstrap-多级导航-PC-手机解决方案"><a href="#bootstrap-多级导航-PC-手机解决方案" class="headerlink" title="bootstrap 多级导航 PC 手机解决方案"></a><a href="#bootstrap-%E5%A4%9A%E7%BA%A7%E5%AF%BC%E8%88%AA-pc-%E6%89%8B%E6%9C%BA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88"></a>bootstrap 多级导航 PC 手机解决方案</h1><p>多于两层的导航比较少，这里业务需要 bootstrap 的多级导航。在 PC 上悬停时出现子菜单（默认是 click 的方式），在手机上依然是 click 出现子菜单，不能是悬停。PC 上下拉选项可以点击进入链接，手机点击显示或隐藏子菜单。 以下是 demo <a href="/wp-content/uploads/2017/06/index3.html">在线 demo</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span><br><span class="line">    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; integrity=&quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js&quot; integrity=&quot;sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">@media (min-width: 767px) &#123;</span><br><span class="line">    .navbar-nav .dropdown-menu .caret &#123;</span><br><span class="line">        transform: rotate(-90deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;navbar navbar-default navbar-fixed-top&quot; role=&quot;navigation&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;navbar-header&quot;&gt;</span><br><span class="line">                &lt;button type=&quot;button&quot; class=&quot;navbar-toggle&quot; data-toggle=&quot;collapse&quot; data-target=&quot;.navbar-collapse&quot;&gt;</span><br><span class="line">                    &lt;span class=&quot;sr-only&quot;&gt;Toggle navigation&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class="line">                    &lt;span class=&quot;icon-bar&quot;&gt;&lt;/span&gt;</span><br><span class="line">                &lt;/button&gt;</span><br><span class="line">                &lt;a class=&quot;navbar-brand&quot; href=&quot;#&quot;&gt;NavBar&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;collapse navbar-collapse&quot;&gt;</span><br><span class="line">                &lt;ul class=&quot;nav navbar-nav&quot;&gt;</span><br><span class="line">                    &lt;li class=&quot;active&quot;&gt;&lt;a href=&quot;#&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;&lt;a href=&quot;https://github.com/fontenele/bootstrap-navbar-dropdowns&quot; target=&quot;_blank&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu 1 &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                        &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 1.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action [Menu 1.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here [Menu 1.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link [Menu 1.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link [Menu 1.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;</span><br><span class="line">                                &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 1.1] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 1.2]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;</span><br><span class="line">                                        &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 1.2] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                        &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                            &lt;li&gt;</span><br><span class="line">                                                &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 1.3] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                                &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 1.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action [Menu 1.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here [Menu 1.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link [Menu 1.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link [Menu 1.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                &lt;/ul&gt;</span><br><span class="line">                                            &lt;/li&gt;</span><br><span class="line">                                        &lt;/ul&gt;</span><br><span class="line">                                    &lt;/li&gt;</span><br><span class="line">                                &lt;/ul&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                    &lt;li&gt;</span><br><span class="line">                        &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu 2 &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                        &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 2.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action [Menu 2.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here [Menu 2.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link [Menu 2.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link [Menu 2.1]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                            &lt;li&gt;</span><br><span class="line">                                &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 2.1] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 2.2]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action [Menu 2.2]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here [Menu 2.2]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link [Menu 2.2]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                    &lt;li&gt;</span><br><span class="line">                                        &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 2.2] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                        &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                            &lt;li&gt;</span><br><span class="line">                                                &lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Dropdown [Menu 2.3] &lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;</span><br><span class="line">                                                &lt;ul class=&quot;dropdown-menu&quot;&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Action [Menu 2.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Another action [Menu 2.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Something else here [Menu 2.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Separated link [Menu 2.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;</span><br><span class="line">                                                    &lt;li&gt;&lt;a href=&quot;#&quot;&gt;One more separated link [Menu 2.4]&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">                                                &lt;/ul&gt;</span><br><span class="line">                                            &lt;/li&gt;</span><br><span class="line">                                        &lt;/ul&gt;</span><br><span class="line">                                    &lt;/li&gt;</span><br><span class="line">                                &lt;/ul&gt;</span><br><span class="line">                            &lt;/li&gt;</span><br><span class="line">                        &lt;/ul&gt;</span><br><span class="line">                    &lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;!--/.nav-collapse --&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    jQuery(document).ready(function() &#123;</span><br><span class="line">        var $ = jQuery;</span><br><span class="line"></span><br><span class="line">        function dropdownOpen() &#123;</span><br><span class="line">            // console.log(&#x27;drop&#x27;);</span><br><span class="line">            var screenWidth = $(window).width();</span><br><span class="line">            var isPhone = screenWidth &lt; 768;</span><br><span class="line">            if (!isPhone) &#123;</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).unbind(&#x27;mouseover&#x27;).on(&#x27;mouseover&#x27;, function() &#123;</span><br><span class="line">                    // console.log(this);</span><br><span class="line">                    var $el = $(this);</span><br><span class="line">                    var $parent = $(this).offsetParent(&quot;.dropdown-menu&quot;);</span><br><span class="line"></span><br><span class="line">                    $(this).parent(&quot;li&quot;).addClass(&#x27;open&#x27;);</span><br><span class="line"></span><br><span class="line">                    if (!$parent.parent().hasClass(&#x27;nav&#x27;)) &#123;</span><br><span class="line">                        $el.next().css(&#123;</span><br><span class="line">                            &quot;top&quot;: $el[0].offsetTop,</span><br><span class="line">                            &quot;left&quot;: $parent.outerWidth() - 4</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    $(&#x27;.nav li.open&#x27;).not($(this).parents(&quot;li&quot;)).removeClass(&quot;open&quot;);</span><br><span class="line"></span><br><span class="line">                    return false;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).addClass(&#x27;disabled&#x27;);</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).unbind(&#x27;click&#x27;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).unbind(&#x27;mouseover&#x27;);</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).removeClass(&#x27;disabled&#x27;);</span><br><span class="line">                $(&#x27;.navbar-nav a.dropdown-toggle&#x27;).unbind(&#x27;click&#x27;).on(&#x27;click&#x27;, function() &#123;</span><br><span class="line"></span><br><span class="line">                    $(this).parent(&quot;li&quot;).toggleClass(&#x27;open&#x27;);</span><br><span class="line"></span><br><span class="line">                    return false;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // resize 会执行两次</span><br><span class="line">        $(window).on(&#x27;resize&#x27;, dropdownOpen).trigger(&#x27;resize&#x27;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>catalog_attributes.xml</title>
    <url>/catalog-attributes-xml/</url>
    <content><![CDATA[<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><p>We use quote_item as an example. We create a custom product attribute with <code>product_brand</code> code.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$productResp = $this-&gt;_objectManager-&gt;get(&#x27;Magento\Catalog\Api\ProductRepositoryInterface&#x27;);</span><br><span class="line">$product = $productResp-&gt;getById(1);</span><br><span class="line">var_dump($product-&gt;getData());</span><br></pre></td></tr></table></figure>

<p>Ok, we can get <code>product_brand</code> attribute value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$checkoutSession = $this-&gt;_objectManager-&gt;get(&#x27;\Magento\Checkout\Model\Session&#x27;);</span><br><span class="line">$quote = $checkoutSession-&gt;getQuote();</span><br><span class="line">$quoteItems = $quote-&gt;getAllItems();</span><br><span class="line">foreach ($quoteItems as $item) &#123;</span><br><span class="line">    $product = $item-&gt;getProduct();</span><br><span class="line">&#125;</span><br><span class="line">var_dump($product-&gt;getData());</span><br></pre></td></tr></table></figure>

<p>However, we can’t get <code>product_brand</code> attribute value through qutoe item. Let’s create a etc&#x2F;catalog_attributes.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Catalog:etc/catalog_attributes.xsd&quot;&gt;</span><br><span class="line">    &lt;group name=&quot;quote_item&quot;&gt;</span><br><span class="line">        &lt;attribute name=&quot;product_brand&quot;/&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line">    &lt;group name=&quot;wishlist_item&quot;&gt;</span><br><span class="line">        &lt;attribute name=&quot;product_brand&quot; /&gt;</span><br><span class="line">    &lt;/group&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>This time, we can get <code>product_brand</code> attribute value through qutoe item. Source: <code>vendor\magento\module-quote\Model\ResourceModel\Quote\Item\Collection.php::_assignProducts</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">$productCollection = $this-&gt;_productCollectionFactory-&gt;create()-&gt;setStoreId(</span><br><span class="line">            $this-&gt;getStoreId()</span><br><span class="line">        )-&gt;addIdFilter(</span><br><span class="line">            $this-&gt;_productIds</span><br><span class="line">        )-&gt;addAttributeToSelect(</span><br><span class="line">            $this-&gt;_quoteConfig-&gt;getProductAttributes()</span><br><span class="line">        );</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>$this-&gt;_quoteConfig</code> is an instance of <code>Magento\Quote\Model\Quote\Config</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Copyright © Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">namespace Magento\Quote\Model\Quote;</span><br><span class="line"></span><br><span class="line">class Config</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * @var \Magento\Catalog\Model\Attribute\Config</span><br><span class="line">     */</span><br><span class="line">    private $_attributeConfig;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param \Magento\Catalog\Model\Attribute\Config $attributeConfig</span><br><span class="line">     */</span><br><span class="line">    public function __construct(\Magento\Catalog\Model\Attribute\Config $attributeConfig)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_attributeConfig = $attributeConfig;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function getProductAttributes()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_attributeConfig-&gt;getAttributeNames(&#x27;quote_item&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Default Groups： quote_item wishlist_item catalog_product catalog_category unassignable used_in_autogeneration</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://www.atwix.com/magento-2/how-to-access-custom-catalog-attributes/">How to access custom catalog attributes in Magento 2</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>动态媒体网址(Dynamic Media URLs)</title>
    <url>/catalog-urls-dynamic-media/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/catalog-urls-dynamic-media.html">原文地址</a></em></p>
<p>动态媒体URL是图像或其他媒体资源的相对引用。启用时，可以使用动态媒体 URL 链接到你服务器或者 CDN 上的媒体资源。动态媒体 URL 的使用影响着 Catalog 的表现。编辑器可以配置为在catalog product 和 category description 中是使用静态还是动态的媒体URL。</p>
<p>动态媒体 URL 的使用看起来是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;media url=&quot;path/to/image.jpg&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置为动态媒体URLs"><a href="#配置为动态媒体URLs" class="headerlink" title="配置为动态媒体URLs"></a><a href="#%E9%85%8D%E7%BD%AE%E4%B8%BA%E5%8A%A8%E6%80%81%E5%AA%92%E4%BD%93urls"></a>配置为动态媒体URLs</h2><ol>
<li>在后台侧边栏，点击<strong>Stores</strong>，在<strong>Settings</strong>下，选择<strong>Configuration</strong></li>
<li>在<strong>Catalog</strong>组下选择<strong>Catalog</strong></li>
<li>展开<strong>Storefront</strong>部分，设置<strong>Allow Dynamic Media URLs in Products and Categories</strong> 为 Yes</li>
<li>完成后，点击<strong>Save Config</strong><br><img src="/wp-content/uploads/2016/11/config-catalog-catalog-storefront.png" alt="storefront"></li>
</ol>
<h2 id="媒体文件使用静态URLs"><a href="#媒体文件使用静态URLs" class="headerlink" title="媒体文件使用静态URLs"></a><a href="#%E5%AA%92%E4%BD%93%E6%96%87%E4%BB%B6%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81urls"></a>媒体文件使用静态URLs</h2><p>默认情况下，从 media storage 向 catalog 中插入的图片，有相对的动态URLs。如果你偏好静态的URL，你可以更改设置值。</p>
<ol>
<li>在后台侧边栏，点击<strong>Stores</strong>，在<strong>Settings</strong>下选择<strong>Configuration</strong></li>
<li>在<strong>General</strong>下，选择<strong>Content Management</strong></li>
<li>展开<strong>WYSIWYGWhat Options</strong>部分<br><img src="/wp-content/uploads/2016/11/config-general-content-management-wysiwyg-options.png" alt="WYSIWYGWhat Options"></li>
<li>设置<strong>Use Static URLs for Media Content in WYSIWYG for Catalog</strong>为Yes</li>
<li>完成后，点击<strong>Save Config</strong></li>
</ol>
<p>译者注，设置为静态后，相当于将媒体地址硬编码了。原来插入图片时，编辑器会插入 markup tag，设置为静态后，直接插入了绝对地址。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>目录 URL</title>
    <url>/catalog-urls/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/catalog-urls.html">原文网址</a></em></p>
<p>您分配给商品和目录的 URL 对搜索引擎排名有重要影响。在您开始建立目录前，就了解可用的选项会比较好。</p>
<h2 id="动态-URL-Dynamic-URL"><a href="#动态-URL-Dynamic-URL" class="headerlink" title="动态 URL (Dynamic URL)"></a><a href="#%E5%8A%A8%E6%80%81-url-(dynamic-url)"></a>动态 URL (Dynamic URL)</h2><p>动态 URL 是运行过程中产生的，可能包含查询字符串，查询字符串中的变量可以是商品的ID，排序，或者发出请求的页面。客户在您的店铺搜索商品，结果页面的 URL 可能看起来是下面这样的，这就是一个动态 URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/catalogsearch/result/?q=tee+shirt</span><br></pre></td></tr></table></figure>

<h2 id="静态-URL-Static-URL"><a href="#静态-URL-Static-URL" class="headerlink" title="静态 URL (Static URL)"></a><a href="#%E9%9D%99%E6%80%81-url-(static-url)"></a>静态 URL (Static URL)</h2><p>静态 URL 是特定页面的固定地址。静态 URL 可以展现为对搜索引擎友好的格式，或者是引用商品、分类的ID索引的格式。搜索引擎友好的 URL 包含人们查找某商品时可能用到的关键字，而且您的 Web 服务器必须开启 Rewrites。文件类的的静态 URL 常用于主题中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/accessories/eyewear.html</span><br><span class="line">http://mystore.com/catalog/product/view/id/409/s/chelsea-tee-409/category/16/</span><br></pre></td></tr></table></figure>

<h2 id="URL-关键词-URL-Key"><a href="#URL-关键词-URL-Key" class="headerlink" title="URL 关键词(URL Key)"></a><a href="#url-%E5%85%B3%E9%94%AE%E8%AF%8D(url-key)"></a>URL 关键词(URL Key)</h2><p>URL 关键词是描述某商品或分类目录的静态 URL 的一部分。当您创建了某个商品或分类目录时，会自动根据名称产生一个初始的 URL 关键词。URL 关键词应该由小写的字符和连字符组成。（可以用连字符分隔单词）经过精心设计的，“搜索引擎友好”的 URL 关键词可能包含产品名称和关键词，以提高搜索引擎排名。如果修改了 URL 关键词，您可以创建一个自动重定向，让原来的 URL 关键词重定向到新的 URL 关键词上。</p>
<h2 id="HTML-后缀"><a href="#HTML-后缀" class="headerlink" title="HTML 后缀"></a><a href="#html-%E5%90%8E%E7%BC%80"></a>HTML 后缀</h2><p>您可以配置商品或目录的 URL 包含或者不包含 HTML 后缀。人们选择包含或者不包含 HTML 后缀有各种原因。一些人认为，后缀没什么用，没有后缀让搜索引擎收录更有效。不过，您的公司可能要求有后缀。</p>
<p>因为后缀是由系统配置控制的，您别自己给商品或目录的 URL 关键词里填后缀。（您要是自己加了URL里就会有两个后缀了）。不管您是使用后缀还是不用，您最好保持一致，别一会儿用一会儿不用的。下面是分类目录的 URL 带后缀和不带后缀的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/accessories/eyewear.htm</span><br><span class="line">http://mystore.com/accessories/eyewear.html</span><br><span class="line">http://mystore.com/accessories/eyewear/retro-chic-eyeglasses</span><br></pre></td></tr></table></figure>

<h2 id="分类目录的路径"><a href="#分类目录的路径" class="headerlink" title="分类目录的路径"></a><a href="#%E5%88%86%E7%B1%BB%E7%9B%AE%E5%BD%95%E7%9A%84%E8%B7%AF%E5%BE%84"></a>分类目录的路径</h2><p>您可以配置 URL 包含或不包含分类目录的路径。默认情况下，所有的分类目录和商品页面都是包含分类目录路径的。下面是同一个商品包含路径和不包含路径的 URL 例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/accessories/eyewear/retro-chic-eyeglasses</span><br><span class="line">http://mystore.com/retro-chic-eyeglasses</span><br></pre></td></tr></table></figure>

<p>为了防止搜索引擎从不同的URL索引了相同的内容，您可以选择不包含分类目录路径到 URL 中。另一种方法是使用一个规范的 meta 标签，告诉搜索引擎哪些收录哪些忽略。</p>
<h2 id="配置目录的-URL-Catalog-URLs"><a href="#配置目录的-URL-Catalog-URLs" class="headerlink" title="配置目录的 URL (Catalog URLs)"></a><a href="#%E9%85%8D%E7%BD%AE%E7%9B%AE%E5%BD%95%E7%9A%84-url-(catalog-urls)"></a>配置目录的 URL (Catalog URLs)</h2><ol>
<li><p>后台侧边栏，选择<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>左侧面板 <strong>目录</strong>(Catalog)下 &gt; <strong>目录</strong>(Catalog)</p>
</li>
<li><p>展开 <strong>搜索引擎优化</strong>(Search Engine Optimizations)部分，做如下操作：<br>a. 设置 <strong>商品 URL　后缀</strong>(Product URL Suffix) 为 “html” 或者 “htm”，不要输入点哦。<br>b. 设置 <strong>目录 URL　后缀</strong>(Category URL Suffix) 为 “html” 或者 “htm”，不要输入点哦。<br>c. 根据您的喜好设置 <strong>使用分类目录路径</strong>(Use Categories Path for Product URLs)<br>有分类目录路径的是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/furniture/living-room/microfiber-sofa-sleeper</span><br></pre></td></tr></table></figure>

<p>没有分类目录路径的是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/microfiber-sofa-sleeper</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2016/08/config-catalog-catalog-search-engine-optimization_thumb_0_0.png"></p>
</li>
<li><p>完成后，点击保存设置</p>
</li>
<li><p>刷新缓存<br><img src="/wp-content/uploads/2016/08/msg-cache-management_thumb_0_0.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>产品目录工作区</title>
    <url>/catalog-workspace/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/inventory-workspace.html">原文网址</a></em></p>
<p>产品目录表格列出了所有的产品。您可以使用<a href="/grid-controls/">表格控件</a>来排序和筛选，查找产品，对选中的产品应用操作。在这里，您可以创建新的产品或者修改已有的产品。</p>
<p><img src="/wp-content/uploads/2016/08/product-inventory-grid_thumb_0_0.png" alt="Catalog Grid"></p>
<h2 id="工作区控件"><a href="#工作区控件" class="headerlink" title="工作区控件"></a><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%8E%A7%E4%BB%B6"></a>工作区控件</h2><p>控件</p>
<p>描述</p>
<p>店铺视图(store view)</p>
<p>切换<a href="/product-scope/">产品的作用范围</a></p>
<p><strong>新增产品</strong>(Add Product)</p>
<p>点击新增产品创建一个一般产品。要选择特定的产品类型，点击向下的小三角图标，选项：一般商品(simple Prouduct)、可配置商品(Configurable Product)、组合商品(Grouped Prouduct)、虚拟商品(Virtual Prouduct)、捆绑商品(Bundle Product)、可下载商品(Downloable Product)</p>
<p>搜索(search)</p>
<p>启动基于当前过滤器的目录搜索。</p>
<p>重置过滤器(Reset Filter)</p>
<p>清除所有过滤条件</p>
<p>操作(Actions)</p>
<p>列出了所有可对选中的商品所做的操作。要对一个或一组商品做某操作，请勾选第一列的复选框。这些操作包括：删除(Delete)、修改状态(Change Status)、修改属性(Update Attributes)</p>
<p>批量操作(Mass Actions)</p>
<p>可以用来进行多选，被选中的记录前的复选框处于选中状态。有如下选项：全选(Select All)、全不选(Unselect All)</p>
<p>提交(Submit)</p>
<p>对选中的商品应用当前的操作</p>
<p>编辑(Edit)</p>
<p>打开商品进入编辑状态。您也可以点击某行的任意位置进入编辑状态</p>
<h2 id="列-Columns"><a href="#列-Columns" class="headerlink" title="列(Columns)"></a><a href="#%E5%88%97(columns)"></a>列(Columns)</h2><p>COLUMN</p>
<p>描述</p>
<p>ID</p>
<p>商品第一次创建时分配到的唯一、连续的数值</p>
<p>缩略图(Thumbnail)</p>
<p>显示主要商品的缩略图</p>
<p>名称(Name)</p>
<p>商品的名称</p>
<p>类型(Type)</p>
<p>商品类型，有如下类型：一般商品(simple Prouduct)、可配置商品(Configurable Product)、组合商品(Grouped Prouduct)、虚拟商品(Virtual Prouduct)、捆绑商品(Bundle Product)、可下载商品(Downloable Product)</p>
<p>属性集(Attribute Set)</p>
<p>商品基于的模板</p>
<p>SKU</p>
<p>分配给商品的用来管理库存的唯一标识</p>
<p>价格(Price)</p>
<p>商品的单价</p>
<p>数量(Quantity)</p>
<p>在库数量</p>
<p>可见性(Visibility)</p>
<p>表示在哪些情况下商品可见，有如下情况：单个不可见(Not Visible Individually)、目录中(Catalog)、搜索时(Search)、目录和搜索中(Catalog, Search)</p>
<p>状态(Status)</p>
<p>表示当前商品的状态，选项：可用(Enabled)、不可用(Disabled)</p>
<p>网站(Websites)</p>
<p>表示哪个商品在哪个网站上销售</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>设置内容 (Content Settings)</title>
    <url>/categories-content-settings/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/catalog/categories-content-settings.html">原文地址</a> 内容部分的设置决定 category 页面显示的额外内容。category 页面除了展示产品列表，还可以展示图像、文本和 CMS block <img src="/wp-content/uploads/2017/09/category-content.png" alt="category content"> 字段说明</p>
<p>field 字段</p>
<p>scope 作用范围</p>
<p>description 描述</p>
<p>Category Image 分类的图像</p>
<p>Store view</p>
<p>上传图像，将显示在该分类页的内容区上方位置</p>
<p>Description</p>
<p>Store view</p>
<p>输入对该分类的描述信息</p>
<p>Add CMS Block</p>
<p>Store view</p>
<p>将一个 CMS block 插入到分类页</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
      <tags>
        <tag>categories content settings</tag>
      </tags>
  </entry>
  <entry>
    <title>隐藏的类别 (Hidden Categories)</title>
    <url>/category-hidden/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/catalog/category-hidden.html">原文地址</a> 隐藏的类别有很多用途。您可能想创建额外的类别用于内部，但不对客户可见。或者，您可能想创建一个不包含在导航中的类别。</p>
<h2 id="创建隐藏的类别"><a href="#创建隐藏的类别" class="headerlink" title="创建隐藏的类别"></a><a href="#%E5%88%9B%E5%BB%BA%E9%9A%90%E8%97%8F%E7%9A%84%E7%B1%BB%E5%88%AB"></a>创建隐藏的类别</h2><ol>
<li><p>后台侧边栏，点击 <strong>Products</strong> &gt; <strong>Inventory</strong> &gt; <strong>Categories</strong></p>
</li>
<li><p>在类别树中，选中你想隐藏的类别，然后做下面的操作： a. 设置 <strong>Is Active</strong> 为 “Yes” b. 设置 <strong>Include in Menu</strong> 为 “No”</p>
</li>
<li><p>在 <strong>Display Settings</strong> 中，设置 <strong>Anchor</strong> 为 “No” 隐藏的类别是 active 状态，但不出现在顶部导航中，也不出现在分层导航中（layered navigation）</p>
</li>
<li><p>尽管类别是隐藏的，但是还是可以在它下面创建子类别的，并且使它们 active 为每个隐藏的子类别进行设置： a. 设置 <strong>Enable Category</strong> 为 “Yes” b. 在 <strong>Display Settings</strong> 中，设置 <strong>Anchor</strong> 为 “No”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">active 的类别，可以从店铺的任何位置引用他们，是可用的，但是它们不会出现在导航中，因为他们 **Include in Menu** 为 “No”</span><br></pre></td></tr></table></figure>
</li>
<li><p>完成后，点击 <strong>Save</strong></p>
</li>
</ol>
<p><em>译者注：Anchor 为 Yes 的话，子类别的产品将出现在父类别中。</em></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>根类别 (Root Categories)</title>
    <url>/category-root/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/catalog/category-root.html">原文地址</a></p>
<p>类别结构像是一棵倒置的树，根在最上面。根类别基本上是主菜单的容器。根类别有名字但没有 URL key，而且他不出现在店铺顶端的导航中。其他类别被嵌套组织在根类别下。由于根类别是类别的最高层，所以店铺一次有且仅有一个根类别处于激活状态。不过，你可以创建另外的根类别备用，或者针对不同的店铺和视图。</p>
<p><img src="/wp-content/uploads/2016/11/category-root.png" alt="New Root Category"></p>
<h2 id="第一步：创建一个根类别"><a href="#第一步：创建一个根类别" class="headerlink" title="第一步：创建一个根类别"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A0%B9%E7%B1%BB%E5%88%AB"></a>第一步：创建一个根类别</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong>，在 <strong>Inventory</strong> 下，选择 <strong>Categories</strong></li>
<li>设置 <strong>Store View</strong> 为你的更类别可以被使用的视图。</li>
<li>点击 <strong>Add Root Category</strong></li>
<li>完成以下基本信息：<br>a. 设置 <strong>Enable Category</strong> 为 Yes<br>b. 让顶部导航包含该根类别，设置 <strong>Include in Menu</strong> 为 Yes<br>c. 输入根类别的 <strong>Category Name</strong></li>
<li>点击 <strong>Save</strong> 然后继续。</li>
</ol>
<h2 id="第二步：添加子类别到新的根类别"><a href="#第二步：添加子类别到新的根类别" class="headerlink" title="第二步：添加子类别到新的根类别"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E6%B7%BB%E5%8A%A0%E5%AD%90%E7%B1%BB%E5%88%AB%E5%88%B0%E6%96%B0%E7%9A%84%E6%A0%B9%E7%B1%BB%E5%88%AB"></a>第二步：添加子类别到新的根类别</h2><ol>
<li>在左侧的类别树中，选择你上面刚刚创建的根类别</li>
<li>点击 <strong>Add Subcategory</strong></li>
<li>完成所有新类别都要填写的信息。</li>
<li>重复以上步骤，创建需要的子类别。</li>
</ol>
<p><img src="/wp-content/uploads/2016/11/category-subcategory-add.png" alt="New Root with Subcategory"></p>
<h2 id="第三步：将新的根类别应用到店铺上"><a href="#第三步：将新的根类别应用到店铺上" class="headerlink" title="第三步：将新的根类别应用到店铺上"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%B0%86%E6%96%B0%E7%9A%84%E6%A0%B9%E7%B1%BB%E5%88%AB%E5%BA%94%E7%94%A8%E5%88%B0%E5%BA%97%E9%93%BA%E4%B8%8A"></a>第三步：将新的根类别应用到店铺上</h2><ol>
<li>后台侧边栏，点击 <strong>Stores</strong>，在 <strong>Settings</strong> 下，选择 <strong>All Stores</strong></li>
<li>在 <strong>Store</strong> 下，点击 <strong>Main Website Store</strong> 链接</li>
<li>设置 <strong>Root Category</strong> 为上面创建的新的根类别。<br><img src="/wp-content/uploads/2016/11/store-information-root-category.png" alt="Assigning the New Root Category"></li>
<li>完成后，点击 <strong>Save Store</strong></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>CentOS 7 搭建 LAMP 环境安装 Magento 2</title>
    <url>/centos-7-lamp-magento-2/</url>
    <content><![CDATA[<h2 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a><a href="#%E5%AE%89%E8%A3%85-apache"></a>安装 Apache</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install httpd</span><br></pre></td></tr></table></figure>

<p>验证安装是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">httpd -v</span><br></pre></td></tr></table></figure>

<p>如果出现类似下面的信息就是安装好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Server version: Apache/2.4.6 (CentOS)</span><br><span class="line">Server built: Jul 18 2016 15:30:14</span><br></pre></td></tr></table></figure>

<p>启动 apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure>

<p>访问网站可以看到 Apache HTTP Server 测试页面 <code>Testing 123...</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<p>更改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /var/www/html&gt;</span><br><span class="line">AllowOverride All</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<h2 id="安装-php-7"><a href="#安装-php-7" class="headerlink" title="安装 php 7"></a><a href="#%E5%AE%89%E8%A3%85-php-7"></a>安装 php 7</h2><p>CentOS 7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y http://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install php70u php70u-pdo php70u-mysqlnd php70u-opcache php70u-xml php70u-mcrypt php70u-gd php70u-devel php70u-mysql php70u-intl php70u-mbstring php70u-bcmath php70u-json php70u-iconv</span><br></pre></td></tr></table></figure>

<p>重启 Apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure>

<p>验证安装是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -v</span><br></pre></td></tr></table></figure>

<p>如果看到类似下面的信息就是安装成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 7.0.13 (cli) (built: Nov 10 2016 08:44:18) ( NTS )</span><br><span class="line">Copyright (c) 1997-2016 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2016 Zend Technologies</span><br><span class="line">with Zend OPcache v7.0.13, Copyright (c) 1999-2016, by Zend Technologies</span><br></pre></td></tr></table></figure>

<p>修改 php.ini</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/php.ini</span><br></pre></td></tr></table></figure>

<p>修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date.timezone = &quot;Asia/Shanghai&quot;</span><br><span class="line">memory_limit = 1024M</span><br></pre></td></tr></table></figure>

<p>看起来就只有这一个 php.ini</p>
<h2 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a><a href="#%E5%AE%89%E8%A3%85-mysql"></a>安装 MySQL</h2><p>CentOS 7 安装 MySQL 5.7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</span><br><span class="line">yum -y localinstall mysql57-community-release-el7-7.noarch.rpm</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install mysql-community-server</span><br><span class="line">systemctl start mysqld.service</span><br></pre></td></tr></table></figure>

<p>验证是否安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br></pre></td></tr></table></figure>

<p>如果出现类似下面的信息即安装成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql Ver 14.14 Distrib 5.7.16, for Linux (x86_64) using EditLine wrapper</span><br></pre></td></tr></table></figure>

<p>取得 root 用户的临时密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>secure the installation</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>然后根据提示设置新的密码和配置</p>
<p>登录 MySQL 并创建一个数据库，授权给用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database dbname</span><br><span class="line">GRANT ALL ON dbname.* TO user@localhost IDENTIFIED BY &#x27;password&#x27;;</span><br></pre></td></tr></table></figure>

<h2 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a><a href="#%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7"></a>添加用户</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -r -m -s /bin/bash newuser</span><br><span class="line">passwd newuser</span><br></pre></td></tr></table></figure>

<p>查看 apache 所属的用户组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">egrep -i &#x27;^user^group&#x27; /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<p>一般他的用户和组都是 <code>apache</code></p>
<p>把刚刚创建的用户分配给 <code>apache</code> 组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g apache newuser</span><br></pre></td></tr></table></figure>

<p>验证下是否分配成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groups newuser</span><br></pre></td></tr></table></figure>

<p>如果是下面这样，就是成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newuser : apache</span><br></pre></td></tr></table></figure>

<p>重启一下 Apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart httpd.service</span><br></pre></td></tr></table></figure>

<h2 id="搭建-ftp-并上传"><a href="#搭建-ftp-并上传" class="headerlink" title="搭建 ftp 并上传"></a><a href="#%E6%90%AD%E5%BB%BA-ftp-%E5%B9%B6%E4%B8%8A%E4%BC%A0"></a>搭建 ftp 并上传</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install vsftpd</span><br></pre></td></tr></table></figure>

<p>修改配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/vsftpd/vsftpd.conf</span><br></pre></td></tr></table></figure>

<p>确保下面可用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">write_enable=YES</span><br><span class="line">local_umask=002</span><br></pre></td></tr></table></figure>

<p>上传 Magento 2 的文件</p>
<h2 id="安装解压缩软件"><a href="#安装解压缩软件" class="headerlink" title="安装解压缩软件"></a><a href="#%E5%AE%89%E8%A3%85%E8%A7%A3%E5%8E%8B%E7%BC%A9%E8%BD%AF%E4%BB%B6"></a>安装解压缩软件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install unzip</span><br></pre></td></tr></table></figure>

<p>以 newuser 的身份解压文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su newuser</span><br><span class="line">unzip -d dirname Magentoce2.1.2.zip</span><br></pre></td></tr></table></figure>

<p>我将网站的默认根目录改到 newuser 的 home 目录下，这样我可以通过 FTP 直接更改 newuser 的 home 目录，你也可以不这么做。</p>
<h2 id="配置虚拟主机及权限"><a href="#配置虚拟主机及权限" class="headerlink" title="配置虚拟主机及权限"></a><a href="#%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E5%8F%8A%E6%9D%83%E9%99%90"></a>配置虚拟主机及权限</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/httpd/conf.d/virtual.conf</span><br></pre></td></tr></table></figure>

<p>然后贴入代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtlHost *:80&gt;</span><br><span class="line">DocumentRoot /home/newuser/www/html</span><br><span class="line">ServerName xxx.com</span><br><span class="line">&lt;Directory &quot;/home/newuser/www/html&quot;&gt;</span><br><span class="line">Options Indexes FollowSymLinks MultiViews</span><br><span class="line">AllowOverride All</span><br><span class="line">Order allow,deny</span><br><span class="line">allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>如果你遇到 403 一定要检查 &#x2F;home&#x2F;newuser 及其子目录的的权限，确保用户组有足够的权限。</p>
<p>最后更改其他权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &lt;your Magento install dir&gt;</span><br><span class="line">find var vendor pub/static pub/media app/etc -type f -exec chmod g+w &#123;&#125; \;</span><br><span class="line">find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws &#123;&#125; \;</span><br><span class="line">chown -R :&lt;web server group&gt; .</span><br><span class="line">chmod u+x bin/magento</span><br></pre></td></tr></table></figure>

<p>连续命令的方式（功能同上）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/newuser/www/html &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w &#123;&#125; \; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws &#123;&#125; \; &amp;&amp; sudo chown -R :apache . &amp;&amp; sudo chmod u+x bin/magento</span><br></pre></td></tr></table></figure>

<p>打开网站，下一步下一步就 OK 了。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a><a href="#%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80"></a>参考地址</h2><p><a href="http://devdocs.magento.com/guides/v2.1/install-gde/prereq/prereq-overview.html">Prerequisites</a></p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>LAMP</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos 7 搭建 LNMP 环境安装 Magento</title>
    <url>/centos-7-%E6%90%AD%E5%BB%BA-lnmp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-magento/</url>
    <content><![CDATA[<p>本次使用 centos 7.4、Nginx、MySQL、PHP 7.1 搭建 LNMP 环境，安装 Magento 2.2 。 在实践过程中，发现 Magento 官方文档有微小错误，所以本文可做参考佐证。 <a href="http://devdocs.magento.com/guides/v2.2/install-gde/prereq/nginx.html">Magento 官方文档 nginx</a></p>
<h2 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a><a href="#%E5%AE%89%E8%A3%85-nginx"></a>安装 nginx</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install nginx</span><br></pre></td></tr></table></figure>

<p>安装完成后，启动 ng 设置他开机启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start nginx</span><br><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure>

<p>centos 中 ng 的配置文件一般在 <code>/etc/nginx/nginx.conf</code> 打开后查看下： <img src="/wp-content/uploads/2017/11/ng-conf.png" alt="ng 配置文件"> 访问网站，可以看到欢迎页面: <img src="/wp-content/uploads/2017/11/ng-welcome-page.png" alt="nginx welcome"></p>
<h2 id="安装-php"><a href="#安装-php" class="headerlink" title="安装 php"></a><a href="#%E5%AE%89%E8%A3%85-php"></a>安装 php</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install -y http://dl.iuscommunity.org/pub/ius/stable/CentOS/7/x86_64/ius-release-1.0-14.ius.centos7.noarch.rpm</span><br><span class="line">yum -y update</span><br></pre></td></tr></table></figure>

<p>安装 php 扩展</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install php71u php71u-pdo php71u-mysqlnd php71u-opcache php71u-xml php71u-mcrypt php71u-gd php71u-devel php71u-mysql php71u-intl php71u-mbstring php71u-bcmath php71u-json php71u-iconv php71u-soap</span><br></pre></td></tr></table></figure>

<p>安装 php-fpm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install php71u-fpm</span><br></pre></td></tr></table></figure>

<p>怎么查看内存多大</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep MemTotal /proc/meminfo</span><br></pre></td></tr></table></figure>

<h3 id="修改-php-ini"><a href="#修改-php-ini" class="headerlink" title="修改 php.ini"></a><a href="#%E4%BF%AE%E6%94%B9-php.ini"></a>修改 php.ini</h3><p>打开 <code>/etc/php.ini</code> 去掉 <code>cgi.fix_pathinfo</code> 前 <code>;</code> 并修改值为 0 并且修改以下行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">memory_limit = 2G</span><br><span class="line">max_execution_time = 1800</span><br><span class="line">zlib.output_compression = On</span><br></pre></td></tr></table></figure>

<p>注释下列行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;session.save_path = &quot;/var/lib/php/session&quot;</span><br></pre></td></tr></table></figure>

<p>保存文件。</p>
<h3 id="修改-phpfpm-的设置"><a href="#修改-phpfpm-的设置" class="headerlink" title="修改 phpfpm 的设置"></a><a href="#%E4%BF%AE%E6%94%B9-phpfpm-%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>修改 phpfpm 的设置</h3><p>打开 <code>/etc/php-fpm.d/www.conf</code> 修改以下行的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user = nginx</span><br><span class="line">group = nginx</span><br><span class="line">listen = /run/php-fpm/www.sock</span><br><span class="line">listen.owner = nginx</span><br><span class="line">listen.group = nginx</span><br><span class="line">listen.mode = 0660</span><br></pre></td></tr></table></figure>

<p>注释以下行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env[HOSTNAME] = $HOSTNAME</span><br><span class="line">env[PATH] = /usr/local/bin:/usr/bin:/bin</span><br><span class="line">env[TMP] = /tmp</span><br><span class="line">env[TMPDIR] = /tmp</span><br><span class="line">env[TEMP] = /tmp</span><br></pre></td></tr></table></figure>

<p>注意： php_value[session.save_handler] &#x3D; files php_value[session.save_path] &#x3D; &#x2F;var&#x2F;lib&#x2F;php&#x2F;fpm&#x2F;session 所以更改权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R nginx:nginx /var/lib/php/fpm/</span><br></pre></td></tr></table></figure>

<p>如果不存在则创建：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p /run/php-fpm/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R nginx:nginx /run/php-fpm/</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl enable php-fpm</span><br></pre></td></tr></table></figure>

<p>验证下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -pl  grep www.sock</span><br></pre></td></tr></table></figure>

<h2 id="测试-php-能否正常访问（可跳过）"><a href="#测试-php-能否正常访问（可跳过）" class="headerlink" title="测试 php 能否正常访问（可跳过）"></a><a href="#%E6%B5%8B%E8%AF%95-php-%E8%83%BD%E5%90%A6%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%EF%BC%88%E5%8F%AF%E8%B7%B3%E8%BF%87%EF%BC%89"></a>测试 php 能否正常访问（可跳过）</h2><p>下面测试 php 是否能正常访问 配置文件： <code>/etc/nginx/nginx.conf</code> 修改其中的 location &#x2F; 添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">location ~ .php$ &#123;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">fastcgi_pass unix:/run/php-fpm/www.sock;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">fastcgi_param PATH_INFO $fastcgi_script_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果不增加该规则，则 php 文件不会被解析而是被下载。 在 <code>/usr/share/nginx/html</code> 下增加 php.php 文件看是否可以访问</p>
<h3 id="记-502-错误-（可跳过）"><a href="#记-502-错误-（可跳过）" class="headerlink" title="记 502 错误 （可跳过）"></a><a href="#%E8%AE%B0-502-%E9%94%99%E8%AF%AF-%EF%BC%88%E5%8F%AF%E8%B7%B3%E8%BF%87%EF%BC%89"></a>记 502 错误 （可跳过）</h3><p>访问结果是 502 temporarily unavailable 查看错误日志：<code>cat /var/log/nginx/error.log</code> 错误是： <code>connect() to unix:/run/php-fpm/php-fpm.sock failed (2: No such file or directory) while connecting to upstream, client: 117.80.222.3,....</code> 发现实际上 php-fpm 的实际路径和名称是 &#x2F;run&#x2F;php-fpm&#x2F;<a href="http://www.sock/">www.sock</a> 所以重新回到上面的配置进行更改：</p>
<ul>
<li><p>要改的有：<code>/etc/php-fpm.d/www.conf</code> 中的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen = /run/php-fpm/www.sock</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown -R nginx:nginx /run/php-fpm/</span><br></pre></td></tr></table></figure>
</li>
<li><p>还有 <code>/etc/nginx/nginx.conf</code> 中的引用</p>
</li>
</ul>
<p>重启 nginx 和 php-fpm</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl restart nginx</span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure>

<h2 id="安装-MySQL-5-7"><a href="#安装-MySQL-5-7" class="headerlink" title="安装 MySQL 5.7"></a><a href="#%E5%AE%89%E8%A3%85-mysql-5.7"></a>安装 MySQL 5.7</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum localinstall https://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</span><br><span class="line">yum install mysql-community-server</span><br><span class="line">systemctl start mysqld</span><br><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure>

<p>获得临时密码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;temporary&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure>

<p>重新设置密码和进行安全设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<h3 id="创建用户和数据库"><a href="#创建用户和数据库" class="headerlink" title="创建用户和数据库"></a><a href="#%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93"></a>创建用户和数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">create database dbname;</span><br><span class="line">GRANT ALL ON dbname.* TO user@localhost IDENTIFIED BY &#x27;userpw&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h2 id="composer-方式安装-Magento-2-2"><a href="#composer-方式安装-Magento-2-2" class="headerlink" title="composer 方式安装 Magento 2.2"></a><a href="#composer-%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85-magento-2.2"></a>composer 方式安装 Magento 2.2</h2><p>安装 composer</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer  sudo php -- --install-dir=/usr/bin --filename=composer</span><br></pre></td></tr></table></figure>

<p>下载 Magento</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project --repository-url=https://repo.magento.com/ magento/project-community-edition &lt;installation directory name&gt;</span><br></pre></td></tr></table></figure>

<p>然后输入帐密开始下载 然后全部给成 nginx 用户和组 给文件权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find var generated vendor pub/static pub/media app/etc -type f -exec chmod g+w &#123;&#125; \; &amp;&amp; find var generated vendor pub/static pub/media app/etc -type d -exec chmod g+ws &#123;&#125; \; &amp;&amp; chown -R :nginx . &amp;&amp; chmod u+x bin/magento</span><br></pre></td></tr></table></figure>

<h2 id="修改-ng-配置"><a href="#修改-ng-配置" class="headerlink" title="修改 ng 配置"></a><a href="#%E4%BF%AE%E6%94%B9-ng-%E9%85%8D%E7%BD%AE"></a>修改 ng 配置</h2><p>重新修改下 ng 的配置 <code>/etc/nginx/nginx.conf</code> 使其包含网站目录下的配置文件。 新建一个 <code>/usr/share/nginx/html/magento/nginx.conf</code> 配置文件(&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;magento&#x2F; 是网站的根目录) 内容如下，仅供参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream fastcgi_backend &#123;</span><br><span class="line"></span><br><span class="line">server unix:/run/php-fpm/www.sock;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line"></span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">set $MAGE_ROOT /usr/share/nginx/html/magento;</span><br><span class="line"></span><br><span class="line">#set $MAGE_MODE developer;</span><br><span class="line"></span><br><span class="line">root $MAGE_ROOT/pub;</span><br><span class="line"></span><br><span class="line">index index.php;</span><br><span class="line">autoindex off;</span><br><span class="line">charset UTF-8;</span><br><span class="line">error_page 404 403 = /errors/404.php;</span><br><span class="line">#add_header &quot;X-UA-Compatible&quot; &quot;IE=Edge&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location ~* ^/setup($/) &#123;</span><br><span class="line">root $MAGE_ROOT;</span><br><span class="line">location ~ ^/setup/index.php &#123;</span><br><span class="line">### This fixes the problem:</span><br><span class="line">fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">################################</span><br><span class="line">fastcgi_pass fastcgi_backend;</span><br><span class="line"></span><br><span class="line">fastcgi_param PHP_FLAG &quot;session.auto_start=off \n suhosin.session.cryptua=off&quot;;</span><br><span class="line">fastcgi_param PHP_VALUE &quot;memory_limit=768M \n max_execution_time=600&quot;;</span><br><span class="line">fastcgi_read_timeout 600s;</span><br><span class="line">fastcgi_connect_timeout 600s;</span><br><span class="line"></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ ^/setup/(?!pub/). &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ ^/setup/pub/ &#123;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># PHP entry point for update application</span><br><span class="line">location ~* ^/update($/) &#123;</span><br><span class="line">root $MAGE_ROOT;</span><br><span class="line"></span><br><span class="line">location ~ ^/update/index.php &#123;</span><br><span class="line">fastcgi_split_path_info ^(/update/index.php)(/.+)$;</span><br><span class="line">fastcgi_pass fastcgi_backend;</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">fastcgi_param PATH_INFO $fastcgi_path_info;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># Deny everything but index.php</span><br><span class="line">location ~ ^/update/(?!pub/). &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ ^/update/pub/ &#123;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">try_files $uri $uri/ /index.php$is_args$args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /pub/ &#123;</span><br><span class="line">location ~ ^/pub/media/(downloadablecustomerimporttheme_customization/.*\.xml) &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line">alias $MAGE_ROOT/pub/;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line"># Uncomment the following line in production mode</span><br><span class="line"># expires max;</span><br><span class="line"></span><br><span class="line"># Remove signature of the static files that is used to overcome the browser cache</span><br><span class="line">location ~ ^/static/version &#123;</span><br><span class="line">rewrite ^/static/(version\d*/)?(.*)$ /static/$2 last;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(icojpgjpegpnggifsvgjscssswfeotttfotfwoffwoff2)$ &#123;</span><br><span class="line">add_header Cache-Control &quot;public&quot;;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">expires +1y;</span><br><span class="line"></span><br><span class="line">if (!-f $request_filename) &#123;</span><br><span class="line">rewrite ^/static/?(.*)$ /static.php?resource=$1 last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(zipgzgzipbz2csvxml)$ &#123;</span><br><span class="line">add_header Cache-Control &quot;no-store&quot;;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">expires off;</span><br><span class="line"></span><br><span class="line">if (!-f $request_filename) &#123;</span><br><span class="line">rewrite ^/static/?(.*)$ /static.php?resource=$1 last;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (!-f $request_filename) &#123;</span><br><span class="line">rewrite ^/static/?(.*)$ /static.php?resource=$1 last;</span><br><span class="line">&#125;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media/ &#123;</span><br><span class="line">try_files $uri $uri/ /get.php$is_args$args;</span><br><span class="line"></span><br><span class="line">location ~ ^/media/theme_customization/.*\.xml &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(icojpgjpegpnggifsvgjscssswfeotttfotfwoffwoff2)$ &#123;</span><br><span class="line">add_header Cache-Control &quot;public&quot;;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">expires +1y;</span><br><span class="line">try_files $uri $uri/ /get.php$is_args$args;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(zipgzgzipbz2csvxml)$ &#123;</span><br><span class="line">add_header Cache-Control &quot;no-store&quot;;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">expires off;</span><br><span class="line">try_files $uri $uri/ /get.php$is_args$args;</span><br><span class="line">&#125;</span><br><span class="line">add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media/customer/ &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media/downloadable/ &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /media/import/ &#123;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line"># PHP entry point for main application</span><br><span class="line">location ~ (indexgetstaticreport404503)\.php$ &#123;</span><br><span class="line">try_files $uri =404;</span><br><span class="line">fastcgi_pass fastcgi_backend;</span><br><span class="line">fastcgi_buffers 1024 4k;</span><br><span class="line"></span><br><span class="line">fastcgi_param PHP_FLAG &quot;session.auto_start=off \n suhosin.session.cryptua=off&quot;;</span><br><span class="line">fastcgi_param PHP_VALUE &quot;memory_limit=768M \n max_execution_time=18000&quot;;</span><br><span class="line">fastcgi_read_timeout 600s;</span><br><span class="line">fastcgi_connect_timeout 600s;</span><br><span class="line"></span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">include fastcgi_params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gzip on;</span><br><span class="line">gzip_disable &quot;msie6&quot;;</span><br><span class="line"></span><br><span class="line">gzip_comp_level 6;</span><br><span class="line">gzip_min_length 1100;</span><br><span class="line">gzip_buffers 16 8k;</span><br><span class="line">gzip_proxied any;</span><br><span class="line">gzip_types</span><br><span class="line">text/plain</span><br><span class="line">text/css</span><br><span class="line">text/js</span><br><span class="line">text/xml</span><br><span class="line">text/javascript</span><br><span class="line">application/javascript</span><br><span class="line">application/x-javascript</span><br><span class="line">application/json</span><br><span class="line">application/xml</span><br><span class="line">application/xml+rss</span><br><span class="line">image/svg+xml;</span><br><span class="line">gzip_vary on;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>检查 nginx 设置并重启：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure>

<p>现在可以进入安装页面了</p>
<h2 id="记-selinux-对文件权限的影响-（可跳过）"><a href="#记-selinux-对文件权限的影响-（可跳过）" class="headerlink" title="记 selinux 对文件权限的影响 （可跳过）"></a><a href="#%E8%AE%B0-selinux-%E5%AF%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E7%9A%84%E5%BD%B1%E5%93%8D-%EF%BC%88%E5%8F%AF%E8%B7%B3%E8%BF%87%EF%BC%89"></a>记 selinux 对文件权限的影响 （可跳过）</h2><p>SELinux(Security-Enhanced Linux) 是美国国家安全局（NSA）对于强制访问控制的实现。安装过程中发现文件权限设置正确，但仍然出现了 permission denied 错误。 查看状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sestatus</span><br></pre></td></tr></table></figure>

<p>SELinux is in ‘Enforcing’ mode。</p>
<h3 id="方案一：关闭"><a href="#方案一：关闭" class="headerlink" title="方案一：关闭"></a><a href="#%E6%96%B9%E6%A1%88%E4%B8%80%EF%BC%9A%E5%85%B3%E9%97%AD"></a>方案一：关闭</h3><p>可以关闭它，临时关闭（不用重启）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p>设置为 0 成为 permissive 模式，为 1 成为 enforcing模式 。 永久关闭： 修改 <code>/etc/selinux/config</code> 文件 将 SELINUX&#x3D;enforcing 改为 SELINUX&#x3D;disabled 重启机器即可</p>
<h3 id="方案二：设置权限"><a href="#方案二：设置权限" class="headerlink" title="方案二：设置权限"></a><a href="#%E6%96%B9%E6%A1%88%E4%BA%8C%EF%BC%9A%E8%AE%BE%E7%BD%AE%E6%9D%83%E9%99%90"></a>方案二：设置权限</h3><p>安装管理工具：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install policycoreutils-python</span><br></pre></td></tr></table></figure>

<p>切换到网站目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/usr/share/nginx/html/magento/app/etc(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/usr/share/nginx/html/magento/var(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/usr/share/nginx/html/magento/generated(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/usr/share/nginx/html/magento/pub/media(/.*)?&#x27;</span><br><span class="line">semanage fcontext -a -t httpd_sys_rw_content_t &#x27;/usr/share/nginx/html/magento/pub/static(/.*)?&#x27;</span><br><span class="line">restorecon -Rv &#x27;/usr/share/nginx/html/magento/&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="安装-ftp-（可选）"><a href="#安装-ftp-（可选）" class="headerlink" title="安装 ftp （可选）"></a><a href="#%E5%AE%89%E8%A3%85-ftp-%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"></a>安装 ftp （可选）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum -y install ftp vsftpd</span><br></pre></td></tr></table></figure>

<p>防火墙添加 ftp 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-service=ftp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>ftp 的配置文件位置为 <code>/etc/vsftpd/vsftpd.conf</code> 将 write_enable&#x3D;YES 前的 # 删除 将 local_umask&#x3D;002 前的 # 删除 service vsftpd restart</p>
<h2 id="查看-ng-和-phpfpm-的权限"><a href="#查看-ng-和-phpfpm-的权限" class="headerlink" title="查看 ng 和 phpfpm 的权限"></a><a href="#%E6%9F%A5%E7%9C%8B-ng-%E5%92%8C-phpfpm-%E7%9A%84%E6%9D%83%E9%99%90"></a>查看 ng 和 phpfpm 的权限</h2><p>nginx 本身不能处理 PHP，它只是个 web 服务器。当接收到客户端请求后，如果是 php 请求，则转发给 php 解释器处理，并把结果返回给客户端。如果是静态页面的话，nginx 自己处理，然后把结果返回给客户端。 Nginx 下 php 解释器使用最多的就是 fastcgi 。一般情况 nginx 把 php 请求转发给 fastcgi 管理进程处理，fastcgi 管理进程选择 cgi 子进程进行处理，然后把处理结果返回给 nginx。 在这个过程中就牵涉到两个用户，一个是 nginx 运行的用户，一个是 php-fpm 运行的用户。如果访问的是一个静态文件的话，则只需要 nginx 运行的用户对文件具有读权限或者读写权限。 而如果访问的是一个 php 文件的话，则首先需要 nginx 运行的用户对文件有读取权限，读取到文件后发现是一个 php 文件，则转发给 php-fpm，此时则需要 php-fpm 用户对文件具有有读权限或者读写权限。 查看 nginx 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps auxgrep nginx</span><br></pre></td></tr></table></figure>

<p>查看 php-fpm 权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps aux grep php-fpm</span><br></pre></td></tr></table></figure>

<p>参考<a href="http://www.cnblogs.com/zrp2013/p/4183546.html">脚踏实地云 nginx、php-fpm、mysql用户权限解析</a></p>
<h2 id="其他参考"><a href="#其他参考" class="headerlink" title="其他参考"></a><a href="#%E5%85%B6%E4%BB%96%E5%8F%82%E8%80%83"></a>其他参考</h2><p><a href="https://www.howtoforge.com/tutorial/how-to-install-magento-2-1-on-centos-7/">How to Install Magento 2.1 on CentOS 7</a></p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>centos</tag>
        <tag>LNMP 环境安装</tag>
        <tag>magento 2.2</tag>
        <tag>MySQL</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>chrome 打开自签名 https 网站</title>
    <url>/chrome-%E6%89%93%E5%BC%80%E8%87%AA%E7%AD%BE%E5%90%8D-https-%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>在当前页面用键盘输入 thisisunsafe ，不是在地址栏输入，就直接敲键盘，页面即会自动刷新进入网页。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>chrome 报错 Not allowed to load local resource （未解决）</title>
    <url>/chrome-%E6%8A%A5%E9%94%99-not-allowed-to-load-local-resource/</url>
    <content><![CDATA[<p>现代浏览器出于安全方面的考虑，不允许网站访问本地文件。但是有时候我们调试需要访问本地文件。 解决方法是通过给 chrome 加运行参数来禁用浏览器的安全设置。 在 chrome 快捷方式上右击，进入属性，找到 “目标” (target) ，这里面通常是 chrome 程序的位置信息，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot;</span><br></pre></td></tr></table></figure>

<p>这样我们在他的末尾加上运行参数，变成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --args --disable-web-security --allow-file-access-from-files</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2018/01/chrome-args.png" alt="chrome 加运行参数"> 然后通过该快捷方式启动浏览器，会有如下提示： <img src="/wp-content/uploads/2018/01/chrome-tips.png" alt="chrome 安全性提示"> 如果没有提示，可以关闭所有 chrome 然后重新开一次。</p>
<p>本来以为问题解决了，但是居然有时灵有时不灵。。</p>
<p>然后查到资料说较高的版本还需要配置一个参数 <code>--user-data-dir</code></p>
<p>这样就变成了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --disable-web-security --allow-file-access-from-files --user-data-dir=C:\MyChromeDevUserData</span><br></pre></td></tr></table></figure>

<p><code>C:\MyChromeDevUserData</code> 是我们自己创建的目录。重新打开 chrome 后，原来收藏的链接和历史记录都不见了，相当于另一个用户。</p>
<p>但是，很悲催的是，尽管不再报错 <code>Not allowed to load local resource</code> 但对于本地文件的访问依然被 cancle 了。这样还是无法测试。。。</p>
<p>可能和协议限制有关。。 chrome 版本是 63.0.3239.132（正式版本） （32 位）</p>
<p>暂时先这样把。有解决了的童鞋，感谢给我留言哦！</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>如何设置 Magento2 的 cron job</title>
    <url>/config-cron/</url>
    <content><![CDATA[<p><em>参考文档：<a href="http://devdocs.magento.com/guides/v2.0/config-guide/cli/config-cli-subcommands-cron.html">Configure and run cron</a></em></p>
<h2 id="cron-job-是什么"><a href="#cron-job-是什么" class="headerlink" title="cron job 是什么"></a><a href="#cron-job-%E6%98%AF%E4%BB%80%E4%B9%88"></a>cron job 是什么</h2><p>Magento 的一些功能要正常运行就必须要用到 cron job，它是一系列的定时任务，这些任务包括：</p>
<ul>
<li>Catalog price rules</li>
<li>Newsletters</li>
<li>Generating Google sitemaps</li>
<li>Customer Alerts&#x2F;Notifications (product price change, product back in stock)</li>
<li>Reindexing</li>
<li>Private sales (Magento EE only)</li>
<li>Automatic updating of currency rates</li>
<li>All Magento e-mails (including order confirmation and transactional)</li>
</ul>
<p>官方建议以 Magento 文件所有者的身份运行 cron ，不要用root ，也不要用web server user （一般指 www-data）</p>
<p>UNIX 系统的计划任务是由<code>crontab</code>来执行的，通过他可以在固定的时间间隔执行指定的系统指令或shell script，当然包括 php 脚本。crontab 是一个记录某时刻执行某命令的文件。每个系统用户都有他自己的 crontab，crontab 会以他自己的所有者的身份运行命令。所以官方推荐你用 magento 文件所有者的身份运行cron，就是因为需要以该身份运行 magento 命令。</p>
<p>cron job 是依赖 crontab 去完成功能的，cron job 是 magento 2的提供的定时任务，crontab 是系统的功能，强烈建议不要用 windows 系统作为生产环境，不然这一块会很麻烦的。</p>
<h2 id="如何配置-cron-job"><a href="#如何配置-cron-job" class="headerlink" title="如何配置 cron job"></a><a href="#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE-cron-job"></a>如何配置 cron job</h2><ol>
<li><p>找到 php 的目录查看php 的目录，如下命令即可：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">which php</span><br></pre></td></tr></table></figure>

<p>返回结果例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/bin/php</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 cron job我们先以 magento 文件所有者的身份登陆进去，博主是 ThankIT</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>第一次要你选择编辑器，照着指示做就成。然后我们会编辑一个文件，添加如下类似的代码在文件末尾，最后保存一下退出。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento cron:run  grep -v &quot;Ran jobs by schedule&quot; &gt;&gt; &lt;magento install dir&gt;/var/log/magento.cron.log</span><br><span class="line">* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/update/cron.php &gt;&gt; &lt;magento install dir&gt;/var/log/update.cron.log</span><br><span class="line">* * * * * &lt;path to php binary&gt; &lt;magento install dir&gt;/bin/magento setup:cron:run &gt;&gt; &lt;magento install dir&gt;/var/log/setup.cron.log</span><br></pre></td></tr></table></figure>

<p><code>grep -v &quot;Ran jobs by schedule&quot;</code>用来从日志中筛选出相关记录，方便查看。<br><code>* * * * *</code> 表示每分钟，官方推荐时间间隔。<br>第一条命令(<code>magento cron:run</code>)负责重建索引，自动发邮件，生成sitemap 等日常工作，剩下两个是Component Manager 和系统升级使用的。<br>博主的crontab 是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * /usr/bin/php /home/ThankIT/www/demo/M210/bin/magento cron:run  grep -v &quot;Ran jobs by schedule&quot; &gt;&gt; /home/ThankIT/www/demo/M210/var/log/magento.cron.log</span><br><span class="line">* * * * * /usr/bin/php /home/ThankIT/www/demo/M210/update/cron.php &gt;&gt; /home/ThankIT/www/demo/M210/var/log/update.cron.log</span><br><span class="line">* * * * * /usr/bin/php /home/ThankIT/www/demo/M210/bin/magento setup:cron:run &gt;&gt; /var/www/magento2/var/log/setup.cron.log</span><br></pre></td></tr></table></figure>
</li>
<li><p>怎么判断 cron job 成功运行了<br>判断方法应该有很多吧，其中博主认为比较简单的是去查看一下数据库的<code>cron_schedule</code>表，如果有记录说明成功了。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>cron</tag>
      </tags>
  </entry>
  <entry>
    <title>Varnish 初体验</title>
    <url>/config-varnish-magento/</url>
    <content><![CDATA[<p><a href="https://varnish-cache.org/index.html">Varnish</a> 是一款高性能的开源 HTTP 加速器，反向代理缓存，挪威最大的在线报纸 Verdens Gang 使用 3 台 Varnish 代替了原来的 12 台 Squid，性能比以前更好。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="#%E5%AE%89%E8%A3%85"></a>安装</h2><p>以 ubuntu 为例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install varnish</span><br></pre></td></tr></table></figure>

<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service varnish start</span><br></pre></td></tr></table></figure>

<p>访问网站：以我安装 varnish 的虚拟机为例，访问 <code>192.168.0.215:6081</code> 出现如下提示： <img src="/wp-content/uploads/2017/10/varnish6081.png"> 默认情况下 varnish 会请求他所在服务器的 8080 端口。 而我虚拟机上实际用的是 80 端口。所以 503 错误。 修改配置 <code>etc/varnish/default.vcl</code> 打开该文件会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcl 4.0;</span><br><span class="line"></span><br><span class="line">backend default &#123;</span><br><span class="line">    .host = &quot;127.0.0.1&quot;;</span><br><span class="line">    .port = &quot;8080&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我将端口改为 80 后保存，然后 <code>service varnish reload</code> 然后再刷新这下就正常了。跟访问 80 端口一样。</p>
<h2 id="初步试验"><a href="#初步试验" class="headerlink" title="初步试验"></a><a href="#%E5%88%9D%E6%AD%A5%E8%AF%95%E9%AA%8C"></a>初步试验</h2><p>在安装 varnish 之前，我已经建好了 Magento 2 的一个站点，80 访问正常。 下面用 6081 端口访问，看看有什么问题，记录下来，可能对后面有参照作用。 以下是我发现的问题： 首页正常，但页面中所有的链接仍然会被跳转回 80 端口。就是说尽管我请求的页面是 6081 但是页面中的其他链接仍然是 80 端口的请求。 6081 地址的后台是 404 woff, woff2,ttf 字体文件状态是 canceled 对比请求的头部信息变化： 6081 请求 <img src="/wp-content/uploads/2017/10/6081response-header.png" alt="6081"> 80 请求 <img src="/wp-content/uploads/2017/10/80responseheader.png" alt="80"> 至少可以发现请求头中出现了 <code>X-Varnish</code></p>
<h2 id="让-Varnish-使用-80"><a href="#让-Varnish-使用-80" class="headerlink" title="让 Varnish 使用 80"></a><a href="#%E8%AE%A9-varnish-%E4%BD%BF%E7%94%A8-80"></a>让 Varnish 使用 80</h2><p>先让 varnish 停下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service varnish stop</span><br></pre></td></tr></table></figure>

<p>我虚拟机是 ubuntu 16.04 （检查版本：lsb_release -a） 其他版本的文件位置可能有变化，请参考文尾的参考链接。 修改 <code>/etc/default/varnish</code> 然后修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DAEMON_OPTS=&quot;-a :6081 \</span><br><span class="line">             -T localhost:6082 \</span><br><span class="line">             -f /etc/varnish/default.vcl \</span><br><span class="line">             -S /etc/varnish/secret \</span><br><span class="line">             -s malloc,256m&quot;</span><br></pre></td></tr></table></figure>

<p>为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DAEMON_OPTS=&quot;-a :80 \</span><br><span class="line">             -T localhost:6082 \</span><br><span class="line">             -f /etc/varnish/default.vcl \</span><br><span class="line">             -S /etc/varnish/secret \</span><br><span class="line">             -s malloc,256m&quot;</span><br></pre></td></tr></table></figure>

<p>完成后启动 varnish</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service varnish start</span><br></pre></td></tr></table></figure>

<p>现在我们更改 <code>/etc/varnish/default.vcl</code> 让他后端去找 8080 端口，所以将</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcl 4.0;</span><br><span class="line"></span><br><span class="line">backend default &#123;</span><br><span class="line">    .host = &quot;127.0.0.1&quot;;</span><br><span class="line">    .port = &quot;80&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>改回：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vcl 4.0;</span><br><span class="line"></span><br><span class="line">backend default &#123;</span><br><span class="line">    .host = &quot;127.0.0.1&quot;;</span><br><span class="line">    .port = &quot;8080&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重新载入配置文件 <code>service varnish reload</code> 下面让 Apache 把 80 端口让出来，使用 8080 端口。 首先是 <code>/etc/apache2/ports.conf</code> 将<code>Listen 80</code> 改为 <code>Listen 8080</code> 然后虚拟目录的配置 <code>/etc/apache2/sites-available/000-default.conf</code> <code>&lt;VirtualHost *:80&gt;</code> 80 改为 * 或者 8080 重启 Apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<p>然后发现访问 80 的时候提示错误 <code>ERR_CONNECTION_REFUSED</code> 查看端口情况 <code>netstat -lntp</code> 发现真的没有监听 80 端口 然后使用命令:<code>service varnish status</code> 发现他的配置文件是 <code>/lib/systemd/system/varnish.service</code> 下面打开该文件改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=/usr/sbin/varnishd -a :80 -T localhost:6082 -f /etc/varnish/default.vcl -S /etc/varnish/secret -s malloc,256m</span><br></pre></td></tr></table></figure>

<p>保存后 <code>systemctl daemon-reload</code> 然后重新启动下 varnish 这下终于可以愉快的玩耍了。</p>
<h2 id="配置-Magneto"><a href="#配置-Magneto" class="headerlink" title="配置 Magneto"></a><a href="#%E9%85%8D%E7%BD%AE-magneto"></a>配置 Magneto</h2><p>可以通过命令行或者进入后台进行配置，参考文尾的参考链接。 登录管理后台后，进入 <strong>STORES &gt; Configuration &gt; ADVANCED &gt; System &gt; Full Page Cache.</strong> 然后看图： <img src="/wp-content/uploads/2017/10/magento2varnish-configuration.png" alt="Configure Magento to use Varnish"> 刷新缓存，体验飞起来的速度。 φ(゜▽゜*) 首页加载时间如下图，留着以后参考： <img src="/wp-content/uploads/2017/10/homepagetime.png"></p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p>如果遇到问题，可以参考以下文档，顺藤摸瓜。 <a href="https://varnish-cache.org/docs/5.0/tutorial/putting_varnish_on_port_80.html">Put Varnish on port 80</a> <a href="http://devdocs.magento.com/guides/v2.0/config-guide/varnish/config-varnish-magento.html">Configure Magento to use Varnish</a></p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>magento2</tag>
        <tag>varnish 安装和配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Configurable Product Image In Cart</title>
    <url>/configurable-product-image-in-cart/</url>
    <content><![CDATA[<p>We see parent product thumbnail in cart by default. Actually this can be configured. Go to Configuration &gt; Sales &gt; Checkout &gt; Configurable Product Image , and set “Parent Product Thumbnail” to be “Product Thumbnail Itself”. Save it and flush cache. <img src="/wp-content/uploads/2019/06/product_image_itself.png"> <img src="/wp-content/uploads/2019/06/product_image_itself_cart.png"></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>基本设置</title>
    <url>/configuration-basic/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/configuration/configuration-basic.html">原文网址</a></em></p>
<p>这部分介绍店铺的后台管理和基本设置。你将了解以下概念：店铺层级(store hierarchy)和配置作用域(configuration scope)，并建立符合行业标准和要求的最佳实践。</p>
<p><a href="/admin/">店铺 Admin</a><br>您的店铺 Admin 是受密码保护的后台。在后台您可以设置产品，进行促销，管理订单以及执行其他管理任务。</p>
<p><a href="/store-details/">店铺详情</a><br>在这里，您可以输入店铺的基本信息，包括商店名称和地址，联系信息，语言和货币。</p>
<p><a href="/storefront-branding/">店面品牌</a><br>首先要做的事情里有一件事就是替换店面头部的 logo，上传 favicon 图标（就是浏览器里每个网站标题前面的图标）您还将了解怎么修改页脚的版权声明，还有如何使用店铺的演示声明（告诉别人，店铺没正式开张呢。）</p>
<p><a href="/websites-stores-views/">网站(Websites), 店铺(Stores) 和 视图(Views)</a><br>Magento 的安装可以包括归一个 Admin 管理的多个网站，多个店铺，以及不同语言的视图。</p>
<p>行业规范<br>（该部分还未翻译）<br>商家有责任遵守行业规范，以营造安全的环境，并遵守当地的法律规定和电商最佳实践。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Configuration best practices</title>
    <url>/configuration-best-practices/</url>
    <content><![CDATA[<p>Magento 2 provides many settings and tools that you can use to improve response time on the pages as well as provide higher throughput. <a href="https://devdocs.magento.com/guides/v2.4/performance-best-practices/configuration.html">Configuration best practices</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>配置范围</title>
    <url>/configuration-scope/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/configuration/scope.html">原文地址</a></em><br>Magento 的安装有能力维护多个独立的网站(websites)，店铺(store)和店铺视图(store views)。如果您安装了多层级的网站、店铺和店铺视图，您可以选择将设置应用到上述哪个网站、店铺或是视图上。对于有权限限制的管理员用户，他只可以看到授权内的列表。</p>
<p>管理页面左上角的店铺视图选择器(Store view chooser)决定了您当前设置的作用范围。默认情况下，作用范围是默认配置(Default Config)</p>
<p>除非您的店铺运行在<a href="/store-mode-single/">单店模式</a>，不然每个设置字段下面浅灰色的小字表示了该字段的作用范围。如果您有多个网站、店铺或店铺视图，您应该每次都指定您设置作用的店铺视图。</p>
<p><img src="/wp-content/uploads/2016/08/store-view-control_thumb_0_0.png"></p>
<p>设置项是[Store View]范围的，那么每个店铺视图的该设置项可以被设置成不同值。<br>不过有些设置是全局的[global]，比如邮编，因为整个系统都使用了同一个设置值。<br>[website]范围应用于网站级别，包括所有的店铺视图。</p>
<p>除了配置设置有范围，商品，目录，属性等也可以设置作用范围。了解更多，请查阅：<a href="/product-scope/">产品作用范围</a></p>
<h2 id="设置配置范围"><a href="#设置配置范围" class="headerlink" title="设置配置范围"></a><a href="#%E8%AE%BE%E7%BD%AE%E9%85%8D%E7%BD%AE%E8%8C%83%E5%9B%B4"></a>设置配置范围</h2><p>在让设置作用于特定的网站、店铺或店铺视图前，做如下操作：</p>
<ol>
<li>后台侧边栏，做以下操作：<ul>
<li>对于大部分的设置，点击<strong>店铺</strong>(Stores)&gt;<strong>设置</strong>(Settings)&gt;<strong>配置</strong>(Configuration)</li>
<li>关于设计部分的设置，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong>(Design) &gt; <strong>配置</strong> (Configuration)在表格中选择您要应用的店铺视图</li>
</ul>
</li>
<li>去往要修改的设置，做如下操作：<br>a. 在左上角，选择您设置要作用的视图(store view)，如果弹出要您确认切换作用域的弹出框，点击OK<br>每个设置项后面会出现复选框，也可能出现更多的附加字段。<br>b. 取消使用系统值(Use System value)复选框前的勾，然后修改作用于该视图的设置值<br>c. 重复上述过程完成对其他字段设置值的修改</li>
<li>完成后，点击保存设置(Save Config)</li>
</ol>
<p><img src="/wp-content/uploads/2016/08/store-view-french_thumb_0_0.png"></p>
<h2 id="设置的范围"><a href="#设置的范围" class="headerlink" title="设置的范围"></a><a href="#%E8%AE%BE%E7%BD%AE%E7%9A%84%E8%8C%83%E5%9B%B4"></a>设置的范围</h2><p>范围</p>
<p>描述</p>
<p>店铺视图(Store view)</p>
<p>设置只会作用在店铺视图层，店铺视图经常用来展示不同语言的同一店铺</p>
<p>网站(Website)</p>
<p>设置会作用在网站层级</p>
<p>全局(Global)</p>
<p>设置会作用于整个系统</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>联系我们</title>
    <url>/contact-us/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/contact-us.html">原文地址</a></em></p>
<p>店铺页面底部的联系我们(Contact Us)链接是客户和您保持联系的简易方式。客户可以通过填写表单来给您发送消息。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-footer-contact-us_thumb_0_0.png"></p>
<p>表单提交后，客户会看到一个感谢信息。该表单包含在<strong>contact-us-info</strong> block 中，您很容易就可以修改他。<br><img src="/wp-content/uploads/2016/08/storefront-contact-us_thumb_0_0.png"></p>
<h2 id="配置-联系我们"><a href="#配置-联系我们" class="headerlink" title="配置 联系我们"></a><a href="#%E9%85%8D%E7%BD%AE-%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>配置 联系我们</h2><ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>常规</strong>(General)&gt; <strong>联系人</strong>(Contacts)</p>
</li>
<li><p>展开 <strong>联系我们</strong>(Contact Us)，有必要的话，请设置<strong>启用联系我们</strong>(Enable Contact Us)为“是”  </p>
<p><img src="/wp-content/uploads/2016/08/config-general-contacts-contact-us_thumb_0_0.png"></p>
</li>
<li><p>展开<strong>邮箱选项</strong>(Email Options)做如下操作：  </p>
<p><img src="/wp-content/uploads/2016/08/config-general-contacts-email-options_thumb_0_0.png"></p>
<p>a. 在<strong>发送电子邮件至</strong>(Send Emails to)字段中，输入联系我们表单将发送邮件的电子邮件地址<br>b. 设置<strong>电子邮件发件人</strong>(Email Sender)。例如：自定义电子邮件<br>c. 设置联系我们表单发送邮件用到的<strong>电子邮件模板</strong>(Email Template)</p>
</li>
<li><p>完成后，点击保存设置</p>
</li>
</ol>
<h2 id="定制联系我的表单"><a href="#定制联系我的表单" class="headerlink" title="定制联系我的表单"></a><a href="#%E5%AE%9A%E5%88%B6%E8%81%94%E7%B3%BB%E6%88%91%E7%9A%84%E8%A1%A8%E5%8D%95"></a>定制联系我的表单</h2><ol>
<li>后台侧边栏，点击<strong>内容</strong>(Content) &gt; <strong>元素</strong>(Elements) &gt; <strong>页块</strong>(Blocks)</li>
<li>找到 <strong>Contact Us Info</strong> block ，打开编辑<br><img src="/wp-content/uploads/2016/08/content-block-contact-us-info_thumb_0_0.png" alt="Contact Us Info"></li>
<li>下拉到联系部分，进行修改<ul>
<li>使用编辑工具格式化文字，加入图片和链接</li>
<li>点击<strong>Show &#x2F; Hide Editor</strong> 直接操作HTML<br><img src="/wp-content/uploads/2016/08/content-block-contact-us-content_thumb_0_0.png" alt="Contact Us Content"></li>
</ul>
</li>
<li>完成后，点击保存(Save Block)</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Convert .po to .mo</title>
    <url>/convert-po-to-mo/</url>
    <content><![CDATA[<p><a href="https://po2mo.net/">Online Tool : Convert .po to .mo</a></p>
]]></content>
      <categories>
        <category>Wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>cordova 插件开发</title>
    <url>/cordova-plugin-development-exercise/</url>
    <content><![CDATA[<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a><a href="#%E9%A2%98%E5%A4%96%E8%AF%9D"></a>题外话</h2><p>为什么 Magento 主题的博客研究起 cordova 来了？因为博主希望解决掉商城的全平台问题。 cordova 是贡献给 Apache 后的开源项目，Phonegap 的核心引擎。cordova 通过 Webview 提供 js 和原生代码之间的桥接，这样就可以利用 JS 来调用原生的代码，实现相应的功能，比如调用相机，地理位置什么的。（这样的介绍好像没什么卵用，总之一句话，cordova 是做 APP 跨平台开发的） 博主 14 年的时候用 phonegap 做过一个 APP，当时前端框架用的 jquery mobile。在流畅性上，还是不太理想，但是这个锅个人认为大部分要由 jquery mobile 来背，（：D 当然还有博主水平不够的原因）。最后，权衡开发成本和流畅性，选择混合开发还是划算的。 cordova 是混合开发中非常成熟的方案了。虽然一直在讲 webview 的渲染速度慢，但是近些年手机的运行速度也大大提升了。博主最近下载了一款基于 cordova 的应用，体验了一下，速度是很可以的。 因为 cordova 的插件机制，可以让你调用原生去做事，所以这个速度的优化空间是比较大的。况且，我们还可以在原生中嵌入 cordova 的 webviews ，让他们互通。在某些场景下使用原生的，另一些场景下使用 cordova ，想想还是很吸引人的。 在技术的选择上，常常有太多的争论，本文且不讨论这些，重点记录 cordova Android 插件开发的一个入门 exercise 。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a><a href="#%E5%89%8D%E6%8F%90"></a>前提</h2><p>安装了： cordova Node.js Android SDK 然后通过 npm 安装 plugman</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g plugman</span><br><span class="line">plugman --version</span><br><span class="line">1.4.1</span><br></pre></td></tr></table></figure>

<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a><a href="#%E7%9B%AE%E6%A0%87"></a>目标</h2><p>练习的目的主要是熟悉插件开发的过程。 插件将提供接受一个字符型参数的 <code>echo</code> 方法，然后在成功调用后通过 <code>success</code> 方法返回传入的字符。</p>
<h2 id="创建插件"><a href="#创建插件" class="headerlink" title="创建插件"></a><a href="#%E5%88%9B%E5%BB%BA%E6%8F%92%E4%BB%B6"></a>创建插件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugman create --name ModusEcho --plugin_id com-moduscreate-plugins-echo --plugin_version 0.0.1 --path modusechoplugin</span><br><span class="line"></span><br><span class="line">ls -l modusechoplugin/ModusEcho</span><br><span class="line"></span><br><span class="line">-rw-r--r--  1 simon  staff  372 Feb  3 12:32 plugin.xml</span><br><span class="line">drwxr-xr-x  2 simon  staff   68 Feb  3 12:32 src</span><br><span class="line">drwxr-xr-x  3 simon  staff  102 Feb  3 12:32 www</span><br></pre></td></tr></table></figure>

<p>这样我们就在当前目录下创建了 <code>modusechoplugin/ModusEcho</code> 内部结构如上面所示。 <code>plugin.xml</code> 看起来是下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="line">&lt;plugin id=&quot;com-moduscreate-plugins-echo&quot; version=&quot;0.0.1&quot; xmlns=&quot;http://apache.org/cordova/ns/plugins/1.0&quot; xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">    &lt;name&gt;ModusEcho&lt;/name&gt;</span><br><span class="line">    &lt;js-module name=&quot;ModusEcho&quot; src=&quot;www/ModusEcho.js&quot;&gt;</span><br><span class="line">        &lt;clobbers target=&quot;cordova.plugins.ModusEcho&quot; /&gt;</span><br><span class="line">    &lt;/js-module&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>关于 <code>plugin.xml</code> ，参考 <a href="https://cordova.apache.org/docs/en/latest/plugin_ref/spec.html">Plugin.xml</a>，<code>id</code>、<code>version</code>、<code>name</code> 都是命令中指定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;clobbers target=&quot;cordova.plugins.ModusEcho&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p>这里指定模块将被 export 到 <code>window.cordova.plugins.ModusEcho</code> 这里我们将他改成<code>modusecho</code>，这样就可以通过 <code>modusecho</code> 或者 <code>window.modusecho</code> 访问了，变成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span><br><span class="line">&lt;plugin id=&quot;com-moduscreate-plugins-echo&quot; version=&quot;0.0.1&quot; </span><br><span class="line">xmlns=&quot;http://apache.org/cordova/ns/plugins/1.0&quot; </span><br><span class="line">xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</span><br><span class="line">  &lt;name&gt;ModusEcho&lt;/name&gt;</span><br><span class="line">  &lt;js-module name=&quot;ModusEcho&quot; src=&quot;www/ModusEcho.js&quot;&gt;</span><br><span class="line">    &lt;clobbers target=&quot;modusecho&quot; /&gt;</span><br><span class="line">  &lt;/js-module&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>然后来看 <code>www/ModusEcho.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"></span><br><span class="line">exports.coolMethod = function(arg0, success, error) &#123;</span><br><span class="line">    exec(success, error, &quot;ModusEcho&quot;, &quot;coolMethod&quot;, [arg0]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们将他改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"></span><br><span class="line">exports.echo = function(arg0, success, error) &#123;</span><br><span class="line">  exec(success, error, &quot;ModusEcho&quot;, &quot;echo&quot;, [arg0]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>The JavaScript interface provides the front-facing interface, making it perhaps the most important part of the plugin. You can structure your plugin’s JavaScript however you like, but you need to call cordova.exec to communicate with the native platform。 就是说这里通过 Cordova bridge 的 <code>exec</code> 方法来调用原生的代码。</p>
<h2 id="创建-cordova-项目做测试用"><a href="#创建-cordova-项目做测试用" class="headerlink" title="创建 cordova 项目做测试用"></a><a href="#%E5%88%9B%E5%BB%BA-cordova-%E9%A1%B9%E7%9B%AE%E5%81%9A%E6%B5%8B%E8%AF%95%E7%94%A8"></a>创建 cordova 项目做测试用</h2><p>这里我们先创建一个 cordova 项目来测试一下。(注意不要在当前创建的插件目录下)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova create testapp com.moduscreate.testapp TestApp</span><br></pre></td></tr></table></figure>

<p>上面的语法是<code>cordova create path [id [name [config]]] [options]</code>，参考 <a href="https://cordova.apache.org/docs/en/latest/reference/cordova-cli/index.html">Cordova Command-line-interface (CLI) Reference</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd testapp</span><br><span class="line">cordova platform add android</span><br><span class="line">cordova plugin add &lt;path/to/plugin&gt;</span><br></pre></td></tr></table></figure>

<p>eg：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova plugin add ../modusechoplugin/ModusEcho/</span><br></pre></td></tr></table></figure>

<p>博主的目录是： dir&#x2F;testapp cordova 项目 dir&#x2F;modusechoplugin&#x2F;ModusEcho 插件项目 然后我们得到一个错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error: Invalid Plugin! ..\..\cordova\modusechoplugin\ModusEcho needs a valid package.json</span><br></pre></td></tr></table></figure>

<p>因为插件没有 package.json 下面切换到插件目录（存在 plugin.xml 的目录）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugman createpackagejson .</span><br></pre></td></tr></table></figure>

<p>然后就生成 package.json 了，这时候再回到 cordova 项目目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova plugin add ../modusechoplugin/ModusEcho/</span><br></pre></td></tr></table></figure>

<p>这次就成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova run android</span><br></pre></td></tr></table></figure>

<p>启用了模拟器，然后就看到经典的画面了。 现在我们可以发现 testapp&#x2F;plugins&#x2F;com-moduscreate-plugin-echo 下面有我们的插件了。</p>
<h2 id="测试不使用-cordova-exec"><a href="#测试不使用-cordova-exec" class="headerlink" title="测试不使用 cordova exec"></a><a href="#%E6%B5%8B%E8%AF%95%E4%B8%8D%E4%BD%BF%E7%94%A8-cordova-exec"></a>测试不使用 cordova exec</h2><p>上面我们的 <code>testapp/plugins/com-moduscreate-plugin-echo/www/ModusEcho.js</code> 是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"></span><br><span class="line">exports.coolMethod = function(arg0, success, error) &#123;</span><br><span class="line">  exec(success, error, &quot;ModusEcho&quot;, &quot;coolMethod&quot;, [arg0]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>先把他注释掉，然后改成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"></span><br><span class="line">// exports.echo = function(arg0, success, error) &#123;</span><br><span class="line">//     exec(success, error, &quot;ModusEcho&quot;, &quot;echo&quot;, [arg0]);</span><br><span class="line">// &#125;;</span><br><span class="line">exports.echojs = function(arg0, success, error) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">  success(arg0);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后修改 <code>testapp\www\js\index.js</code> 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onDeviceReady: function() &#123;</span><br><span class="line">        this.receivedEvent(&#x27;deviceready&#x27;);</span><br><span class="line">        modusecho.echojs(</span><br><span class="line">        &#x27;Hello Plugin&#x27;,</span><br><span class="line">        function(msg) &#123;</span><br><span class="line">          document.getElementsByTagName(&#x27;h1&#x27;)[0].innerHTML = msg;</span><br><span class="line">        &#125;,</span><br><span class="line">        function(err) &#123;</span><br><span class="line">          document.getElementsByTagName(&#x27;h1&#x27;)[0].innerHTML = err;</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova run android</span><br></pre></td></tr></table></figure>

<p>理论上原来的 Apache Cordova 应该被换成 Hello Plugin 也就是说，这里不使用 cordova 的 exec 也完全没有问题，重点是 export 了该方法。 但是实际上由于此处是直接在 cordova 中改写插件，<code>testapp\platforms\android\assets\www\plugins\com-moduscreate-plugins-echo\www\ModusEcho.js</code> 并没有发生变化，这是 cordova 自动生成的一个 js ，并且比原始的 js 多了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova.define(&quot;com-moduscreate-plugins-echo.ModusEcho&quot;, function(require, exports, module) &#123;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>所以，直接改写不太 ok ，目前还没找到相关的命令，此处还是更改原来的插件代码，然后在 cordova 项目下先移除，再次添加，这次就成功了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova plugin rm com-moduscreate-plugins-echo</span><br><span class="line">cordova plugin add ../modusechoplugin/ModusEcho/</span><br></pre></td></tr></table></figure>

<h2 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a><a href="#module.exports"></a>module.exports</h2><p>上面 <code>www/ModusEcho.js</code> 是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exports.echojs = function(arg0, success, error) &#123;</span><br><span class="line">  // Do something</span><br><span class="line">  success(arg0);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如果写成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    Base: &#123;</span><br><span class="line">        hello: function(arg0, success, error) &#123;</span><br><span class="line">            // Do something</span><br><span class="line">            success(arg0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>那么我们就该这样引用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">modusecho.Base.hello(</span><br><span class="line">        &#x27;Hello world&#x27;,</span><br><span class="line">        function(msg) &#123;</span><br><span class="line">          document.getElementsByTagName(&#x27;h1&#x27;)[0].innerHTML = msg;</span><br><span class="line">        &#125;,</span><br><span class="line">        function(err) &#123;</span><br><span class="line">          document.getElementsByTagName(&#x27;h1&#x27;)[0].innerHTML = err;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h2 id="cordova-exec"><a href="#cordova-exec" class="headerlink" title="cordova exec"></a><a href="#cordova-exec"></a>cordova exec</h2><p>这里还是将 <code>www/ModusEcho.js</code> 改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var exec = require(&#x27;cordova/exec&#x27;);</span><br><span class="line"></span><br><span class="line">exports.echo = function(arg0, success, error) &#123;</span><br><span class="line">  exec(success, error, &quot;ModusEcho&quot;, &quot;echo&quot;, [arg0]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>cordova 的 exec 接收 5 个参数 <code>function(winParam) &#123;&#125;</code>: A success callback function. Assuming your exec call completes successfully, this function executes along with any parameters you pass to it. <code>function(error) &#123;&#125;</code>: An error callback function. If the operation does not complete successfully, this function executes with an optional error parameter. <code>&quot;service&quot;</code>: The service name to call on the native side. This corresponds to a native class, for which more information is available in the native guides listed below. <code>&quot;action&quot;</code>: The action name to call on the native side. This generally corresponds to the native class method. See the native guides listed below. <code>[/* arguments */]</code>: An array of arguments to pass into the native environment. 现在个 plugin.xml 加上如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;platform name=&quot;android&quot;&gt;</span><br><span class="line">  &lt;config-file target=&quot;config.xml&quot; parent=&quot;/*&quot;&gt;</span><br><span class="line">    &lt;feature name=&quot;ModusEcho&quot;&gt;</span><br><span class="line">      &lt;param name=&quot;android-package&quot;</span><br><span class="line">             value=&quot;com.moduscreate.plugin.ModusEcho&quot;/&gt;</span><br><span class="line">    &lt;/feature&gt;</span><br><span class="line">  &lt;/config-file&gt;</span><br><span class="line">  &lt;source-file src=&quot;src/android/com/moduscreate/plugin/ModusEcho.java&quot; </span><br><span class="line">target-dir=&quot;src/com/moduscreate/plugin&quot; /&gt;</span><br><span class="line">&lt;/platform&gt;</span><br></pre></td></tr></table></figure>

<p>插件目录下的<code>src/android/com/moduscreate/plugin/ModusEcho.java</code> 将会被拷贝到 cordova 项目的 <code>platforms\android\src\com\moduscreate\plugin</code> 下，并且<code>com.moduscreate.plugin.ModusEcho</code> 被映射为 <code>ModusEcho</code> plugin service。（对应 exec 中的 service）</p>
<h2 id="创建-ModusEcho-java"><a href="#创建-ModusEcho-java" class="headerlink" title="创建 ModusEcho.java"></a><a href="#%E5%88%9B%E5%BB%BA-modusecho.java"></a>创建 ModusEcho.java</h2><p>在插件目录创建 <code>src/android/com/moduscreate/plugin/ModusEcho.java</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.moduscreate.plugin;</span><br><span class="line"></span><br><span class="line">import org.apache.cordova.CordovaPlugin;</span><br><span class="line">import org.apache.cordova.CallbackContext;</span><br><span class="line">import org.json.JSONArray;</span><br><span class="line">import org.json.JSONObject;</span><br><span class="line">import org.json.JSONException;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class ModusEcho extends CordovaPlugin &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public boolean execute(</span><br><span class="line">    String action, </span><br><span class="line">    JSONArray args, </span><br><span class="line">    CallbackContext callbackContext</span><br><span class="line">  ) throws JSONException &#123;</span><br><span class="line">    if (&quot;echo&quot;.equals(action)) &#123;</span><br><span class="line">      echo(args.getString(0), callbackContext);</span><br><span class="line">      return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return false;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  private void echo(</span><br><span class="line">    String msg, </span><br><span class="line">    CallbackContext callbackContext</span><br><span class="line">  ) &#123;</span><br><span class="line">    if (msg == null  msg.length() == 0) &#123;</span><br><span class="line">      callbackContext.error(&quot;Empty message!&quot;);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      Toast.makeText(</span><br><span class="line">        webView.getContext(), </span><br><span class="line">        msg, </span><br><span class="line">        Toast.LENGTH_LONG</span><br><span class="line">      ).show();</span><br><span class="line">      callbackContext.success(msg);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改项目的 index.js 为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onDeviceReady: function() &#123;</span><br><span class="line">        this.receivedEvent(&#x27;deviceready&#x27;);</span><br><span class="line">        modusecho.echo(</span><br><span class="line">            &#x27;Plugin Ready!&#x27;,</span><br><span class="line">            function(msg) &#123;</span><br><span class="line">                document.getElementById(&#x27;deviceready&#x27;).querySelector(&#x27;.received&#x27;).innerHTML = msg;</span><br><span class="line">            &#125;,</span><br><span class="line">            function(err) &#123;</span><br><span class="line">                document.getElementById(&#x27;deviceready&#x27;).innerHTML = &#x27;&lt;p class=&quot;event received&quot;&gt;&#x27; + err + &#x27;&lt;/p&gt;&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cordova plugin rm com-moduscreate-plugins-echo</span><br><span class="line">cordova plugin add ../modusechoplugin/ModusEcho/</span><br><span class="line">cordova run android</span><br></pre></td></tr></table></figure>

<p>这样就可以看到： <img src="/wp-content/uploads/2017/06/cordova.png"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://moduscreate.com/plugin-authoring-cordova-6-ios-android/">Plugin Authoring in Cordova 6 for iOS and Android</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>cordova</tag>
      </tags>
  </entry>
  <entry>
    <title>国家选项</title>
    <url>/country-options/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/country-options.html">原文地址</a></em></p>
<p>国家选项确定您开展业务所在的国家及您接受来自哪些国家的付款。</p>
<p><img src="/wp-content/uploads/2016/08/config-general-general-country-options.png" alt="Country Options"></p>
<h2 id="设置店铺的国家选项"><a href="#设置店铺的国家选项" class="headerlink" title="设置店铺的国家选项"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%BA%97%E9%93%BA%E7%9A%84%E5%9B%BD%E5%AE%B6%E9%80%89%E9%A1%B9"></a>设置店铺的国家选项</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>常规</strong>(General)&gt; <strong>常规</strong>(General)</li>
<li>展开 <strong>国家选项</strong> 做如下操作<br>a. 选择您业务所在地的默认国家(Default Country)<br>b. 在<strong>接单国家</strong>(Allow Countries)列表中选择您接受订单的国家。默认情况下，所有国家都是选中的。（多选用Ctrl(PC)或者Command(Mac)）<br>c. 在<strong>邮编可选</strong>(Zip&#x2F;Postal Code is Optional for)列表中选择地址不需要邮编的国家<br>d. 在<strong>最热门的目的地</strong>(Top Destinations)列表中，选择您销售的主要目标国家。</li>
<li>完成后点击保存设置</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>版权声明</title>
    <url>/copyright-notice/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/copyright-notice.html">原文地址</a></em></p>
<p>您店铺的每一页页脚都有版权声明。作为最佳实践，版权声明应该包括本年度，并注明贵公司是该网站内容的合法拥有者。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-footer-copyright_thumb_0_0.png"></p>
<p>这个字符&amp;Copy;可以用来插入版权符号，看例子：<br>长格式示例<br><em>Copyright &amp;Copy; 2016 Magento, Inc. All rights reserved.</em><br>短格式示例<br><em>&amp;Copy; 2016 Magento, Inc. All rights reserved.</em></p>
<h2 id="修改版权声明"><a href="#修改版权声明" class="headerlink" title="修改版权声明"></a><a href="#%E4%BF%AE%E6%94%B9%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E"></a>修改版权声明</h2><ol>
<li><p>后台侧边栏，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong>(Design) &gt; <strong>配置</strong> (Configuration)</p>
</li>
<li><p>在表格中找到您要修改的 Store view ，在 Action 列，点击编辑(Edit)，做如下操作：<br><img src="/wp-content/uploads/2016/08/design-configuration_thumb_0_0.png" alt="Design Configuration"><br>a. 在<strong>其他设置</strong>(Other Setttings)下展开<strong>页脚</strong>(Footer)部分</p>
<p><img src="/wp-content/uploads/2016/08/design-configuration-footer_thumb_0_0.png"></p>
<p>b. 在<strong>版权</strong>(Copyright)字段输入版权信息，这个字符&amp;Copy;可以用来插入版权符号。</p>
</li>
<li><p>完成后点击保存配置(Save Configuration)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>create cache type</title>
    <url>/create-cache-type/</url>
    <content><![CDATA[<p><code>etc/cache.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Cache/etc/cache.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;menu&quot; translate=&quot;label,description&quot; instance=&quot;VendorName\TestModule\Model\Cache\Type&quot;&gt;</span><br><span class="line">        &lt;label&gt;Test cache type&lt;/label&gt;</span><br><span class="line">        &lt;description&gt;Test cache type Description&lt;/description&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\Cache;</span><br><span class="line"></span><br><span class="line">class Type extends \Magento\Framework\Cache\Frontend\Decorator\TagScope</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Cache type code unique among all cache types</span><br><span class="line">     */</span><br><span class="line">    const TYPE_IDENTIFIER = &#x27;menu&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Cache tag used to distinguish the cache type from all other cache</span><br><span class="line">     */</span><br><span class="line">    const CACHE_TAG = &#x27; MENU_TAG&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Type constructor.</span><br><span class="line">     * @param \Magento\Framework\App\Cache\Type\FrontendPool $cacheFrontendPool</span><br><span class="line">     */</span><br><span class="line">    public function __construct(\Magento\Framework\App\Cache\Type\FrontendPool $cacheFrontendPool)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::__construct($cacheFrontendPool-&gt;get(self::TYPE_IDENTIFIER), self::CACHE_TAG);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2019/06/cache_type.png"> Let’s enable it and some experiments.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$menuCache = $this-&gt;_objectManager-&gt;get(&#x27;VendorName\TestModule\Model\Cache\Type&#x27;);</span><br><span class="line">$cacheId = &#x27;custom_menu_cache&#x27;;</span><br><span class="line">$cacheTag = [&#x27;menu_tag_1&#x27;, &#x27;menu_tag_2&#x27;];</span><br><span class="line">$data = &#x27;I am custom menu content&#x27;;</span><br><span class="line">$lifeTime = &#x27;600&#x27;;</span><br><span class="line">$menuCache-&gt;save($data, $cacheId, $cacheTag, $lifeTime);</span><br></pre></td></tr></table></figure>

<p>If you look at the var&#x2F;cache folder of Magento at this point, you will see something similar to the following screenshot. we find four <code>44d_CUSTOM_MENU_CACHE</code>(this is the cache id) records in four files(<code>var/cache/mage-tags/mage---44d_MAGE</code>, <code>var/cache/mage-tags/mage---44d_MENU_TAG</code>(the cache tag),<code>var/cache/mage-tags/mage---44d_MENU_TAG_1</code>,<code>var/cache/mage-tags/mage---44d_MENU_TAG_2</code>). <img src="/wp-content/uploads/2019/06/cache_type_tags.png"> And a file named <code>var/cache/mage--6/mage---44d_CUSTOM_MENU_CACHE</code>. <img src="/wp-content/uploads/2019/06/cache_type_id.png"> So, if I want to find all the cache taged with BLOCK_HTML (specified in <code>Magento\Framework\App\Cache\Type\Block</code>), I can search file name with ‘BLOCK_HTML’ <img src="/wp-content/uploads/2019/06/block_html.png"> This file writes down all the cache id taged with ‘BLOCK_HTML’. <img src="/wp-content/uploads/2019/06/block_html_cache_id.png"> the prefix <code>44d_</code> is sepecified in app&#x2F;etc&#x2F;env.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;cache&#x27; =&gt; [</span><br><span class="line">        &#x27;frontend&#x27; =&gt; [</span><br><span class="line">            &#x27;default&#x27; =&gt; [</span><br><span class="line">                &#x27;id_prefix&#x27; =&gt; &#x27;44d_&#x27;</span><br><span class="line">            ],</span><br><span class="line">            &#x27;page_cache&#x27; =&gt; [</span><br><span class="line">                &#x27;id_prefix&#x27; =&gt; &#x27;44d_&#x27;</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$menuCache = $this-&gt;_objectManager-&gt;get(&#x27;VendorName\TestModule\Model\Cache\Type&#x27;);</span><br><span class="line">$cacheId = &#x27;custom_menu_cache&#x27;;</span><br><span class="line">$cacheTag = [&#x27;menu_tag_1&#x27;, &#x27;menu_tag_2&#x27;];</span><br><span class="line">$data = &#x27;I am custom menu content&#x27;;</span><br><span class="line">$lifeTime = &#x27;600&#x27;;</span><br><span class="line">$menuCache-&gt;save($data, $cacheId, $cacheTag, $lifeTime);</span><br><span class="line">$content = $menuCache-&gt;load($cacheId);</span><br><span class="line">var_dump($content);</span><br></pre></td></tr></table></figure>

<p>We can get the string ‘I am custom menu content’;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$menuCache = $this-&gt;_objectManager-&gt;get(&#x27;VendorName\TestModule\Model\Cache\Type&#x27;);</span><br><span class="line">$cacheId = &#x27;custom_menu_cache&#x27;;</span><br><span class="line">$cacheTag = [&#x27;menu_tag_1&#x27;, &#x27;menu_tag_2&#x27;];</span><br><span class="line">$data = &#x27;I am custom menu content&#x27;;</span><br><span class="line">$lifeTime = &#x27;600&#x27;;</span><br><span class="line">$menuCache-&gt;save($data, $cacheId, $cacheTag, $lifeTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var_dump($menuCache-&gt;getTag());</span><br><span class="line">echo get_class($menuCache-&gt;getLowLevelFrontend());</span><br><span class="line"></span><br><span class="line">// we will get all the cache ids in system</span><br><span class="line">var_dump($menuCache-&gt;getLowLevelFrontend()-&gt;getIds());</span><br><span class="line">// we will get all the cache tags in system</span><br><span class="line">var_dump($menuCache-&gt;getLowLevelFrontend()-&gt;getTags());</span><br></pre></td></tr></table></figure>

<h2 id="Practices-Tests"><a href="#Practices-Tests" class="headerlink" title="Practices Tests"></a><a href="#practices-tests"></a>Practices Tests</h2><p>How do you create a new cache type?<br>A. Use a plugin to append to the method arguments for the <code>\Magento\Framework\App\CacheList::collect</code> method.<br>B. Create etc&#x2F;cache.xml and specify a <code>&lt;type name=&quot;cache_name&quot; instance=&quot;Class\Path&quot;/&gt;</code>.<br>C. Inject a new caching class into \Magento\Framework\App\CacheList.<br>D. Add an event observer for the cache_type_collector observer.</p>
<p>Answer B</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Create new product type</title>
    <url>/create-new-product-type/</url>
    <content><![CDATA[<ul>
<li>Simple Proudct a simple product can be sold individually, or as part of a grouped, configurable, or bundle product. A simple product can have custom options with a variety of input controls, which makes it possible to sell many product variations from a single SKU</li>
<li>Configurable Product A configurable product allows the shopper to choose options from drop-down lists. Each option in a configurable product represents a separate, simple product with a distinct SKU, which makes it possible to track inventory for each variation. Each drop-down list value is based on an attribute of the “Dropdown” input type(You can choose from (Dropdown &#x2F;visual swatch &#x2F; text swatch)). The drop-down attributes must be included in the attribute set, which is then used as a template for the configurable product. The thumbnail image in the shopping cart can be set to display the image from the configurable product record, or from the product variation. Simple and virtual products that are part of a configurable product cannot have custom options.</li>
<li>Group Product A grouped product is essentially a collection of simple associated products. Simple and virtual products that are part of a grouped product cannot have custom options. Each item purchased appears individually in the shopping cart, rather than as part of the group. The thumbnail image in the shopping cart can be set to display the image from the grouped parent product, or the associated product. For example with demo data: <a href="http://example.com/set-of-sprite-yoga-straps.html">http://example.com/set-of-sprite-yoga-straps.html</a></li>
<li>Bundled Product The main point that distinguishes bundled product from grouped products is that when items are bundled together, it is hardly possible for any of the products to be removed from the set. In simple words, one product cannot live without the other, would hardly function if the other is missing. One product complements the other. For example with demo data: <a href="http://example.com/sprite-yoga-companion-kit.html">http://example.com/sprite-yoga-companion-kit.html</a></li>
<li>Downloadable Products Downloadable products can be uploaded to the server, or linked to from another server on the Internet. You can determine the number of times a customer can download a product. Customers who purchase a downloadable product can be required to log in before going through checkout. The delivery of a downloadable product can be made when the order is in either a “Pending” or “Invoiced” state.</li>
<li>Virtual Products Virtual products are used for non-tangible products such as services, subscriptions, and warranties. Virtual products are much like simple products, but without the Weight. Shipping Options do not appear during checkout unless there is a tangible product in the cart.</li>
</ul>
<h2 id="Experients"><a href="#Experients" class="headerlink" title="Experients"></a><a href="#experients"></a>Experients</h2><h3 id="Config-XML"><a href="#Config-XML" class="headerlink" title="Config XML"></a><a href="#config-xml"></a>Config XML</h3><p>etc&#x2F;product_types.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Catalog:etc/product_types.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;new_product_type&quot; label=&quot;New Product Type&quot; modelInstance=&quot;VendorName\TestModule\Model\Product\Type\NewProductType&quot; indexPriority=&quot;60&quot; sortOrder=&quot;80&quot; isQty=&quot;true&quot;&gt;</span><br><span class="line">        &lt;priceModel instance=&quot;VendorName\TestModule\Model\Product\Price&quot; /&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>The <code>type</code> node has three required attributes.</p>
<ul>
<li>name: This attribute defines the custom product code which is used in code and in the database.</li>
<li>label: Defines the product type label in the Magento admin.</li>
<li>modelInstance: Specifies the fully qualified namespace of the corresponding product type model.</li>
</ul>
<h3 id="Product-Type-Model"><a href="#Product-Type-Model" class="headerlink" title="Product Type Model"></a><a href="#product-type-model"></a>Product Type Model</h3><p>Each product instance is associated with an instance of the corresponding product type model. This model has the opportunity to modify product type behavior and attributes and is called during many product manipulation processes.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\Product\Type;</span><br><span class="line"></span><br><span class="line">class NewProductType extends \Magento\Catalog\Model\Product\Type\AbstractType</span><br><span class="line">&#123;</span><br><span class="line">    const TYPE_ID = &#x27;new_product_type&#x27;;</span><br><span class="line"></span><br><span class="line">    public function deleteTypeSpecificData(\Magento\Catalog\Model\Product $product)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A product model must inherit from the <code>\Magento\Catalog\Model\Product\Type\AbstractType</code> base class. The base class has only one abstract method: <code>deleteTypeSpecificData</code>. This oddly specific method is called during a product instance save if its type has changed, and gives the original product type the opportunity to clean up any type-specific data before the type change is finalized.</p>
<h3 id="Price-Model"><a href="#Price-Model" class="headerlink" title="Price Model"></a><a href="#price-model"></a>Price Model</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\Product;</span><br><span class="line"></span><br><span class="line">class Price extends \Magento\Catalog\Model\Product\Type\Price</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function getPrice($product)</span><br><span class="line">    &#123;</span><br><span class="line">        return $product-&gt;getData(&#x27;price&#x27;) + 200;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Associate-With-Price-Attributes"><a href="#Associate-With-Price-Attributes" class="headerlink" title="Associate With Price Attributes"></a><a href="#associate-with-price-attributes"></a>Associate With Price Attributes</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Setup\Patch\Data;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Setup\Patch\DataPatchInterface;</span><br><span class="line">use Magento\Customer\Model\Customer;</span><br><span class="line">use Magento\Customer\Setup\CustomerSetupFactory;</span><br><span class="line">use Magento\Eav\Setup\EavSetupFactory;</span><br><span class="line">use Magento\Framework\Setup\ModuleDataSetupInterface;</span><br><span class="line">use Magento\Eav\Model\Entity\Attribute\SetFactory as AttributeSetFactory;</span><br><span class="line"></span><br><span class="line">class CustomProductTypePatch implements DataPatchInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">        ModuleDataSetupInterface $moduleDataSetup,</span><br><span class="line">        CustomerSetupFactory $customerSetupFactory,</span><br><span class="line">        EavSetupFactory $eavSetupFactory,</span><br><span class="line">        AttributeSetFactory $attributeSetFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;moduleDataSetup = $moduleDataSetup;</span><br><span class="line">        $this-&gt;customerSetupFactory = $customerSetupFactory;</span><br><span class="line">        $this-&gt;eavSetupFactory = $eavSetupFactory;</span><br><span class="line">        $this-&gt;attributeSetFactory = $attributeSetFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getAliases()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This internal Magento method, that means that some patches with time can change their names,</span><br><span class="line">         * but changing name should not affect installation process, that&#x27;s why if we will change name of the patch</span><br><span class="line">         * we will add alias here</span><br><span class="line">         */</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function apply()</span><br><span class="line">    &#123;</span><br><span class="line">        /** @var EavSetup $eavSetup */</span><br><span class="line">        $eavSetup = $this-&gt;eavSetupFactory-&gt;create([&#x27;setup&#x27; =&gt; $this-&gt;moduleDataSetup]);</span><br><span class="line"></span><br><span class="line">        //associate these attributes with new product type</span><br><span class="line">        $fieldList = [</span><br><span class="line">            &#x27;price&#x27;,</span><br><span class="line">            &#x27;special_price&#x27;,</span><br><span class="line">            &#x27;special_from_date&#x27;,</span><br><span class="line">            &#x27;special_to_date&#x27;,</span><br><span class="line">            &#x27;minimal_price&#x27;,</span><br><span class="line">            &#x27;cost&#x27;,</span><br><span class="line">            &#x27;tier_price&#x27;,</span><br><span class="line">            &#x27;weight&#x27;,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        // make these attributes applicable to new product type</span><br><span class="line">        foreach ($fieldList as $field) &#123;</span><br><span class="line">            $applyTo = explode(</span><br><span class="line">                &#x27;,&#x27;,</span><br><span class="line">                $eavSetup-&gt;getAttribute(\Magento\Catalog\Model\Product::ENTITY, $field, &#x27;apply_to&#x27;)</span><br><span class="line">            );</span><br><span class="line">            if (!in_array(\VendorName\TestModule\Model\Product\Type\NewProductType::TYPE_ID, $applyTo)) &#123;</span><br><span class="line">                $applyTo[] = \VendorName\TestModule\Model\Product\Type\NewProductType::TYPE_ID;</span><br><span class="line">                $eavSetup-&gt;updateAttribute(</span><br><span class="line">                    \Magento\Catalog\Model\Product::ENTITY,</span><br><span class="line">                    $field,</span><br><span class="line">                    &#x27;apply_to&#x27;,</span><br><span class="line">                    implode(&#x27;,&#x27;, $applyTo)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getDependencies()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This is dependency to another patch. Dependency should be applied first</span><br><span class="line">         * One patch can have few dependencies</span><br><span class="line">         * Patches do not have versions, so if in old approach with Install/Ugrade data scripts you used</span><br><span class="line">         * versions, right now you need to point from patch with higher version to patch with lower version</span><br><span class="line">         * But please, note, that some of your patches can be independent and can be installed in any sequence</span><br><span class="line">         * So use dependencies only if this important for you</span><br><span class="line">         */</span><br><span class="line">        // return [</span><br><span class="line">        //     SomeDependency::class</span><br><span class="line">        // ];</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After <code>bin/magento setup:upgrade</code>. Now we create a new product using custom product type. <img src="/wp-content/uploads/2019/06/new_product_type.png"> <img src="/wp-content/uploads/2019/06/custom_product_type.png"> <img src="/wp-content/uploads/2019/06/new_product_type_product.png"> The product type instance and product price type is used in <code>Magento\Catalog\Model\Product</code></p>
<h2 id="Practices-Tests"><a href="#Practices-Tests" class="headerlink" title="Practices Tests"></a><a href="#practices-tests"></a>Practices Tests</h2><p>You need to create a custom price calculator for simple products. You have already created the new price model. Keeping simplicity in mind, what additional steps do you take to implement this? (Multiple Choice) A. Make your new price model extend \Magento\Catalog\Model\Product\Type\Price. B. Update the frontend templates to use the new price methods. C. Create a plugin for the getPriceModel() method and return your price model. D. In your product_types.xml module, reference the simple product type, and set a value for the priceModel attribute Answer A D</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://www.ubertheme.com/magento-news/magento-product-types/">Manage Magento 2 Product Types and Catalog Data</a> <a href="https://www.classyllama.com/blog/custom-product-types-magento-2">Custom Product Types in Magento 2</a> <a href="https://www.mageplaza.com/devdocs/how-create-new-product-type-magento-2.html">How to Create a New Product Type in Magento 2</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>create customer attribute</title>
    <url>/create-customer-attribute/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#notes"></a>Notes</h2><p>Custom attributes are those added on behalf of a merchant. For example, a merchant might need to add attributes to describe products, such as shape or volume. A merchant can add these attributes in the Magento Admin panel. Custom attributes are a subset of EAV attributes.</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Setup\Patch\Data;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Setup\Patch\DataPatchInterface;</span><br><span class="line">use Magento\Customer\Model\Customer;</span><br><span class="line">use Magento\Customer\Setup\CustomerSetupFactory;</span><br><span class="line">use Magento\Eav\Setup\EavSetupFactory;</span><br><span class="line">use Magento\Framework\Setup\ModuleDataSetupInterface;</span><br><span class="line">use Magento\Eav\Model\Entity\Attribute\SetFactory as AttributeSetFactory;</span><br><span class="line"></span><br><span class="line">class TestPatch implements DataPatchInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">        ModuleDataSetupInterface $moduleDataSetup,</span><br><span class="line">        CustomerSetupFactory $customerSetupFactory,</span><br><span class="line">        EavSetupFactory $eavSetupFactory,</span><br><span class="line">        AttributeSetFactory $attributeSetFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;moduleDataSetup = $moduleDataSetup;</span><br><span class="line">        $this-&gt;customerSetupFactory = $customerSetupFactory;</span><br><span class="line">        $this-&gt;eavSetupFactory = $eavSetupFactory;</span><br><span class="line">        $this-&gt;attributeSetFactory = $attributeSetFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getAliases()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This internal Magento method, that means that some patches with time can change their names,</span><br><span class="line">         * but changing name should not affect installation process, that&#x27;s why if we will change name of the patch</span><br><span class="line">         * we will add alias here</span><br><span class="line">         */</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function apply()</span><br><span class="line">    &#123;</span><br><span class="line">        $customerSetup = $this-&gt;customerSetupFactory-&gt;create([&#x27;setup&#x27; =&gt; $this-&gt;moduleDataSetup]);</span><br><span class="line"></span><br><span class="line">        $customerSetup-&gt;addAttribute(</span><br><span class="line">            Customer::ENTITY,</span><br><span class="line">            &#x27;c_telephone&#x27;,</span><br><span class="line">            [</span><br><span class="line">                &#x27;type&#x27; =&gt; &#x27;varchar&#x27;,</span><br><span class="line">                &#x27;label&#x27; =&gt; &#x27;Custom telephone&#x27;,</span><br><span class="line">                &#x27;input&#x27; =&gt; &#x27;text&#x27;,</span><br><span class="line">                &#x27;required&#x27; =&gt; false,</span><br><span class="line">                &#x27;position&#x27; =&gt; 250,</span><br><span class="line">                &#x27;visible&#x27; =&gt; true,</span><br><span class="line">                &#x27;user_defined&#x27; =&gt; 1,</span><br><span class="line">                &#x27;group&#x27; =&gt; &#x27;General&#x27;,</span><br><span class="line">                &#x27;system&#x27; =&gt; false,</span><br><span class="line">                &#x27;validate_rules&#x27; =&gt; &#x27;&#123;&quot;max_text_length&quot;:255,&quot;min_text_length&quot;:1&#125;&#x27;,</span><br><span class="line">                &#x27;is_used_in_grid&#x27; =&gt; true,</span><br><span class="line">                &#x27;is_visible_in_grid&#x27; =&gt; true,</span><br><span class="line">                &#x27;is_filterable_in_grid&#x27; =&gt; true,</span><br><span class="line">                &#x27;is_searchable_in_grid&#x27; =&gt; true,</span><br><span class="line">            ]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $attribute = $customerSetup-&gt;getEavConfig()-&gt;getAttribute(Customer::ENTITY, &#x27;c_telephone&#x27;);</span><br><span class="line"></span><br><span class="line">        $attribute-&gt;setData(</span><br><span class="line">            &#x27;used_in_forms&#x27; , [&#x27;customer_account_edit&#x27;, &#x27;customer_account_create&#x27;, &#x27;adminhtml_customer&#x27;, &#x27;adminhtml_checkout&#x27;]</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        $attribute-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getDependencies()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This is dependency to another patch. Dependency should be applied first</span><br><span class="line">         * One patch can have few dependencies</span><br><span class="line">         * Patches do not have versions, so if in old approach with Install/Ugrade data scripts you used</span><br><span class="line">         * versions, right now you need to point from patch with higher version to patch with lower version</span><br><span class="line">         * But please, note, that some of your patches can be independent and can be installed in any sequence</span><br><span class="line">         * So use dependencies only if this important for you</span><br><span class="line">         */</span><br><span class="line">        // return [</span><br><span class="line">        //     SomeDependency::class</span><br><span class="line">        // ];</span><br><span class="line"></span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Now, you can use <code>getCustomAttributes</code> to get it’s value.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    $customerResp = $this-&gt;_objectManager-&gt;get(&#x27;Magento\Customer\Api\CustomerRepositoryInterface&#x27;);</span><br><span class="line">    $customer = $customerResp-&gt;getById(1);</span><br><span class="line">    // var_dump(get_class($customer));</span><br><span class="line">    // var_dump(get_class_methods($customer));</span><br><span class="line">    $customAttributes = $customer-&gt;getCustomAttributes();</span><br><span class="line"></span><br><span class="line">    var_dump(($customAttributes));</span><br><span class="line"></span><br><span class="line">    var_dump($customer-&gt;getExtensionAttributes());</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h2 id="Practice-tests"><a href="#Practice-tests" class="headerlink" title="Practice tests"></a><a href="#practice-tests"></a>Practice tests</h2><p>You need to programmatically create a new customer attribute What steps are required to do this? (Multiple Choice) A. Save the attribute. B. Specify the used_in_forms data for the attribute. C. Create the attribute with \Magento\Eav\Setup\EavSetup::addAttribute D. Set the source_model value for the attribute. E. Add the attribute to the customer_eav_attribute table. Answer A B C</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/magento-2-add-customer-attribute-programmatically.html">How To Add Customer Attribute Programmatically</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>css resources</title>
    <url>/css-resources/</url>
    <content><![CDATA[<p><a href="http://zh.learnlayout.com/">学习 css 布局</a></p>
<p>《css 揭秘》</p>
<p><a href="https://css-tricks.com/">css tricks</a> <a href="https://qishaoxuan.github.io/css_tricks/">qishaoxuan css tricks</a> <a href="https://codepen.io/jakealbaugh/">Jake Albaugh</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>CRUD Models in Magento 2</title>
    <url>/crud-models-in-magento-2/</url>
    <content><![CDATA[<p>本篇我们将介绍通过 setup script 创建数据表，创建 Magento 2 model, resource model, collection ，以及如何通过它们对数据进行增删改查。 Magento 2 中的 CRUD Models 用于操纵数据库中的数据，不需要很多代码就可以创建一个 CRUD 。 CRUD 代表 Create, Read, Update and Delete （增删改查）。 我们将创建一个表 <code>thankit_helloworld_post</code></p>
<p>Name</p>
<p>Description</p>
<p>post_id</p>
<p>ID 主键</p>
<p>name</p>
<p>post 的名称</p>
<p>url_key</p>
<p>Post URL Key</p>
<p>post_content</p>
<p>post 的内容</p>
<p>tags</p>
<p>post tags</p>
<p>status</p>
<p>post 状态</p>
<p>featured_image</p>
<p>Post Featured Image</p>
<p>sample_country_selection</p>
<p>Post Sample Country Selection</p>
<p>sample_multiselect</p>
<p>Post Sample Multiselect</p>
<p>created_at</p>
<p>创建时间</p>
<p>updated_at</p>
<p>更新时间</p>
<h2 id="第一步：Setup-Script"><a href="#第一步：Setup-Script" class="headerlink" title="第一步：Setup Script"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9Asetup-script"></a>第一步：Setup Script</h2><p>File:app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;Setup&#x2F;InstallSchema.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Setup;</span><br><span class="line"></span><br><span class="line">class InstallSchema implements \Magento\Framework\Setup\InstallSchemaInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * install tables</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Setup\SchemaSetupInterface $setup</span><br><span class="line">     * @param \Magento\Framework\Setup\ModuleContextInterface $context</span><br><span class="line">     * @return void</span><br><span class="line">     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)</span><br><span class="line">     */</span><br><span class="line">    public function install(</span><br><span class="line">        \Magento\Framework\Setup\SchemaSetupInterface $setup,</span><br><span class="line">        \Magento\Framework\Setup\ModuleContextInterface $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $installer = $setup;</span><br><span class="line">        $installer-&gt;startSetup();</span><br><span class="line">        if (!$installer-&gt;tableExists(&#x27;thankit_helloworld_post&#x27;)) &#123;</span><br><span class="line">            $table = $installer-&gt;getConnection()-&gt;newTable(</span><br><span class="line">                $installer-&gt;getTable(&#x27;thankit_helloworld_post&#x27;)</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;post_id&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_INTEGER,</span><br><span class="line">                null,</span><br><span class="line">                [</span><br><span class="line">                    &#x27;identity&#x27; =&gt; true,</span><br><span class="line">                    &#x27;nullable&#x27; =&gt; false,</span><br><span class="line">                    &#x27;primary&#x27;  =&gt; true,</span><br><span class="line">                    &#x27;unsigned&#x27; =&gt; true,</span><br><span class="line">                ],</span><br><span class="line">                &#x27;Post ID&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;name&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                255,</span><br><span class="line">                [&#x27;nullable =&gt; false&#x27;],</span><br><span class="line">                &#x27;Post Name&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;url_key&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                255,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post URL Key&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;post_content&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                &#x27;64k&#x27;,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Post Content&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;tags&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                255,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Tags&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;status&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_INTEGER,</span><br><span class="line">                1,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Status&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;featured_image&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                255,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Featured Image&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;sample_country_selection&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                3,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Sample Country Selection&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;sample_upload_file&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                255,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Sample File&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;sample_multiselect&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                &#x27;64k&#x27;,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Sample Multiselect&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;created_at&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TIMESTAMP,</span><br><span class="line">                null,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Created At&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;addColumn(</span><br><span class="line">                &#x27;updated_at&#x27;,</span><br><span class="line">                \Magento\Framework\DB\Ddl\Table::TYPE_TIMESTAMP,</span><br><span class="line">                null,</span><br><span class="line">                [],</span><br><span class="line">                &#x27;Post Updated At&#x27;</span><br><span class="line">            )</span><br><span class="line">            -&gt;setComment(&#x27;Post Table&#x27;);</span><br><span class="line">            $installer-&gt;getConnection()-&gt;createTable($table);</span><br><span class="line">            $installer-&gt;getConnection()-&gt;addIndex(</span><br><span class="line">                $installer-&gt;getTable(&#x27;thankit_helloworld_post&#x27;),</span><br><span class="line">                $setup-&gt;getIdxName(</span><br><span class="line">                    $installer-&gt;getTable(&#x27;thankit_helloworld_post&#x27;),</span><br><span class="line">                    [&#x27;name&#x27;,&#x27;url_key&#x27;,&#x27;post_content&#x27;,&#x27;tags&#x27;,&#x27;featured_image&#x27;,&#x27;sample_upload_file&#x27;],</span><br><span class="line">                    \Magento\Framework\DB\Adapter\AdapterInterface::INDEX_TYPE_FULLTEXT</span><br><span class="line">                ),</span><br><span class="line">                [&#x27;name&#x27;,&#x27;url_key&#x27;,&#x27;post_content&#x27;,&#x27;tags&#x27;,&#x27;featured_image&#x27;,&#x27;sample_upload_file&#x27;],</span><br><span class="line">                \Magento\Framework\DB\Adapter\AdapterInterface::INDEX_TYPE_FULLTEXT</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        $installer-&gt;endSetup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>了解 addColumn() addIndex() addForeignKey 的参数参照 <code>vendor/magento/framework/DB/Ddl/Table</code></em></p>
<p>该文件只会在安装模块时执行一次。如果你以前安装过该模块了，这个文件就不会执行了。 执行命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>如果你的数据库中没有出现 <code>thankit_helloworld_post</code> 表，那么请在数据库中找到 <code>setup_module</code> 表，找到 <code>ThankIT_HelloWorld</code> 的记录，删掉这行记录。然后再运行上面的命令行。 <code>InstallSchema.php</code> 是用来创建数据库结构的，如果你想插入记录的话，使用 <code>InstallData.php</code> 参考下面的文件，看 <code>InstallData.php</code> 是怎么个用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- vendor/magento/module-tax/Setup/InstallData.php</span><br><span class="line">- vendor/magento/module-customer/Setup/InstallData.php</span><br><span class="line">- vendor/magento/module-catalog/Setup/InstallData.php</span><br></pre></td></tr></table></figure>

<p>这些安装文件是在初次安装时执行的，如果你想在升级时做点什么，请使用 <code>UpgradeSchema.php</code> 和 <code>UpgradeData.php</code></p>
<h2 id="第二步：创建-Model"><a href="#第二步：创建-Model" class="headerlink" title="第二步：创建 Model"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-model"></a>第二步：创建 Model</h2><p>Magento 2 中模型有很多作用，比如操作数据，安装或升级模块。在本教程中，我们只涉及数据的增删改查操作。我们要操作 <code>thankit_helloworld_post</code> 中的数据，需要创建 Model, Resource Model, Resource Model Conllection File: app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;Model&#x2F;Post.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Model;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @method Post setName($name)</span><br><span class="line"> * @method Post setUrlKey($urlKey)</span><br><span class="line"> * @method Post setPostContent($postContent)</span><br><span class="line"> * @method Post setTags($tags)</span><br><span class="line"> * @method Post setStatus($status)</span><br><span class="line"> * @method Post setFeaturedImage($featuredImage)</span><br><span class="line"> * @method Post setSampleCountrySelection($sampleCountrySelection)</span><br><span class="line"> * @method Post setSampleUploadFile($sampleUploadFile)</span><br><span class="line"> * @method Post setSampleMultiselect($sampleMultiselect)</span><br><span class="line"> * @method mixed getName()</span><br><span class="line"> * @method mixed getUrlKey()</span><br><span class="line"> * @method mixed getPostContent()</span><br><span class="line"> * @method mixed getTags()</span><br><span class="line"> * @method mixed getStatus()</span><br><span class="line"> * @method mixed getFeaturedImage()</span><br><span class="line"> * @method mixed getSampleCountrySelection()</span><br><span class="line"> * @method mixed getSampleUploadFile()</span><br><span class="line"> * @method mixed getSampleMultiselect()</span><br><span class="line"> * @method Post setCreatedAt(\string $createdAt)</span><br><span class="line"> * @method string getCreatedAt()</span><br><span class="line"> * @method Post setUpdatedAt(\string $updatedAt)</span><br><span class="line"> * @method string getUpdatedAt()</span><br><span class="line"> */</span><br><span class="line">class Post extends \Magento\Framework\Model\AbstractModel</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize resource model</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;ThankIT\HelloWorld\Model\ResourceModel\Post&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Model 必须继承 <code>\Magento\Framework\Model\AbstractModel</code> 而该类又继承自 <code>\Magento\Framework\Object</code> ，这样我们的 model 就拥有了额外的方法，比如 <code>load, delete, save, toArray, toJson, toString, toXml</code> Model 中关键的代码是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initialize resource model</span><br><span class="line"> *</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">protected function _construct()</span><br><span class="line">&#123;</span><br><span class="line">   $this-&gt;_init(&#x27;ThankIT\HelloWorld\Model\ResourceModel\Post&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第三步：Resource-Model"><a href="#第三步：Resource-Model" class="headerlink" title="第三步：Resource Model"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9Aresource-model"></a>第三步：Resource Model</h2><p>Model 中包含总体上的数据逻辑，但它不执行 sql 语句，由 Resource model 做。 File: ThankIT\HelloWorld\Model\ResourceModel\Post.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Model\ResourceModel;</span><br><span class="line"></span><br><span class="line">class Post extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Date model</span><br><span class="line">     *</span><br><span class="line">     * @var \Magento\Framework\Stdlib\DateTime\DateTime</span><br><span class="line">     */</span><br><span class="line">    protected $_date;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Stdlib\DateTime\DateTime $date</span><br><span class="line">     * @param \Magento\Framework\Model\ResourceModel\Db\Context $context</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\Stdlib\DateTime\DateTime $date,</span><br><span class="line">        \Magento\Framework\Model\ResourceModel\Db\Context $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;_date = $date;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize resource model</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;thankit_helloworld_post&#x27;, &#x27;post_id&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Retrieves Post Name from DB by passed id.</span><br><span class="line">     * 本篇未使用到 保留 以后研究</span><br><span class="line">     * @param string $id</span><br><span class="line">     * @return stringbool</span><br><span class="line">     */</span><br><span class="line">    public function getPostNameById($id)</span><br><span class="line">    &#123;</span><br><span class="line">        $adapter = $this-&gt;getConnection();</span><br><span class="line">        $select = $adapter-&gt;select()</span><br><span class="line">            -&gt;from($this-&gt;getMainTable(), &#x27;name&#x27;)</span><br><span class="line">            -&gt;where(&#x27;post_id = :post_id&#x27;);</span><br><span class="line">        $binds = [&#x27;post_id&#x27; =&gt; (int) $id];</span><br><span class="line">        return $adapter-&gt;fetchOne($select, $binds);</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * before save callback</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Model\AbstractModel\Mageplaza\HelloWorld\Model\Post $object</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)</span><br><span class="line">    &#123;</span><br><span class="line">        $object-&gt;setUpdatedAt($this-&gt;_date-&gt;date());</span><br><span class="line">        if ($object-&gt;isObjectNew()) &#123;</span><br><span class="line">            $object-&gt;setCreatedAt($this-&gt;_date-&gt;date());</span><br><span class="line">        &#125;</span><br><span class="line">        return parent::_beforeSave($object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有 resource model 都必须继承 <code>\Magento\Framework\Model\ResourceModel\Db\AbstractDb</code> 该 class 包含着从数据库中取数据的方法。 和 model 类一样，resource model 也必须有 <code>_construct()</code> 方法，该方法调用 <code>_init()</code> 方法来定义表名和主键。 该例中重要的代码是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Initialize resource model</span><br><span class="line"> *</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br><span class="line">protected function _construct()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;_init(&#x27;thankit_helloworld_post&#x27;, &#x27;post_id&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="第四步：Resource-Model-Collection"><a href="#第四步：Resource-Model-Collection" class="headerlink" title="第四步：Resource Model Collection"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9Aresource-model-collection"></a>第四步：Resource Model Collection</h2><p>collection model 可以看作是一个 resource model，通过它我们可以获取数据的集合，可以对数据集合进行过滤。 File:ThankIT\HelloWorld\Model\ResourceModel\Post\Collection.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Model\ResourceModel\Post;</span><br><span class="line"></span><br><span class="line">class Collection extends \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * resource collection initialization</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;ThankIT\HelloWorld\Model\Post&#x27;, &#x27;ThankIT\HelloWorld\Model\ResourceModel\Post&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>collection 类继承自 <code>\Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection</code> 关键代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * resource collection initialization</span><br><span class="line"> *</span><br><span class="line"> * @param string $model</span><br><span class="line"> * @param string $resourceModel</span><br><span class="line"> * @return $this</span><br><span class="line"> */</span><br><span class="line">protected function _construct()</span><br><span class="line">&#123;</span><br><span class="line">   $this-&gt;_init(&#x27;ThankIT\HelloWorld\Model\Post&#x27;, &#x27;ThankIT\HelloWorld\Model\ResourceModel\Post&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>\Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection</code> 继承自 <code>\Magento\Framework\Data\Collection\AbstractDb</code> ，而 AbstractDb 继承自 <code>\Magento\Framework\Data\Collection</code> ， Collection 最后实现以下接口 <code>\Countable</code>, <code>Magento\Framework\Option\ArrayInterface</code>, and <code>Magento\Framework\Data\CollectionDataSourceInterface</code> 这么多层的继承，collection 类就获得了非常多的方法，比如 <code>join, addFieldToFilter, count, getAllIds, getColumnValues, getFirstItem, getLastItem</code> 等。</p>
<h2 id="第五步：Factory-Object"><a href="#第五步：Factory-Object" class="headerlink" title="第五步：Factory Object"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9Afactory-object"></a>第五步：Factory Object</h2><p>OOP 中，工厂方法是用来实例化对象的。在 Magento 2 中，Factory Object 也是一样。 Magento 的 object manager 遇到一个以 <code>Factory</code> 结尾的类时，如果该类不存在，那么就会在 <code>var/generation</code> 目录下自动生成一个。 下面以例子来说明： File: ThankIT\HelloWorld\Block\Index\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Index;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Index extends Template</span><br><span class="line">&#123;</span><br><span class="line">    protected $_postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\View\Element\Template\Context $context,</span><br><span class="line">        \ThankIT\HelloWorld\Model\PostFactory $postFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;_postFactory = $postFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function _prepareLayout()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        /* case 1</span><br><span class="line">         * @return string &#x27;ThankIT\HelloWorld\Model\PostFactory&#x27; (length=36)</span><br><span class="line">         */</span><br><span class="line">        // var_dump(</span><br><span class="line">        //     get_class($this-&gt;_postFactory)</span><br><span class="line">        // );</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 2</span><br><span class="line">         * 插入数据</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $post-&gt;setData(&#x27;name&#x27;, &#x27;fist post name&#x27;)</span><br><span class="line">        //     -&gt;setUrlKey(&#x27;fist&#x27;)</span><br><span class="line">        //     -&gt;setPostContent(&#x27;fist post content&#x27;)</span><br><span class="line">        //     -&gt;save();</span><br><span class="line">        // var_dump(&#x27;Done&#x27;);</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 3</span><br><span class="line">         * load ID 为 1 的 model</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $post = $post-&gt;load(1);</span><br><span class="line">        // var_dump($post-&gt;getData());</span><br><span class="line">        // var_dump($post-&gt;getName());</span><br><span class="line">        // var_dump($post-&gt;getData(&#x27;url_key&#x27;));</span><br><span class="line">        // var_dump($post-&gt;getNoExist()); //return null</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 4</span><br><span class="line">         * use collection</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $post-&gt;setData(&#x27;name&#x27;, &#x27;name&#x27;)</span><br><span class="line">        //     -&gt;setUrlKey(&#x27;url&#x27;)</span><br><span class="line">        //     -&gt;setPostContent(&#x27;post content&#x27;)</span><br><span class="line">        //     -&gt;save();</span><br><span class="line">        // $collection = $post-&gt;getCollection();</span><br><span class="line">        // foreach ($collection as $item) &#123;</span><br><span class="line">        //     var_dump($item-&gt;getData());</span><br><span class="line">        // &#125;</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 5</span><br><span class="line">         * update</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $post = $post-&gt;load(1);</span><br><span class="line">        // var_dump($post-&gt;getData());</span><br><span class="line">        // $post-&gt;setName(&#x27;now update&#x27;)-&gt;save();</span><br><span class="line">        // var_dump($post-&gt;getData());</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 6</span><br><span class="line">         * delete</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $collection = $post-&gt;getCollection();</span><br><span class="line">        // foreach ($collection as $item) &#123;</span><br><span class="line">        //     var_dump($item-&gt;getData());</span><br><span class="line">        // &#125;</span><br><span class="line">        // $post = $post-&gt;load(2)-&gt;delete();</span><br><span class="line">        // var_dump(&#x27;after delete&#x27;);</span><br><span class="line">        // foreach ($collection as $item) &#123;</span><br><span class="line">        //     var_dump($item-&gt;getData());</span><br><span class="line">        // &#125;</span><br><span class="line">        // exit();</span><br><span class="line"></span><br><span class="line">        /* case 7</span><br><span class="line">         * collection count</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $collection = $post-&gt;getCollection();</span><br><span class="line">        // var_dump($collection-&gt;count());</span><br><span class="line">        // var_dump($collection-&gt;getFirstItem()-&gt;getData());</span><br><span class="line">        // exit;</span><br><span class="line"></span><br><span class="line">        /* case 8</span><br><span class="line">         * collection filter</span><br><span class="line">         */</span><br><span class="line">        // $post = $this-&gt;_postFactory-&gt;create();</span><br><span class="line">        // $collection = $post-&gt;getCollection();</span><br><span class="line">        // $post = $collection-&gt;addFieldToFilter(&#x27;url_key&#x27;, &#x27;fist&#x27;)-&gt;getFirstItem();</span><br><span class="line">        // var_dump($post-&gt;getData());</span><br><span class="line">        // exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个 case 分别去掉注释进行测试，查看效果。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/how-to-create-crud-model-magento-2.html">CRUD Models in Magento 2</a> <a href="http://alanstorm.com/magento_2_crud_models_for_database_access/">Magento 2: CRUD Models for Database Access</a></p>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a><a href="#%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD"></a>代码下载</h2><p><a href="https://github.com/PiscesThankIT/ThankIT_HelloWorld_3">ThankIT_HelloWorld_3</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>Collection</tag>
        <tag>Magento 2 CRUD</tag>
        <tag>Model</tag>
        <tag>Resource Model</tag>
      </tags>
  </entry>
  <entry>
    <title>css 的几个选择器</title>
    <url>/css-%E7%9A%84%E5%87%A0%E4%B8%AA%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="+ 相邻兄弟选择器"></a><a href="#+-%E7%9B%B8%E9%82%BB%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8"></a>+ 相邻兄弟选择器</h4><h4 id="兄弟选择器-不相邻也没关系"><a href="#兄弟选择器-不相邻也没关系" class="headerlink" title="~ 兄弟选择器 不相邻也没关系"></a><a href="#~-%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8-%E4%B8%8D%E7%9B%B8%E9%82%BB%E4%B9%9F%E6%B2%A1%E5%85%B3%E7%B3%BB"></a>~ 兄弟选择器 不相邻也没关系</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ThankIT&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .case-1 h1+p &#123;</span><br><span class="line">        color :#e47b7b;</span><br><span class="line">    &#125;</span><br><span class="line">    .case-2 h1~p &#123;</span><br><span class="line">        color :#e47b7b;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;case-1&quot;&gt;</span><br><span class="line">    &lt;h1&gt;h1 相邻兄弟选择器&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;我是紧邻 h1 的 p 我变红&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;我不是紧邻的 p 我没有效果&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;case-2&quot;&gt;</span><br><span class="line">    &lt;h1&gt;h1 兄弟选择器 不相邻也没有关系&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;我是紧邻 h1 的 p &lt;/p&gt;</span><br><span class="line">    &lt;div&gt;我是个 div &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;我不是紧邻的 p &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/%E5%85%84%E5%BC%9F%E9%80%89%E6%8B%A9%E5%99%A8.png"></p>
<h4 id="gt-直接后代"><a href="#gt-直接后代" class="headerlink" title="&gt; 直接后代"></a><a href="#%3E-%E7%9B%B4%E6%8E%A5%E5%90%8E%E4%BB%A3"></a>&gt; 直接后代</h4><h4 id="X-Y-所有的后代"><a href="#X-Y-所有的后代" class="headerlink" title="X Y 所有的后代"></a><a href="#x-y-%E6%89%80%E6%9C%89%E7%9A%84%E5%90%8E%E4%BB%A3"></a>X Y 所有的后代</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ThankIT&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    ul &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        margin:0;</span><br><span class="line">        padding: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">    .case-3 &gt; ul &#123;</span><br><span class="line">        border:10px solid #f9f2f4;</span><br><span class="line">    &#125;</span><br><span class="line">    .case-4 ul &#123;</span><br><span class="line">        border:10px solid #f9f2f4;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;case-3&quot; style=&quot;margin-bottom: 15px;&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;case-4&quot;&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;直接后代&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;二代&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8.png"></p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#%E5%8F%82%E8%80%83"></a>参考</h4><p><a href="http://yanhaijing.com/css/2014/01/04/the-30-css-selectors-you-must-memorize/">30个你必须记住的CSS选择符</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>选择器</tag>
      </tags>
  </entry>
  <entry>
    <title>调试工具：如何得到页面的布局文件</title>
    <url>/debug-tool-how-to-get-all-xml-layout/</url>
    <content><![CDATA[<p><em>本篇将创建一个调试工具模块，用来得到 all loaded xml layout，但是博主现在并不十分清楚 magento 2 的layout 是如何工作的，因此本篇仅是一个记录，以备后续的研究用。本篇也可以看做是 Magento 2 中如何使用 event 和 observer 的一个入门教程。</em></p>
<h2 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a><a href="#%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97"></a>创建模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: ThankIT/DevTool/registration.php</span><br><span class="line">&lt;?php</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::MODULE,</span><br><span class="line">    &#x27;ThankIT_DevTool&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: ThankIT/DevTool/etc/module.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;module.xsd&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;ThankIT_DevTool&quot; setup_version=&quot;1.0.0&quot; schema_version=&quot;1.0.0&quot; release_version=&quot;1.0.1&quot;&gt;</span><br><span class="line">    &lt;/module&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>有了上面两个文件，现在该模块就可以被 Mgento 系统找到了。</p>
<p>下面这个文件告诉 Magento 我们要监听<code>layout_generate_blocks_after</code>事件，注意是<code>events.xml</code>，<code>s</code>不要少。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: ThankIT/DevTool/etc/frontend/events.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Event/etc/events.xsd&quot;&gt;</span><br><span class="line">    &lt;event name=&quot;layout_generate_blocks_after&quot;&gt;</span><br><span class="line">        &lt;observer name=&quot;thankit_layout_generate_blocks_after&quot; instance=&quot;ThankIT\DevTool\Observer\Layout&quot; /&gt;</span><br><span class="line">    &lt;/event&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>创建<code>ThankIT\DevTool\Observer\Layout.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File:ThankIT\DevTool\Observer\Layout.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\DevTool\Observer;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Event\ObserverInterface;</span><br><span class="line"></span><br><span class="line">class Layout  implements ObserverInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $_logger;</span><br><span class="line">    public function __construct(\Psr\Log\LoggerInterface $logger)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_logger = $logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute(\Magento\Framework\Event\Observer $observer)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $xml = $observer-&gt;getEvent()-&gt;getLayout()-&gt;getXmlString();</span><br><span class="line">        // $this-&gt;_logger-&gt;debug($xml);   // If you use it, check ouput string xml in var/log/debug.log</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info($xml);</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后启用该模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento module:enable ThankIT_DevTool</span><br><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>刷新你想查看布局的页面，然后查看<code>var/log/layout_block.xml</code>就可以看到 all loaded xml layout 了。</p>
<p>最好用文本编辑工具美化一下，这样就看得很舒服了。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://magento.stackexchange.com/questions/97343/how-can-i-debug-layout-file-processing-in-magento-2">How can I debug layout file processing in Magento 2?</a></p>
<p>大体上是正确的，但是有一点变化，Magento 2 升级导致 observer 必须放在模块的 observer 文件夹下。请参考如下文档。</p>
<p><a href="http://devdocs.magento.com/guides/v2.0/extension-dev-guide/events-and-observers.html#events">Events and observers</a></p>
<p>关于 events 的其他文档：</p>
<p><a href="https://www.atwix.com/magento-2/choose-your-perfect-event/">CHOOSE YOUR PERFECT EVENT IN MAGENTO 2</a></p>
<p><a href="https://cyrillschumacher.com/magento-2.1-list-of-all-dispatched-events/">Magento 2.1 – List of all dispatched events</a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="#%E4%B8%8B%E8%BD%BD"></a>下载</h2><p><a href="https://github.com/PiscesThankIT/debug-layout-file">下载地址</a></p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>css 父元素高度崩塌解决办法</title>
    <url>/css-%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%B4%A9%E5%A1%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<p>当父元素没有设置高度，（我们本希望它由子元素撑起来），而子元素设置了浮动，这时候子元素脱离了标准的文档流，于是父元素的高度就崩塌了，高度变为 0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ThankIT&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .parent &#123;</span><br><span class="line">        border:10px solid #f9f2f4;</span><br><span class="line">    &#125;</span><br><span class="line">    .child &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        float: left;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        padding: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        I am child</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%B4%A9%E5%A1%8C.png"></p>
<h2 id="解决方法一"><a href="#解决方法一" class="headerlink" title="解决方法一"></a><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%B8%80"></a>解决方法一</h2><p>设置父元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.solution-one .parent &#123;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        zoom: 1;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;div class=&quot;solution-one&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">            I am child</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%B4%A9%E5%A1%8C%E4%BF%AE%E5%A4%8D.png"></p>
<h2 id="解决方法二"><a href="#解决方法二" class="headerlink" title="解决方法二"></a><a href="#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%E4%BA%8C"></a>解决方法二</h2><p>利用 after 伪元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.solution-two .parent:after &#123;</span><br><span class="line">        content: &quot; &quot;;</span><br><span class="line">        display: table;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;div class=&quot;solution-two&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">            I am child</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/%E7%88%B6%E5%85%83%E7%B4%A0%E9%AB%98%E5%BA%A6%E5%B4%A9%E5%A1%8C%E4%BF%AE%E5%A4%8D.png"> 完整的参考代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ThankIT&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .parent &#123;</span><br><span class="line">        border:10px solid #f9f2f4;</span><br><span class="line">    &#125;</span><br><span class="line">    .child &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        float: left;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        padding: 15px;</span><br><span class="line">    &#125;</span><br><span class="line">    .solution-one .parent &#123;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        zoom: 1;</span><br><span class="line">    &#125;</span><br><span class="line">    .solution-two .parent:after &#123;</span><br><span class="line">        content: &quot; &quot;;</span><br><span class="line">        display: table;</span><br><span class="line">        clear: both;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">        I am child</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;clear: both;height: 20px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;solution-one&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">            I am child</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div style=&quot;clear: both;height: 20px;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;solution-two&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">            I am child</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>float</tag>
      </tags>
  </entry>
  <entry>
    <title>declarative schema</title>
    <url>/declarative-schema/</url>
    <content><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a><a href="#requirements"></a>Requirements</h2><p>Demonstrate use of schema. How to manipulate columns and keys using declarative schema? What is the purpose of whitelisting? How to use Data and Schema patches? How to manage dependencies between patch files?</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#Experiments"></a>Experiments</h2><h3 id="using-db-schema-xml-to-add-a-new-table"><a href="#using-db-schema-xml-to-add-a-new-table" class="headerlink" title="using db_schema.xml to add a new table"></a><a href="#using-%60db_schema.xml%60-to-add-a-new-table"></a>using <code>db_schema.xml</code> to add a new table</h3><p>Based on 2.3.1, create a new module named VendorName_TestModule create <code>etc/db_schema.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;schema xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd&quot;&gt;</span><br><span class="line">  &lt;table name=&quot;order_custom_attribute&quot; resource=&quot;default&quot; engine=&quot;innodb&quot; comment=&quot;order_custom_attribute&quot;&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;int&quot; name=&quot;entity_id&quot; padding=&quot;10&quot; unsigned=&quot;true&quot; nullable=&quot;false&quot; identity=&quot;true&quot; comment=&quot;Entity ID&quot;/&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;varchar&quot; name=&quot;foo&quot; nullable=&quot;true&quot; length=&quot;255&quot; comment=&quot;foo&quot;/&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;varchar&quot; name=&quot;bar&quot; nullable=&quot;true&quot; length=&quot;255&quot; comment=&quot;bar&quot;/&gt;</span><br><span class="line">    &lt;constraint xsi:type=&quot;primary&quot; referenceId=&quot;PRIMARY&quot;&gt;</span><br><span class="line">      &lt;column name=&quot;entity_id&quot;/&gt;</span><br><span class="line">    &lt;/constraint&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure>

<p>If you already have install or upgrade script,you can convert them to db_schema.xml files. To convert your install or upgrade script, run one of the following commands:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento setup:install --convert-old-scripts=1</span><br><span class="line">bin/magento setup:upgrade --convert-old-scripts=1</span><br></pre></td></tr></table></figure>

<p>To enable dry run mode, run one of the following commands:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento setup:install --dry-run=1</span><br><span class="line">bin/magento setup:upgrade --dry-run=1</span><br></pre></td></tr></table></figure>

<p>As a result of specifying the —dry-run&#x3D;1 flag, Magento writes a log file at &#x2F;var&#x2F;log&#x2F;dry-run-installation.log. This file contains all the DDL SQL statements that are generated during installation. You can use these SQL statements for debugging and optimizing performance processes. Next,we will create a schema whitelist. run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento setup:db-declaration:generate-whitelist --module-name=VendorName_TestModule</span><br></pre></td></tr></table></figure>

<p>We should get a file <code>etc/db_schema_whitelist.json</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;order_custom_attribute&quot;: &#123;</span><br><span class="line">        &quot;column&quot;: &#123;</span><br><span class="line">            &quot;entity_id&quot;: true,</span><br><span class="line">            &quot;foo&quot;: true,</span><br><span class="line">            &quot;bar&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;constraint&quot;: &#123;</span><br><span class="line">            &quot;PRIMARY&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Our module’s current version is 2.1.7 Now, run：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>Check the databse, now we have the table <strong>order_custom_attribute</strong>, it has three columns (entity_id, foo, bar)</p>
<h3 id="delete-column-by-edit-db-schema-xml"><a href="#delete-column-by-edit-db-schema-xml" class="headerlink" title="delete column by edit db_schema.xml"></a><a href="#delete-column-by-edit-db_schema.xml"></a>delete column by edit db_schema.xml</h3><p>Let’s edit db_schema.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;schema xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd&quot;&gt;</span><br><span class="line">  &lt;table name=&quot;order_custom_attribute&quot; resource=&quot;default&quot; engine=&quot;innodb&quot; comment=&quot;order_custom_attribute&quot;&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;int&quot; name=&quot;entity_id&quot; padding=&quot;10&quot; unsigned=&quot;true&quot; nullable=&quot;false&quot; identity=&quot;true&quot; comment=&quot;Entity ID&quot;/&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;varchar&quot; name=&quot;foo&quot; nullable=&quot;true&quot; length=&quot;255&quot; comment=&quot;foo&quot;/&gt;</span><br><span class="line">    &lt;!--&lt;column xsi:type=&quot;varchar&quot; name=&quot;bar&quot; nullable=&quot;true&quot; length=&quot;255&quot; comment=&quot;bar&quot;/&gt;--&gt;</span><br><span class="line">    &lt;constraint xsi:type=&quot;primary&quot; referenceId=&quot;PRIMARY&quot;&gt;</span><br><span class="line">      &lt;column name=&quot;entity_id&quot;/&gt;</span><br><span class="line">    &lt;/constraint&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure>

<p>We comment the bar column. Then we edit <code>etc/module.xml</code> make <code>etup_version</code> to be 2.1.8 run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>Check table <code>order_custom_attribute</code>, it has two colums(entity_id, foo),the column bar has been removed. If you delete <code>db_schema_whitelist.json</code>, the column drop won’t happen.</p>
<h3 id="data-patch-example"><a href="#data-patch-example" class="headerlink" title="data patch example"></a><a href="#data-patch-example"></a>data patch example</h3><p>Let’s create a sample data patch, <code>Setup\Patch\Data\TestPatch.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Setup\Patch\Data;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Setup\Patch\DataPatchInterface;</span><br><span class="line">use Magento\Framework\Setup\Patch\PatchVersionInterface;</span><br><span class="line">use Magento\Framework\Setup\Patch\PatchRevertableInterface;</span><br><span class="line"></span><br><span class="line">class TestPatch implements DataPatchInterface, PatchRevertableInterface, PatchVersionInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function getAliases()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This internal Magento method, that means that some patches with time can change their names,</span><br><span class="line">         * but changing name should not affect installation process, that&#x27;s why if we will change name of the patch</span><br><span class="line">         * we will add alias here</span><br><span class="line">         */</span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function apply()</span><br><span class="line">    &#123;</span><br><span class="line">        // lets do something</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;TestPatch apply execute&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static function getDependencies()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         * This is dependency to another patch. Dependency should be applied first</span><br><span class="line">         * One patch can have few dependencies</span><br><span class="line">         * Patches do not have versions, so if in old approach with Install/Ugrade data scripts you used</span><br><span class="line">         * versions, right now you need to point from patch with higher version to patch with lower version</span><br><span class="line">         * But please, note, that some of your patches can be independent and can be installed in any sequence</span><br><span class="line">         * So use dependencies only if this important for you</span><br><span class="line">         */</span><br><span class="line">        // return [</span><br><span class="line">        //     SomeDependency::class</span><br><span class="line">        // ];</span><br><span class="line"></span><br><span class="line">        return [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function revert()</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;TestPatch revert execute&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public static function getVersion()</span><br><span class="line">    &#123;</span><br><span class="line">        /**</span><br><span class="line">         *  If the version number of the module in our database is higher than</span><br><span class="line">         *  the version we specify here in our file, the patch will not execute.</span><br><span class="line">         *  If it is equal to or lower than the version here, it will execute.</span><br><span class="line">         */</span><br><span class="line">        return &#x27;2.3.1&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Our module’s current version is 2.1.9, this is lower than the version (2.3.1) we specify here in our file, so, after you run <code>bin/magento setup:upgrade</code>, you will see <code>layout_block.xml</code> log. This means our patch has been applied. Also, you will see our TestPatch in patch_list table. Let’s remove it from patch_list table, and edit the version in our file to be 2.1.0, after run <code>bin/magento setup:upgrade</code>. you will see our path is added to patch_list table but not be applied. run:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/magento module:uninstall --non-composer VendorName_TestModule</span><br></pre></td></tr></table></figure>

<p>Ok, our patch is removed from patch_list table and the revert function executed.</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#Notes"></a>Notes</h2><p>Implementing declarative schema is not a requirement for Magento 2.3. However, upgrade scripts will be phased out in favor of declarative schema Once you start with data patches, you cannot continue to use upgrade scripts. Backward compatibility must be maintained. Therefore, declarative schema does not automatically delete database tables, columns or keys that are not defined in a db_schema.xml file. Declarative schema cannot delete these elements because these items can be declared somewhere else, such as in an Setup&#x2F;UpgradeSchema.php file. The &#x2F;&#x2F;etc&#x2F;db_schema_whitelist.json file provides a history of all tables, columns, and keys added with declarative schema. It is required to allow drop operations. db_schema_whitelist.json is a temporary solution. It will be removed in the future, when upgrade scripts are no longer supported. A data patch is a class that contains data modification instructions. It is defined in a <code>&lt;Vendor&gt;/&lt;Module_Name&gt;/Setup/Patch/Data/&lt;Patch_Name&gt;.php</code> file and implements <code>\Magento\Framework\Setup\Patch\DataPatchInterface</code>. A schema patch contains custom schema modification instructions. These modifications can be complex. It is defined in a <code>&lt;Vendor&gt;/&lt;Module_Name&gt;/Setup/Patch/Schema/&lt;Patch_Name&gt;.php</code> file and implements <code>\Magento\Framework\Setup\Patch\SchemaPatchInterface</code>. Currently, use data patch to add eav attributes.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#reference"></a>Reference</h2><p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/declarative-schema/data-patches.html">Develop data and schema patches</a> <a href="https://onilab.com/blog/declarative-schema-magento-2-3-and-higher/">Declarative Schema in Magento 2.3 and Higher – a Comprehensive Review</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>货币</title>
    <url>/currency-overview/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/currency-overview.html">原文地址</a></em></p>
<h2 id="货币设置"><a href="#货币设置" class="headerlink" title="货币设置"></a><a href="#%5B%E8%B4%A7%E5%B8%81%E8%AE%BE%E7%BD%AE%5D()"></a>货币设置</h2><p><img src="/wp-content/uploads/2016/08/stores-currency-rate-setup_212x129.png"><br>设置基础货币和接受的其他外币。建立用于自动更新货币汇率的导入连接和时间表。</p>
<h2 id="货币符号"><a href="#货币符号" class="headerlink" title="货币符号"></a><a href="#%5B%E8%B4%A7%E5%B8%81%E7%AC%A6%E5%8F%B7%5D()"></a>货币符号</h2><p><img src="/wp-content/uploads/2016/08/stores-currency-symbols_212x127.png"><br>定义出现在商品价格和销售单据，如订单和发票里的货币符号。Magento支持来自世界各地超过200个国家的货币。</p>
<h2 id="更新货币汇率"><a href="#更新货币汇率" class="headerlink" title="更新货币汇率"></a><a href="#%5B%E6%9B%B4%E6%96%B0%E8%B4%A7%E5%B8%81%E6%B1%87%E7%8E%87%5D()"></a>更新货币汇率</h2><p><img src="/wp-content/uploads/2016/08/stores-currency-rate-update_212x119.png"><br>汇率可以手动进行更新或根据需要，或根据预定的时间表导入到店铺中。</p>
<h2 id="货币选择器"><a href="#货币选择器" class="headerlink" title="货币选择器"></a><a href="#%5B%E8%B4%A7%E5%B8%81%E9%80%89%E6%8B%A9%E5%99%A8%5D()"></a>货币选择器</h2><p><img src="/wp-content/uploads/2016/08/storefront-currency-chooser_212x103.png"><br>如果有多种货币可供选择，店头会出现货币选择器。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>店铺演示提示</title>
    <url>/demo-notice/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/demo-notice.html">原文地址</a></em></p>
<p>如果您的店铺已经上线但是还在建设中，您可以在店面顶端显示一个演示提示，好让别人知道您的店铺还没有正式开张呢。开张的时候，移除他就行了。这就像门上挂的牌子，从”Closed”翻成”Open”。店铺演示提示的具体格式取决于店铺的主题(theme)。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-demo-notice_thumb_0_0.png"></p>
<h2 id="设置店铺演示提示"><a href="#设置店铺演示提示" class="headerlink" title="设置店铺演示提示"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%BA%97%E9%93%BA%E6%BC%94%E7%A4%BA%E6%8F%90%E7%A4%BA"></a>设置店铺演示提示</h2><ol>
<li><p>后台侧边栏，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong>(Design) &gt; <strong>配置</strong> (Configuration)</p>
</li>
<li><p>在表格中找到您要修改的 Store view ，在 Action 列，点击编辑(Edit)</p>
</li>
<li><p>在<strong>其他设置</strong>(Other Setttings)下展开<strong>头部</strong>(Header)部分</p>
</li>
<li><p>下拉到底，设置<strong>显示店铺演示提示</strong>(Display Demo Store Notice)  </p>
<p><img src="/wp-content/uploads/2016/08/design-configuration-html-head_thumb_0_0.png"></p>
</li>
<li><p>完成后，点击保存配置(Save Configuration)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Design Configuration</title>
    <url>/design-configuration/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/configuration.html">原文地址</a></p>
<p>Design 配置通过在单个页面上显示设置，使得它易于编辑设计相关的规则和配置设置。</p>
<p><img src="/wp-content/uploads/2016/11/design-configuration.png" alt="Design Configuration"></p>
<h2 id="编辑设计配置"><a href="#编辑设计配置" class="headerlink" title="编辑设计配置"></a><a href="#%E7%BC%96%E8%BE%91%E8%AE%BE%E8%AE%A1%E9%85%8D%E7%BD%AE"></a>编辑设计配置</h2><ol>
<li><p>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Design</strong> 下选择 <strong>Configuration</strong></p>
</li>
<li><p>选择你要配置的 store view 。 然后点击 <strong>Edit</strong></p>
</li>
<li><p>要改变默认的主题，设置 <strong>Applied Theme</strong> 为你要应用的主题。<br>如果没有指定主题，系统会使用默认的主题。一些第三方扩展更改了系统的默认主题。</p>
</li>
<li><p>如果某个主题只应用在特定的设备，那么做如下操作：<br>a. 在 Design Rules 下，点击 <strong>Add New Agent Rule</strong><br>b. 在 <strong>Search String</strong> 栏中，输入特定设备的 browser ID<br>c. search string 可以是普通的表达式或者是 Perl Compatible Regular Expression ，要了解更多，请参考 <a href="https://en.wikipedia.org/wiki/User_agent">User Agent</a>，下面的表达式代表 Firefox:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/^mozilla/i</span><br></pre></td></tr></table></figure>

<p>d. 在 <strong>Theme Name</strong> 栏中，选择你要应用的主题<br><img src="/wp-content/uploads/2016/11/design-configuration-user-agent-rules.png"><br>e. 重复上述步骤输入其他规则，search strings 按照他们被输入的顺序进行匹配。</p>
</li>
<li><p>根据需要进行其他设置<br><img src="/wp-content/uploads/2016/11/design-configuration-edit.png" alt="Edit Design Configuration"></p>
<ul>
<li>HTML Head</li>
<li>Header</li>
<li>Footer</li>
<li>Pagination</li>
<li>Product Image Watermarks</li>
<li>Transactional Emails</li>
</ul>
</li>
<li><p>完成后，点击 <strong>Save Configuration</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Design Menu</title>
    <url>/design-menu/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/design-menu.html">原文地址</a></p>
<p>Magento 提供了各种易于使用的设计选项，您可以用他们来对您的店铺做简单更改。另外，您可以在市场上找到许多专业的设计主题。主题就像是您店铺的着装，您可以根据季节或促销目的，更换主题。</p>
<p>更多高级的用户会领略到 Magento 面向对象环境带来的灵活性，他可以将单个的组件组装成最终的页面。在你了解了基础知识后，你一定会爱上他的灵活多样的。要了解更多，请参考 <a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/bk-frontend-dev-guide.html?_ga=1.127882756.805843861.1479171564">Frontend Developer Guide</a></p>
<p><img src="/wp-content/uploads/2016/11/admin-menu-content.png" alt="Design Menu"></p>
<h2 id="Menu-Options"><a href="#Menu-Options" class="headerlink" title="Menu Options"></a><a href="#menu-options"></a>Menu Options</h2><h3 id="Themes"><a href="#Themes" class="headerlink" title="Themes"></a><a href="#themes"></a>Themes</h3><p>主题决定着店铺的外观，它由一系列布局文件，模板文件，翻译文件，以及皮肤组成。</p>
<h3 id="Schedule"><a href="#Schedule" class="headerlink" title="Schedule"></a><a href="#schedule"></a>Schedule</h3><p>主题可以根据时间计划表在一个时间段被激活。您可以使用时间计划表来提前安排为季节或促销准备的主题。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>overflow-wrap 和 word-break</title>
    <url>/difference-between-overflow-wrap-and-word-break/</url>
    <content><![CDATA[<p>overflow-wrap 和 word-break 都是用于长单词断句的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    p &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        background-color: #f9f2f4;</span><br><span class="line">        color: #c7254e;</span><br><span class="line">    &#125;</span><br><span class="line">    .overflow-wrap &#123;</span><br><span class="line">        overflow-wrap: break-word;</span><br><span class="line">    &#125;</span><br><span class="line">    .word-break &#123;</span><br><span class="line">        word-break: break-all;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;p &gt;浏览器默认情况下：&lt;br/&gt;ThankIT, Hello, How are yoooooooooooooooooooooooooooooooooooooooooooooooooooou?&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;overflow-wrap&quot;&gt;overflow-wrap:break-word&lt;br/&gt;ThankIT, Hello, How are yoooooooooooooooooooooooooooooooooooooooooooooooooooou?&lt;/p&gt;</span><br><span class="line">&lt;p class=&quot;word-break&quot;&gt;break-word:break-all&lt;br/&gt;ThankIT, Hello, How are yoooooooooooooooooooooooooooooooooooooooooooooooooooou?&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/overflow-wrap-and-word-break.png"> 默认情况下，如果一个单词很长，导致一行中剩下的空间放不下的时候，浏览器就会把该单词移到下一行，如果宽度还是超出父元素，就会溢出。 overflow-wrap 最早叫 word-wrap ，最早是 IE 的特性。现在 word-wrap 作为 overflow-wrap 的别名，几乎所有浏览器都支持。在断句的时候，会首先将长单词挪到下一行，然后下一行再放不下则断开。 word-break 则是不考虑换行，充分利用空间，简单粗暴。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p>内有案例可查看其他值的效果 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap">overflow-wrap</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/word-break">word-break</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>overflow-wrap</tag>
        <tag>word-break</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 的插件是否必须开源</title>
    <url>/do-magento-extension-need-to-be-open-source/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a><a href="#%E9%97%AE%E9%A2%98"></a>问题</h2><p>Magento 的插件是否必须开源？</p>
<h2 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a><a href="#%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9"></a>相关内容</h2><p>Magento 社区版基于 OSL（3.0） 授权。</p>
<p>关于 magento 的 LICENSE &#x2F; TRADEMARKS 可以参考官方 FAQ ：<a href="https://magento.com/legal/licensing">https://magento.com/legal/licensing</a></p>
<p>关于 OSL 3.0 只找到这样的中文介绍，凑合看看：<br>对于采用OSL 3.0协议的magento的权利以及义务<br>（一）权利：<br>１、于著作权有效期限内，授与被授权人不分地区、免授权金、非专属、可再授权之下列权利：<br>（1）部份&#x2F;全部 重制原始著作。<br>（2）翻译&#x2F;引用&#x2F;修改原始著作，以产生衍生著作。<br>（3）公布原始著作&#x2F;衍生著作，但仍必须以OSL授权。<br>（4）公开执行&#x2F;展示原始著作。</p>
<p>２、于专利权有效期限内，授与被授权人不分地区、免授权金、非专属、可再授权之下列权力：<br>（1）重制原始或衍生著作。<br>（2）使用原始或衍生著作。<br>（3）贩卖原始或衍生著作。<br>（4）引用原始或衍生著作。</p>
<p>（二）义务：<br>1、只要被授权人仍继续散布原始著作，则被授权人必需持续提供原始码。<br>2、非经同意，被授权人不可利用授权人或其他贡献者之姓名或商标，做为商品之背书或促销用途。<br>3、被授权人任何之衍生著作皆须以OSL授权。<br>4、被授权人于衍生著作中须明确标示出对原始著作有所更改〈AttributionNotice〉。<br>5、被授权人若违反本条款之规定，将立即丧失所被授与之权利。</p>
<p>接触过开源软件的朋友很可能对 GNU协议比较了解，其实GNU与OSL没有本质区别，但是因为今年来一些商业公司针对开源项目提起了一些诉讼，所以产生了法律方面更完善的OSL协议。 我想上面的几条权利和义务已经介绍的很清楚了，更具体的判断行为是否可以，那就需要专业律师咨询了。</p>
<p>上面一段摘自开源中国社区，<a href="http://www.oschina.net/question/12_4285?_t_t_t=0.3621957151192301">原文地址</a></p>
<p>可是 magento 的插件算是衍生著作吗？需要继续遵循OSL协议吗？是否必须开源呢？</p>
<h2 id="询问官方"><a href="#询问官方" class="headerlink" title="询问官方"></a><a href="#%E8%AF%A2%E9%97%AE%E5%AE%98%E6%96%B9"></a>询问官方</h2><p>博主发邮件询问了 magento marketplace 的support(<a href="mailto:&#x6d;&#x61;&#114;&#x6b;&#101;&#x74;&#112;&#x6c;&#x61;&#x63;&#x65;&#x40;&#x6d;&#97;&#103;&#101;&#110;&#x74;&#111;&#x2e;&#99;&#111;&#x6d;">&#x6d;&#x61;&#114;&#x6b;&#101;&#x74;&#112;&#x6c;&#x61;&#x63;&#x65;&#x40;&#x6d;&#97;&#103;&#101;&#110;&#x74;&#111;&#x2e;&#99;&#111;&#x6d;</a>)</p>
<p>我：Do extensions submit to Marketplace need to be open source ?（提交给marketplace 的插件必须开源么？）</p>
<p>对方：No the products do not have to be open source （不是必须开源的）</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a><a href="#%E7%BB%93%E8%AE%BA"></a>结论</h2><p>如果 magento 的插件不要求开源，那说明他就不是 magento 的衍生著作，他是开发者的著作，开发者可自行决定使用什么协议，是否开源。</p>
<h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a><a href="#%E5%85%B6%E4%BB%96%E9%97%AE%E9%A2%98"></a>其他问题</h2><p>上面的开源中国社区下面有一些六年前的评论，没有回复，我在这里讲讲我的理解吧。说得不对请轻拍。</p>
<p>问：用 magento 建站不需要付版权费吧？<br>答：magento 有两个版本，社区版（CE）和企业版（EE）CE 是免费开源的。 EE 是要付费的，他的协议是商业协议，不是 OSL 3.0</p>
<p>问： 用 osl v3 协议的程序做二次开发，需要掏钱不？<br>答： magento 的 ce 做二次开发是不需要给官方钱的，但是你找公司或开发人员还是要掏钱的，如果你自己能开发，那就不要掏钱了，不过实际上你的时间就是钱呢。(．．)</p>
<p>问：用这个做的东西，是不是最终的东西也必须是osl v3协议？我做的最终东西不能卖？如果要卖必须征求原始版权持有者的同意或购买版权费？<br>答：这个分情况。关于 magento 的插件已经清楚了，它就是属于开发者的东西，你用什么协议跟麦进斗没有关系，当然可以卖。如果你是修改 magento ce 版本本来的东西，你也可以卖，但是你更改后的东西仍然必须是 OSL 协议的，也就是保持开源，不可以闭源。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>OSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker Change Port Mapping for an Existing Container</title>
    <url>/docker-change-port-mapping-for-an-existing-container/</url>
    <content><![CDATA[<p><code>docker ps docker stop &#123;your container&#125; service docker stop vi /var/lib/docker/containers/&#123;container id&#125;/config.v2.json vi /var/lib/docker/containers/&#123;container id&#125;/hostconfig.json</code> <a href="https://mybrainimage.wordpress.com/2017/02/05/docker-change-port-mapping-for-an-existing-container/">Docker Change Port Mapping for an Existing Container</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>直接下载 Magento 1 的插件</title>
    <url>/download-magento1-extension-directly/</url>
    <content><![CDATA[<p>一般情况下，最好是用 Magento Connect 直接安装插件。不过对开发者来说，可能只需要看一下插件的业务逻辑或者实现什么的，所以直接下载的方式更方便些。</p>
<p>工具：</p>
<p><a href="http://freegento.com/ddl-magento-extension.php">http://freegento.com/ddl-magento-extension.php</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Magento 1 插件下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 搭建 lamp 环境 （失败）</title>
    <url>/docker-%E6%90%AD%E5%BB%BA-lamp-%E7%8E%AF%E5%A2%83-%EF%BC%88%E5%A4%B1%E8%B4%A5%EF%BC%89/</url>
    <content><![CDATA[<p><em>这又是一次不成功的尝试，10 个月前试过一次，同样由于权限问题止步。此次记录下来备查。</em> windows 10 系统。官网下载安装包，下一步下一步，安装后重启。确认安装成功后，打开 CMD 。 运行一个 ubuntu 的 container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -ti --name lamp ubuntu:16.04 bash</span><br></pre></td></tr></table></figure>

<p>升级系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">apt-get -y upgrade</span><br></pre></td></tr></table></figure>

<p>安装apache2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y install apache2</span><br></pre></td></tr></table></figure>

<p>查看 apache 版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apache2 -v</span><br><span class="line">Server version: Apache/2.4.18 (Ubuntu)</span><br><span class="line">Server built:   2017-05-05T16:32:00</span><br></pre></td></tr></table></figure>

<p>启用 Apache rewrite 模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a2enmod rewrite</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y install vim</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure>

<p>在文件末尾添加 下面的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory &quot;/var/www/html&quot;&gt;</span><br><span class="line">    AllowOverride  all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<p>安装 MySQL 5.7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y install mysql-server-5.7 mysql-client-5.7</span><br></pre></td></tr></table></figure>

<p>输入 root 的密码：root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br><span class="line">mysql -u root -p</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 6</span><br><span class="line">Server version: 5.7.18-0ubuntu0.16.04.1 (Ubuntu)</span><br></pre></td></tr></table></figure>

<p>创建数据库 magento 并将所有权限授予 magento 用户 密码 magento</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database magento;</span><br><span class="line">GRANT ALL ON magento.* TO magento@localhost IDENTIFIED BY &#x27;magento&#x27;;</span><br><span class="line">exit</span><br><span class="line">mysql -u magento -p</span><br><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>安装 php 7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get -y update</span><br><span class="line">apt-get install software-properties-common</span><br><span class="line">add-apt-repository ppa:ondrej/php</span><br><span class="line">apt-get -y update</span><br><span class="line">apt-get install -y php7.0 libapache2-mod-php7.0 php7.0 php7.0-common php7.0-gd php7.0-mysql php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl php7.0-mbstring php7.0-zip php7.0-bcmath php7.0-iconv</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -v</span><br><span class="line"></span><br><span class="line">PHP 7.0.19-1+deb.sury.org~xenial+1 (cli) (built: May 11 2017 14:06:14) ( NTS )</span><br><span class="line">Copyright (c) 1997-2017 The PHP Group</span><br><span class="line">Zend Engine v3.0.0, Copyright (c) 1998-2017 Zend Technologies</span><br><span class="line">    with Zend OPcache v7.0.19-1+deb.sury.org~xenial+1, Copyright (c) 1999-2017, by Zend Technologies</span><br></pre></td></tr></table></figure>

<p>PHP 的其他设置 有两个 php.ini &#x2F;etc&#x2F;php&#x2F;7.0&#x2F;apache2&#x2F;php.ini &#x2F;etc&#x2F;php&#x2F;7.0&#x2F;cli&#x2F;php.ini 两个都需要更改并启用 opcache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">date.timezone = &quot;Asia/Shanghai&quot;</span><br><span class="line">memory_limit = 1024M</span><br><span class="line">opcache.enable=1</span><br><span class="line">opcache.enable_cli=1</span><br><span class="line">opcache.save_comments = 1</span><br><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;This is lamp for magento2&quot; -a &quot;Pisces.ThankIT&quot; lamp wqdocker/lamp:v1</span><br></pre></td></tr></table></figure>

<p>这样我就得到了一个 lamp 的 image 然后我尝试更改挂载上去的目录权限，无效。 以下是失败的部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -tid -p 80:80 --name lampv1 -v g:/dockerwww:/var/www/html  wqdocker/lamp:v1 bash</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -tid -p 80:80 -p 3306:3306 --name lampv2 -v g:/dockerwww:/var/www/html  wqdocker/lamp:v1 bash</span><br></pre></td></tr></table></figure>

<p>进入容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach lampv1</span><br><span class="line">service apache2 start</span><br><span class="line">service mysql start</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd -r -m -s /bin/bash magento</span><br><span class="line">配置用户的密码(magento)</span><br><span class="line">passwd magento</span><br><span class="line">寻找 apache 的 user (www-data)</span><br><span class="line">ps aux  grep apache</span><br><span class="line">www-data 的 group 也是www-data</span><br><span class="line">groups www-data</span><br><span class="line">把 magento 用户创建的任何文件都分配给 www-data 组</span><br><span class="line">usermod -g www-data magento</span><br><span class="line">验证下 magento 在 www-data 组</span><br><span class="line">groups magento</span><br><span class="line">chown magento:www-data index.php</span><br></pre></td></tr></table></figure>

<p>无法修改权限，查了一些资料，推测是 docker 在 windows 系统上的 bug 。 在 ubuntu 系统下，权限的映射有点小问题，但是可以解决。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>EavSetup classes</title>
    <url>/eavsetup-classes/</url>
    <content><![CDATA[<p>A few classes extend \Magento\Eav\Setup\EavSetupFactory that provide additional features for specifc entity types:</p>
<ul>
<li>Product and Category: <a href="https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Catalog/Setup/CategorySetup.php">\Magento\Catalog\Setup\CategorySetup</a></li>
<li>Customer and Customer address : <a href="https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Customer/Setup/CustomerSetup.php">\Magento\Customer\Setup\CustomerSetup</a></li>
<li>Orders, Invoices, Shipments, and Credit memos: <a href="https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Sales/Setup/SalesSetup.php">\Magento\Sales\Setup\SalesSetup</a></li>
<li>Quotes (Quote is not an eav type): <a href="https://github.com/magento/magento2/blob/2.3-develop/app/code/Magento/Quote/Setup/QuoteSetup.php">\Magento\Quote\Setup\QuoteSetup</a></li>
</ul>
<p><img src="/wp-content/uploads/2019/06/eavSetup.png"> (The answer marked green is correct)</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>ECshop 3.6 初探</title>
    <url>/ecshop-3-6-%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>曾经的 ECshop 占据了国内相当大的一部分市场，现在出 3.6 了，所以博主想看看 ecshop 有没有什么变化。 下载的话，还需要注册，博主把自己下载的<a href="http://pan.baidu.com/s/1skJVqiD#list/path=%2Fwww.hellomagento2.com">搁在这里</a>，有兴趣的可以下载下来看看。 以下是安装截图，看看就好。 <img src="/wp-content/uploads/2017/05/1.png"> <img src="/wp-content/uploads/2017/05/2.png"> <img src="/wp-content/uploads/2017/05/3.png"> <img src="/wp-content/uploads/2017/05/4.png"> <img src="/wp-content/uploads/2017/05/5.png"> <img src="/wp-content/uploads/2017/05/6.png"> <img src="/wp-content/uploads/2017/05/7.png"> <img src="/wp-content/uploads/2017/05/8.png"> <img src="/wp-content/uploads/2017/05/9.png"> <img src="/wp-content/uploads/2017/05/10.png"> <img src="/wp-content/uploads/2017/05/11.png"> <img src="/wp-content/uploads/2017/05/12.png"> 大致看了下代码，没有命名空间，主要是面向过程的写法，smarty 模版机制，MySQLi 的连接方式。主要有三个入口，appserver 负责 API ，这个给 APP 调用（需要另外付费）。ecshop&#x2F;h5 负责 H5 页面，ecshop 负责 PC 入口。（如果我说的不对，欢迎纠正） 这样的话，代码架构有点过时了，可维护性会很差。 然后我找到了判断是 PC 还是手机的代码，整理后是这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$ua = strtolower($_SERVER[&#x27;HTTP_USER_AGENT&#x27;]);</span><br><span class="line"></span><br><span class="line">$uachar = &quot;/(nokiasonyericssonmotsamsungsghlgphilipspanasonicalcatellenovocldcmidpmobile)/i&quot;;</span><br><span class="line"></span><br><span class="line">if ($ua == &#x27;&#x27;  preg_match($uachar, $ua)) &#123;</span><br><span class="line">    echo &#x27;手机端&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &#x27;pc&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然不全面，倒还算简洁可用，所以先放这里吧。 然后我又找了一个更全面点的，也顺带放这里吧，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function isMobile()</span><br><span class="line">&#123;</span><br><span class="line">    //正则表达式,批配不同手机浏览器UA关键词。</span><br><span class="line">    $regex_match = &quot;/(nokiaiphoneandroidmotorola^mot\-softbankfomadocomokddiup\.browserup\.link&quot;;</span><br><span class="line">    $regex_match .= &quot;htcdopodblazernetfrontheliohosinhuaweinovarraCoolPadwebostechfaithpalmsource&quot;;</span><br><span class="line">    $regex_match .= &quot;blackberryalcatelamoiktouchnexiansamsung^sam\-s[cg]h^lgeericssonphilipssagemwellcombunjalloomaui&quot;;</span><br><span class="line">    $regex_match .= &quot;symbiansmartphonemidpwapphonewindows ceiemobile^spice^bird^zte\-longcospantechgionee^sie\-portalmmm&quot;;</span><br><span class="line">    $regex_match .= &quot;jig\s browserhiptop^ucweb^benqhaier^lctopera\s*mobiopera\*mini320x320240x320176x220&quot;;</span><br><span class="line">    $regex_match .= &quot;)/i&quot;;</span><br><span class="line">    return isset($_SERVER[&#x27;HTTP_X_WAP_PROFILE&#x27;]) or isset($_SERVER[&#x27;HTTP_PROFILE&#x27;]) or preg_match($regex_match, strtolower($_SERVER[&#x27;HTTP_USER_AGENT&#x27;])); //如果UA中存在上面的关键词则返回真。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (isMobile()) &#123;</span><br><span class="line">    //如果为真，则进行WAP页面。</span><br><span class="line">    echo &#x27;WAP&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //如果为假，则进行PC页面。</span><br><span class="line">    echo &#x27;PC&#x27;;</span><br><span class="line">    //return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我又顺道去看了国内其他一些系统，然后就发现了开源但不可二开这种奇葩的协议，反正就是要购买授权啦。 提一个 ShopSN ，基于 ThinkPHP 3.2.3，据说是要做全网的，但是目前还没有看到演示的手机端，但是协议还是让人放心的，付费去版权，不付费也可以用。过一段时间再看看吧。 2017&#x2F;05&#x2F;19 更新 之前在 ecshop 注册了，这不销售打电话过来了。以下是了解到的信息。 正式使用需要授权，授权费用是 7800 包括 PC 和 H5 ，下载的测试代码可以看到 PC 但是看不了 H5 APP 需要单独授权，Android 和 IOS 一起 2.44 万，不提供源代码。 提供源代码，一起总共 7.58 万。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>events</title>
    <url>/events/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Event/etc/events.xsd&quot;&gt;</span><br><span class="line">    &lt;event name=&quot;controller_custom_event&quot;&gt;</span><br><span class="line">        &lt;observer name=&quot;doA&quot; instance=&quot;VendorName\TestModule\Observer\doA&quot; /&gt;</span><br><span class="line">    &lt;/event&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Observer;</span><br><span class="line"></span><br><span class="line">class doA implements \Magento\Framework\Event\ObserverInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function execute(\Magento\Framework\Event\Observer $observer)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;doA&#x27;);</span><br><span class="line">        $logger-&gt;info(get_class($observer));</span><br><span class="line">        $logger-&gt;info(print_r($observer-&gt;getData(&#x27;my_event_data&#x27;), true));</span><br><span class="line">        $logger-&gt;info(print_r($observer-&gt;getMyEventData(), true));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Dispatching events:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$eventData = &#x27;ssss&#x27;;</span><br><span class="line">/* @param \Magento\Framework\Event\Manager */</span><br><span class="line">$eventManger = $this-&gt;_objectManager-&gt;get(&#x27;\Magento\Framework\Event\ManagerInterface&#x27;);</span><br><span class="line">$eventManger-&gt;dispatch(&#x27;controller_custom_event&#x27;, [&#x27;my_event_data&#x27; =&gt; $eventData]);</span><br></pre></td></tr></table></figure>

<h2 id="Best-practices"><a href="#Best-practices" class="headerlink" title="Best practices"></a><a href="#best-practices"></a>Best practices</h2><ul>
<li>Make your observer efficient</li>
<li>Do not include business logic</li>
<li>Declare observer in the appropriate scope</li>
<li>Avoid cyclical event loops</li>
<li>Do not rely on invocation order</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://devdocs.magento.com/guides/v2.3/ext-best-practices/extension-coding/observers-bp.html">Observers Best Practices</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Excel 编辑 csv 中文乱码</title>
    <url>/excel-csv-utf8/</url>
    <content><![CDATA[<p>Magento 中很多地方用到 csv 格式的文件，在 <a href="/magento-2-zh-hans-cn-csv/#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%AD%A3%E4%B8%AD%E6%96%87%E5%8C%85">Magento 2 中文化问题（原创）</a> 中提到，对待 csv 文件，你可以使用任何编辑器进行编辑，比如 notepad、sublime text 之类的，或者专门的编辑器 Ron’s Editor。但是 Ron’s Editor 是收费的，破解版也不敢用，而一般的编辑器对付修改不太多的情况还是够用的，但是列一多的话，没有格子，弄起来很不方便。所以看起来还是用 Excel 比较好。</p>
<p>Excel 处理有中文字符的文件会出现乱码，本篇将介绍怎么处理这种情况。</p>
<p>出现乱码的原因是 Excel 以 ANSI 格式打开，不会做编码识别。而我们的 csv 文件是 UTF-8 编码的。</p>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><a href="#%E6%AD%A5%E9%AA%A4"></a>步骤</h2><ol>
<li>打开 Excel ，新建一个空白的工作簿，<br><img src="/wp-content/uploads/2017/01/excel-utf-8-csv.png"></li>
<li>数据 -&gt; 自文本，选择 csv 文件<br><img src="/wp-content/uploads/2017/01/excel-utf-8-csv-2.png"></li>
<li>此处选择 utf-8 编码，下一步<br><img src="/wp-content/uploads/2017/01/excel-utf-8-csv-3.png"></li>
<li>勾选“逗号”，下一步，完成</li>
</ol>
<p>这时候我们就可以编辑他了，最好另存为 Excel 格式的文件，保存中间状态，最后需要 csv 文件格式的时候再另存为 -&gt; CSV (逗号分隔符)(*.csv)</p>
<p>Update: 发现一个比较好用的编辑工具，Apache OpenOffice</p>
<p>下载地址：<a href="http://pan.baidu.com/s/1skJVqiD">http://pan.baidu.com/s/1skJVqiD</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>exec function is disabled</title>
    <url>/exec-function-is-disabled/</url>
    <content><![CDATA[<p>在安装完 Magento 2.2.1 后，执行 <code>php bin/magento deploy:mode:set production</code> 后出现错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">exec function is disabled</span><br></pre></td></tr></table></figure>

<p>php 的 <code>exec</code> 用于执行外部程式，类似功能的还有 <code>passthru()、system()、 shell_exec()</code> 如果要使用他们，需要找到 php.ini 中的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disable_functions =</span><br></pre></td></tr></table></figure>

<p>如果 “disable_functions&#x3D;” 后面有接上面四个函数，将其删除。默认 php.ini 配置文件中是不禁止你调用执行外部命令的函数的。但是一键安装包就不一定了。</p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
  </entry>
  <entry>
    <title>extension attributes</title>
    <url>/extension-attributes/</url>
    <content><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a><a href="#requirements"></a>Requirements</h2><p>Describe how to extend existing entities. What mechanisms are available to extend existing classes, for example by adding a new attribute, a new field in the database, or a new related entity?</p>
<h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a><a href="#attention"></a>Attention</h2><p>There are two types of attributes you can use to extend Magento functionality:</p>
<ul>
<li>Custom and Entity-Attribute-Value (EAV) attributes — Custom attributes are those added on behalf of a merchant. For example, a merchant might need to add attributes to describe products, such as shape or volume. A merchant can add these attributes in the Magento Admin panel. See the merchant documentation for information about managing custom attributes.Custom attributes are a subset of EAV attributes. Objects that use EAV attributes typically store values in several MySQL tables. The Customer and Catalog modules are the primary models that use EAV attributes. Other modules, such as ConfigurableProduct, GiftMessage, and Tax, use the EAV functionality for Catalog.</li>
<li>Extension attributes. Extension attributes are new in Magento 2. They are used to extend functionality and often use more complex data types than custom attributes. These attributes do not appear in the Magento Admin.</li>
</ul>
<p>Today we are going to talk about extension attributes.</p>
<h2 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a><a href="#experiment"></a>Experiment</h2><h3 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a><a href="#preparation"></a>Preparation</h3><p>We are going to create an entity, you can skip this step. etc&#x2F;db_schema.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;schema xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd&quot;&gt;</span><br><span class="line">  &lt;table name=&quot;order_custom_attribute&quot; resource=&quot;default&quot; engine=&quot;innodb&quot; comment=&quot;order_custom_attribute&quot;&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;int&quot; name=&quot;entity_id&quot; padding=&quot;10&quot; unsigned=&quot;true&quot; nullable=&quot;false&quot; identity=&quot;true&quot; comment=&quot;Entity ID&quot;/&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;int&quot; name=&quot;order_id&quot; padding=&quot;10&quot; unsigned=&quot;true&quot; nullable=&quot;false&quot; identity=&quot;false&quot; comment=&quot;Order ID&quot;/&gt;</span><br><span class="line">    &lt;column xsi:type=&quot;varchar&quot; name=&quot;bar&quot; nullable=&quot;true&quot; length=&quot;255&quot; comment=&quot;bar&quot;/&gt;</span><br><span class="line">    &lt;constraint xsi:type=&quot;primary&quot; referenceId=&quot;PRIMARY&quot;&gt;</span><br><span class="line">        &lt;column name=&quot;entity_id&quot;/&gt;</span><br><span class="line">    &lt;/constraint&gt;</span><br><span class="line">    &lt;index referenceId=&quot;ORDER_CUSTOM_ATTRIBUTE_ORDER_ID&quot; indexType=&quot;btree&quot;&gt;</span><br><span class="line">      &lt;column name=&quot;order_id&quot;/&gt;</span><br><span class="line">    &lt;/index&gt;</span><br><span class="line">    &lt;constraint xsi:type=&quot;foreign&quot; referenceId=&quot;ORDER_CUSTOM_ATTRIBUTE_ORDER_ID_SALES_ORDER_ENTITY_ID&quot; table=&quot;order_custom_attribute&quot; column=&quot;order_id&quot; referenceTable=&quot;sales_order&quot; referenceColumn=&quot;entity_id&quot; /&gt;</span><br><span class="line">  &lt;/table&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure>

<p>you can create db_schema_whitelist.json using command <code>bin/magento setup:db-declaration:generate-whitelist --module-name=VendorName_TestModule</code> etc&#x2F;db_schema_whitelist.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;order_custom_attribute&quot;: &#123;</span><br><span class="line">        &quot;column&quot;: &#123;</span><br><span class="line">            &quot;entity_id&quot;: true,</span><br><span class="line">            &quot;order_id&quot;: true,</span><br><span class="line">            &quot;bar&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;index&quot;: &#123;</span><br><span class="line">            &quot;ORDER_CUSTOM_ATTRIBUTE_ORDER_ID&quot;: true</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;constraint&quot;: &#123;</span><br><span class="line">            &quot;PRIMARY&quot;: true,</span><br><span class="line">            &quot;ORDER_CUSTOM_ATTRIBUTE_ORDER_ID_SALES_ORDER_ENTITY_ID&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>After <code>bin/magento setup:upgrade</code>, we get <code>order_custom_attribute</code> table.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model;</span><br><span class="line"></span><br><span class="line">class Attribute extends \Magento\Framework\Model\AbstractModel implements \VendorName\TestModule\Api\Data\AttributeInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;VendorName\TestModule\Model\ResourceModel\Attribute&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function setOrderId($value)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;setData(&#x27;order_id&#x27;, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getOrderId()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getData(&#x27;order_id&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function setBar($value)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;setData(&#x27;bar&#x27;, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getBar()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getData(&#x27;bar&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Api\Data;</span><br><span class="line"></span><br><span class="line">Interface AttributeInterface &#123;</span><br><span class="line">    /**</span><br><span class="line">     * Set order id</span><br><span class="line">     * @param string $value</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    public function setOrderId($value);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * get order id</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function getOrderId();</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Set bar</span><br><span class="line">     * @param string $value</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    public function setBar($value);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * get bar</span><br><span class="line">     * @return string</span><br><span class="line">     */</span><br><span class="line">    public function getBar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The interface must have proper dock blocks, otherwise, when you call api, you will get an error ‘Each method must have a doc block ….’</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\ResourceModel;</span><br><span class="line"></span><br><span class="line">class Attribute extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb</span><br><span class="line">&#123;</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;order_custom_attribute&#x27;, &#x27;entity_id&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\ResourceModel\Attribute;</span><br><span class="line"></span><br><span class="line">class Collection extends \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection</span><br><span class="line">&#123;</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;VendorName\TestModule\Model\Attribute&#x27;, &#x27;VendorName\TestModule\Model\ResourceModel\Attribute&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>etc&#x2F;di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;preference for=&quot;VendorName\TestModule\Api\Data\AttributeInterface&quot; type=&quot;VendorName\TestModule\Model\Attribute&quot;/&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Let’s-create-the-extension-attributes-xml-file"><a href="#Let’s-create-the-extension-attributes-xml-file" class="headerlink" title="Let’s create the extension_attributes.xml file"></a><a href="#let%E2%80%99s-create-the-extension_attributes.xml-file"></a>Let’s create the extension_attributes.xml file</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- etc/extension_attributes.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Api/etc/extension_attributes.xsd&quot;&gt;</span><br><span class="line">    &lt;extension_attributes for=&quot;Magento\Sales\Api\Data\OrderInterface&quot;&gt;</span><br><span class="line">        &lt;attribute code=&quot;order_custom_attribute&quot; type=&quot;VendorName\TestModule\Api\Data\AttributeInterface&quot; /&gt;</span><br><span class="line">    &lt;/extension_attributes&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>extension attributes 依赖于 generated 中的代码，所以除了 cache:clean 之外，一定要记得删除 generated 中的代码。</p>
<h3 id="Create-a-plugin-to-save-and-retrieve-the-new-attributes"><a href="#Create-a-plugin-to-save-and-retrieve-the-new-attributes" class="headerlink" title="Create a plugin to save and retrieve the new attributes"></a><a href="#create-a-plugin-to-save-and-retrieve-the-new-attributes"></a>Create a plugin to save and retrieve the new attributes</h3><p>etc&#x2F;di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;preference for=&quot;VendorName\TestModule\Api\Data\AttributeInterface&quot; type=&quot;VendorName\TestModule\Model\Attribute&quot;/&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Sales\Api\OrderRepositoryInterface&quot;&gt;</span><br><span class="line">        &lt;plugin name=&quot;save_custom_attribute&quot; type=&quot;VendorName\TestModule\Plugin\OrderSave&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_custom_attribute&quot; type=&quot;VendorName\TestModule\Plugin\OrderGet&quot;/&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class OrderGet</span><br><span class="line">&#123;</span><br><span class="line">    protected $orderExtensionFactory;</span><br><span class="line"></span><br><span class="line">    protected $attributeFactory;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Sales\Api\Data\OrderExtensionFactory $orderExtensionFactory,</span><br><span class="line">        \VendorName\TestModule\Model\AttributeFactory $attributeFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;orderExtensionFactory = $orderExtensionFactory;</span><br><span class="line">        $this-&gt;attributeFactory = $attributeFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function afterGet(</span><br><span class="line">        \Magento\Sales\Api\OrderRepositoryInterface $subject,</span><br><span class="line">        \Magento\Sales\Api\Data\OrderInterface $resultOrder</span><br><span class="line">    ) &#123;</span><br><span class="line">        $resultOrder = $this-&gt;getCustomAttribute($resultOrder);</span><br><span class="line">        return $resultOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function getCustomAttribute(\Magento\Sales\Api\Data\OrderInterface $order)</span><br><span class="line">    &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            // The actual implementation of the repository is omitted</span><br><span class="line">            // but it is where you would load your value from the database (or any other persistent storage)</span><br><span class="line">            // $customAttribute = $this-&gt;attributeRepository-&gt;get($order-&gt;getEntityId());</span><br><span class="line"></span><br><span class="line">            // We use model load for example</span><br><span class="line">            $customAttribute = $this-&gt;attributeFactory-&gt;create();</span><br><span class="line">            $customAttribute-&gt;load($order-&gt;getEntityId());</span><br><span class="line">            if (! $customAttribute-&gt;getEntityId()) &#123;</span><br><span class="line">                throw new NoSuchEntityException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (NoSuchEntityException $e) &#123;</span><br><span class="line">            return $order;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $extensionAttributes = $order-&gt;getExtensionAttributes();</span><br><span class="line">        $orderExtension = $extensionAttributes ? $extensionAttributes : $this-&gt;orderExtensionFactory-&gt;create();</span><br><span class="line"></span><br><span class="line">        $orderExtension-&gt;setOrderCustomAttribute($customAttribute);</span><br><span class="line">        $order-&gt;setExtensionAttributes($orderExtension);</span><br><span class="line"></span><br><span class="line">        return $order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\CouldNotSaveException;</span><br><span class="line"></span><br><span class="line">class OrderSave</span><br><span class="line">&#123;</span><br><span class="line">    public function afterSave(</span><br><span class="line">        \Magento\Sales\Api\OrderRepositoryInterface $subject,</span><br><span class="line">        \Magento\Sales\Api\Data\OrderInterface $resultOrder</span><br><span class="line">    ) &#123;</span><br><span class="line">        $resultOrder = $this-&gt;saveCustomAttribute($resultOrder);</span><br><span class="line">        return $resultOrder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function saveCustomAttribute(\Magento\Sales\Api\Data\OrderInterface $order)</span><br><span class="line">    &#123;</span><br><span class="line">        $extensionAttributes = $order-&gt;getExtensionAttributes();</span><br><span class="line">        if (null !== $extensionAttributes &amp;&amp;</span><br><span class="line">            null !== $extensionAttributes-&gt;getOrderCustomAttribute()</span><br><span class="line">        ) &#123;</span><br><span class="line">            /* @var \Magento\GiftMessage\Api\Data\MessageInterface $giftMessage */</span><br><span class="line">            $customAttribute = $extensionAttributes-&gt;getOrderCustomAttribute();</span><br><span class="line">            try &#123;</span><br><span class="line"></span><br><span class="line">                // The actual implementation of the repository is omitted</span><br><span class="line">                // but it is where you would load your value from the database (or any other persistent storage)</span><br><span class="line">                // $customAttribute = $this-&gt;attributeRepository-&gt;save($order-&gt;getEntityId());</span><br><span class="line"></span><br><span class="line">                // We use model save for example</span><br><span class="line">                $customAttribute-&gt;save();</span><br><span class="line"></span><br><span class="line">            &#125; catch (\Exception $e) &#123;</span><br><span class="line">                throw new CouldNotSaveException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Let’s create a controller for test.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="line"></span><br><span class="line">    $orderResp = $this-&gt;_objectManager-&gt;get(&#x27;Magento\Sales\Api\OrderRepositoryInterface&#x27;);</span><br><span class="line">    $order = $orderResp-&gt;get(1);</span><br><span class="line">    // $order = $orderResp-&gt;get(2);</span><br><span class="line"></span><br><span class="line">    /** @param \Magento\Sales\Api\Data\OrderExtension */</span><br><span class="line">    // var_dump(get_class($order-&gt;getExtensionAttributes()));</span><br><span class="line">    // var_dump(get_class_methods($order-&gt;getExtensionAttributes()));</span><br><span class="line"></span><br><span class="line">    $extensionAttribute = $order-&gt;getExtensionAttributes();</span><br><span class="line">    $orderCustomAttribute = $extensionAttribute-&gt;getOrderCustomAttribute();</span><br><span class="line">    if ($orderCustomAttribute) &#123;</span><br><span class="line">        var_dump($orderCustomAttribute-&gt;getData());</span><br><span class="line">        $orderCustomAttribute-&gt;setBar(&#x27;898989&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $orderResp-&gt;save($order);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Magento\Sales\Api\Data\OrderInterface-&gt;getExtensionAttributes() return an instance of Magento\Sales\Api\Data\OrderExtension Magento\Sales\Api\Data\OrderExtension-&gt;getOrderCustomAttribute() (specified in extension_attributes.xml) return an instance of VendorName\TestModule\Api\Data\AttributeInterface Let’s call rest api <img src="/wp-content/uploads/2019/05/extension_attributes.png"></p>
<h2 id="Practice-test"><a href="#Practice-test" class="headerlink" title="Practice test"></a><a href="#practice-test"></a>Practice test</h2><p>You are building an tool that imports products from an ERP. There are 20 columns of additional information that are associated with each product. This extra information must also be associated with an update time to know when to refresh the data. Keeping maintainability in mind, how do you build this into Magento?</p>
<ul>
<li>A. Override the Product model and add the fields.</li>
<li>B. Create a separate model and build code to associate the two record types.</li>
<li>C. Create 20 EAV attributes and check their updated_at column.</li>
<li>D. Utilize an extension attribute</li>
</ul>
<p>Answer D You are adding an extension attribute to the CustomerInterface class. You have specified data for the extension attribute, but when you check the database, nothing has been saved. Why is that? A. The appropriate columns in customer_entity have not been created. B. You need to ensure that the extension attribute getter and setter exists in CustomerExtensionInterface. C. You need to add a node to the extension attribute XML details. D. Extension attribute data is not automatically persisted to the database. Answer D <img src="/wp-content/uploads/2019/06/extension_attributes_2.png"></p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#reference"></a>Reference</h2><p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/attributes.html">EAV and extension attributes</a> <a href="https://www.tigren.com/add-extension-attribute-magento-2/">How To Add Extension Attribute To Order In Magento 2?</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>上传 Favicon</title>
    <url>/favicon/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/favicon.html">原文网址</a></em></p>
<p>Favicon 是 favorite icon 的缩略写法，用来指每个浏览器标签页上的小图标。根据不同的浏览器上，该图标也出现在地址栏URL前面。</p>
<p>一般 Favicon 是16 x 16 像素或者 32 x 32 像素。尽管不是所有浏览器都接受ICO, PNG, JPG, and SVG 格式，不过 Magento 全都接受。受到最广泛支持的格式是 ICO 。其他格式也可以使用，只是有些浏览器可能不支持。网上有很多免费的工具可以生成 ICO 图像，或者将其他格式的图像转成 ICO 格式的。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-favicon_thumb_0_0.png" alt="Favicon in Address Bar"></p>
<h2 id="第一步：创建-Favicon"><a href="#第一步：创建-Favicon" class="headerlink" title="第一步：创建 Favicon"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-favicon"></a>第一步：创建 Favicon</h2><ol>
<li>选择您喜欢的图片编辑工具创建16 x 16 像素或者 32 x 32 像素的Logo</li>
<li>（可选）用工具转成ICO格式保存下来</li>
</ol>
<h2 id="第二步：上传-Favicon-到店铺"><a href="#第二步：上传-Favicon-到店铺" class="headerlink" title="第二步：上传 Favicon 到店铺"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E4%B8%8A%E4%BC%A0-favicon-%E5%88%B0%E5%BA%97%E9%93%BA"></a>第二步：上传 Favicon 到店铺</h2><ol>
<li><p>后台侧边栏，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong> (Design) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在表格中找到您要修改的 Store view ，在 Action 列，点击编辑(Edit)</p>
</li>
<li><p>在<strong>其他设置</strong>下展开<strong>HTML 头部</strong>(HTML Head)，做如下操作  </p>
<p><img src="/wp-content/uploads/2016/08/design-configuration-html-head_thumb_0_0.png" alt="Html Head"></p>
<p>a. 点击<strong>上传</strong></p>
<p><img src="/wp-content/uploads/2016/08/favicon-upload_thumb_0_0.png"></p>
<p>b. 如果您要删除当前 favicon ，点击图标左下角的删除<img src="/wp-content/uploads/2016/08/btn-delete_22x18.png">按钮，然后重新上传一个。</p>
</li>
<li><p>完成后点击保存配置  </p>
<h2 id="第三步：刷新缓存"><a href="#第三步：刷新缓存" class="headerlink" title="第三步：刷新缓存"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%88%B7%E6%96%B0%E7%BC%93%E5%AD%98"></a>第三步：刷新缓存</h2></li>
<li><p>提示您刷新缓存时，您就点击消息中的 <strong>缓存管理</strong>(Cache Management )</p>
</li>
<li><p>在列表中，选中<strong>页面缓存</strong>(Page Cache)前的复选框，这时候他已经被标记为过期无效了。</p>
</li>
<li><p>设置 Actions 为<strong>刷新</strong>(Refresh)点击提交(Submit)</p>
</li>
<li><p>看效果请回到前台，按F5刷新浏览器</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>fist-child 伪类选择器</title>
    <url>/fist-child-%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p:first-child&#123;color: red;&#125;</span><br></pre></td></tr></table></figure>

<p>乍一看以为是父元素的第一个 p ，更确切的含义是选择父元素的第一个子元素，且该元素是 p</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ThankIT&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">div &#123;</span><br><span class="line">    background-color: #f9f2f4;</span><br><span class="line">    padding: 15px;</span><br><span class="line">    margin-top: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.notwork p:first-child&#123;color: red;&#125;</span><br><span class="line">.work p:nth-child(2)&#123;color: red;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=&quot;notwork&quot;&gt;</span><br><span class="line">    &lt;span&gt;第一个 p 应该是红色，但不是&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;first p&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;second p&lt;/p&gt;</span><br><span class="line">    &lt;a&gt;third a&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;work&quot;&gt;</span><br><span class="line">    &lt;span&gt;第一个 p 应该是红色&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;first p&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;second p&lt;/p&gt;</span><br><span class="line">    &lt;a&gt;third a&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/08/fist-child.png"></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>fist-child</tag>
      </tags>
  </entry>
  <entry>
    <title>Full Page Cache code points</title>
    <url>/full-page-cache-code-points/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento-2-full-page-caching-code-points/">Magento 2 Full Page Caching Code Points</a></p>
<h2 id="Practices-Tests"><a href="#Practices-Tests" class="headerlink" title="Practices Tests"></a><a href="#practices-tests"></a>Practices Tests</h2><p>What is the difference between setting cacheable&#x3D;”false” on a block in layout XML attribute and the block’s getCacheLifetime() &#x3D;&#x3D;&#x3D; null? A. cacheable&#x3D;”false” and the effect of getCacheLifetime &#x3D;&#x3D;&#x3D; null are the same. B. cacheable&#x3D;”false” affects the parent block or container. getCacheLifetime() &#x3D;&#x3D;&#x3D; null prevents the current block from being cached. C cacheable&#x3D;”false” prevents the entire page from caching. getCacheLifetime() &#x3D;&#x3D;&#x3D; null prevents the block from being cached, but it would still be cached by the full page caching mechanism. D. cacheable&#x3D;”false” prevents a block from being cached. getCacheLifetime() has been deprecated. Answer C</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>getFlatColumns</title>
    <url>/getflatcolumns/</url>
    <content><![CDATA[<p>After we turn on <strong>Use Flat Catalog Product</strong>, we activate the <strong>catalog_product_flat</strong> index. Run <code>bin/magento indexer:reindex catalog_product_flat</code> A new table <code>catalog_product_flat_&lt;storeId&gt;</code> will be created. In this table, product eav attributes which are configured as <strong>Used in Product Listing</strong> are added as columns. Let’s see how this worked.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;indexer id=&quot;catalog_product_flat&quot; view_id=&quot;catalog_product_flat&quot; class=&quot;Magento\Catalog\Model\Indexer\Product\Flat&quot;&gt;</span><br><span class="line">        &lt;title translate=&quot;true&quot;&gt;Product Flat Data&lt;/title&gt;</span><br><span class="line">        &lt;description translate=&quot;true&quot;&gt;Reorganize EAV product structure to flat structure&lt;/description&gt;</span><br><span class="line">&lt;/indexer&gt;</span><br></pre></td></tr></table></figure>

<p><code>Magento\Catalog\Model\Indexer\Product\Flat:executeFull</code> &gt; <code>Magento\Catalog\Model\Indexer\Product\Flat\AbstractAction:_updateRelationProducts</code> &gt; <code>Magento\Catalog\Helper\Product\Flat\Indexer:getFlatColumns</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function getFlatColumns()</span><br><span class="line">    &#123;</span><br><span class="line">        if ($this-&gt;_columns === null) &#123;</span><br><span class="line">            $this-&gt;_columns = $this-&gt;getFlatColumnsDdlDefinition();</span><br><span class="line">            foreach ($this-&gt;getAttributes() as $attribute) &#123;</span><br><span class="line">                /** @var $attribute \Magento\Eav\Model\Entity\Attribute\AbstractAttribute */</span><br><span class="line">                $columns = $attribute-&gt;setFlatAddFilterableAttributes(</span><br><span class="line">                    $this-&gt;isAddFilterableAttributes()</span><br><span class="line">                )-&gt;setFlatAddChildData(</span><br><span class="line">                    $this-&gt;isAddChildData()</span><br><span class="line">                )-&gt;getFlatColumns();</span><br><span class="line">                if ($columns !== null) &#123;</span><br><span class="line">                    $this-&gt;_columns = array_merge($this-&gt;_columns, $columns);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $this-&gt;_columns;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="Practice-Tests"><a href="#Practice-Tests" class="headerlink" title="Practice Tests"></a><a href="#practice-tests"></a>Practice Tests</h2><p>What is the purpose of the getFlatColumns method in an EAV’s Source model? A. It returns a list of columns in the entity’s _text table. B. It converts option values into row values for the attribute value tables. C. It flattens an array attribute value into a JSON string. D. It returns columns that will be added to the EAV model’s flat table. Answer D</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Git 基础学习总结</title>
    <url>/git-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="命令总结"><a href="#命令总结" class="headerlink" title="命令总结"></a><a href="#%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93"></a>命令总结</h2><p>工作区（Working Directory）-&gt; 暂存区（Stage or Index）-&gt; 本地仓库（Local Repository）-&gt; 远程仓库（Remote repository） 工作区有一个隐藏目录 <code>.git</code>，它是 Git 的版本库。 <img src="/wp-content/uploads/2018/02/git-repository.jpg"> git 只能跟踪文本文件的改动，不能跟踪二进制文件（word 、图片、 视频等）</p>
<h3 id="create-amp-clone"><a href="#create-amp-clone" class="headerlink" title="create &amp; clone"></a><a href="#create-&&-clone"></a>create &amp; clone</h3><p><code>git init</code></p>
<p>create new repository</p>
<p><code>git clone path/to/repository</code></p>
<p>clone local repository</p>
<p><code>git clone username@host:path/to/repository</code></p>
<p>clone remote repository</p>
<h3 id="add-amp-remove"><a href="#add-amp-remove" class="headerlink" title="add &amp; remove"></a><a href="#add-&-remove"></a>add &amp; remove</h3><p><code>git add &lt;filename&gt;/*</code></p>
<p>add (all)changes to INDEX</p>
<p><code>git rm &lt;filename&gt;</code></p>
<p>remove&#x2F;delete</p>
<h3 id="commit-amp-synchronize"><a href="#commit-amp-synchronize" class="headerlink" title="commit &amp; synchronize"></a><a href="#commit-&-synchronize"></a>commit &amp; synchronize</h3><p><code>git commit -m &quot;Commit message&quot;</code></p>
<p>commit changes</p>
<p><code>git remote add origin &lt;server&gt;</code></p>
<p>connect local repository to remote repository</p>
<p><code>git push origin master</code></p>
<p>push changes to remote repository</p>
<p><code>git pull</code></p>
<p>update local repository with remote changes</p>
<h3 id="branches"><a href="#branches" class="headerlink" title="branches"></a><a href="#branches"></a>branches</h3><p><code>git branch</code></p>
<p>查看分支</p>
<p><code>git checkout -b &lt;branch&gt;</code></p>
<p>create new branch 相当于 <code>git branch &lt;branch&gt;</code> <code>git checkout &lt;branch&gt;</code></p>
<p><code>git checkout master</code></p>
<p>switch to master branch</p>
<p><code>git branch -d &lt;branch&gt;</code></p>
<p>delete branch</p>
<p><code>git push origin &lt;branch&gt;</code></p>
<p>push branch to remote repository</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a><a href="#merge"></a>merge</h3><p><code>git merge &lt;branch&gt;</code></p>
<p>合并指定分支到当前分支</p>
<p><code>git merge --no-ff -m &quot;commit message&quot; &lt;branch&gt;</code></p>
<p>不要用 fast forward 方式合并</p>
<h3 id="restore"><a href="#restore" class="headerlink" title="restore"></a><a href="#restore"></a>restore</h3><p><code>git status</code></p>
<p>查看仓库状态</p>
<p><code>git diff</code></p>
<p>比较 工作区与暂存区</p>
<p><code>git diff --cached</code></p>
<p>比较 暂存区与本地仓库</p>
<p><code>git diff master origin/master</code></p>
<p>比较 本地仓库与远程仓库</p>
<p><code>git checkout (HEAD) &lt;file&gt;/.</code></p>
<p>回到上次 add 或 commit 的状态</p>
<p><code>git reset (HEAD) &lt;file&gt;</code></p>
<p><code>git add</code> 的逆向，退回到 add 之前</p>
<p><code>git reset --hard &lt;commit&gt;</code></p>
<p>回退版本，会重写工作区。比如： <code>git reset --hard HEAD^</code> 回退到上一个版本。</p>
<p>在 git 中，用 <code>HEAD</code> 表示当前版本，上一个版本就是 <code>HEAD^</code>，上上一个版本就是 <code>HEAD^^</code> <code>HEAD~100</code> 就是往上 100 个版本。</p>
<h3 id="others"><a href="#others" class="headerlink" title="others"></a><a href="#others"></a>others</h3><p><code>git --help</code></p>
<p>查看命令</p>
<p><code>git log --pretty=oneline --abbrev-commit --graph</code></p>
<p>查看log</p>
<p><code>git reflog</code></p>
<p>查看所有操作记录</p>
<p><code>git tag &lt;tag&gt; &lt;commit ID&gt;</code></p>
<p>create tag</p>
<p><code>git stash</code></p>
<p>把工作现场收起来</p>
<p><code>git stash list</code></p>
<p>查看</p>
<p><code>git stash pop</code></p>
<p>相当于 <code>git stash apply</code> <code>git stash drop</code></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#%E5%8F%82%E8%80%83"></a>参考</h2><p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000">工作区和暂存区</a> <a href="https://segmentfault.com/a/1190000011969554#articleHeader14">Git的4个阶段的撤销更改</a> <a href="http://rogerdudler.github.io/git-guide/index.zh.html">git - 简明指南</a></p>
<h2 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a><a href="#%E9%AB%98%E9%98%B6"></a>高阶</h2><p><a href="https://git-scm.com/book/zh/v2">Git 官方 book</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>表格控件</title>
    <url>/grid-controls/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/admin-grid-controls.html">原文地址</a></em><br>后台页面通过表格控件展示数据集。每列顶部有控件可以用来给数据排序。<br>列标题的升序降序箭头表示当前的排序状态。您可以指定哪些列展示在表格中，还可以拖拽改变他们的位置。您还可以保存您对列的安排为视图留作以后用。操作列表列出了您可以对每条记录进行的操作。当前视图下的数据可以被导出为CSV 或者 XML 文件</p>
<p><img src="/wp-content/uploads/2016/08/admin-workspace-grid_thumb_0_0.png" alt="Orders Grid"></p>
<h2 id="列表排序"><a href="#列表排序" class="headerlink" title="列表排序"></a><a href="#%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F"></a>列表排序</h2><ol>
<li>点击任一列的头部。箭头表示当前的订单是升序还是降序</li>
<li>使用分页控件来查看数据集合的其余页</li>
</ol>
<h2 id="列表分页"><a href="#列表分页" class="headerlink" title="列表分页"></a><a href="#%E5%88%97%E8%A1%A8%E5%88%86%E9%A1%B5"></a>列表分页</h2><ol>
<li><p>设置分页控件(Pagination)每页展示几条记录</p>
</li>
<li><p>点击<strong>上一页</strong>(Previous)<strong>下一页</strong>(Next)或者直接输入去第几页  </p>
<p><img src="/wp-content/uploads/2016/08/pagination-controls_thumb_0_0.png"></p>
</li>
</ol>
<h2 id="列表过滤"><a href="#列表过滤" class="headerlink" title="列表过滤"></a><a href="#%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4"></a>列表过滤</h2><ol>
<li>点击<strong>过滤</strong>(Filters)</li>
<li>输入过滤条件</li>
<li>点击<strong>应用过滤</strong>（Apply Filters）<br><img src="/wp-content/uploads/2016/08/admin-workspace-filters_thumb_0_0.png"></li>
</ol>
<h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p><em>查看<a href="/admin-grid-layout/">表格布局</a></em></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>how eav load</title>
    <url>/how-eav-load/</url>
    <content><![CDATA[<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model\ResourceModel;</span><br><span class="line"></span><br><span class="line">class CustomEav extends \Magento\Eav\Model\Entity\AbstractEntity</span><br><span class="line">&#123;</span><br><span class="line">    public function getEntityType() &#123;</span><br><span class="line">        if(empty($this-&gt;_type)) &#123;</span><br><span class="line">            $this-&gt;setType(\Magento\Catalog\Model\Product::ENTITY);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent::getEntityType();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    $res = $this-&gt;_objectManager-&gt;get(&#x27;VendorName\TestModule\Model\ResourceModel\CustomEav&#x27;);</span><br><span class="line">    $product = $this-&gt;_objectManager-&gt;get(&#x27;Magento\Catalog\Model\Product&#x27;);</span><br><span class="line">    $res-&gt;load($product, 1);</span><br><span class="line"></span><br><span class="line">    var_dump($product-&gt;getData());</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Now we get the proudct’s eav attributes.</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#notes"></a>Notes</h2><p>Source: <code>Magento\Eav\Model\Entity\AbstractEntity</code> See <code>_loadModelAttributes()</code> in the above fle for details about the loading process. Magento creates a UNION select to load attributes from each of the entity type tables to locate the applicable attribute values. See <code>_collectSaveData()</code> in the above fle for how the saving process works. EAV collections oﬀer other methods such as addAttributeToSelect (note that the feld methods, such as addFieldToFilter have been mapped to their attribute counterparts). Simple resource model extens <code>Magento\Framework\Model\ResourceModel\Db\AbstractDb</code></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="http://techjeffyu.com/blog/magento-2-creating-new-eav-entity-and-model">Magento 2: Creating New Eav Entity and Model (Updated for Data Installation)</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 是怎么发邮件的</title>
    <url>/how-magento-sends-email/</url>
    <content><![CDATA[<p>很多用 Magento 的人可能并不是技术人员，他们也不关心 Magento 是怎么发邮件的，只要能用就好了。不过知道这些会有助于发生问题时更快定位问题所在。</p>
<p>Magento 发送邮件的功能是建立在 Zend Framework 的 Zend_Mail 类基础上。负责完成该工作的是 <code>Zend_Mail_Transport_Sendmail.php</code> ，这个类又是建立在 PHP 的 Mail 基础上的。PHP 的 Mail 使用的是服务器提供的 sendmail 脚本来发送邮件。</p>
<p>如果你不知道 Magento 默认是使用服务器的 sendmail 来发邮件的，那么在后台弄好邮件相关设置后，就会莫名其妙地发现 Magento 还是不能发送邮件。</p>
<p>如何搭建一个简单的邮件服务器（邮件传输代理）呢？可以使用 postfix、sendmail 等等。这种做法的直接好处是，可以使用许多个邮箱地址，完成不同的工作。比如：一般的邮件用 <a href="mailto:&#111;&#x77;&#x6e;&#101;&#x72;&#x40;&#x79;&#111;&#x75;&#x72;&#x64;&#x6f;&#x6d;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#x6d;">&#111;&#x77;&#x6e;&#101;&#x72;&#x40;&#x79;&#111;&#x75;&#x72;&#x64;&#x6f;&#x6d;&#97;&#105;&#x6e;&#x2e;&#99;&#111;&#x6d;</a> ，销售相关的用 <a href="mailto:&#x73;&#97;&#108;&#x65;&#115;&#x40;&#121;&#111;&#117;&#x72;&#x64;&#111;&#109;&#x61;&#105;&#110;&#46;&#x63;&#111;&#109;">&#x73;&#97;&#108;&#x65;&#115;&#x40;&#121;&#111;&#117;&#x72;&#x64;&#111;&#109;&#x61;&#105;&#110;&#46;&#x63;&#111;&#109;</a>。下面的方式就不能使用多个邮箱地址了。</p>
<p>下面要说到的这种方式是使用 SMTP 插件。这种插件的原理是使用新的类代替 <code>Zend_Mail_Transport_Sendmail.php</code> 完成工作（实际上是<code>\Magento\Framework\Mail\Transport</code> 负责的），这个新的类可以设置 SMTP 。这种方式相当于你把账户名，密码告诉他，他直接用外部的邮件服务器发邮件。</p>
<p>这种方式只能配置一个账户，所以后台邮件地址得设置地和他一样。</p>
<p>以上是博主的个人理解，有错误还请各位纠正，谢谢！</p>
<p>SMTP 插件的实现可参考：<a href="https://webkul.com/blog/magento-2-send-mail-using-your-smtp-detail/">https://webkul.com/blog/magento-2-send-mail-using-your-smtp-detail/</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>How to add CLI commands</title>
    <url>/how-to-add-cli-commands/</url>
    <content><![CDATA[<p><code>app/code/VendorName/TestModule/etc/di.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">   &lt;type name=&quot;Magento\Framework\Console\CommandList&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;commands&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;exampleSayHello&quot; xsi:type=&quot;object&quot;&gt;VendorName\TestModule\Console\Sayhello&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p><code>app/code/VendorName/TestModule/Console/Sayhello.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Console;</span><br><span class="line"></span><br><span class="line">use Symfony\Component\Console\Command\Command;</span><br><span class="line">use Symfony\Component\Console\Input\InputInterface;</span><br><span class="line">use Symfony\Component\Console\Output\OutputInterface;</span><br><span class="line"></span><br><span class="line">class Sayhello extends Command</span><br><span class="line">&#123;</span><br><span class="line">    protected function configure()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setName(&#x27;exampleGroup:exampleSubject:sayHello&#x27;);</span><br><span class="line">        $this-&gt;setDescription(&#x27;Demo command line&#x27;);</span><br><span class="line"></span><br><span class="line">        parent::configure();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function execute(InputInterface $input, OutputInterface $output)</span><br><span class="line">    &#123;</span><br><span class="line">        $output-&gt;writeln(&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>php bin/magento</code> <img src="/wp-content/uploads/2019/06/cli.png"> <code>php bin/magento exampleGroup:exampleSubject:sayHello;</code> <img src="/wp-content/uploads/2019/06/cli_2.png"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/magento-2-how-to-add-command-line-console-cli.html">How to Add Command line in to Console CLI in Magento 2</a> <a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/cli-cmds/cli-naming-guidelines.html">Command naming guidelines</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>如何创建 Magneto 2 前端主题</title>
    <url>/how-to-create-magento-2-frontend-theme/</url>
    <content><![CDATA[<p><em>本篇文章主要参考官方开发文档。<a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/themes/theme-create.html">原文：create a storefront theme</a>有能力的尽量阅读原文。本文只是博主自我整理的一个概要。</em></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><a href="#%E5%87%86%E5%A4%87"></a>准备</h2><ol>
<li>不要修改 Magneto 自带的主题文件。Magento 2 自带两个主题，luma 和 blank。luma 依赖于blank，相当于一个官方演示主题，未来可能变化，所以新建主题最好是以 blank 为基础。</li>
<li>切换成 developer 模式。模式影响 Magento 如何缓存静态文件。</li>
</ol>
<h2 id="创建-theme-文件夹"><a href="#创建-theme-文件夹" class="headerlink" title="创建 theme 文件夹"></a><a href="#%E5%88%9B%E5%BB%BA-theme-%E6%96%87%E4%BB%B6%E5%A4%B9"></a>创建 theme 文件夹</h2><ol>
<li>进入该目录 <code>&lt;your Magento install dir&gt;/app/design/frontend</code></li>
<li>根据你个人或公司的名称起一个<code>vendor name</code>，比如<code>ThankIT</code>，所以我创建的文件夹是<code>/app/design/frontend/ThankIT</code></li>
<li>在这个<code>ThankIT</code>文件夹下创建一个主题的名字，比如<code>Pisces</code></li>
</ol>
<h2 id="声明主题"><a href="#声明主题" class="headerlink" title="声明主题"></a><a href="#%E5%A3%B0%E6%98%8E%E4%B8%BB%E9%A2%98"></a>声明主题</h2><p>在<code>app/design/frontend/ThankIT/Pisces</code>文件夹下创建<code>theme.xml</code>，这个文件至少要包含要声明的主题的名字，继承自哪个父主题（如果有父主题的话）。声明主题的预览图片是可选的，可以不声明。<br>可以从luma 主题拷贝一个theme.xml 过来改一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;theme xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Config/etc/theme.xsd&quot;&gt;</span><br><span class="line">    &lt;title&gt;ThankIT Pisces&lt;/title&gt;</span><br><span class="line">    &lt;parent&gt;Magento/blank&lt;/parent&gt;</span><br><span class="line">    &lt;media&gt;</span><br><span class="line">        &lt;preview_image&gt;media/preview.jpg&lt;/preview_image&gt;</span><br><span class="line">    &lt;/media&gt;</span><br><span class="line">&lt;/theme&gt;</span><br></pre></td></tr></table></figure>

<p>注意：<code>&lt;parent&gt;</code>是和<code>registration.php</code>中的声明一致，注意大小写。<code>&lt;preview_image&gt;</code>如果声明请确保<code>app/design/frontend/ThankIT/Pisces/media/preview.jpg</code>存在，不然会报错。</p>
<h2 id="composer-json-（可选）"><a href="#composer-json-（可选）" class="headerlink" title="composer.json （可选）"></a><a href="#composer.json-%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"></a>composer.json （可选）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;thankit/theme-frontend-pisces&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;N/A&quot;,</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;php&quot;: &quot;~5.5.0~5.6.0~7.0.0&quot;,</span><br><span class="line">        &quot;magento/theme-frontend-blank&quot;: &quot;100.0.*&quot;,</span><br><span class="line">        &quot;magento/framework&quot;: &quot;100.0.*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;type&quot;: &quot;magento2-theme&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;100.0.1&quot;,</span><br><span class="line">    &quot;license&quot;: [</span><br><span class="line">        &quot;OSL-3.0&quot;,</span><br><span class="line">        &quot;AFL-3.0&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;files&quot;: [</span><br><span class="line">            &quot;registration.php&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-registration-php"><a href="#创建-registration-php" class="headerlink" title="创建 registration.php"></a><a href="#%E5%88%9B%E5%BB%BA-registration.php"></a>创建 registration.php</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Copyright © 2015 Magento. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::THEME,</span><br><span class="line">    &#x27;frontend/ThankIT/Pisces&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="配置图片"><a href="#配置图片" class="headerlink" title="配置图片"></a><a href="#%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87"></a>配置图片</h2><p>产品图片及其他属性在view.xml 文件中配置。如果你有父主题，并且不想改什么，也可以不要用他。<br>在<code>app/design/frontend/ThankIT/Pisces/</code>目录下创建<code>etc/view.xml</code>(拷贝一个过去改改。怎么改参考：<a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/themes/theme-images.html">Configure images properties for a theme</a>)</p>
<h2 id="创建-web-存放静态文件"><a href="#创建-web-存放静态文件" class="headerlink" title="创建 web 存放静态文件"></a><a href="#%E5%88%9B%E5%BB%BA-web-%E5%AD%98%E6%94%BE%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6"></a>创建 web 存放静态文件</h2><p>静态文件包括styles,fonts,javaScript,images，这些都放在<code>app/design/frontend/ThankIT/Pisces/web/</code>目录下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/design/&lt;area&gt;/&lt;Vendor&gt;/&lt;theme&gt;/</span><br><span class="line">├── web/</span><br><span class="line">│ ├── css/</span><br><span class="line">│ │ ├── source/ </span><br><span class="line">│ ├── fonts/</span><br><span class="line">│ ├── images/</span><br><span class="line">│ ├── js/</span><br></pre></td></tr></table></figure>

<p><code>.../&lt;theme&gt;/web/images</code>放和主题相关的图片，比如主题的logo。主题文件里很有可能包含模块相关的文件，模块相关的文件路径是这样的<code>.../&lt;theme&gt;/&lt;Namespace_Module&gt;/web/css</code></p>
<p><em>在主题开发过程中，如果你修改了web文件夹中的文件，请清空<code>pub/static 和var/view_preprocessed</code> 目录并重新载入页面。否则可能看不到改变。</em></p>
<h2 id="主题的文件夹结构"><a href="#主题的文件夹结构" class="headerlink" title="主题的文件夹结构"></a><a href="#%E4%B8%BB%E9%A2%98%E7%9A%84%E6%96%87%E4%BB%B6%E5%A4%B9%E7%BB%93%E6%9E%84"></a>主题的文件夹结构</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/design/frontend/&lt;Vendor&gt;/</span><br><span class="line">├── &lt;theme&gt;/</span><br><span class="line">│   ├── etc/</span><br><span class="line">│   │   ├── view.xml</span><br><span class="line">│   ├── web/</span><br><span class="line">│   │   ├── images</span><br><span class="line">│   │   │   ├── logo.svg</span><br><span class="line">│   ├── registration.php</span><br><span class="line">│   ├── theme.xml</span><br><span class="line">│   ├── composer.json</span><br></pre></td></tr></table></figure>

<h2 id="主题-logo"><a href="#主题-logo" class="headerlink" title="主题 logo"></a><a href="#%E4%B8%BB%E9%A2%98-logo"></a>主题 logo</h2><p>主题的logo 默认的名字和格式是logo.svg，只要把logo.svg 图片放在<code>&lt;theme_dir&gt;/web/images</code> 路径下，系统就会识别他为主题的logo，当主题被应用时，页面头部就会显示这个logo。</p>
<p>如果你不想用默认的名字和格式，就要声明它。</p>
<p>创建<code>&lt;theme_dir&gt;/Magento_Theme/layout/default.xml</code>并声明，假设你的logo 文件是<code>my_logo.png</code>大小是300*300px，那就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceBlock name=&quot;logo&quot;&gt;</span><br><span class="line">            &lt;arguments&gt;</span><br><span class="line">                &lt;argument name=&quot;logo_file&quot; xsi:type=&quot;string&quot;&gt;images/my_logo.png&lt;/argument&gt;</span><br><span class="line">                &lt;argument name=&quot;logo_img_width&quot; xsi:type=&quot;number&quot;&gt;300&lt;/argument&gt; </span><br><span class="line">                &lt;argument name=&quot;logo_img_height&quot; xsi:type=&quot;number&quot;&gt;300&lt;/argument&gt;</span><br><span class="line">            &lt;/arguments&gt;</span><br><span class="line">        &lt;/referenceBlock&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>关于layout 更多参考：<a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/layouts/layout-overview.html">Layout overview</a></p>
<h2 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a><a href="#%E5%BA%94%E7%94%A8%E4%B8%BB%E9%A2%98"></a>应用主题</h2><p>在后台，进入 <code>CONTENT &gt; Design &gt; Configuration</code> 进行修改。</p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magneto 2 前端主题创建</tag>
      </tags>
  </entry>
  <entry>
    <title>如何快速判断 Magento 的站点是 1.X 还是 2.X</title>
    <url>/how-to-quickly-tell-if-a-magento-site-is-version-1-x-or-2-x/</url>
    <content><![CDATA[<h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80"></a>方法一</h1><p>查看网站的源代码<br>Magento 1 css 文件的路径是这个格式的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mainfolder/skin/frontend/spacename/themename/css/css files</span><br></pre></td></tr></table></figure>

<p>Magento 2 css 文件的路径是这个格式的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mainfolder/pub/static/frontend/spacename/themename/locale/css/css files</span><br></pre></td></tr></table></figure>

<h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C"></a>方法二</h1><p>Magento 2 采用了require js<br>所以查看源代码会发现如下类似的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var require = &#123;</span><br><span class="line">        &quot;baseUrl&quot;: &quot;&amp;#123;&amp;#123;project url&amp;#125;&amp;#125;/pub/static/frontend/&#123;Packagename&#125;/&#123;theme&#125;/en_US&quot;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<p>按照这个特征，可以写一个爬虫去抓取到底有哪些网站已经使用了Magento 2 哈！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>关于中文包的更新方法问题 （原创）</title>
    <url>/how-to-update-csv-using-older-csv-file/</url>
    <content><![CDATA[<h2 id="如何提取翻译短语"><a href="#如何提取翻译短语" class="headerlink" title="如何提取翻译短语"></a><a href="#%E5%A6%82%E4%BD%95%E6%8F%90%E5%8F%96%E7%BF%BB%E8%AF%91%E7%9F%AD%E8%AF%AD"></a>如何提取翻译短语</h2><p>先从制作说起，如果我们要提取某个模块的翻译短语，可以使用下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magento i18n:collect-phrases [-o--output=&quot;&lt;csv file path and name&gt;&quot;] [-m--magento] &lt;path to directory to translate&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i18n:collect-phrases -o &quot;zh_Hans_CN.csv&quot; E:\www\M204BSD\vendor\magento\module-backup</span><br></pre></td></tr></table></figure>

<p>这个例子是提取 <code>E:\www\M204BSD\vendor\magento\module-backup</code> 的翻译短语到根目录 <code>zh_Hans_CN.csv</code> 文件中。</p>
<p>如果要提取全部的，那么使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i18n:collect-phrases -o &quot;zh_Hans_CN.csv&quot; -m</span><br></pre></td></tr></table></figure>

<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a><a href="#%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"></a>存在的问题</h2><p>因为 Magento 2 的版本在不断更迭，所以短语会有一些变化。如果我们要用最新版本的语言包，必须要自己制作。在<a href="/magento-2-zh-hans-cn-csv/">Magento 2 中文化问题（原创）</a>中，博主提到官方中文包存在的问题，其中之一就是他跟不上节奏。</p>
<p>现在的问题是，如何才能在每次版本升级后，快速地制作出最新的语言包？也就是说，两个版本的语言包大部分是重叠的，仅有少部分的更改，如何将旧版本的翻译短语直接用到新提取的 csv 文件中。</p>
<p>最笨的肯定是人工，人工还是不要想了，工作量很大而且枯燥乏味，容易出错，最费事。迭代过程肯定不能使用人工来完成，但是第一遍的校正真的是非人工不可。。博主测试，速度大概是每半小时100行，总共有接近 8000 条翻译短语（有重复的），这样算起来大概要5个工作日，每天8小时计算。但是这样真的会死人的。。所以还是每天抽空翻译一点好了。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a><a href="#%E6%96%B9%E6%B3%95"></a>方法</h2><p>下面是基于第一遍校正已经完成后的假设，如何使用手头已经校正好的 csv 文件替换新提取的 csv 中相同的短语。</p>
<p>博主尝试写 php 代码，逐行判断，看起来不是难事，But，csv 中包含了特殊字符，做等于判断直接报错，想想要处理特殊字符绝对麻烦的事情，所以博主就放弃这个念头了。</p>
<p>下面要说重点了，何不利用数据库的连接查询？哈哈，快来夸我。。</p>
<p>csv 导入数据库是很简单的，我们把新提取的 csv 导入后命名为 target，把已经矫正过的 csv 导入后命名为 para ，结果表就叫 result。</p>
<p>首先我们只需要 para 的两列，并且是不重复的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into para2 (SELECT DISTINCT col1 , col2 FROM `para` )</span><br></pre></td></tr></table></figure>

<p>这样我们取得的是 col1, col2 两列都不重复的记录放入 para2 表。</p>
<p>对于 target，我们要先去掉四列都相同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into target2 (SELECT DISTINCT col1 , col2, col3, col4 FROM `target` )</span><br></pre></td></tr></table></figure>

<p>然后对 target2 根据第三列和第一列进行合并第四列，（这个步骤也可以省略）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into target3 (SELECT col1,col2,col3,GROUP_CONCAT(col4) as col4 from target2 GROUP by col3,col1)</span><br></pre></td></tr></table></figure>

<p>最后就是用 target3 和 para2 进行左连接了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into result SELECT a.col1, b.col2, a.col3,a.col4 from target3 a left JOIN para2 b on a.col1=b.col1</span><br></pre></td></tr></table></figure>

<p>这样我们得到的 result 就是充分使用了原有短语的表，我们可以将他导出为 csv ，然后手工补上没有找到的短语（没有找到的为 NULL）</p>
<p>理论上这是 OK 的，但是实验尚未完成，因为博主卡在第一遍的手工校正上了。先记录下来，以备后续补充更正。</p>
<p>另外发现 Magento 提取的短语有换行和空行，博主做了一些测试，可能是 bug ，已经提交 github，戳这里了解更多：<a href="https://github.com/magento/magento2/issues/7767">https://github.com/magento/magento2/issues/7767</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Magento 2 中文包</tag>
      </tags>
  </entry>
  <entry>
    <title>hyper-v 创建虚拟机</title>
    <url>/hyper-v-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p>博主是 windows 系统，用 wamp 本地开发经常遇到些奇奇怪怪的问题。所以需要一个虚拟机方案。 从 win8 开始，自带 hyper-v ，你也可以考虑用 VirtualBox 、VMware 等其他方案。</p>
<h2 id="启用-hyper-v"><a href="#启用-hyper-v" class="headerlink" title="启用 hyper-v"></a><a href="#%E5%90%AF%E7%94%A8-hyper-v"></a>启用 hyper-v</h2><p>控制面板 -&gt; 启用或关闭 windows 功能，勾选 Hyper-v <img src="/wp-content/uploads/2017/10/%E5%90%AF%E7%94%A8Hyper-v.png" alt="启用 Hyper-v"> 然后重启电脑 重启后从搜索中找到 Hyper-v 管理器，然后甩开膀子开始玩吧。。 需要注意，要创建一个外部虚拟交换机，并且设置虚拟机使用该外部虚拟交换机，然后虚拟机就能上网了。</p>
<h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a><a href="#%E5%AE%89%E8%A3%85%E7%B3%BB%E7%BB%9F"></a>安装系统</h2><p>这个随便你安装什么系统了，博主用的 ubuntu 16，所以本段记录博主遇到的问题。 问题一：ubuntu 16 安装时选择中文，出现错误 “无法安装busybox-initramfs”，然后我试了 14 版本，安装 MySQL 时遇到了错误 “return codecs.ascii_decode(input, self.errors)[0] UnicodeDecodeError: ‘ascii’ codec can’t decode byte 0xc5 in position 92: ordinal not in range(128)” 。 解决方法：安装了 ubuntu 16 但是选择英文。不要问我为什么。。 问题二：hyper-v 本来的连接工具竟然无法使用复制粘贴。 解决方法：安装 ssh 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install net-tools #安装网络工具</span><br><span class="line">sudo apt-get install openssh-server #安装ssh服务</span><br><span class="line">ufw allow 22/tcp</span><br></pre></td></tr></table></figure>

<p>下面用 ssh 客户端工具连接就行了。博主用的 Putty 。 问题三：hyper-v 虚拟机的网络一般用的是 DHCP，获取的 ip 地址是动态的，要把他设置成静态的。不然每次重启后，可能地址就不一样了，这样要查地址、改地址，不是烦死球了。 解决方法（以 ubuntu 为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/network/interfaces</span><br></pre></td></tr></table></figure>

<p>由</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure>

<p>改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line">iface eth0 inet static</span><br><span class="line">address 192.168.0.250</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line">gateway 192.168.0.1</span><br></pre></td></tr></table></figure>

<p>address 是你要设置的静态地址，请根据你的实际情况写。 设置 DNS 服务器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 192.168.0.250</span><br><span class="line">nameserver 218.2.2.2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/resolvconf/resolv.conf.d/base</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 192.168.0.250</span><br><span class="line">nameserver 218.2.2.2</span><br></pre></td></tr></table></figure>

<p>重启 networking 服务使其生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>

<p>然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>

<p>查看是否生效。 如果还是无效，就重启整个物理机。 参考 <a href="http://blog.csdn.net/litao31415/article/details/49661399">ubuntu设置静态ip地址</a></p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>hyper-v</tag>
        <tag>ubuntu</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title>hyper-v centos 静态 IP 设置</title>
    <url>/hyper-v-centos-%E9%9D%99%E6%80%81-ip-%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>查看系统版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /etc/*release*</span><br></pre></td></tr></table></figure>

<p>结果类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CentOS Linux release 7.4.1708 (Core)</span><br><span class="line">Derived from Red Hat Enterprise Linux 7.4 (Source)</span><br><span class="line">NAME=&quot;CentOS Linux&quot;</span><br><span class="line">VERSION=&quot;7 (Core)&quot;</span><br></pre></td></tr></table></figure>

<p>安装工具包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install net-tools</span><br></pre></td></tr></table></figure>

<p>修改静态的 IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure>

<p>适当修改，类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E=eth0 //网卡名称</span><br><span class="line"></span><br><span class="line">HWADDR=00:0c:29:5c:94:74</span><br><span class="line"></span><br><span class="line">TYPE=Ethernet</span><br><span class="line"></span><br><span class="line">UUID=36c43db3-95a9-427c-af8f-ba130189de85</span><br><span class="line"></span><br><span class="line">ONBOOT=yes //将 ONBOOT=&quot;no&quot; 改为ONBOOT=&quot;yes&quot;</span><br><span class="line"></span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line"></span><br><span class="line">BOOTPROTO=none</span><br><span class="line"></span><br><span class="line">IPADDR=192.168.0.252 //修改 IP 地址</span><br><span class="line"></span><br><span class="line">NETMASK=255.255.255.0 //修改子网掩码</span><br><span class="line"></span><br><span class="line">GATEWAY=192.168.0.1 //修改网关</span><br><span class="line"></span><br><span class="line">DNS1=8.8.8.8 //修改DNS服务器</span><br></pre></td></tr></table></figure>

<p>增加 DNS 地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/resolv.conf</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nameserver 192.168.0.250</span><br><span class="line">nameserver 218.2.2.2</span><br></pre></td></tr></table></figure>

<p>重启网络服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>

<p>hyper-v 中的网络有时会出现奇怪的问题，可以尝试删除虚拟交换机后重建重启。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>hyper-v</tag>
        <tag>静态 IP</tag>
      </tags>
  </entry>
  <entry>
    <title>id and frontName in routes config file</title>
    <url>/id-and-frontname-in-routes-config-file/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#notes"></a>Notes</h2><p>The standard router URL structure is <code>&#123;frontName&#125;/&#123;actionPath&#125;/&#123;action&#125;</code> (standard router class: magento\framework\App\Router\Base.php::match) So, the <code>catalog/product_compare/add</code> correspond to <code>vendor\magento\module-catalog\Controller\Product\Compare\Add.php</code> The naming convention for layout.xmls is <code>&#123;route id&#125;_&#123;controller name&#125;_&#123;action name&#125;.xml</code></p>
<h2 id="Practice-tests"><a href="#Practice-tests" class="headerlink" title="Practice tests"></a><a href="#practice-tests"></a>Practice tests</h2><p>You see this code in etc&#x2F;frontend&#x2F;routes.xml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;route id=&quot;mymodule&quot; frontName=&quot;user-subscriptions&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;MyCompany_MyModule&quot;/&gt;</span><br><span class="line">&lt;/route&gt;</span><br></pre></td></tr></table></figure>

<p>You have placed a controller in Controller&#x2F;Index&#x2F;Subscribe.php. At what URL would you visit the controller listed above? A. &#x2F;mymodule&#x2F;index&#x2F;subscribe B. &#x2F;mymodule&#x2F;subscribe C. &#x2F;user-subscriptions&#x2F;subscribe D. &#x2F;user-subscriptions&#x2F;index&#x2F;subscribe Answer D</p>
<hr>
<p>You see this code in etc&#x2F;adminhtml&#x2F;routes.xml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;route id=&quot;mymodule&quot; frontName=&quot;user-subscriptions&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;MyCompany_MyModule&quot; /&gt;</span><br><span class="line">&lt;/route&gt;</span><br></pre></td></tr></table></figure>

<p>You have placed a controller in Controller&#x2F;Index&#x2F;Subscribe.php. If you want to create layout XML instructions for this controller, what would be the layout XML’s filename? A. user_subscriptions_subscribe_[ACTION NAME].xml B. user_subscriptions_index_subscribe.xml C. mymodule_index_subscribe.xml D. mymodule_subscribe_[ACTION NAME].xml Answer C</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><p>Today we are going to use route to rewrite controller. We’ve created a simple module <code>VendorName_TestModule</code>. etc&#x2F;frontend&#x2F;routes.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;standard&quot;&gt;</span><br><span class="line">        &lt;route frontName=&quot;test_user&quot; id=&quot;test&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;VendorName_TestModule&quot;/&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">        &lt;route id=&quot;customer&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;VendorName_TestModule&quot; before=&quot;Magento_Customer&quot; /&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace  VendorName\TestModule\Controller\Account;</span><br><span class="line"></span><br><span class="line">class Login extends\Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;customer login&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Ok, after we visit <code>http://example.com/index.php/customer/account/login</code>, we will go into our controller.</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#reference"></a>Reference</h2><p><a href="https://magento.stackexchange.com/questions/207417/why-to-keep-id-and-frontname-same-in-magento-2-routes-config-file">Why to keep id and frontName same in magento 2 routes config file?</a> <a href="https://www.mageplaza.com/magento-2-module-development/magento-2-routing.html">Magento 2 Routing</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu 安装 docker ce</title>
    <url>/install-docker-ce-ubuntu/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg  sudo apt-key add -</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository \</span><br><span class="line">   &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line">   $(lsb_release -cs) \</span><br><span class="line">   stable&quot;</span><br></pre></td></tr></table></figure>

<p>查看所有可用的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-cache madison docker-ce</span><br></pre></td></tr></table></figure>

<p>安装最新的版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install docker-ce</span><br></pre></td></tr></table></figure>

<p>测试装好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository">Get Docker CE for Ubuntu</a> <a href="https://yeasy.gitbooks.io/docker_practice/install/ubuntu.html">Ubuntu 安装 Docker CE</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Install and Upgrade scripts</title>
    <url>/install-and-upgrade-scripts/</url>
    <content><![CDATA[<h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a><a href="#requirements"></a>Requirements</h2><p>Describe the install&#x2F;upgrade workflow. Where are setup scripts located, and how are they executed? Which types of functionality correspond to each type of setup script?</p>
<h2 id="Attention"><a href="#Attention" class="headerlink" title="Attention"></a><a href="#attention"></a>Attention</h2><p>Magento has introduced a new feature called <strong>Declarative Schema</strong> since 2.3 which aims to simplify the Magento installation and upgrade processes. So this is out of date on the perspective of preparing for the exam</p>
<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#Notes"></a>Notes</h2><p>Install&#x2F;Upgrade scripts are located in the VendorName&#x2F;Module&#x2F;Setup directory. There are 6 types:</p>
<ul>
<li>Setup&#x2F;InstallSchema</li>
<li>Setup&#x2F;UpgradeSchema</li>
<li>Setup&#x2F;InstallData</li>
<li>Setup&#x2F;UpgradeData</li>
<li>Setup&#x2F;Recurring</li>
<li>Setup&#x2F;Uninstall</li>
</ul>
<h2 id="Practice-test"><a href="#Practice-test" class="headerlink" title="Practice test"></a><a href="#Practice-test"></a>Practice test</h2><p>You performing a code review on an existing module. You see some interesting files in the Setup&#x2F;folder. What files in the Setup&#x2F; does Magento understand? (Multiple Choice) A. Setup&#x2F;InstallSchema.php B. Setup&#x2F;Migrations&#x2F;…php C. Setup&#x2F;Recurring.php D. Setup&#x2F;UpgradeSchema.php E. Setup&#x2F;InstallDetails.php Answer A C D While integrating a merchant’s product information management system with Magento, you create a module MyCompany_MerchantPim that adds a catalog product EAV attribute pim_entity_id programmatically. In which type of setup script do you create the EAV attribute? A. Setup&#x2F;InstallSchema.php B. Setup&#x2F;UpgradeSchema.php C. Setup&#x2F;InstallEntity.php D. Setup&#x2F;UpgradeData.php Answer D UpgradeSchema.php only provides one method: upgrade. What method do you use to determine what code to execute for what method? A. Use PHP’s version_compare method to compare the $context-&gt;getVersion() with the required version. B. Use the $setup-&gt;compareVersion method. C. Put the updates into a method named containing the version number that the module is being upgraded to. D. Check the etc&#x2F;module.xml XML file for the version number. Answer A</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>为什么几乎所有的麦进斗插件都是一次性付费而不是订阅付费（翻译）</title>
    <url>/is-there-a-specific-reason-almost-all-magento-extensions-are-one-time-payments-and-not-subscription-based/</url>
    <content><![CDATA[<p><em><a href="https://www.quora.com/Is-there-a-specific-reason-almost-all-magento-extensions-are-one-time-payments-and-not-subscription-based">原文地址</a></em><br><em>说明：本文是基于原文地址的翻译，部分进行了意译。不代表本人的观点</em></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a><a href="#%E9%97%AE%E9%A2%98"></a>问题</h2><p>检查麦进斗的插件市场，我发现几乎所有的插件都是一次性付费的。为了确定订阅付费的方式是否可行，我想找出一次付费的原因。</p>
<h2 id="Aviv-Revach-2012年10月30日"><a href="#Aviv-Revach-2012年10月30日" class="headerlink" title="Aviv Revach 2012年10月30日"></a><a href="#aviv-revach-2012%E5%B9%B410%E6%9C%8830%E6%97%A5"></a>Aviv Revach 2012年10月30日</h2><p>起初，开源平台例如麦进斗获得了个人开发者的免费贡献。后来，一些电商集成者和小型开发公司也决定加入。他们提供质量一般的简单插件，收费低，仅收取成本费用——按照外包所需的时间收费。更进一步说，使用 Magento Connect 的绝大部分中小公司，他们可接受的价格低，所需的也少。因此，这些开发公司决定发布一些（或很多）插件，低价出售，以获得更多的购买数量。这样做有一个额外的好处，他们增加了曝光度，获得了许多潜在客户，而这些客户可能会购买他们的开发服务。</p>
<p>几乎与此同时，进化出一些高质量软件供应商。这些大多是背后有良好的支持的初创公司，投入了数百万美元进行开发、营销和支持（MyBuys，RichRelevance等）他们中的很多公司决定专注于中高端的企业级客户，进行基于价值的定价（订阅付费是其中一种实现方式）所以他们创建了强大的直销团队来实现上面的策略。</p>
<p>他们通常忽略 Magento connect 和其他 Marketplace 的原因有：</p>
<ol>
<li>他们是直接销售驱动的——这曾经是获得大客户的唯一方法。</li>
<li>使用 Magneto Connect 或其他 Marketplace 的大多是这样的：<ul>
<li>中小公司 —— 不是他们的目标客户</li>
<li>技术人员 —— 不是他们要接近的相关人员</li>
<li>国际的 —— 不是他们的主要目标市场</li>
</ul>
</li>
<li>电商平台的市场是非常分散的（以前更加分散）—— 为每个 app store 进行开发和发布需要很高的投资。这种分散式是非常明显的，如果你看看各州的电商会议的参展名单（e.g. IRCE, Shop.org, eTail, 等），你会发现很少有公司发布麦进斗的插件（可能只有1%）如果你看看 Magento Connect 里的插件，你会发现很少插件是高质量的，由大的或成功的电商供应商发布的。</li>
</ol>
<p>这两个世界现在正开始合并 —— 许多高质量的供应商开始意识到 Magento connect 和其他 Appstore 或者叫marketplace 的潜力，而小的开发公司正在开展新的业务模式。的确是激动人心的时候。</p>
<h2 id="Alexander-Levashov-2014年12月1日"><a href="#Alexander-Levashov-2014年12月1日" class="headerlink" title="Alexander Levashov 2014年12月1日"></a><a href="#alexander-levashov-2014%E5%B9%B412%E6%9C%881%E6%97%A5"></a>Alexander Levashov 2014年12月1日</h2><p>我想补充几点：</p>
<ol>
<li>选择使用 Magento 的人（商家或者开发者）偏好拥有而不是租赁。这是Magento 和其他 SaaS 平台（像Shopify 或 BigCommerce）的根本差异。因此很自然地对一次性付费方式更偏爱而不是订阅付费方式。</li>
<li>magento 插件通常是一段代码，下载安装到自己的服务器就好了。没有订阅付费的理由。有一些插件除外，他们订阅付费也可能免费，但是需要登录账户，而他的其他服务可能并不免费。</li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>resource model 中的 $_isPkAutoIncrement</title>
    <url>/ispkautoincrement/</url>
    <content><![CDATA[<p><strong>如果 model 的主键不是自增的，请在 resource model 中写上 <code>$_isPkAutoIncrement = false</code></strong> 通常我们创建一个 model 关联一张表。比如说我表的主键是 <code>sample_id</code> ，他不是自增的。那么使用下面的代码，本来我想插入数据，实际表现却不是很正常，可能插入不了，要么做了更新操作。但是神奇的是可以从数据库中取数据。 插入数据可能不正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data = array(&#x27;sample_id&#x27;=&gt;&#x27;new_id&#x27;,&#x27;custid&#x27;=&gt;1,&#x27;info&#x27;=&gt;&#x27;info&#x27;);</span><br><span class="line">$model = Mage::getModel(&#x27;interface/data&#x27;)-&gt;setData($data);</span><br><span class="line">$model-&gt;save();</span><br></pre></td></tr></table></figure>

<p>读数据正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sample = Mage::getModel(&#x27;interface/data&#x27;)-&gt;load(&#x27;sample_id&#x27;)</span><br><span class="line">var_dump($sample-&gt;getData());</span><br></pre></td></tr></table></figure>

<p>原因就是 resource model 中 <code>$_isPkAutoIncrement</code> 没有设置为 false 。该属性是用来判断主键是否自增的，默认为 true ，就是主键自增。 参考： <a href="https://www.hellomagento2.com/crud-models-in-magento-2/">CRUD Models in Magento 2</a></p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>jQuery Plugin and Widget</title>
    <url>/jquery-plugin-and-widget/</url>
    <content><![CDATA[<h2 id="创建-jQuery-Plugin"><a href="#创建-jQuery-Plugin" class="headerlink" title="创建 jQuery Plugin"></a><a href="#%E5%88%9B%E5%BB%BA-jquery-plugin"></a>创建 jQuery Plugin</h2><h3 id="方法一-在-jQuery-命名空间上添加方法"><a href="#方法一-在-jQuery-命名空间上添加方法" class="headerlink" title="方法一 在 jQuery 命名空间上添加方法"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80-%E5%9C%A8-jquery-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E4%B8%8A%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95"></a>方法一 在 jQuery 命名空间上添加方法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jQuery plugin&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    $.sayHello = function() &#123;</span><br><span class="line">        console.log(&#x27;Hello&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        sayHi: function(name) &#123;</span><br><span class="line">            console.log(&#x27;Hi,&#x27; + (name ? name : &#x27;ThankIT&#x27;) + &#x27;!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $.sayHello();</span><br><span class="line">    $.sayHi();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>效果： <img src="/wp-content/uploads/2017/10/jquery-plugin-1.png" alt="jquery plugin"> 此种方法扩展了 jQuery 本身，但它不能选中 DOM 元素。</p>
<h3 id="方法二-在-fn-上添加方法"><a href="#方法二-在-fn-上添加方法" class="headerlink" title="方法二 在 $.fn 上添加方法"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C-%E5%9C%A8-%60$.fn%60-%E4%B8%8A%E6%B7%BB%E5%8A%A0%E6%96%B9%E6%B3%95"></a>方法二 在 <code>$.fn</code> 上添加方法</h3><p>在写插件之前，我们先了解下 jQuery 是怎么工作的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$( &quot;a&quot; ).css( &quot;color&quot;, &quot;red&quot; );</span><br></pre></td></tr></table></figure>

<p>这是很基础的 jQuery 代码。当你用 <code>$</code> 选中元素的时候，它会返回 jQuery 对象，返回的这个 jQuery 对象就包含 <code>css()</code> 方法，还有被选中的元素。 jQuery 对象是从 <code>$.fn</code> (jQuery.prototype 的别名)对象获得方法的。所以，我们可以在 <code>$.fn</code> 方法上添加方法来扩展 jQuery object</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jQuery plugin&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 id=&quot;hello&quot;&gt;Hello&lt;/h1&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // case 1</span><br><span class="line">    $.sayHello = function() &#123;</span><br><span class="line">        console.log(&#x27;Hello&#x27;);</span><br><span class="line">    &#125;;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        sayHi: function(name) &#123;</span><br><span class="line">            console.log(&#x27;Hi,&#x27; + (name ? name : &#x27;ThankIT&#x27;) + &#x27;!&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    $.sayHello();</span><br><span class="line">    $.sayHi();</span><br><span class="line"></span><br><span class="line">    // 在 jQuery 上扩展的方法无法选中元素</span><br><span class="line">    // Uncaught TypeError: $(...).sayHi is not a function</span><br><span class="line">    // $( &quot;h1&quot; ).sayHi();</span><br><span class="line"></span><br><span class="line">    // case 2</span><br><span class="line">    // 需要返回 this 以支持链式调用</span><br><span class="line">    $.fn.greenify = function() &#123;</span><br><span class="line">        return this.css( &quot;color&quot;, &quot;green&quot; );</span><br><span class="line">    &#125;;</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        italic: function() &#123;</span><br><span class="line">            return this.css(&quot;font-style&quot;,&quot;italic&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    $( &quot;h1&quot; ).greenify();</span><br><span class="line">    $( &quot;h1&quot; ).italic();</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>效果： <img src="/wp-content/uploads/2017/10/jquery-plugin-2.png" alt="jquery plugin"> 参考官方文档 <a href="http://learn.jquery.com/plugins/">jquery plugins</a></p>
<h3 id="安全的插件结构"><a href="#安全的插件结构" class="headerlink" title="安全的插件结构"></a><a href="#%E5%AE%89%E5%85%A8%E7%9A%84%E6%8F%92%E4%BB%B6%E7%BB%93%E6%9E%84"></a>安全的插件结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;(function($,window,document,undefined)&#123;</span><br><span class="line">    // 插件代码</span><br><span class="line">&#125;)(jQuery,window,document);</span><br></pre></td></tr></table></figure>

<p>用自调用匿名函数包裹代码，形成一个作用域，避免对全局命名空间的污染。 使用 <code>;</code> 是为了避免：前面的代码没有以分号结尾，引入我们的 js 后，导致报错无法执行。 比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var foo=function()&#123;</span><br><span class="line">    //别人的代码</span><br><span class="line">&#125;//注意这里没有用分号结尾</span><br><span class="line"></span><br><span class="line">//开始我们的代码。。。</span><br><span class="line">(function()&#123;</span><br><span class="line">    //我们的代码。。</span><br><span class="line">    alert(&#x27;Hello!&#x27;);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>参考 <a href="http://www.cnblogs.com/Wayou/p/jquery_plugin_tutorial.html">jQuery插件开发精品教程，让你的jQuery提升一个台阶</a></p>
<h2 id="创建-jQuery-Widget"><a href="#创建-jQuery-Widget" class="headerlink" title="创建 jQuery Widget"></a><a href="#%E5%88%9B%E5%BB%BA-jquery-widget"></a>创建 jQuery Widget</h2><p><a href="http://learn.jquery.com/jquery-ui/">jQuery UI 官方文档</a> 大部分 jQuery 插件是无状态的，完成某个动作就结束了。但是有些插件是有状态的，他们有生命周期和状态，widget factory 定义了如何创建和销毁他们，如何获取和设置选项，调用方法以及监听小部件触发的事件。这样的规范会让使用者更容易使用。 例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;jQuery plugin&lt;/title&gt;</span><br><span class="line">    &lt;link href=&quot;https://cdn.bootcss.com/jqueryui/1.12.1/jquery-ui.min.css&quot; rel=&quot;stylesheet&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jqueryui/1.12.1/jquery-ui.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">  &lt;div id=&quot;my-widget1&quot;&gt;color me&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;my-widget2&quot;&gt;color me&lt;/div&gt;</span><br><span class="line">  &lt;div id=&quot;my-widget3&quot;&gt;color me&lt;/div&gt;</span><br><span class="line">  &lt;button id=&quot;disable&quot;&gt;Toggle disabled option&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;green&quot;&gt;Go green&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .custom-colorize &#123;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: 75px;</span><br><span class="line">    height: 75px;</span><br><span class="line">  &#125;</span><br><span class="line">  .custom-colorize-changer &#123;</span><br><span class="line">    font-size: 10px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    right: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">$( function() &#123;</span><br><span class="line">    // the widget definition, where &quot;custom&quot; is the namespace,</span><br><span class="line">    // &quot;colorize&quot; the widget name</span><br><span class="line">    $.widget( &quot;custom.colorize&quot;, &#123;</span><br><span class="line">      // default options</span><br><span class="line">      options: &#123;</span><br><span class="line">        red: 255,</span><br><span class="line">        green: 0,</span><br><span class="line">        blue: 0,</span><br><span class="line"></span><br><span class="line">        // Callbacks</span><br><span class="line">        change: null,</span><br><span class="line">        random: null</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // The constructor</span><br><span class="line">      _create: function() &#123;</span><br><span class="line">        this.element</span><br><span class="line">          // add a class for theming</span><br><span class="line">          .addClass( &quot;custom-colorize&quot; );</span><br><span class="line"></span><br><span class="line">        this.changer = $( &quot;&lt;button&gt;&quot;, &#123;</span><br><span class="line">          text: &quot;change&quot;,</span><br><span class="line">          &quot;class&quot;: &quot;custom-colorize-changer&quot;</span><br><span class="line">        &#125;)</span><br><span class="line">        .appendTo( this.element )</span><br><span class="line">        .button();</span><br><span class="line"></span><br><span class="line">        // Bind click events on the changer button to the random method</span><br><span class="line">        this._on( this.changer, &#123;</span><br><span class="line">          // _on won&#x27;t call random when widget is disabled</span><br><span class="line">          click: &quot;random&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">        this._refresh();</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // Called when created, and later when changing options</span><br><span class="line">      _refresh: function() &#123;</span><br><span class="line">        this.element.css( &quot;background-color&quot;, &quot;rgb(&quot; +</span><br><span class="line">          this.options.red +&quot;,&quot; +</span><br><span class="line">          this.options.green + &quot;,&quot; +</span><br><span class="line">          this.options.blue + &quot;)&quot;</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        // Trigger a callback/event</span><br><span class="line">        this._trigger( &quot;change&quot; );</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // A public method to change the color to a random value</span><br><span class="line">      // can be called directly via .colorize( &quot;random&quot; )</span><br><span class="line">      random: function( event ) &#123;</span><br><span class="line">        var colors = &#123;</span><br><span class="line">          red: Math.floor( Math.random() * 256 ),</span><br><span class="line">          green: Math.floor( Math.random() * 256 ),</span><br><span class="line">          blue: Math.floor( Math.random() * 256 )</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        // Trigger an event, check if it&#x27;s canceled</span><br><span class="line">        if ( this._trigger( &quot;random&quot;, event, colors ) !== false ) &#123;</span><br><span class="line">          this.option( colors );</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // Events bound via _on are removed automatically</span><br><span class="line">      // revert other modifications here</span><br><span class="line">      _destroy: function() &#123;</span><br><span class="line">        // remove generated elements</span><br><span class="line">        this.changer.remove();</span><br><span class="line"></span><br><span class="line">        this.element</span><br><span class="line">          .removeClass( &quot;custom-colorize&quot; )</span><br><span class="line">          .enableSelection()</span><br><span class="line">          .css( &quot;background-color&quot;, &quot;transparent&quot; );</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // _setOptions is called with a hash of all options that are changing</span><br><span class="line">      // always refresh when changing options</span><br><span class="line">      _setOptions: function() &#123;</span><br><span class="line">        // _super and _superApply handle keeping the right this-context</span><br><span class="line">        this._superApply( arguments );</span><br><span class="line">        this._refresh();</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      // _setOption is called for each individual option that is changing</span><br><span class="line">      _setOption: function( key, value ) &#123;</span><br><span class="line">        // prevent invalid color values</span><br><span class="line">        if ( /redgreenblue/.test(key) &amp;&amp; (value &lt; 0  value &gt; 255) ) &#123;</span><br><span class="line">          return;</span><br><span class="line">        &#125;</span><br><span class="line">        this._super( key, value );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Initialize with default options</span><br><span class="line">    $( &quot;#my-widget1&quot; ).colorize();</span><br><span class="line"></span><br><span class="line">    // Initialize with two customized options</span><br><span class="line">    $( &quot;#my-widget2&quot; ).colorize(&#123;</span><br><span class="line">      red: 60,</span><br><span class="line">      blue: 60</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Initialize with custom green value</span><br><span class="line">    // and a random callback to allow only colors with enough green</span><br><span class="line">    $( &quot;#my-widget3&quot; ).colorize( &#123;</span><br><span class="line">      green: 128,</span><br><span class="line">      random: function( event, ui ) &#123;</span><br><span class="line">        return ui.green &gt; 128;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Click to toggle enabled/disabled</span><br><span class="line">    $( &quot;#disable&quot; ).on( &quot;click&quot;, function() &#123;</span><br><span class="line">      // use the custom selector created for each widget to find all instances</span><br><span class="line">      // all instances are toggled together, so we can check the state from the first</span><br><span class="line">      if ( $( &quot;:custom-colorize&quot; ).colorize( &quot;option&quot;, &quot;disabled&quot; ) ) &#123;</span><br><span class="line">        $( &quot;:custom-colorize&quot; ).colorize( &quot;enable&quot; );</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        $( &quot;:custom-colorize&quot; ).colorize( &quot;disable&quot; );</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // Click to set options after initialization</span><br><span class="line">    $( &quot;#green&quot; ).on( &quot;click&quot;, function() &#123;</span><br><span class="line">      $( &quot;:custom-colorize&quot; ).colorize( &quot;option&quot;, &#123;</span><br><span class="line">        red: 64,</span><br><span class="line">        green: 250,</span><br><span class="line">        blue: 8</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; );</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/10/jquery-widget.gif" alt="jquery widget"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>jquery plugin</tag>
        <tag>jquery widget</tag>
      </tags>
  </entry>
  <entry>
    <title>js-translation.json 未更新</title>
    <url>/js-translation-json-%E6%9C%AA%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p><code>js-tanslation.json</code> 用于前端的翻译。 比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;span data-bind=&quot;i18n:&#x27;Place order now&#x27;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$.mage.__(&#x27;Please enter a valid email %1 address (Ex: johndoe@domain.com).&#x27;)</span><br></pre></td></tr></table></figure>

<p>它是根据 csv 自动生成的。但是改动 csv 文件后，有很多时候 <code>js-translation.json</code> 却没有更新。 这里记一下，<code>developer</code> 模式下，让它更新的办法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento cache:clean</span><br><span class="line">rm -rf pub/static/*</span><br><span class="line">rm -rf var/view_preprocessed/*</span><br><span class="line">php bin/magento setup:static-content:deploy -f</span><br></pre></td></tr></table></figure>

<p>要义是使 <code>js-translation.json</code> 删除并重新生成。 如果还不更新，考虑浏览器端缓存，清空缓存并硬性重新加载。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>js-translation.json</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 搜索提示</title>
    <url>/js-%E6%90%9C%E7%B4%A2%E6%8F%90%E7%A4%BA/</url>
    <content><![CDATA[<ol>
<li>考虑中文输入问题</li>
<li>考虑输入的时间间隔，不一直请求后端，1 s 内的输入请求一次。</li>
</ol>
<p><img src="/wp-content/uploads/2018/11/autocomplete.gif"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;search auto complete&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;script</span><br><span class="line">  src=&quot;http://code.jquery.com/jquery-3.3.1.min.js&quot;</span><br><span class="line">  integrity=&quot;sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=&quot;</span><br><span class="line">  crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form id=&quot;search_form&quot; action=&quot;&quot; method=&quot;get&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;field-set&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;input-box&quot;&gt;</span><br><span class="line">                &lt;input type=&quot;search&quot; id=&quot;search&quot; name=&quot;q&quot; placeholder=&quot;Search&quot; maxlength=&quot;255&quot; class=&quot;searchText input-text required-entry&quot; autocomplete=&quot;off&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;action&quot;&gt;</span><br><span class="line">                &lt;button type=&quot;submit&quot;&gt;&lt;span&gt;Submit&lt;/span&gt;&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;ul id=&quot;autocomplete_terms_ul&quot;&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #autocomplete_terms_ul &#123;</span><br><span class="line">        position: absolute;</span><br><span class="line">        background: white;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 270px;</span><br><span class="line">        z-index: 999;</span><br><span class="line">        color: #333;</span><br><span class="line">        moz-box-shadow:2px 2px 5px #555;</span><br><span class="line">        -webkit-box-shadow:2px 2px 5px #555;</span><br><span class="line">        box-shadow: 2px 2px 5px #555;</span><br><span class="line">        border: 1px solid #ededed8c;</span><br><span class="line">        padding: 5px 0px;</span><br><span class="line">        display: none;</span><br><span class="line">    &#125;</span><br><span class="line">    #autocomplete_terms_ul li&#123;</span><br><span class="line">        padding: 8px 10px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    #autocomplete_terms_ul li:hover&#123;</span><br><span class="line">        background-color: #e6e6e691;</span><br><span class="line">    &#125;</span><br><span class="line">    #autocomplete_terms_ul li span&#123;</span><br><span class="line">        float:right;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">jQuery(document).ready(function() &#123;</span><br><span class="line">    var $ = jQuery,</span><br><span class="line">        timeout,</span><br><span class="line">        flag = true,</span><br><span class="line">        searchInput = $(&#x27;#search&#x27;),</span><br><span class="line">        searchForm = $(&quot;#search_form&quot;),</span><br><span class="line">        suggestBox = $(&quot;#autocomplete_terms_ul&quot;),</span><br><span class="line">        url = &quot;http://autocomplete/&quot;;</span><br><span class="line"></span><br><span class="line">    var doQuery = function (url, keyward) &#123;</span><br><span class="line">        // return $.ajax(&#123;</span><br><span class="line">        //     type: &quot;POST&quot;,</span><br><span class="line">        //     url: url,</span><br><span class="line">        //     data: &#123;prefix: keyward, count:10&#125;,</span><br><span class="line">        //     success: function (response) &#123;</span><br><span class="line">        //         showSuggestBox(JSON.parse(response));</span><br><span class="line">        //     &#125;</span><br><span class="line">        // &#125;);</span><br><span class="line">        var response = [&#123;&quot;KW&quot;:&quot;apple&quot;, &quot;QR&quot;:&quot;10&quot;&#125;,&#123;&quot;KW&quot;:&quot;banana&quot;, &quot;QR&quot;:&quot;7&quot;&#125;];</span><br><span class="line">        showSuggestBox(response);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var hideSuggestBox = function() &#123;</span><br><span class="line">        suggestBox.html(&#x27;&#x27;);</span><br><span class="line">        suggestBox.hide();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    var showSuggestBox = function(terms) &#123;</span><br><span class="line">        if (terms.length)&#123;</span><br><span class="line">            var html = &#x27;&#x27;;</span><br><span class="line">            $.each(terms, function (key, val) &#123;</span><br><span class="line">                html = html + &#x27;&lt;li&gt;&#x27; + val.KW + &#x27;&lt;span&gt;&#x27;+ val.QR +&#x27;&lt;/span&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">            &#125;);</span><br><span class="line">            suggestBox.html(html);</span><br><span class="line">            suggestBox.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    searchInput.bind(&#x27;compositionstart&#x27;, function () &#123;</span><br><span class="line">        flag = false;</span><br><span class="line">    &#125;).bind(&#x27;compositionend&#x27;, function () &#123;</span><br><span class="line">        flag = true;</span><br><span class="line">        // compositionend 在 input 之后触发</span><br><span class="line">        $(this).trigger(&#x27;input&#x27;);</span><br><span class="line">    &#125;).bind(&#x27;input&#x27;, function () &#123;</span><br><span class="line">        var keyword = $(this).val();</span><br><span class="line">        if (flag) &#123;</span><br><span class="line">            if (keyword) &#123;</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">                timeout = setTimeout(</span><br><span class="line">                    function () &#123;</span><br><span class="line">                        doQuery(url, keyword);</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // important</span><br><span class="line">                clearTimeout(timeout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        hideSuggestBox();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    suggestBox.on(&#x27;click&#x27;, &#x27;li&#x27;, function () &#123;</span><br><span class="line">        var suggest = $(this).clone().children().remove().end().text();</span><br><span class="line">        searchInput.val(suggest);</span><br><span class="line">        hideSuggestBox();</span><br><span class="line">        setTimeout(function () &#123;</span><br><span class="line">            searchForm.submit();</span><br><span class="line">        &#125;, 500);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/json/</url>
    <content><![CDATA[<p>JSON (JavaScript Object Notation ，JavaScript 对象表示法)，是一种轻量级的数据交换格式，比 xml 更易于解析，更明了。本篇将介绍 JSON 在 JavaScript 和 php 中的使用。 JSON 使用 JavaScript 语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 JSON 主要保存两种结构：对象和数组。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><a href="#%E5%AF%B9%E8%B1%A1"></a>对象</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="#%E6%95%B0%E7%BB%84"></a>数组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123; &quot;firstName&quot;:&quot;Bill&quot; , &quot;lastName&quot;:&quot;Gates&quot; &#125;,</span><br><span class="line">&#123; &quot;firstName&quot;:&quot;George&quot; , &quot;lastName&quot;:&quot;Bush&quot; &#125;,</span><br><span class="line">&#123; &quot;firstName&quot;:&quot;Thomas&quot; , &quot;lastName&quot;: &quot;Carter&quot; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><a href="#%E6%B3%A8%E6%84%8F%E7%82%B9"></a>注意点</h2><p><em>JSON 的键必须使用双引号，值如果是字符串，也必须使用双引号。</em> 数据传输过程中，JSON 是以文本即字符串的形式传输的。所以存在一个 JSON 字符串和 JSON 对象&#x2F;值转换的问题。</p>
<h2 id="用在-JavaScript-中"><a href="#用在-JavaScript-中" class="headerlink" title="用在 JavaScript 中"></a><a href="#%E7%94%A8%E5%9C%A8-javascript-%E4%B8%AD"></a>用在 JavaScript 中</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a><a href="#eval()"></a>eval()</h3><p><code>eval()</code> 函数可计算某个字符串，并执行其中的的 JavaScript 代码。 由于 JSON 语法是 JavaScript 语法的子集，JavaScript 函数 <code>eval()</code> 可用于将 JSON 文本转换为 JavaScript 对象。 <code>eval()</code> 函数使用的是 JavaScript 编译器，可解析 JSON 文本，然后生成 JavaScript 对象。必须把文本包围在括号中，这样才能避免语法错误。 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // case 1</span><br><span class="line">    var string = &#x27;&#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;&#x27;;</span><br><span class="line">    var obj = eval(&#x27;(&#x27; + string + &#x27;)&#x27;);</span><br><span class="line">    alert(obj.firstName);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>eval() 函数可编译并执行任何 JavaScript 代码。这隐藏着潜在的安全问题。</p>
<h3 id="JSON-解析器"><a href="#JSON-解析器" class="headerlink" title="JSON 解析器"></a><a href="#json-%E8%A7%A3%E6%9E%90%E5%99%A8"></a>JSON 解析器</h3><p>JSON 解析器只能识别 JSON 文本，而不会编译脚本，JSON 解析器速度更快，也更安全。 但是 JSON 解析器并不是一开始就由浏览器实现了，他存在兼容性问题。兼容性情况请参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse">JSON.parse()</a> 例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // case 2</span><br><span class="line">    var string = &#x27;&#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;&#x27;;</span><br><span class="line">    var obj = JSON.parse(string);</span><br><span class="line">    alert(obj.firstName);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><em>JSON.parse() 不允许用逗号作为结尾</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// both will throw a SyntaxError</span><br><span class="line">JSON.parse(&quot;[1, 2, 3, 4, ]&quot;);</span><br><span class="line">JSON.parse(&#x27;&#123;&quot;foo&quot; : 1, &#125;&#x27;);</span><br></pre></td></tr></table></figure>

<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    // case 3</span><br><span class="line">    var obj = &#123; &quot;firstName&quot;:&quot;John&quot; , &quot;lastName&quot;:&quot;Doe&quot; &#125;;</span><br><span class="line">    var string = JSON.stringify(obj);</span><br><span class="line">    console.log(string);</span><br><span class="line">    console.log(obj);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><code>JSON.stringify</code> 将 JS 对象转换成字符串。</p>
<h3 id="使用其他-js-包"><a href="#使用其他-js-包" class="headerlink" title="使用其他 js 包"></a><a href="#%E4%BD%BF%E7%94%A8%E5%85%B6%E4%BB%96-js-%E5%8C%85"></a>使用其他 js 包</h3><p>可查阅官方文档 <a href="http://www.json.org/">Introducing JSON</a></p>
<h2 id="用在-php-中"><a href="#用在-php-中" class="headerlink" title="用在 php 中"></a><a href="#%E7%94%A8%E5%9C%A8-php-%E4%B8%AD"></a>用在 php 中</h2><p>php 从 5.2 开始提供对 JSON 的原生支持。</p>
<h3 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode()"></a><a href="#%60json_encode()%60"></a><code>json_encode()</code></h3><p><code>json_encode()</code> 用于将数组和对象转换成 json 字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arr1 = [&#x27;1&#x27; =&gt; &#x27;one&#x27;, &#x27;2&#x27; =&gt; &#x27;two&#x27;, &#x27;3&#x27; =&gt; &#x27;three&#x27;];</span><br><span class="line">echo json_encode($arr1);</span><br><span class="line"></span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">$arr2 = [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;];</span><br><span class="line">echo json_encode($arr2);</span><br><span class="line"></span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo json_encode($arr2, JSON_FORCE_OBJECT);</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;1&quot;:&quot;one&quot;,&quot;2&quot;:&quot;two&quot;,&quot;3&quot;:&quot;three&quot;&#125;</span><br><span class="line">[&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]</span><br><span class="line">&#123;&quot;0&quot;:&quot;one&quot;,&quot;1&quot;:&quot;two&quot;,&quot;2&quot;:&quot;three&quot;&#125;</span><br></pre></td></tr></table></figure>

<p><em>由于 javascript 中是通过对象来实现关联数组的，所以 json_encode() 只将索引数组转为数组格式，而将关联数组转为对象格式。</em> 对象的转换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person</span><br><span class="line">&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public function hello()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;hello,my name is&#x27; . $this-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$jone = new Person();</span><br><span class="line">$jone-&gt;name = &#x27;jone&#x27;;</span><br><span class="line"></span><br><span class="line">// echo gettype(json_encode($jone));</span><br><span class="line">echo json_encode($jone);</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;jone&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>除了公开变量（public），其他东西（常量、私有变量、方法等等）都会遗失。</p>
<h3 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode()"></a><a href="#%60json_decode()%60"></a><code>json_decode()</code></h3><p><code>json_decode()</code> 用于将 JSON 字符串转换成相应的 php 数据结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$string = &#x27;&#123;&quot;name&quot;:&quot;jone&quot;&#125;&#x27;;</span><br><span class="line">$obj = json_decode($string);</span><br><span class="line">var_dump($obj);</span><br><span class="line"></span><br><span class="line">// 强制生成关联数组</span><br><span class="line">var_dump(json_decode($string, true));</span><br><span class="line"></span><br><span class="line">$string2 = &#x27;[&quot;one&quot;,&quot;two&quot;,&quot;three&quot;]&#x27;;</span><br><span class="line">var_dump(json_decode($string2));</span><br></pre></td></tr></table></figure>

<p>输出： <img src="/wp-content/uploads/2017/09/json_decode.png" alt="json decode"> 通常情况下，<code>json_decode()</code> 总是返回一个PHP对象，而不是数组。如果想要强制生成PHP关联数组，<code>json_decode()</code>需要加一个参数 <code>true</code></p>
<h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a><a href="#%E6%B3%A8%E6%84%8F%E7%82%B9"></a>注意点</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$string = &#x27;&#123;&quot;name&quot;:&quot;jone&quot;,&#125;&#x27;;</span><br><span class="line">var_dump(json_decode($string));</span><br></pre></td></tr></table></figure>

<p>将会返回 null <em>和 <code>JSON.parse()</code>一样，<code>json_decode()</code> 不允许用逗号作为结尾</em></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://www.json.org/">Introducing JSON</a> <a href="http://www.w3school.com.cn/json/json_eval.asp">JSON 使用</a> <a href="http://www.ruanyifeng.com/blog/2011/01/json_in_php.html">在PHP语言中使用JSON</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>JavaScript</tag>
        <tag>json</tag>
        <tag>json_decode</tag>
        <tag>json_encode</tag>
        <tag>JSON.parse()</tag>
        <tag>JSON.stringify</tag>
      </tags>
  </entry>
  <entry>
    <title>js 混淆小记</title>
    <url>/js-%E6%B7%B7%E6%B7%86%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>前几天遇到一个 js 文件，看起来就跟乱码似的，节选如下： <img src="/wp-content/uploads/2019/04/js_obfuscate.png"> 一番搜索后，发现这玩意儿 <code>\x62</code> 这种是 16 进制的表示方法。趁着这个机会，来理一理 js 中的进制转换问题吧。</p>
<h2 id="js-进制转换"><a href="#js-进制转换" class="headerlink" title="js 进制转换"></a><a href="#js-%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2"></a>js 进制转换</h2><p>js 中进制转换经常用的两个函数是 <code>toString</code> 和 <code>parseInt</code></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a><a href="#%60tostring%60"></a><code>toString</code></h3><p>我们打开浏览器的 console 控制台 看例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(15).toString(); // 把 15 转换成10进制的表示形式</span><br><span class="line">&gt; 15</span><br><span class="line">(15).toString(2); // 把 15 转换成2进制的表示形式</span><br><span class="line">&gt; 1111</span><br><span class="line">(15).toString(8); // 把 15 转换成8进制的表示形式</span><br><span class="line">&gt; 17</span><br><span class="line">(15).toString(16); // 把 15 转换成16进制的表示形式</span><br><span class="line">&gt; f</span><br></pre></td></tr></table></figure>

<h3 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt"></a><a href="#%60parseint%60"></a><code>parseInt</code></h3><p>在浏览器控制台输入下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">parseInt(&quot;f&quot;, 16) // 把 f 按照 16 进制转换成 10 进制的表示形式</span><br><span class="line">&gt; 15</span><br><span class="line">parseInt(&quot;17&quot;, 8)  // 把 17 按照 8 进制转换成 10 进制的表示形式</span><br><span class="line">&gt; 15</span><br><span class="line">parseInt(&quot;1111&quot;, 2) // 把 1111 按照 2 进制转换成 10 进制的表示形式</span><br><span class="line">&gt; 15</span><br><span class="line">parseInt(&quot;15&quot;, 10)</span><br><span class="line">&gt; 15</span><br></pre></td></tr></table></figure>

<p><code>parseInt</code>跟 <code>toString</code> 的转换正好是相反的。</p>
<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a><a href="#%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81"></a>字符编码</h2><p>打开浏览器 console</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;A&quot;.charCodeAt() // 也就是说 A 的内部编码值是 65</span><br><span class="line">&gt; 65</span><br><span class="line">String.fromCharCode(65) // 65 这个编码值对应着字符 A</span><br><span class="line">&quot;A&quot;</span><br></pre></td></tr></table></figure>

<p>这里的 65 指的都是十进制的。</p>
<h2 id="js-中二进制，八进制，十六进制表示"><a href="#js-中二进制，八进制，十六进制表示" class="headerlink" title="js 中二进制，八进制，十六进制表示"></a><a href="#js-%E4%B8%AD%E4%BA%8C%E8%BF%9B%E5%88%B6%EF%BC%8C%E5%85%AB%E8%BF%9B%E5%88%B6%EF%BC%8C%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA"></a>js 中二进制，八进制，十六进制表示</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(0x6D)  // 十六进制 0x 开头</span><br><span class="line">&gt; 109</span><br><span class="line">console.log(0155) // 八进制  0 开头</span><br><span class="line">&gt; 109</span><br><span class="line">console.log(0b01101101) // 二进制 0b 开头</span><br><span class="line">&gt; 109</span><br></pre></td></tr></table></figure>

<h2 id="字符串转义"><a href="#字符串转义" class="headerlink" title="字符串转义"></a><a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E4%B9%89"></a>字符串转义</h2><p>Character</p>
<p>Meaning</p>
<p>\0</p>
<p>Null Byte</p>
<p>\b</p>
<p>Backspace</p>
<p>\f</p>
<p>Form feed</p>
<p>\n</p>
<p>New line</p>
<p>\r</p>
<p>Carriage return</p>
<p>\t</p>
<p>Tab</p>
<p>\v</p>
<p>Vertical tab</p>
<p>\’</p>
<p>Apostrophe or single quote</p>
<p>\”</p>
<p>Double quote</p>
<p>\</p>
<p>Backslash character</p>
<p>\XXX</p>
<p>The character with the Latin-1 encoding specified by up to three octal digits XXX between 0 and 377. For example, \251 is the octal sequence for the copyright symbol.</p>
<p>\xXX</p>
<p>The character with the Latin-1 encoding specified by the two hexadecimal digits XX between 00 and FF. For example, \xA9 is the hexadecimal sequence for the copyright symbol.</p>
<p>\uXXXX</p>
<p>The Unicode character specified by the four hexadecimal digits XXXX. For example, \u00A9 is the Unicode sequence for the copyright symbol. See Unicode escape sequences.</p>
<p>\u{XXXXX}</p>
<p>Unicode code point escapes. For example, \u{2F804} is the same as the simple Unicode escapes \uD87E\uDC04.</p>
<p>(以上摘自 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#String_literals">Grammar_and_types#String_literals</a>) 这下就清楚了，遇到 ‘\XXX’ 就按照八进制解码，遇到 ‘\xXX’ 就按照 16 进制解码。 比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">console.log(&#x27;\x64&#x27;);</span><br><span class="line">&gt; d</span><br></pre></td></tr></table></figure>

<h2 id="免费工具"><a href="#免费工具" class="headerlink" title="免费工具"></a><a href="#%E5%85%8D%E8%B4%B9%E5%B7%A5%E5%85%B7"></a>免费工具</h2><p>js 加密（混淆）防君子防不住小人的。如果我们只是想增加别人阅读的困难，用一些免费工具，混淆一下，变量名无意义了，就很难看懂了。免费混淆工具 <a href="http://javascriptobfuscator.com/Javascript-Obfuscator.aspx">javascriptobfuscator.com</a> 解密工具 <a href="https://www.sojson.com/jsjiemi.html">www.sojson.com</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="http://blog.knownsec.com/2015/08/use-estools-aid-deobfuscate-javascript/">使用 estools 辅助反混淆 Javascript</a> <a href="https://www.cnblogs.com/52cik/p/js-string-escape.html">浅谈 js 字符串之神奇的转义</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Layout instruction 之 argument 和 action</title>
    <url>/layout-instruction-%E4%B9%8B-argument-%E5%92%8C-action/</url>
    <content><![CDATA[<p>本篇我们将通过一个 demo 来演示如何使用 layout 指令 ——— argument 和 action 。 本篇基于 <a href="https://www.hellomagento2.com/%E5%88%9B%E5%BB%BA-magento-2-hello-world-simple-module/">创建 Magento 2 Hello World Simple Module</a> 文章中的简单模块。</p>
<h2 id="创建-Controller"><a href="#创建-Controller" class="headerlink" title="创建 Controller"></a><a href="#%E5%88%9B%E5%BB%BA-controller"></a>创建 Controller</h2><p>File:app\code\ThankIT\HelloWorld\Controller\Layout\Instruction.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Layout;</span><br><span class="line"></span><br><span class="line">class Instruction extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-layout"><a href="#创建-layout" class="headerlink" title="创建 layout"></a><a href="#%E5%88%9B%E5%BB%BA-layout"></a>创建 layout</h2><p>File:app\code\ThankIT\HelloWorld\view\frontend\layout\helloworld_layout_instruction.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;page layout=&quot;1column&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\HelloWorld\Block\Layout\Instruction&quot; name=&quot;layout.instruction&quot; template=&quot;ThankIT_HelloWorld::layout/instruction.phtml&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;label&quot; xsi:type=&quot;string&quot;&gt;Block Label&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">                &lt;action method=&quot;doSomething&quot;&gt;</span><br><span class="line">                    &lt;argument translate=&quot;true&quot; name=&quot;thing&quot; xsi:type=&quot;string&quot;&gt;Running&lt;/argument&gt;</span><br><span class="line">                &lt;/action&gt;</span><br><span class="line">            &lt;/block&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h2 id="创建-Block"><a href="#创建-Block" class="headerlink" title="创建 Block"></a><a href="#%E5%88%9B%E5%BB%BA-block"></a>创建 Block</h2><p>File:app\code\ThankIT\HelloWorld\Block\Layout\Instruction.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Layout;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Instruction extends Template</span><br><span class="line">&#123;</span><br><span class="line">    public function doSomething($thing)</span><br><span class="line">    &#123;</span><br><span class="line">        // do something ...</span><br><span class="line">        $this-&gt;setData(&#x27;some_thing&#x27;, $thing);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-view"><a href="#创建-view" class="headerlink" title="创建 view"></a><a href="#%E5%88%9B%E5%BB%BA-view"></a>创建 view</h2><p>File:app\code\ThankIT\HelloWorld\view\frontend\templates\layout\instruction.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php echo $block-&gt;getLabel();?&gt;</span><br><span class="line">&lt;?php //等价于//echo $block-&gt;getData(&#x27;label&#x27;);?&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;?php echo $block-&gt;getSomeThing();?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a href="#%E6%B5%8B%E8%AF%95"></a>测试</h2><p>刷新缓存后，访问 <code>http://example/helloworld/layout/instruction/</code> 会看到： <img src="/wp-content/uploads/2017/09/layout-instruction-argument-action.png" alt="layout-instruction-argument-action"></p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a><a href="#%E6%B3%A8%E6%84%8F%E7%82%B9"></a>注意点</h2><h3 id="Use-block-object-methods-to-set-block-properties"><a href="#Use-block-object-methods-to-set-block-properties" class="headerlink" title="Use block object methods to set block properties"></a><a href="#use-block-object-methods-to-set-block-properties"></a>Use block object methods to set block properties</h3><p>There are two ways to access block object methods:</p>
<ul>
<li>using the <code>&lt;argument&gt;</code> instruction for <code>&lt;block&gt;</code> or <code>&lt;referenceBlock&gt;</code></li>
<li>using the <code>&lt;action&gt;</code> instruction. This way is not recommended, but can be used for calling those methods, which are not refactored yet to be accessed through <code>&lt;argument&gt;</code>.</li>
</ul>
<p><em>Do not use <code>&lt;action&gt;</code>, if the method implementation allows calling it using <code>&lt;argument&gt;</code> for <code>&lt;block&gt;</code> or <code>&lt;referenceBlock&gt;</code>.</em></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/layouts/xml-manage.html">Common layout customization tasks</a> <a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/layouts/xml-instructions.html#argument">Layout instructions</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>action</tag>
        <tag>argument</tag>
        <tag>Layout instruction</tag>
      </tags>
  </entry>
  <entry>
    <title>Using a Layout Update</title>
    <url>/layout-update-place-block/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/layout-update-place-block.html">原文地址</a></p>
<p>通过 layout update 可以将 Blocks 放置到特定页面的左边或者右边侧边栏。只要对代码做一点简单的改动，你就可以把 block 放在任意的侧边栏中，并控制他相对于其他 blocks 的位置。</p>
<p><code>callout</code> 术语有时候指的是通过 layout update 的 XML 代码定义的一个 Block。<code>sidebar</code> 指的是页面布局的左栏或者右栏。当你键入 layout update 代码的时候，请确保语法正确，可以参考下面的例子。</p>
<p><strong>要将 block 置于侧边栏中，页面必须要是两栏或三栏的布局</strong></p>
<h2 id="页面侧边栏添加-block"><a href="#页面侧边栏添加-block" class="headerlink" title="页面侧边栏添加 block"></a><a href="#%E9%A1%B5%E9%9D%A2%E4%BE%A7%E8%BE%B9%E6%A0%8F%E6%B7%BB%E5%8A%A0-block"></a>页面侧边栏添加 block</h2><ol>
<li><p>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Element</strong> 下选择 <strong>Blocks</strong></p>
</li>
<li><p>在表格中找到你要的 block，注意他的 Identifier，不要弄错拼写。</p>
</li>
<li><p>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Element</strong> 下选择 <strong>Pages</strong></p>
</li>
<li><p>找到你要修改的页面，并打开它进行编辑</p>
</li>
<li><p>右侧面板，选择 <strong>Design</strong>，然后做下面的事情：<br>a. 在 <strong>Layout Update XML</strong> 中，输入下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;reference name=&quot;right&quot;&gt;</span><br><span class="line">    &lt;block type=&quot;cms/block&quot; name=&quot;right.permanent.callout&quot;&gt;</span><br><span class="line">        &lt;action method=&quot;setBlockId&quot;&gt;&lt;block_id&gt;your-block-id&lt;/block_id&gt;&lt;/action&gt;</span><br><span class="line">    &lt;/block&gt;</span><br><span class="line">&lt;/reference&gt;</span><br></pre></td></tr></table></figure>

<p>b. 修改 <strong>reference name</strong> 为页面的左栏或者右栏<br>c. 修改 <strong>block.id</strong> 为你要放置的 block 的 id</p>
</li>
<li><p>完成后，点击 <strong>Save Page</strong></p>
</li>
</ol>
<p><em>译者注，上面的代码是不正确的，User guide 还没有更正，Magento 2 中的用法应该是下面这样：</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;referenceContainer name=&quot;footer&quot;&gt;</span><br><span class="line">       &lt;block class=&quot;Magento\Cms\Block\Block&quot; name=&quot;block_identifier&quot;&gt;</span><br><span class="line">            &lt;arguments&gt;</span><br><span class="line">                &lt;argument name=&quot;block_id&quot; xsi:type=&quot;string&quot;&gt;block_identifier&lt;/argument&gt;</span><br><span class="line">            &lt;/arguments&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">    &lt;/referenceContainer&gt;</span><br></pre></td></tr></table></figure>

<p>他的写法和 Layout XML 文件中的写法是完全一致的，修改后要清理缓存才会看到效果。（Markup tag 中的写法类似于 Layout 指令的简写，并且他不需要清空缓存就可以看到效果。Markup tag 中 User Guide 中的内容也不及时，请注意看译者的注释。）</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Linux 的文件权限</title>
    <url>/linux-%E7%9A%84%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<p>Linux 是一个多人多任务环境。 一般文件文件可存取的身份分为三个类别： owner&#x2F;group&#x2F;others 三个身份各有 read&#x2F;write&#x2F;execute 等权限 默认情况下，所有系统上的帐号与一般身份使用者，包括 root 都记录在 &#x2F;etc&#x2F;passwd 这个文件内。个人密码在 &#x2F;etc&#x2F;shadow 文件下。所有组名记录在 &#x2F;etc&#x2F;group 内。 <code>ls -al</code> 查看文件属性（包括隐藏文件和权限） <img src="/wp-content/uploads/2017/11/filepermission_3.gif" alt="文件的权限"> 档案类型： 当为[ d ]则是目录； 当为[ - ]则是文件； 若是[ l ]则表示为连结档(link file)； 若是[ b ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)； 若是[ c ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。 chgrp ：改变文件所属群组 chown ：改变文件拥有者 chmod ：改变文件的权限, SUID, SGID, SBIT等等的特性 -R 可以递归 chown [-R] user:group 文件或目录 权限可以用数字或是符号进行权限变更 r:4 w:2 r:1 chmod 777 file 就是 - rwx rwx rwx <img src="/wp-content/uploads/2017/11/chmod.png" alt="chmod 修改权限"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# chmod  u=rwx,go=rx  .bashrc</span><br><span class="line"># 注意喔！那个 u=rwx,go=rx 是连在一起的，中间并没有任何空格！</span><br><span class="line">[root@www ~]# ls -al .bashrc</span><br><span class="line">-rwxr-xr-x  1 root root 395 Jul  4 11:45 .bashrc</span><br></pre></td></tr></table></figure>

<p>权限对文件的重要性：</p>
<ul>
<li>r (read)：可读取此一文件的实际内容，如读取文本文件的文字内容等；</li>
<li>w (write)：可以编辑、新增或者是修改该文件的内容(但不含删除该文件)；</li>
<li>x (execute)：该文件具有可以被系统执行的权限。</li>
</ul>
<p><em>关于执行，在Windows底下一个文件是否具有执行的能力是藉由『 扩展名 』来判断的， 例如：.exe, .bat, .com 等等，但是在 Linux 底下，我们的文件是否能被执行，则是藉由是否具有『x』这个权限来决定的！跟档名是没有绝对的关系的！ 当你对一个文件具有w权限时，你可以具有写入&#x2F;编辑&#x2F;新增&#x2F;修改文件的内容的权限， 但并不具备有删除该文件本身的权限！对于文件的rwx来说， 主要都是针对『文件的内容』而言，与文件档名的存在与否没有关系喔！因为文件记录的是实际的数据嘛！</em> 权限对目录的重要性：</p>
<ul>
<li>r (read contents in directory)： 表示具有读取目录结构列表的权限，所以当你具有读取(r)一个目录的权限时，表示你可以查询该目录下的文件名数据。 所以你就可以利用 ls 这个指令将该目录的内容列表显示出来！</li>
<li>w (modify contents of directory)： 这个可写入的权限对目录来说，是很了不起的！ 因为他表示你具有异动该目录结构列表的权限，也就是底下这些权限：<ul>
<li>建立新的文件与目录；</li>
<li>删除已经存在的文件与目录(不论该文件的权限为何！)</li>
<li>将已存在的文件或目录进行更名；</li>
<li>搬移该目录内的文件、目录位置。</li>
</ul>
</li>
<li>x (access directory)： 工作目录对于指令的执行是非常重要的，如果你在某目录下不具有x的权限， 那么你就无法切换到该目录下，也就无法执行该目录下的任何指令，即使你具有该目录的r的权限。</li>
</ul>
<p>本文是阅读鸟哥的 Linux 私房菜—— 第六章关于文件权限部分的一个笔记，写的非常好。终于算是对服务器权限有个整理了。 附上参考链接 <a href="http://cn.linux.vbird.org/linux_basic/0210filepermission.php">第六章、Linux 的文件权限与目录配置</a> 有练习题，对于理解很有帮助。感谢鸟哥的贡献。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>鸟哥的 Linux 私房菜</tag>
      </tags>
  </entry>
  <entry>
    <title>了解 Magento</title>
    <url>/learn-magento-before-use-archive/</url>
    <content><![CDATA[<p>您可能希望在使用 Magento 之前，先了解下 Magento 怎么样？他有哪些功能，和其他系统相比如何？</p>
<p>下面的文章可能会帮助你更了解 Magento，文章或是翻译，或是博主自己的看法，请各位自行判断。欢迎留言。</p>
<p><a href="/bibi-ecommerce-platform/">漫谈网上商城系统——从技术角度进行比较</a></p>
<p><a href="/magento_in_my_eyes/">Magento 之我见</a></p>
<p><a href="/new-era-commerce-innovation/">商业创新的新时代(翻译)</a></p>
<p><a href="/magento-2-goals/">Magento 2 Goals （翻译）</a></p>
<p><a href="/magento-feature-list-chinese-1/">Magento 基本功能列表（翻译一）</a></p>
<p><a href="/magento-feature-list-chinese-2/">Magento 基本功能列表（翻译二）</a></p>
<p><a href="/magento-feature-list-chinese-3/">Magento 基本功能列表（翻译三）</a></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用教程</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>区域设置选项</title>
    <url>/locale-options/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/locale-options.html">原文地址</a></em></p>
<p>区域决定了您整个店铺中使用的语言，国家，税率以及其他设置。区域设置选项决定了每个店铺的时区、语言，确定每周的营业时间。</p>
<p><img src="/wp-content/uploads/2016/08/config-general-general-locale-options_thumb_0_0.png"></p>
<h2 id="设置区域选项"><a href="#设置区域选项" class="headerlink" title="设置区域选项"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%8C%BA%E5%9F%9F%E9%80%89%E9%A1%B9"></a>设置区域选项</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores)&gt; <strong>设置</strong>(Settings)&gt;<strong>配置</strong>(Configuration)</li>
<li>左侧面板，选择常规(General) &gt; 常规(General)</li>
<li>展开<strong>区域选项</strong>(Local Options)</li>
<li>从列表中选择<strong>时区</strong>(Timezone)，然后做以下操作<br>a. 设置<strong>地区</strong>(Local)他决定了店铺前台的语言<br>b. 设置<strong>重量单位</strong>，他是发货时用到的一般计量单位<br>c. 设置<strong>每周第一天</strong>(First Day of the Week)<br>d. 在休息日(Weekend Days)列表中进行选择（多选请使用Ctrl(PC)或者Command(Mac)）</li>
<li>完成后，点击保存设置</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>上传您的 Logo</title>
    <url>/logo-upload/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/logo-upload.html">原文地址</a></em></p>
<p>店铺头部的 logo 大小和位置是由店铺的主题(theme)决定的。您的 Logo 可以是GIF, PNG, JPG, 或 SVG 格式，从后台上传。Magento 样例的 Logo 是 SVG 格式的。它是一种可缩放的矢量图形格式。<br><img src="/wp-content/uploads/2016/08/storefront-header-logo_thumb_0_0.png"></p>
<p>Logo 图像在服务器的下列位置，这个位置的同名图像会作为主题的 Logo<br>实际的路径： app&#x2F;design&#x2F;frontend&#x2F;[vendor]&#x2F;[theme]&#x2F;web&#x2F;images&#x2F;logo.svg<br>相对路径： images&#x2F;logo.svg</p>
<p>如果您不知道 Logo 的大小，或者其他图像的大小，您可以在浏览器中右击图像，审查该元素。</p>
<p><em>除了店铺头部的 Logo ，Logo 还会出现在电子邮件模板和 PDF 形式发票中，还有其他销售文件中。电子邮件模板和 PDF 形式发票对 Logo 的大小要求不同，需要分别上传。了解更多，请查阅：Communications</em></p>
<h2 id="上传-Logo"><a href="#上传-Logo" class="headerlink" title="上传 Logo"></a><a href="#%E4%B8%8A%E4%BC%A0-logo"></a>上传 Logo</h2><ol>
<li><p>后台控制面板，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong>(Design) &gt; <strong>配置</strong>(Configuration)<br><img src="/wp-content/uploads/2016/08/design-configuration_thumb_0_0.png"></p>
</li>
<li><p>找到您要设置的视图，在 Action 列，点击<strong>编辑</strong>(Edit)</p>
</li>
<li><p>展开<strong>头部</strong>(Header)，做如下操作：  </p>
<p><img src="/wp-content/uploads/2016/08/design-configuration-header_thumb_0_0.png"></p>
<p>a. 上传新的Logo，点击<strong>上传</strong>(Upload)，然后从您的电脑商选文件<br>b. 输入 Logo 图像的宽度和高度<br>c. 给 Logo 图像的 Alt 字段，输入您希望鼠标悬停在图像上时出现的文本</p>
</li>
<li><p>完成后，点击保存配置(Save Configuration)</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>index</title>
    <url>/m2-index/</url>
    <content><![CDATA[<h2 id="Why-need-index"><a href="#Why-need-index" class="headerlink" title="Why need index"></a><a href="#why-need-index"></a>Why need index</h2><p>*Indexing is how Magento transforms data such as products and categories, to improve the performance of your storefront. For example, if you change the price of an item from $4.99 to $3.99. Magento must reindex the price change to display it on your storefront. Without indexing, Magento would have to calculate the price of every product on the fly, taking into account shopping cart price rules, bundle pricing, discounts, tier pricing, etc. Loading the price for a product would take a long time, possibly resulting in cart abandonment.*</p>
<h2 id="Add-a-custom-indexer"><a href="#Add-a-custom-indexer" class="headerlink" title="Add a custom indexer"></a><a href="#add-a-custom-indexer"></a>Add a custom indexer</h2><p>create a config file <code>app/code/VendorName/TestModule/etc/indexer.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Indexer/etc/indexer.xsd&quot;&gt;</span><br><span class="line">    &lt;indexer id=&quot;custom_index&quot; view_id=&quot;custom_index&quot; class=&quot;VendorName/TestModule\Model\Indexer\ExampleIndexer&quot; shared_index=&quot;custom_index&quot;&gt;</span><br><span class="line">        &lt;title translate=&quot;true&quot;&gt;Indexer Example&lt;/title&gt;</span><br><span class="line">        &lt;description translate=&quot;true&quot;&gt;Indexer Example&lt;/description&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">            &lt;indexer id=&quot;cataloginventory_stock&quot;/&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/indexer&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>The <strong>id</strong> attribute is used to identify this indexer. You can call it when you want to check the status, mode or reindex this indexer by the command line. The <strong>view_id</strong> is the id of view element, which will be defined in the mview configuration file. The <strong>class</strong> attribute is the name to the class, which processes the indexer method. The <strong>shared_index</strong> attribute is used for combining several indexers into groups. While reindexing one of the group indexers, the others will be labeled as valid. The <strong>dependencies</strong> element is used to mark the dependencies between various indexers. Create an <code>app/code/VendorName/TestModule/etc/mview.xml</code> config file, which will be responsible for the indexation by Cron.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Mview/etc/mview.xsd&quot;&gt;</span><br><span class="line">    &lt;view id=&quot;custom_index&quot; class=&quot;VendorName\TestModule\Model\Indexer\ExampleIndexer&quot; group=&quot;indexer&quot;&gt;</span><br><span class="line">        &lt;subscriptions&gt;</span><br><span class="line">            &lt;table name=&quot;catalog_product_entity&quot; entity_column=&quot;entity_id&quot;/&gt;</span><br><span class="line">        &lt;/subscriptions&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>The class should implement the interfaces: <code>\Magento\Framework\Indexer\ActionInterface</code>, <code>\Magento\Framework\Mview\ActionInterface</code>. Where the <code>\Magento\Framework\Indexer\ActionInterface</code> interface contains the main indexation methods, and the <code>\Magento\Framework\Mview\ActionInterface interface</code> contains the methods that are applied for the <strong>Update By Schedule mode</strong> of an indexation.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace VendorName\TestModule\Model\Indexer;</span><br><span class="line"></span><br><span class="line">class ExampleIndexer implements \Magento\Framework\Indexer\ActionInterface, \Magento\Framework\Mview\ActionInterface</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute full indexation</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function executeFull()</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement executeFull() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute partial indexation by ID list</span><br><span class="line">     *</span><br><span class="line">     * @param int[] $ids</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function executeList(array $ids)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement executeList() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute partial indexation by ID</span><br><span class="line">     *</span><br><span class="line">     * @param int $id</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function executeRow($id)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement executeRow() method.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute materialization on ids entities</span><br><span class="line">     *</span><br><span class="line">     * @param int[] $ids</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     * @api</span><br><span class="line">     */</span><br><span class="line">    public function execute($ids)</span><br><span class="line">    &#123;</span><br><span class="line">        // TODO: Implement execute() method.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2019/06/custom_indexer.png"> After we change our custom indexer to ‘update by schedule mode’, a mysql trigger will be created on table ‘catalog_product_entity’. When we change mode to ‘update on save’, the trigger will be deleted. <img src="/wp-content/uploads/2019/06/mysql_trigger.png"></p>
<h2 id="Practices-Tests"><a href="#Practices-Tests" class="headerlink" title="Practices Tests"></a><a href="#practices-tests"></a>Practices Tests</h2><p><img src="/wp-content/uploads/2019/06/index.png"></p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p>Highly Recomend: <a href="https://amasty.com/blog/comprehensive-guide-to-magento-2-indexing/">COMPREHENSIVE GUIDE TO MAGENTO 2 INDEXING</a> <a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/indexing.html">Dev docs - Indexing overview</a> <a href="https://magento.stackexchange.com/questions/117030/what-is-mview-in-magento2">what is mview in magento2?</a> <a href="https://maxchadwick.xyz/blog/digging-into-magento-2-partial-reindexing-implementation">Digging Into Magento 2’s Partial Reindexing Implementation</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>magento 1 fpc 动态内容</title>
    <url>/magento-1-fpc-%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<p>magento 1 企业版的一些页面使用了 fpc ，如果我们调用一个产生随机字符串的方法，那么在 fpc 开着的情况下，我们每次会得到相同的字符串，而不是随机的字符串。那么我们怎样才能每次都得到随机的字符串呢？ 我们以 Magento 1.14.1.0 为例，创建一个模块 VendorName_TestModule 做实验。 File: app\etc\modules\VendorName_TestModule.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;VendorName_TestModule&gt;</span><br><span class="line">            &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">            &lt;codePool&gt;local&lt;/codePool&gt;</span><br><span class="line">        &lt;/VendorName_TestModule&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>File: app\code\local\VendorName\TestModule\etc\config.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;VendorName_TestModule&gt;</span><br><span class="line">            &lt;version&gt;0.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/VendorName_TestModule&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">    &lt;global&gt;</span><br><span class="line">        &lt;blocks&gt;</span><br><span class="line">            &lt;testmodule&gt;</span><br><span class="line">                &lt;class&gt;VendorName_TestModule_Block&lt;/class&gt;</span><br><span class="line">            &lt;/testmodule&gt;</span><br><span class="line">        &lt;/blocks&gt;</span><br><span class="line">        &lt;helpers&gt;</span><br><span class="line">            &lt;testmodule&gt;</span><br><span class="line">                &lt;class&gt;VendorName_TestModule_Helper&lt;/class&gt;</span><br><span class="line">            &lt;/testmodule&gt;</span><br><span class="line">        &lt;/helpers&gt;</span><br><span class="line">    &lt;/global&gt;</span><br><span class="line">    &lt;frontend&gt;</span><br><span class="line">        &lt;layout&gt;</span><br><span class="line">            &lt;updates&gt;</span><br><span class="line">                &lt;testmodule&gt;</span><br><span class="line">                    &lt;file&gt;testmodule.xml&lt;/file&gt;</span><br><span class="line">                &lt;/testmodule&gt;</span><br><span class="line">            &lt;/updates&gt;</span><br><span class="line">        &lt;/layout&gt;</span><br><span class="line">    &lt;/frontend&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>File:app\design\frontend\rwd\default\layout\testmodule.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;layout version=&quot;0.1.0&quot;&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">        &lt;reference name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block type=&quot;testmodule/fpctest&quot; name=&quot;fpctest&quot; template=&quot;testmodule/fpctest.phtml&quot; after=&quot;-&quot;/&gt;</span><br><span class="line">        &lt;/reference&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>

<p>File: app\code\local\VendorName\TestModule\Block\Fpctest.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class VendorName_TestModule_Block_Fpctest extends Mage_Core_Block_Template</span><br><span class="line">&#123;</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setTemplate(&#x27;testmodule/fpctest.phtml&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRandString($length = 4)</span><br><span class="line">    &#123;</span><br><span class="line">        $chars = &#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;;</span><br><span class="line">        $str   = &#x27;&#x27;;</span><br><span class="line">        for ($i = 0; $i &lt; $length; ++$i) &#123;</span><br><span class="line">            $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return $str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\design\frontend\rwd\default\template\testmodule\fpctest.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is from block</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;?php echo $this-&gt;getRandString() ?&gt;</span><br><span class="line">&lt;br/&gt;</span><br></pre></td></tr></table></figure>

<p>缓存原因，每次刷新页面得到的都是相同字符串。 <img src="/wp-content/uploads/2018/12/fpc-work.gif"></p>
<h2 id="每次刷新获得随机字符串"><a href="#每次刷新获得随机字符串" class="headerlink" title="每次刷新获得随机字符串"></a><a href="#%E6%AF%8F%E6%AC%A1%E5%88%B7%E6%96%B0%E8%8E%B7%E5%BE%97%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2"></a>每次刷新获得随机字符串</h2><p>File: app\code\local\VendorName\TestModule\etc\cache.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;placeholders&gt;</span><br><span class="line">        &lt;testmodule&gt;</span><br><span class="line">            &lt;block&gt;testmodule/fpctest&lt;/block&gt;</span><br><span class="line">            &lt;placeholder&gt;TESTMODULE_CACHE&lt;/placeholder&gt;</span><br><span class="line">            &lt;container&gt;VendorName_TestModule_Model_Container_Fpctest&lt;/container&gt;</span><br><span class="line">            &lt;cache_life&gt;5&lt;/cache_life&gt;</span><br><span class="line">        &lt;/testmodule&gt;</span><br><span class="line">    &lt;/placeholders&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>File: app\code\local\VendorName\TestModule\Model\Container\Fpctest.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class VendorName_TestModule_Model_Container_Fpctest extends Enterprise_PageCache_Model_Container_Abstract&#123;</span><br><span class="line"></span><br><span class="line">    protected function _renderBlock()</span><br><span class="line">    &#123;</span><br><span class="line">        $block = $this-&gt;_getPlaceHolderBlock();</span><br><span class="line">        return $block-&gt;toHtml();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getCacheId()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;TESTMODULE_CACHE&#x27; . md5($this-&gt;_placeholder-&gt;getAttribute(&#x27;cache_id&#x27;)).&#x27;_&#x27;.$this-&gt;_getIdentifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getIdentifier()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_getCookieValue(Enterprise_PageCache_Model_Cookie::COOKIE_CUSTOMER, &#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function applyWithoutApp(&amp;$content)</span><br><span class="line">    &#123;</span><br><span class="line">        // by default will attempt to load block from cache.</span><br><span class="line">        return false; // always dynamic</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>记得刷新缓存 <img src="/wp-content/uploads/2018/12/fpc-applyWithoutApp.gif"> fpc 页面有 4 种状态</p>
<ol>
<li>Page in cache, no dynamic blocks</li>
<li>Page in cache, dynamic blocks cached</li>
<li>Page in cache, dynamic blocks not cached</li>
<li>Page not in cache</li>
</ol>
<p>当我们刷新缓存后，再请求页面，我们的页面处于状态 4 ，执行过程就是正常的过程。但是 magento 会根据 cache.xml ，用 <code>&lt;!--&#123;MY_PLACEHOLDER_NAME_hash&#125;--&gt;rendered block content&lt;!--/&#123;MY_PLACEHOLDER_NAME_hash&#125;--&gt;</code> 替代 block 的内容缓存起来， block 也被缓存起来。在最终页面发送之前，再把上面的 placeholder 替换成缓存的 block 内容。缓存的 block 内容会有过期时间。 所以我们第二次刷新的时候，页面处于状态 2 ，那么这个时候会请求 container 的 applyWithoutApp($content)。按照道理应该返回 block 的内容（如果 block 没有过期的话）。但是我们返回的是 false ，这时候就是状态 3 了，请求转向 <code>pagecache/request/process</code> 最后来到了 container 的 applyWithApp() ，而 applyWithApp() 则会调用 $this-&gt;_renderBlock()。所以我们得到了随机的字符串。 下面讨论下过期时间 File: app\code\local\VendorName\TestModule\Model\Container\Fpctest.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class VendorName_TestModule_Model_Container_Fpctest extends Enterprise_PageCache_Model_Container_Abstract&#123;</span><br><span class="line"></span><br><span class="line">    protected function _renderBlock()</span><br><span class="line">    &#123;</span><br><span class="line">        $block = $this-&gt;_getPlaceHolderBlock();</span><br><span class="line">        return $block-&gt;toHtml();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getCacheId()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;TESTMODULE_CACHE&#x27; . md5($this-&gt;_placeholder-&gt;getAttribute(&#x27;cache_id&#x27;)).&#x27;_&#x27;.$this-&gt;_getIdentifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getIdentifier()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_getCookieValue(Enterprise_PageCache_Model_Cookie::COOKIE_CUSTOMER, &#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _saveCache($data, $id, $tags = array(), $lifetime = 5)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::_saveCache($data, $id, $tags, $lifetime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刷新缓存，我们会发现随机字符串在 5 s 内保持一样，5 s 后由于缓存过期，拿到新的值。如果 $lifetime &#x3D; 0 那么就会一直过期。 <img src="/wp-content/uploads/2018/12/fpc-cachelife.gif"></p>
<h2 id="充分利用缓存，-placeholder-带参"><a href="#充分利用缓存，-placeholder-带参" class="headerlink" title="充分利用缓存， placeholder 带参"></a><a href="#%E5%85%85%E5%88%86%E5%88%A9%E7%94%A8%E7%BC%93%E5%AD%98%EF%BC%8C-placeholder-%E5%B8%A6%E5%8F%82"></a>充分利用缓存， placeholder 带参</h2><p>在 fpc 上打孔，不能直接使用 Mage::registry() 和 Mage::app()-&gt;getFrontController()-&gt;getAction()-&gt;getFullActionName() 这种，因为在状态 3 的时候，页面是转向 <code>pagecache/request/process</code> ，它并不是一个通常的请求。如果你这么用了，那么就会发现，结果很怪异，访问 A 页面正常，访问下 B 页面也正常，再回到 A 页面，哎~ ，怎么把 B 的结果带过来了。。 下面我们让 block 缓存起来，通过 placeholder 带参来解决上面提到的问题。 File: app\code\local\VendorName\TestModule\Block\Fpctest.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class VendorName_TestModule_Block_Fpctest extends Mage_Core_Block_Template</span><br><span class="line">&#123;</span><br><span class="line">    // !important</span><br><span class="line">    public function getCacheKeyInfo() &#123;</span><br><span class="line">        $info = parent::getCacheKeyInfo();</span><br><span class="line">        $info[&#x27;page_type&#x27;] = $this-&gt;getPagetype();</span><br><span class="line">        return $info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;setTemplate(&#x27;testmodule/fpctest.phtml&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getRandString($length = 4)</span><br><span class="line">    &#123;</span><br><span class="line">        $chars = &#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;;</span><br><span class="line">        $str   = &#x27;&#x27;;</span><br><span class="line">        for ($i = 0; $i &lt; $length; ++$i) &#123;</span><br><span class="line">            $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return $str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getPagetype()</span><br><span class="line">    &#123;</span><br><span class="line">        if ($this-&gt;hasData(&#x27;page_type&#x27;)) &#123;</span><br><span class="line">            return $this-&gt;getData(&#x27;page_type&#x27;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return Mage::app()-&gt;getFrontController()-&gt;getAction()-&gt;getFullActionName();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\code\local\VendorName\TestModule\Model\Container\Fpctest.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class VendorName_TestModule_Model_Container_Fpctest extends Enterprise_PageCache_Model_Container_Abstract&#123;</span><br><span class="line"></span><br><span class="line">    protected function _renderBlock()</span><br><span class="line">    &#123;</span><br><span class="line">        $block = $this-&gt;_getPlaceHolderBlock();</span><br><span class="line">        $pageType = $this-&gt;_placeholder-&gt;getAttribute(&#x27;page_type&#x27;);</span><br><span class="line">        $block-&gt;setPageType($pageType);</span><br><span class="line">        return $block-&gt;toHtml();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getCacheId()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;TESTMODULE_CACHE&#x27; . md5($this-&gt;_placeholder-&gt;getAttribute(&#x27;cache_id&#x27;)).&#x27;_&#x27;.$this-&gt;_getIdentifier();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _getIdentifier()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_getCookieValue(Enterprise_PageCache_Model_Cookie::COOKIE_CUSTOMER, &#x27;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _saveCache($data, $id, $tags = array(), $lifetime = 5)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::_saveCache($data, $id, $tags, $lifetime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\design\frontend\rwd\default\template\testmodule\fpctest.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">This is from block</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;?php echo $this-&gt;getRandString() ?&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;?php echo $this-&gt;getPagetype();?&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="https://stackoverflow.com/questions/9120413/how-do-i-include-a-dynamic-block-in-the-product-page-with-full-page-caching-turn/9125519#9125519">How do I include a dynamic block in the product page with full page caching turned on?</a> <a href="https://www.pixafy.com/blog/2013/03/overcoming-magentos-full-page-cache-through-hole-punching/">Overcoming Magento’s full-page cache through hole punching</a> <a href="https://magento.stackexchange.com/questions/133412/what-do-cache-xml-in-etc-folder-of-any-module">what do cache.xml in etc folder of any module?</a></p>
]]></content>
      <categories>
        <category>Magento 1</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>fpc</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 1 数据迁移到 Magento 2 实践总结（原创）</title>
    <url>/magento-1-migrate-to-magento-2-conclusion/</url>
    <content><![CDATA[<p>上周 ThankIT 帮一位朋友完成了 MCE 1.9.2.4 到 MCE 2.1.7 升级，此处做一次总结。 总的来说，M1 升级到 2 的时机已经成熟。Magento 官方推出了数据迁移工具和代码迁移工具，文档也比较完整了。社区开发的迁移工具也迭代得差不多了。 了解 Magento 官方数据迁移工具的安装，请戳这里 <a href="http://devdocs.magento.com/guides/v2.0/migration/migration-tool-install.html">Install Data Migration Tool</a> 这个安装工具必须使用 composer 的方式安装，如果以插件的方式安装，命令 migrate 会找不到。配置起来有点复杂。 ThankIT 使用的是 Ubertheme 的 UB Data 工具，以插件形式安装就行，可视化的操作，比较方便。但也不是下一步下一步就行。 数据写入到库后，还是会有问题的，比如 customer 明明已经在数据库中，后台却没有记录。这是 customer 的表迁移后缺少了部分字段。 还有可能会遇到系统 Bug 导致的错误。 再比如这个 <code>Magento\Catalog\Model\Product\Attribute\Backend\Media does not exist</code> 错误是 <code>eav_attribute</code> 表的 <code>media_gallery</code> 的 <code>backend_model</code> 字段不对，应该为 null 导致的。（可能受版本影响，工具还来不及面面俱到） 还有如果原来的 M1 站点有图片 404 ，迁移后可能导致错误等。 总体上来说，迁移需要有分析问题解决问题的能力。^^</p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>推荐</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 1 region, region name 和 locale</title>
    <url>/magento-1-region-region-name-%E5%92%8C-locale/</url>
    <content><![CDATA[<p>表 <code>directory_country_region</code></p>
<p>region_id</p>
<p>country_id</p>
<p>code</p>
<p>default_name</p>
<p>485</p>
<p>CN</p>
<p>110000</p>
<p>北京1</p>
<p>表 <code>directory_country_region_name</code></p>
<p>local</p>
<p>region_id</p>
<p>name</p>
<p>en_US</p>
<p>485</p>
<p>北京2</p>
<p>zh_CN</p>
<p>485</p>
<p>北京3</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo Mage::app()-&gt;getLocale()-&gt;getLocaleCode();</span><br><span class="line">echo &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">$regionModel = Mage::getModel(&#x27;directory/region&#x27;)-&gt;load(&#x27;485&#x27;);</span><br><span class="line">echo $region = $regionModel-&gt;getName();</span><br></pre></td></tr></table></figure>

<p>不同 locale 值的输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">en_US</span><br><span class="line">北京2</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zh_CN</span><br><span class="line">北京3</span><br></pre></td></tr></table></figure>

<p>那么按照这样的逻辑，如果我们按照 region name 来取 region id 的话会怎样呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$regionModel = Mage::getModel(&#x27;directory/region&#x27;)-&gt;loadByName(&#x27;北京3&#x27;, &#x27;CN&#x27;);</span><br><span class="line">echo &#x27;&lt;br&gt;----&#x27;;</span><br><span class="line">echo $regionModel-&gt;getName();</span><br><span class="line">echo &#x27;&lt;br&gt;----&#x27;;</span><br><span class="line">echo $regionModel-&gt;getId();</span><br></pre></td></tr></table></figure>

<p>结果是没有输出，如果是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----北京3</span><br><span class="line">----485</span><br></pre></td></tr></table></figure>

<p>所以取 region name 是自动根据时区来输出的。但根据名称取 region ，region name 是根据 <code>directory_country_region</code> 的 <code>default_name</code> 来看下这部分实现的源代码： Mage_Directory_Model_Resource_Region 类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function loadByName(Mage_Directory_Model_Region $region, $regionName, $countryId)</span><br><span class="line">&#123;</span><br><span class="line">    return $this-&gt;_loadByCountry($region, $countryId, (string)$regionName, &#x27;default_name&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protected function _loadByCountry($object, $countryId, $value, $field)</span><br><span class="line">&#123;</span><br><span class="line">    $adapter        = $this-&gt;_getReadAdapter();</span><br><span class="line">    $locale         = Mage::app()-&gt;getLocale()-&gt;getLocaleCode();</span><br><span class="line">    $joinCondition  = $adapter-&gt;quoteInto(&#x27;rname.region_id = region.region_id AND rname.locale = ?&#x27;, $locale);</span><br><span class="line">    $select         = $adapter-&gt;select()</span><br><span class="line">        -&gt;from(array(&#x27;region&#x27; =&gt; $this-&gt;getMainTable()))</span><br><span class="line">        -&gt;joinLeft(</span><br><span class="line">            array(&#x27;rname&#x27; =&gt; $this-&gt;_regionNameTable),</span><br><span class="line">            $joinCondition,</span><br><span class="line">            array(&#x27;name&#x27;))</span><br><span class="line">        -&gt;where(&#x27;region.country_id = ?&#x27;, $countryId)</span><br><span class="line">        -&gt;where(&quot;region.&#123;$field&#125; = ?&quot;, $value);</span><br><span class="line"></span><br><span class="line">    $data = $adapter-&gt;fetchRow($select);</span><br><span class="line">    if ($data) &#123;</span><br><span class="line">        $object-&gt;setData($data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $this-&gt;_afterLoad($object);</span><br><span class="line"></span><br><span class="line">    return $this;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 1</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 1 创建简单模块</title>
    <url>/magento-1-%E5%88%9B%E5%BB%BA%E7%AE%80%E5%8D%95%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p>直接上代码吧。 必不可少的是 <code>app/etc/modules/MyCompany_MyModule.xml</code> 和 <code>app/code/local/MyCompany/MyModule/etc/config.xml</code> File: app&#x2F;etc&#x2F;modules&#x2F;ThankIT_Devtool.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;ThankIT_Devtool&gt;</span><br><span class="line">            &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">            &lt;codePool&gt;local&lt;/codePool&gt;</span><br><span class="line">        &lt;/ThankIT_Devtool&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>File:app&#x2F;code&#x2F;local&#x2F;ThankIT&#x2F;Devtool&#x2F;etc&#x2F;config.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;modules&gt;</span><br><span class="line">        &lt;ThankIT_Devtool&gt;</span><br><span class="line">            &lt;version&gt;0.1.0&lt;/version&gt;</span><br><span class="line">        &lt;/ThankIT_Devtool&gt;</span><br><span class="line">    &lt;/modules&gt;</span><br><span class="line">     &lt;frontend&gt;</span><br><span class="line">        &lt;routers&gt;</span><br><span class="line">            &lt;thankit_SomeFreeRouterName1&gt;</span><br><span class="line">                &lt;use&gt;standard&lt;/use&gt;</span><br><span class="line">                &lt;args&gt;</span><br><span class="line">                    &lt;module&gt;ThankIT_Devtool&lt;/module&gt;</span><br><span class="line">                    &lt;frontName&gt;dev&lt;/frontName&gt;</span><br><span class="line">                &lt;/args&gt;</span><br><span class="line">            &lt;/thankit_SomeFreeRouterName1&gt;</span><br><span class="line">        &lt;/routers&gt;</span><br><span class="line">    &lt;/frontend&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>File: app&#x2F;code&#x2F;local&#x2F;ThankIT&#x2F;Devtool&#x2F;controllers&#x2F;IndexController.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">class ThankIT_Devtool_IndexController extends Mage_Core_Controller_Front_Action</span><br><span class="line">&#123;</span><br><span class="line">    public function indexAction()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Hello developer...&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    public function sayHelloAction()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Hello one more time...&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面访问 <code>http://yoursite.com/dev/index/sayhello</code> 就会出现 <code>Hello one more time...</code> 了。</p>
]]></content>
      <categories>
        <category>Magento 1</category>
      </categories>
      <tags>
        <tag>Magento 1</tag>
        <tag>创建模块</tag>
      </tags>
  </entry>
  <entry>
    <title>magento 2.3 CsrfAwareActionInterface</title>
    <url>/magento-2-3-csrfawareactioninterface/</url>
    <content><![CDATA[<p>Magento has a form key validation in place for all POST non-AJAX requests - if your Action doesn’t need that validation or you want to modify it you can implement CsrfAwareActionInterface. For example</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace  VendorName\TestModule\Controller\Index;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\App\CsrfAwareActionInterface;</span><br><span class="line">use Magento\Framework\App\RequestInterface;</span><br><span class="line">use Magento\Framework\App\Request\InvalidRequestException;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Framework\App\Action\Action implements CsrfAwareActionInterface</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    public function createCsrfValidationException(RequestInterface $request): ?InvalidRequestException</span><br><span class="line">    &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function validateForCsrf(RequestInterface $request): ?bool</span><br><span class="line">    &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $fname = $this-&gt;_request-&gt;getParam(&#x27;fname&#x27;, &#x27;help&#x27;);</span><br><span class="line">        if (method_exists($this, $fname)) &#123;</span><br><span class="line">            if ($this-&gt;checkENv()) &#123;</span><br><span class="line">                return $this-&gt;$fname();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#Reference"></a>Reference</h2><p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/routing.html#action-class">Routing - Action class</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2.3 MSI defect</title>
    <url>/magento-2-3-msi-defect/</url>
    <content><![CDATA[<p><a href="https://docs.magento.com/m2/ce/user_guide/catalog/inventory-sources.html">Bundle products currently do not support multi-sourcing and must be assigned to Default Source and Default Stock.</a> 如果有 bundle 产品，那么 MSI 就不能用了。这个很坑爹啊。 我们需要使用自己创建的 stock。最终，我们创建了一个 workaround extension 绕过了这个限制，改动不是很多，还是比较幸运的。 主要的矛盾在 <code>vendor\magento\module-bundle\Model\Product\Type.php#isSalable</code> 中。它查询的是 <code>cataloginventory_stock_item</code> 表，如果使用的不是 default stock ，那么 <code>cataloginventory_stock_item</code> 中的库存信息是不对的，这时候要去 <code>inventory_stock_&#123;stockId&#125;</code> 表找库存信息。 我们的解决方案是：如果产品在其他库，那么就使用 <code>inventory_stock_&#123;stockId&#125;</code> 表中 quantity 和 is_salable 来代替 <code>cataloginventory_stock_item</code> 表上对应的字段。</p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 add custom validation</title>
    <url>/magento-2-add-custom-validation/</url>
    <content><![CDATA[<p>magento 2 的 validation 是基于<a href="https://jqueryvalidation.org/">jquery validate 插件</a>的。</p>
<h2 id="一般页面的-validation-使用方式"><a href="#一般页面的-validation-使用方式" class="headerlink" title="一般页面的 validation 使用方式"></a><a href="#%E4%B8%80%E8%88%AC%E9%A1%B5%E9%9D%A2%E7%9A%84-validation-%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F"></a>一般页面的 validation 使用方式</h2><p>对于一般的 <code>phtml</code> 页面来说，我们可以通过如下方法进行验证：</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80"></a>方法一</h3><p>通过 <code>data-validate</code> 属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input data-validate=&#x27;&#123;&quot;required&quot;:true&#125;&#x27;name=&quot;field1&quot; id=&quot;field1&quot; ... /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C"></a>方法二</h3><p>把规则名称放到 class 中去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input class=&quot;input-text required&quot; name=&quot;field3&quot; id=&quot;field3&quot; ... /&gt;</span><br><span class="line">&lt;input class=&quot;input-text required-entry&quot; name=&quot;field3&quot; id=&quot;field3&quot; ... /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%89"></a>方法三</h3><p>使用规则名作为元素属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input required=&quot;true&quot; name=&quot;field2&quot; id=&quot;field2&quot; ... /&gt;</span><br></pre></td></tr></table></figure>

<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a><a href="#%E6%96%B9%E6%B3%95%E5%9B%9B"></a>方法四</h3><p>通过在 <code>data-mage-init</code> 中设置规则</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;form ... data-mage-init=&#x27;&#123;</span><br><span class="line">    &quot;validation&quot;:&#123;</span><br><span class="line">        &quot;rules&quot;: &#123;</span><br><span class="line">            &quot;field4&quot;: &#123;</span><br><span class="line">                &quot;required&quot;:true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>方法一和方法二很常见。 参考文档 <a href="http://inchoo.net/magento-2/validate-custom-form-in-magento-2/">Validate a custom form in Magento 2</a> 既然是基于 jquery validate plugin 的，那么他的一些方法还是管用的，比如我想自定义错误信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input data-validate=&#x27;&#123;&quot;required&quot;:true&#125;&#x27;name=&quot;field1&quot; id=&quot;field1&quot; data-msg-required=&quot;我是自定义的错误信息&quot;... /&gt;</span><br></pre></td></tr></table></figure>

<h2 id="增加自定义的-validation"><a href="#增加自定义的-validation" class="headerlink" title="增加自定义的 validation"></a><a href="#%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-validation"></a>增加自定义的 validation</h2><p>假设我想给 telephone 字段增加一个自定义的规则，那么对于这个页面，我可以这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;jquery&#x27;], function ($) &#123;</span><br><span class="line">    $.validator.addMethod(</span><br><span class="line">        &#x27;phoneCN&#x27;, function (value) &#123;</span><br><span class="line">            if(value.match(/^1\d&#123;10&#125;$/))&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#x27;请输入正确的手机号&#x27;);</span><br><span class="line"></span><br><span class="line">    $(&#x27;#telephone&#x27;).attr(&#x27;data-validate&#x27;, &quot;&#123;required:true, &#x27;phoneCN&#x27;:true&#125;&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个页面上，我们增加一个新的规则 <code>phoneCN</code> 并且把这个规则加到元素的 <code>data-validate</code> 中去。 但是如果我希望把这个规则合并到全局中去，就像 <code>required</code> 规则一样，该怎么做呢？</p>
<h2 id="增加全局的-validation"><a href="#增加全局的-validation" class="headerlink" title="增加全局的 validation"></a><a href="#%E5%A2%9E%E5%8A%A0%E5%85%A8%E5%B1%80%E7%9A%84-validation"></a>增加全局的 validation</h2><p>上面提到普通页面的用法，那么肯定是有不普通的页面了。是的，不普通的页面包括 checkout 页面和 Admin 后台。他们都是通过 Magento_Ui 这个模块来 render 这些组件的。 普通页面用到的 validation 主要是 <code>mage/validation</code> 即 <code>lib\web\mage\validation.js</code> 其他页面用到的是 <code>Magento_Ui/js/lib/validation/validator</code> 下面我们就通过 mixins 将 <code>phoneCN</code> 规则加进去。 关于 Mixin ，参考这里 <a href="https://alanstorm.com/the-curious-case-of-magento-2-mixins/">The Curious Case of Magento 2 Mixins</a> File: app\code\Vendor\PhoneCNValidate\view\base\requirejs-config.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    config: &#123;</span><br><span class="line">        mixins: &#123;</span><br><span class="line">            &#x27;mage/validation&#x27;: &#123;</span><br><span class="line">                &#x27;Vendor_PhoneCNValidate/js/lib/mage/validation-mixin&#x27;: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x27;Magento_Ui/js/lib/validation/validator&#x27;: &#123;</span><br><span class="line">                &#x27;Vendor_PhoneCNValidate/js/lib/mage/validator-mixin&#x27;: true</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\code\Vendor\PhoneCNValidate\view\base\web\js\lib\mage\validation-mixin.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([</span><br><span class="line">    &#x27;jquery&#x27;</span><br><span class="line">], function ($) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">    return function () &#123;</span><br><span class="line">        $.validator.addMethod(</span><br><span class="line">            &#x27;phoneCN&#x27;,</span><br><span class="line">            function (phoneNumber, element) &#123;</span><br><span class="line">                return this.optional(element)  phoneNumber.match(/^1\d&#123;10&#125;$/);</span><br><span class="line">            &#125;,</span><br><span class="line">            $.mage.__(&#x27;Please specify a valid phone number&#x27;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>File: app\code\Vendor\PhoneCNValidate\view\base\web\js\lib\mage\validator-mixin.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([</span><br><span class="line">    &#x27;jquery&#x27;</span><br><span class="line">], function ($) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return function (validator) &#123;</span><br><span class="line">        validator.addRule(</span><br><span class="line">            &#x27;phoneCN&#x27;,</span><br><span class="line">            function (value) &#123;</span><br><span class="line">                return value.match(/^1\d&#123;10&#125;$/);</span><br><span class="line">            &#125;,</span><br><span class="line">            $.mage.__(&#x27;Please specify a valid phone number&#x27;)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return validator;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样普通页面，通过上面的四种方法，就可以调用自定义的验证。 核心代码中并没有把 <code>validate_rules</code> （本文最后一部分会提到）中的值转化成表单控件的 class 名，参看<code>vendor\magento\module-custom-attribute-management\Block\Form\Renderer\AbstractRenderer.php #135</code>，所以我们需要自己修。 下面我们要说不普通的页面了。</p>
<h2 id="checkout-页中加入自定义验证"><a href="#checkout-页中加入自定义验证" class="headerlink" title="checkout 页中加入自定义验证"></a><a href="#checkout-%E9%A1%B5%E4%B8%AD%E5%8A%A0%E5%85%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E9%AA%8C%E8%AF%81"></a>checkout 页中加入自定义验证</h2><p>比如给 checkout 的 address 的 telephone 加 <code>phoneCN</code> 验证 File: app\code\Vendor\PhoneCNValidate\view\frontend\layout\checkout_index_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; layout=&quot;checkout&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceBlock name=&quot;checkout.root&quot;&gt;</span><br><span class="line">            &lt;arguments&gt;</span><br><span class="line">                &lt;argument name=&quot;jsLayout&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;components&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;checkout&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;children&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                &lt;item name=&quot;steps&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                    &lt;item name=&quot;children&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                        &lt;item name=&quot;shipping-step&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                            &lt;item name=&quot;children&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                &lt;item name=&quot;shippingAddress&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                    &lt;item name=&quot;children&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                        &lt;item name=&quot;shipping-address-fieldset&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                            &lt;item name=&quot;children&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                                &lt;item name=&quot;telephone&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                                    &lt;item name=&quot;validation&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                                                        &lt;item name=&quot;phoneCN&quot; xsi:type=&quot;number&quot;&gt;1&lt;/item&gt;</span><br><span class="line">                                                                    &lt;/item&gt;</span><br><span class="line">                                                                &lt;/item&gt;</span><br><span class="line">                                                            &lt;/item&gt;</span><br><span class="line">                                                        &lt;/item&gt;</span><br><span class="line">                                                    &lt;/item&gt;</span><br><span class="line">                                                &lt;/item&gt;</span><br><span class="line">                                            &lt;/item&gt;</span><br><span class="line">                                        &lt;/item&gt;</span><br><span class="line">                                    &lt;/item&gt;</span><br><span class="line">                                &lt;/item&gt;</span><br><span class="line">                            &lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/arguments&gt;</span><br><span class="line">        &lt;/referenceBlock&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Admin-后台-Customer-Address"><a href="#Admin-后台-Customer-Address" class="headerlink" title="Admin 后台 Customer Address"></a><a href="#admin-%E5%90%8E%E5%8F%B0-customer-address"></a>Admin 后台 Customer Address</h2><p>File: app\code\Vendor\PhoneCNValidate\Setup\InstallData.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * Copyright © Isobar Commerce, Inc. All rights reserved.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">namespace Vendor\PhoneCNValidate\Setup;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Setup\InstallDataInterface;</span><br><span class="line">use Magento\Framework\Setup\ModuleContextInterface;</span><br><span class="line">use Magento\Framework\Setup\ModuleDataSetupInterface;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class InstallData implements InstallDataInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $eavSetupFactory;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Eav\Setup\EavSetupFactory $eavSetupFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;eavSetupFactory = $eavSetupFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function install(</span><br><span class="line">        ModuleDataSetupInterface $setup,</span><br><span class="line">        ModuleContextInterface $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $eavSetup = $this-&gt;eavSetupFactory-&gt;create([&#x27;setup&#x27; =&gt; $setup]);</span><br><span class="line">        // work in admin backend</span><br><span class="line">        // $eavSetup-&gt;updateAttribute(&#x27;customer&#x27;, &#x27;telephone&#x27;, &#x27;validate_rules&#x27;, &#x27;&#123;&quot;phoneCN&quot;:true&#125;&#x27;);</span><br><span class="line">        $eavSetup-&gt;updateAttribute(&#x27;customer_address&#x27;, &#x27;telephone&#x27;, &#x27;validate_rules&#x27;, &#x27;&#123;&quot;phoneCN&quot;:true&#125;&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是说后台的验证规则是和数据库中的记录相关的。 表 <code>eav_attribute</code> 和 <code>customer_eav_attribute</code></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>magento2 add custom validation</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 Admin ACL Access Control Lists</title>
    <url>/magento-2-admin-acl-access-control-lists/</url>
    <content><![CDATA[<p>Magento 2 Admin ACL 用来创建访问权限列表（Access Controller List Rules）。管理员可以创建不同的角色，给角色分配权限，给后台用户赋予角色，从而控制后台用户的访问权限。本文将介绍 ACL 是如何工作的以及如何给自己的模块添加 ACL。 acl.xml is used for backend actions protection and web Api. 后台访问 <code>System &gt; Permissions &gt; User Roles</code> 我们点击 <strong>Add New Role</strong> 或者点击某个角色，就会看到类似下图的界面： <img src="/wp-content/uploads/2017/09/role-resources.png" alt="Role Resources"> 对于某个后台用户来讲，他只能访问他的角色所拥有的 resources ，没有的看都看不到。</p>
<h2 id="创建-ACL-rule"><a href="#创建-ACL-rule" class="headerlink" title="创建 ACL rule"></a><a href="#%E5%88%9B%E5%BB%BA-acl-rule"></a>创建 ACL rule</h2><p>以之前的 <code>ThankIT_HelloWorld</code> 模块为基础。 File:app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;etc&#x2F;acl.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Acl/etc/acl.xsd&quot;&gt;</span><br><span class="line">     &lt;acl&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource id=&quot;Magento_Backend::admin&quot;&gt;</span><br><span class="line">                &lt;resource id=&quot;ThankIT_HelloWorld::helloworld&quot; title=&quot;Hello World&quot; sortOrder=&quot;51&quot;&gt;</span><br><span class="line">                    &lt;resource id=&quot;ThankIT_HelloWorld::post&quot; title=&quot;Posts&quot; sortOrder=&quot;10&quot;/&gt;</span><br><span class="line">                    &lt;resource id=&quot;ThankIT_HelloWorld::helloworld_configuration&quot; title=&quot;Configuration&quot; sortOrder=&quot;99&quot; /&gt;</span><br><span class="line">                &lt;/resource&gt;</span><br><span class="line">                &lt;resource id=&quot;Magento_Backend::stores&quot;&gt;</span><br><span class="line">                    &lt;resource id=&quot;Magento_Backend::stores_settings&quot;&gt;</span><br><span class="line">                        &lt;resource id=&quot;Magento_Config::config&quot;&gt;</span><br><span class="line">                            &lt;resource id=&quot;ThankIT_HelloWorld::hello_configuration&quot; title=&quot;Hello World&quot;/&gt;</span><br><span class="line">                        &lt;/resource&gt;</span><br><span class="line">                    &lt;/resource&gt;</span><br><span class="line">                &lt;/resource&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/acl&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>Our resource will be placed as child of Magento_Backend::admin. Each resource will have an Id, title and sortOrder attribute:</p>
<ul>
<li>Id attribute is the identify of this resource. You can use this when define resource in Admin menu, configuration and limit access to your module controller. This is a unique string and should be in this format: Vendor_ModuleName::resource_name.</li>
<li>Title attribute is the label of this resource when showing in resource tree.</li>
<li>sortOrder attribute define the position of this resource in tree.</li>
</ul>
<p>刷新缓存，我们可以看到原来的 ACL 添加了一些东西： <img src="/wp-content/uploads/2017/09/acl-helloworld.png" alt="acl"></p>
<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a><a href="#%E9%AA%8C%E8%AF%81"></a>验证</h2><p>之前文章中我们的 <code>system.xml</code> 中有相关的 resource 引用： File：app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;etc&#x2F;adminhtml&#x2F;system.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;section id=&quot;helloworld&quot; translate=&quot;label&quot; sortOrder=&quot;130&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;1&quot; showInStore=&quot;1&quot;&gt;</span><br><span class="line">        ….</span><br><span class="line">            &lt;resource&gt;ThankIT_HelloWorld::hello_configuration&lt;/resource&gt;</span><br><span class="line">        ….</span><br><span class="line">&lt;/section&gt;</span><br></pre></td></tr></table></figure>

<p>我们新建一个 test 后台用户，一个 test 角色，角色权限仅勾选上图中的 stores 下的 Hello Wolrd （第二个，不是第一个）。然后我们以 test 用户登录，发现我们可以访问 configuration 中 Hello World Section ，如果不够选的话，看也看不到。</p>
<h3 id="Admin-Controller-中检查权限"><a href="#Admin-Controller-中检查权限" class="headerlink" title="Admin Controller 中检查权限"></a><a href="#admin-controller-%E4%B8%AD%E6%A3%80%E6%9F%A5%E6%9D%83%E9%99%90"></a>Admin Controller 中检查权限</h3><p>Admin Controller 中通过覆写 <code>_isAllowed()</code> 来检查权限。 比如 File: vendor&#x2F;magento&#x2F;module-customer&#x2F;Controller&#x2F;Adminhtml&#x2F;Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected function _isAllowed()</span><br><span class="line">&#123;</span><br><span class="line"> return $this-&gt;_authorization-&gt;isAllowed(&#x27;Magento_Customer::manage&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 Admin Controller 继承自 <code>\Magento\Backend\App\Action</code> 它又继承自 <code>\Magento\Backend\App\AbstractAction</code> 这样可以追查到 <code>$this-&gt;_authorization</code> 是 <code>Magento\Framework\AuthorizationInterface</code> File:Magento\Backend\App\AbstractAction.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const ADMIN_RESOURCE = &#x27;Magento_Backend::admin&#x27;;</span><br><span class="line">    /**</span><br><span class="line">     * @return bool</span><br><span class="line">     */</span><br><span class="line">    protected function _isAllowed()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_authorization-&gt;isAllowed(static::ADMIN_RESOURCE);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="static"><a href="#static" class="headerlink" title="static"></a><a href="#static"></a>static</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class A</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;Magento_Backend::admin&#x27;;</span><br><span class="line">    public function getResource()</span><br><span class="line">    &#123;</span><br><span class="line">        echo static::ADMIN_RESOURCE;</span><br><span class="line">        echo self::ADMIN_RESOURCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B extends A</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;B&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b = new B();</span><br><span class="line">$b-&gt;getResource();</span><br><span class="line"></span><br><span class="line">// 输出 B</span><br><span class="line">// 输出 Magento_Backend::admin</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/magento-2-acl-access-control-lists.html">Magento 2 Admin ACL Access Control Lists</a> <a href="https://magento.stackexchange.com/questions/93840/how-does-magento2-access-control-list-work">How does Magento2 Access Control List work?</a> <a href="http://alanstorm.com/magento_2_understanding_access_control_list_rules/">Magento 2: Understanding Access Control List Rules</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>acl.xml</tag>
        <tag>Magento 2 ACL，Access Controller List Rules</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 and konockoutjs</title>
    <url>/magento-2-and-konockoutjs/</url>
    <content><![CDATA[<p>本篇将通过实验来介绍 ko 的模版绑定、自定义绑定和组件绑定，然后在此基础上介绍 magento 2 对 ko 的扩展。最后通过一个例子来介绍如何在 magento 2 中使用 ko 绑定。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><a href="#%E5%87%86%E5%A4%87"></a>准备</h2><p>在 <code>ThankIT_HelloWorld</code> 模块的基础上，我们来创建一个页面，用来做实验。 File: app\code\ThankIT\HelloWorld\Controller\Knockoutjs\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Knockoutjs;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File:app\code\ThankIT\HelloWorld\view\frontend\layout\helloworld_knockoutjs_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;page layout=&quot;1column&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\HelloWorld\Block\Knockoutjs\Index&quot; name=&quot;knockoutjs.index&quot; template=&quot;ThankIT_HelloWorld::knockoutjs/index.phtml&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>File:app\code\ThankIT\HelloWorld\Block\Knockoutjs\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Knockoutjs;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Index extends Template</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File:app\code\ThankIT\HelloWorld\view\frontend\templates\knockoutjs\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;First name: &lt;strong data-bind=&quot;text:firstName&quot;&gt;todo&lt;/strong&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Last name: &lt;strong data-bind=&quot;text:lastName&quot;&gt;todo&lt;/strong&gt;&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p><em>注意：Magento 2 的 js 框架部分变化比较频繁，2.0 和 2.1 之间有较大差异，本文使用的是 2.1.7</em> 然后我们清空缓存，刷新页面，打开调试面板，会看到： <img src="/wp-content/uploads/2017/09/ko-uncaught-reference-error.png" alt="ko"> 假设我们在普通的页面中，我们尚未应用 <code>ko.applyBindings(obj)</code>，那么 <code>data-bind</code> 应该被浏览器忽略，我们是不会看到这样的错误的。 所以 Magento 2 页面中自动调用了 <code>ko.applyBindings(obj)</code> 调用 <code>ko.applyBindings()</code> 部分的实现位于 <code>Magento_Ui/js/lib/knockout/bootstrap</code> 具体的文件位置位于 <code>vendor\magento\module-ui\view\base\web\js\lib\knockout\bootstrap.js</code>，文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright © 2013-2017 Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">/** Loads all available knockout bindings, sets custom template engine, initializes knockout on page */</span><br><span class="line"></span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;./template/engine&#x27;,</span><br><span class="line">    &#x27;knockoutjs/knockout-es5&#x27;,</span><br><span class="line">    &#x27;./bindings/bootstrap&#x27;,</span><br><span class="line">    &#x27;./extender/observable_array&#x27;,</span><br><span class="line">    &#x27;./extender/bound-nodes&#x27;,</span><br><span class="line">    &#x27;domReady!&#x27;</span><br><span class="line">], function (ko, templateEngine) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    ko.uid = 0;</span><br><span class="line"></span><br><span class="line">    ko.setTemplateEngine(templateEngine);</span><br><span class="line">    ko.applyBindings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>至于他是怎样实现页面加载后，自动调用 <code>ko.applyBindings()</code> 的，此处先挖坑，留着以后填。 这里先明白，Magento 2 对 ko 做了自定义，他会让 ko 自动进行初始化。</p>
<h2 id="template-binding"><a href="#template-binding" class="headerlink" title="template binding"></a><a href="#template-binding"></a>template binding</h2><p>我们先来看一个 ko 的模版绑定，看看 ko 原来的用法是怎样的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ko&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Participants&lt;/h2&gt;</span><br><span class="line">Here are the participants:</span><br><span class="line">&lt;div data-bind=&quot;template: &#123; name: &#x27;person-template&#x27;, data: buyer &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div data-bind=&quot;template: &#123; name: &#x27;person-template&#x27;, data: seller &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/html&quot; id=&quot;person-template&quot;&gt;</span><br><span class="line">    &lt;h3 data-bind=&quot;text: name&quot;&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;Credits: &lt;span data-bind=&quot;text: credits&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">     function MyViewModel() &#123;</span><br><span class="line">         this.buyer = &#123; name: &#x27;Franklin&#x27;, credits: 250 &#125;;</span><br><span class="line">         this.seller = &#123; name: &#x27;Mario&#x27;, credits: 5800 &#125;;</span><br><span class="line">     &#125;</span><br><span class="line">     ko.applyBindings(new MyViewModel());</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>效果： <img src="/wp-content/uploads/2017/09/template-binding.png" alt="ko 模版绑定"> 下面我们来看看 Magento 2 对 ko 模版引擎的改造后的用法。 将 phtml 改成以下内容： File:app\code\ThankIT\HelloWorld\view\frontend\templates\knockoutjs\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-bind=&quot;template:&#x27;ThankIT_HelloWorld/hello&#x27;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们创建以下文件： File:app\code\ThankIT\HelloWorld\view\frontend\web\template\hello.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;p data-bind=&quot;style:&#123;color:&#x27;red&#x27;&#125;&quot;&gt;Hello World&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们刷新页面，效果如下： <img src="/wp-content/uploads/2017/09/magento2-ko-template-engine.png" alt="m2 模版引擎"> Magento 2 对 ko 模版引擎的改造让我们不需要用 <code>&lt;script type=&quot;text/html&quot;&gt;</code> 来声明模版，把模版也从 <code>phtml</code> 文件中分离到独立的 <code>html</code> 文件中，有利于模版的复用。</p>
<h2 id="ko-自定义绑定"><a href="#ko-自定义绑定" class="headerlink" title="ko 自定义绑定"></a><a href="#ko-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%91%E5%AE%9A"></a>ko 自定义绑定</h2><p>我们先来看看 ko 的自定义绑定是怎样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ko&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;label&gt;&lt;input type=&quot;checkbox&quot; data-bind=&quot;checked: giftWrap&quot; /&gt; Gift wrap&lt;/label&gt;</span><br><span class="line">&lt;div data-bind=&quot;slideVisible: giftWrap, slideDuration:600, test:&#x27;just for test&#x27;&quot;&gt;You have selected the option&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var viewModel = &#123;</span><br><span class="line">        giftWrap: ko.observable(true)</span><br><span class="line">    &#125;;</span><br><span class="line">    ko.bindingHandlers.slideVisible = &#123;</span><br><span class="line">    update: function(element, valueAccessor, allBindings) &#123;</span><br><span class="line">        // console.log(element);</span><br><span class="line">        // First get the latest data that we&#x27;re bound to</span><br><span class="line">        var value = valueAccessor();</span><br><span class="line">        // console.log(value);</span><br><span class="line">        // Next, whether or not the supplied model property is observable, get its current value</span><br><span class="line">        var valueUnwrapped = ko.unwrap(value);</span><br><span class="line">        // console.log(valueUnwrapped);</span><br><span class="line">        // console.log(allBindings);</span><br><span class="line">        // Grab some more data from another binding property</span><br><span class="line">        var duration = allBindings.get(&#x27;slideDuration&#x27;)  400; // 400ms is default duration unless otherwise specified</span><br><span class="line">        console.log(allBindings.get(&#x27;test&#x27;));</span><br><span class="line">        // Now manipulate the DOM element</span><br><span class="line">        if (valueUnwrapped == true)</span><br><span class="line">            $(element).slideDown(duration); // Make the element visible</span><br><span class="line">        else</span><br><span class="line">            $(element).slideUp(duration);   // Make the element invisible</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>可参考官方文档 <a href="http://knockoutjs.com/documentation/custom-bindings.html">Creating custom bindings</a> 效果如下： <img src="/wp-content/uploads/2017/09/ko-custom-binding.gif" alt="ko 自定义绑定"> 要点是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ko.bindingHandlers.yourBindingName = &#123;</span><br><span class="line">    init: function(element, valueAccessor, allBindings, viewModel, bindingContext) &#123;</span><br><span class="line">        // This will be called when the binding is first applied to an element</span><br><span class="line">        // Set up any initial state, event handlers, etc. here</span><br><span class="line">    &#125;,</span><br><span class="line">    update: function(element, valueAccessor, allBindings, viewModel, bindingContext) &#123;</span><br><span class="line">        // This will be called once when the binding is first applied to an element,</span><br><span class="line">        // and again whenever any observables/computeds that are accessed change</span><br><span class="line">        // Update the DOM element based on the supplied values here.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>一旦注册了自定义绑定，就可以这样使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-bind=&quot;yourBindingName: someValue&quot;&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="ko-component-绑定"><a href="#ko-component-绑定" class="headerlink" title="ko component 绑定"></a><a href="#ko-component-%E7%BB%91%E5%AE%9A"></a>ko component 绑定</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ko&lt;/title&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.2/knockout-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/3.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;First instance, without parameters&lt;/h4&gt;</span><br><span class="line">&lt;div data-bind=&#x27;component: &quot;message-editor&quot;&#x27;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h4&gt;Second instance, passing parameters&lt;/h4&gt;</span><br><span class="line">&lt;div data-bind=&#x27;component: &#123;</span><br><span class="line">    name: &quot;message-editor&quot;,</span><br><span class="line">    params: &#123; initialText: &quot;Hello, world!&quot; &#125;</span><br><span class="line">&#125;&#x27;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    ko.components.register(&#x27;message-editor&#x27;, &#123;</span><br><span class="line">        viewModel: function(params) &#123;</span><br><span class="line">        /**</span><br><span class="line">         *   几乎所有语言中  和 &amp;&amp; 都遵循“短路”原理，</span><br><span class="line">         *   如 &amp;&amp; 中第一个表达式为假就不会去处理第二个表达式，而  正好相反。</span><br><span class="line">         *   js 也遵循上述原则。</span><br><span class="line">         *   当  时，找到为 true 的分项就停止处理，并返回该分项的值，否则执行完，并返回最后分项的值。</span><br><span class="line">         *   当 &amp;&amp; 时，找到为 false 的分项就停止处理，并返回该分项的值。</span><br><span class="line">         **/</span><br><span class="line">            this.text = ko.observable(params &amp;&amp; params.initialText  &#x27;&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        template: &#x27;Message: &lt;input data-bind=&quot;value: text&quot; /&gt; &#x27;+ &#x27;(length: &lt;span data-bind=&quot;text: text().length&quot;&gt;&lt;/span&gt;)&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ko.applyBindings();</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>效果如下： <img src="/wp-content/uploads/2017/09/ko-component-binding.gif" alt="ko-component-binding"> 可以参考官方文档 <a href="http://knockoutjs.com/documentation/component-binding.html">The “component” binding</a> component 组合了 view model 和 template ，我们向组件传递参数来设置 view model ，注意，此处 <code>ko.applyBindings()</code> 并没有传递 <code>obj</code> 。 回到 Magento 2 中，上面讲到 M2 自动调用了 <code>ko.applyBindings()</code> 也没有传递参数，那么 M2 一定是对 ko 做了类似组件的绑定。</p>
<h2 id="magento-2-中使用-ko-绑定"><a href="#magento-2-中使用-ko-绑定" class="headerlink" title="magento 2 中使用 ko 绑定"></a><a href="#magento-2-%E4%B8%AD%E4%BD%BF%E7%94%A8-ko-%E7%BB%91%E5%AE%9A"></a>magento 2 中使用 ko 绑定</h2><p>下面我们来做一个例子 File:app\code\ThankIT\HelloWorld\view\frontend\layout\helloworld_knockoutjs_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;page layout=&quot;1column&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\HelloWorld\Block\Knockoutjs\Index&quot; name=&quot;knockoutjs.index&quot; template=&quot;ThankIT_HelloWorld::knockoutjs/index.phtml&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;jsLayout&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;components&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;customer-list&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;ThankIT_HelloWorld/js/view/customer/list&lt;/item&gt;</span><br><span class="line">                                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                    &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;ThankIT_HelloWorld/customer/list&lt;/item&gt;</span><br><span class="line">                                &lt;/item&gt;</span><br><span class="line">                            &lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">            &lt;/block&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>通过 <code>arguments</code> 传递参数，如果不清楚 layout 中 <code>arguments</code> 的用法，参考 <a href="https://www.hellomagento2.com/layout-instruction-%E4%B9%8B-argument-%E5%92%8C-action/">Layout instruction 之 argument 和 action</a> 上面我们这里传递进去一个数组，相当于给 block 对象设置了 <code>$this-&gt;jsLayout</code> 的值。 File: app\code\ThankIT\HelloWorld\Block\Knockoutjs\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Knockoutjs;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Index extends Template</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\View\Element\Template\Context $context,</span><br><span class="line">        array $layoutProcessors = [],</span><br><span class="line">        array $data = []</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context, $data);</span><br><span class="line">        $this-&gt;layoutProcessors = $layoutProcessors;</span><br><span class="line">    &#125;</span><br><span class="line">    public function getJsLayout()</span><br><span class="line">    &#123;</span><br><span class="line">        foreach ($this-&gt;layoutProcessors as $processor) &#123;</span><br><span class="line">            $this-&gt;jsLayout = $processor-&gt;process($this-&gt;jsLayout);</span><br><span class="line">        &#125;</span><br><span class="line">        return parent::getJsLayout();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File:app\code\ThankIT\HelloWorld\view\frontend\templates\knockoutjs\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-bind=&quot;template:&#x27;ThankIT_HelloWorld/hello&#x27;&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;customer-page&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;block-customer-list&quot; data-bind=&quot;scope:&#x27;customer-list&#x27;&quot; class=&quot;block&quot;&gt;</span><br><span class="line">    &lt;?php echo $block-&gt;getJsLayout();?&gt;</span><br><span class="line">        &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">        &lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;#block-customer-list&quot;: &#123;</span><br><span class="line">                    &quot;Magento_Ui/js/core/app&quot;: &lt;?php /* @escapeNotVerified */ echo $block-&gt;getJsLayout();?&gt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们调用了 block 中的 <code>getJsLayout()</code> 方法，返回一个 json ，然后我们将它搁在 <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 中，可参考<a href="https://www.hellomagento2.com/magento-2-javascript-init-ways/"><code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code></a> 它将载入 <code>Magento_Ui/js/core/app</code> 模块，并且将 <code>getJsLayout()</code> 方法输出的 json 对象和作用节点 <code>#block-customer-list</code> 传递给它并执行。 <code>getJsLayout()</code> 输出的东西是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;components&quot;:&#123;&quot;customer-list&quot;:&#123;&quot;component&quot;:&quot;ThankIT_HelloWorld\/js\/view\/customer\/list&quot;,&quot;config&quot;:&#123;&quot;template&quot;:&quot;ThankIT_HelloWorld\/customer\/list&quot;&amp;#125;&amp;#125;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p><code>customer-list</code> 正对应着 <code>&lt;div id=&quot;block-customer-list&quot; data-bind=&quot;scope:&#39;customer-list&#39;&quot; class=&quot;block&quot;&gt;</code> <code>data-bind=&quot;scope:&#39;customer-list&#39;&quot;</code> 中的 <code>scope</code> 是 magento 2 创建的自定义绑定。 File：app\code\ThankIT\HelloWorld\view\frontend\web\js\view\customer\list.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;jquery&#x27;, &#x27;ko&#x27;, &#x27;uiComponent&#x27;], function($, ko, Component) &#123;</span><br><span class="line">    &quot;use strict&quot;;</span><br><span class="line">    var listCustomers = ko.observableArray([]);</span><br><span class="line">    return Component.extend(&#123;</span><br><span class="line">        getListCustomers: function() &#123;</span><br><span class="line">            if (!listCustomers().length) &#123;</span><br><span class="line">                listCustomers([&#123;&quot;entity_id&quot;: 1,&quot;email&quot;:&quot;123@qq.com&quot;,&quot;firstname&quot;:&quot;wendy&quot;,&quot;lastname&quot;:&quot;wu&quot;,&quot;created_at&quot;:&quot;2017&quot;&#125;]);</span><br><span class="line">            &#125;</span><br><span class="line">            return listCustomers;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>File: app\code\ThankIT\HelloWorld\view\frontend\web\template\customer\list.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;table&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;Created At&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody data-bind=&quot;foreach: getListCustomers()&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td data-bind=&quot;text: entity_id&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td data-bind=&quot;text: email&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td data-bind=&quot;text: firstname  + &#x27; &#x27; + lastname&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td data-bind=&quot;text: created_at&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br></pre></td></tr></table></figure>

<p>下面访问 url <code>http://example.com/helloworld/knockoutjs/index/</code> 结果如下： <img src="/wp-content/uploads/2017/09/magento2-ko.png"></p>
<h2 id="magento-2-是如何做到的？"><a href="#magento-2-是如何做到的？" class="headerlink" title="magento 2 是如何做到的？"></a><a href="#magento-2-%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E7%9A%84%EF%BC%9F"></a>magento 2 是如何做到的？</h2><p><a href="https://magento.stackexchange.com/questions/120447/how-does-magento-2-apply-knockoutjs-bindings">How Does Magento 2 Apply KnockoutJS Bindings</a> <a href="https://magento.stackexchange.com/questions/120221/magento-2-how-where-is-the-gettemplate-knockout-function-bound/120508#120508">Magento 2: How&#x2F;Where is the <code>getTemplate</code> Knockout Function Bound?</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>knockoutjs</tag>
        <tag>ko component bind</tag>
        <tag>ko 模版绑定</tag>
        <tag>ko 自定义绑定</tag>
        <tag>Magento 2</tag>
        <tag>组件绑定</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 Catch customer creation event on both frontend and admin</title>
    <url>/magento-2-catch-customer-creation-event-on-both-frontend-and-admin/</url>
    <content><![CDATA[<p>相关的事件有三个：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">customer_register_success</span><br><span class="line">adminhtml_customer_save_after</span><br><span class="line">customer_save_after</span><br></pre></td></tr></table></figure>

<p><code>customer_register_success</code> 成功创建用户事件，只作用于前端，管理后台创建新的用户是不会触发这个事件的。</p>
<p><code>adminhtml_customer_save_after</code> 只作用于管理后台客户详情页，每次保存都会触发，但是客户列表页的行内修改不会触发该事件。</p>
<p><code>customer_save_after</code> 每次客户信息保存都会触发该事件。</p>
<p>所以我们怎么才能抓住前后台都有效的新用户创建事件呢？</p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80"></a>方法一</h2><p>利用 <code>Magento\Customer\Model\AccountManagement</code>，由于所有的新用户创建都要调用该类的 <code>createAccount</code> 方法。所以我们可以用 plugin 。</p>
<p>如果我们要拿到新创建的用户，那么可以参考下列代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type name=&quot;Magento\Customer\Model\AccountManagement&quot;&gt;</span><br><span class="line">        &lt;plugin name=&quot;vendor_name_plugin_name&quot; type=&quot;vendor\module\Plugin\AccountManagement&quot; sortOrder=&quot;1&quot; /&gt;</span><br><span class="line">&lt;/type&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function afterCreateAccountWithPasswordHash(</span><br><span class="line">        \Magento\Customer\Model\AccountManagement $subject,</span><br><span class="line">        $customer</span><br><span class="line">    ) &#123;</span><br><span class="line">        // Magento\Customer\Model\Data\Customer</span><br><span class="line">        $email = $customer-&gt;getEmail();</span><br><span class="line">        $name = $customer-&gt;getFirstname();</span><br><span class="line">        $id = $customer-&gt;getId();</span><br><span class="line">        // your code</span><br><span class="line">        // important!</span><br><span class="line">        return $customer;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C"></a>方法二</h2><p>利用 Observer 得到的 Model 的 <code>isObjectNew()</code> 方法。该方法位于 <code>\Magento\Framework\Model\AbstractModel</code>。</p>
<p>它的声明如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> /**</span><br><span class="line"> * Check object state (true - if it is object without id on object just created)</span><br><span class="line"> * This method can help detect if object just created in _afterSave method</span><br><span class="line"> * problem is what in after save object has id and we can&#x27;t detect what object was</span><br><span class="line"> * created in this transaction</span><br><span class="line"> *</span><br><span class="line"> * @param boolnull $flag</span><br><span class="line"> * @return bool</span><br><span class="line"> */</span><br><span class="line">public function isObjectNew($flag = null)</span><br><span class="line">&#123;</span><br><span class="line">    if ($flag !== null) &#123;</span><br><span class="line">        $this-&gt;_isObjectNew = $flag;</span><br><span class="line">    &#125;</span><br><span class="line">    if ($this-&gt;_isObjectNew !== null) &#123;</span><br><span class="line">        return $this-&gt;_isObjectNew;</span><br><span class="line">    &#125;</span><br><span class="line">    return !(bool)$this-&gt;getId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但它只能用在 <code>customer_save_before</code> 中，所以如果我们需要在 <code>customer_save_after</code> 中得到该对象是不是新的对象，可以通过在 <code>customer_save_before</code> 中设置自己的值，然后在 after 的时候取。</p>
<p>比如：<br>beforeObserver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$customer = $observer-&gt;getEvent()-&gt;getCustomer();</span><br><span class="line">if ($customer-&gt;isObjectNew()) &#123;</span><br><span class="line">    $customer-&gt;setCustomIsObjNew(true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>afterObserver</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$customer = $observer-&gt;getEvent()-&gt;getCustomer();</span><br><span class="line">if ($customer-&gt;getCustomIsObjNew()) &#123;</span><br><span class="line">    // your code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="相关连接"><a href="#相关连接" class="headerlink" title="相关连接"></a><a href="#%E7%9B%B8%E5%85%B3%E8%BF%9E%E6%8E%A5"></a>相关连接</h2><p><a href="https://magento.stackexchange.com/questions/210904/magento-2-catch-customer-creation-event-on-both-frontend-and-admin/210906#210906">https://magento.stackexchange.com/questions/210904/magento-2-catch-customer-creation-event-on-both-frontend-and-admin/210906#210906</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Controller and FPC</title>
    <url>/magento-2-controller-and-fpc/</url>
    <content><![CDATA[<p>Magento 2 自带 Full page cache 。当我的 Controller 需要返回动态的信息时，如果 FPC 开着，那么我只能得到缓存的信息。所以问题是，怎样让 Controller 排除掉 FPC 的影响而返回动态信息呢？ 通过 layout xml 的 disable 来禁止某个 block 缓存。 像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;block class=&quot;\Magento\Framework\View\Element\Template&quot; template=&quot;sample:module::sampletemplate.phtml&quot; name=&quot;sampleblock&quot; cacheable=&quot;false&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><strong>cacheable&#x3D;”false”</strong> 就会禁用整个 block 的缓存，但是这会对性能造成影响，这个 block 所在的页面都不会被缓存。 这里不讨论性能问题，相关阅读中可以找到更多这方面的讨论。 在博主的实践中，有一个错误的做法，下面记录下来。 在 controller 中我没有通过 layout xml 来创建页面，而是直接创建了 block 。这样，当我希望该 block 返回动态的内容时，我无法找到与 <strong>cacheable&#x3D;”false”</strong> 相对应的代码来避开 FPC 的影响。直接创建也让别人不方便自定义这个页面 ，所以不推荐这种做法。</p>
<h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a><a href="#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB"></a>相关阅读</h2><p><a href="https://magento.stackexchange.com/questions/146154/exclude-caching-cusotm-module-by-magento-2-built-in-full-page-cachefpc-problem">Exclude caching cusotm module by Magento 2 built in Full page cache(FPC problem)</a> <a href="https://inviqa.com/blog/how-full-page-cache-works-magento-2">How the full page cache works in Magento 2</a></p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Create Admin Menu</title>
    <url>/magento-2-create-admin-menu/</url>
    <content><![CDATA[<p>本篇我们将介绍如何创建 Admin menu 。 Admin menu 看起来就是这样： <img src="/wp-content/uploads/2017/09/admin-menu.png" alt="admin menu"> 他是有层次的。可以分成三级，最左侧大类的 Sales ，然后是分组 Operation ，然后是 Orders 和 invoice 等。 我们来看 orders 的链接结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example/admin/sales/order/index/key/9118b14253fc71837e2b0d7ea73c818b63d1401ebd1f04f310486d985f3e6d57/</span><br></pre></td></tr></table></figure>

<p>和前台的 url 结构相比较，他多出了 <code>admin</code> 和后面的 <code>/key/118b14253fc71837e2b0d7ea73c818b63d1401ebd1f04f310486d985f3e6d57/</code> key 是为了防止跨站脚本攻击（cross site script attacks） 后台的 url 结构就是(看到的)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/front-name/controller-name/action</span><br></pre></td></tr></table></figure>

<p>如果引用则是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin/front-id/controller-name/action</span><br></pre></td></tr></table></figure>

<h2 id="创建-menu-xml"><a href="#创建-menu-xml" class="headerlink" title="创建 menu.xml"></a><a href="#%E5%88%9B%E5%BB%BA-menu.xml"></a>创建 menu.xml</h2><p>File:app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;etc&#x2F;adminhtml&#x2F;menu.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Backend:etc/menu.xsd&quot;&gt;</span><br><span class="line">    &lt;menu&gt;</span><br><span class="line">       &lt;add id=&quot;ThankIT_HelloWorld::helloworld&quot; title=&quot;Hello World&quot; module=&quot;ThankIT_HelloWorld&quot; sortOrder=&quot;51&quot; resource=&quot;ThankIT_HelloWorld::helloworld&quot;/&gt;</span><br><span class="line">       &lt;add id=&quot;ThankIT_HelloWorld::post&quot; title=&quot;Posts&quot; module=&quot;ThankIT_HelloWorld&quot; sortOrder=&quot;10&quot; action=&quot;thankit_helloworld/post/index&quot; resource=&quot;ThankIT_HelloWorld::post&quot; parent=&quot;ThankIT_HelloWorld::helloworld&quot;/&gt;</span><br><span class="line">       &lt;add id=&quot;ThankIT_HelloWorld::helloworld_configuration&quot; title=&quot;Configuration&quot; module=&quot;ThankIT_HelloWorld&quot; sortOrder=&quot;99&quot; parent=&quot;ThankIT_HelloWorld::helloworld&quot; action=&quot;adminhtml/system_config/edit/section/helloworld&quot; resource=&quot;ThankIT_HelloWorld::helloworld_configuration&quot;/&gt;</span><br><span class="line">    &lt;/menu&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>注意 <code>action=&quot;adminhtml/system_config/edit/section/helloworld&quot;</code> 此处使用的是 <code>adminhtml</code> 而不是 <code>admin</code> 尽管我们看到的是 <code>admin</code> 。</p>
<ul>
<li>The id attribute is the identifier for this note. It’s a unique string and should follow the format: {Vendor_ModuleName}::{menu_description}.</li>
<li>The title attribute is the text which will be shown on the menu bar.</li>
<li>The module attribute is defined the module which this menu is belong to.</li>
<li>The sortOrder attribute is defined the position of the menu. Lower value will display on top of menu.</li>
<li>The parent attribute is an Id of other menu node. It will tell Magento that this menu is a child of another menu. In this example, we have parent&#x3D;”ThankIT_HelloWorld::helloworld”, so we - know this menu “Posts” is a child of “Hello World” menu and it will show inside of Hello World menu.</li>
<li>The action attribute will define the url of the page which this menu link to. As we talk above, the url will be followed this format {router_name}{controller_folder}{action_name}.</li>
<li>The resource attribute is used to defined the ACL rule which the admin user must have in order to see and access this menu. We will find more detail about ACL in other topic.</li>
</ul>
<p>关于最左侧的大类的 icon 请参考<a href="http://devdocs.magento.com/guides/v2.1/pattern-library/graphics/iconography/iconography.html">Magento Admin Pattern Library-Iconography</a> 效果如下 <img src="/wp-content/uploads/2017/09/menu-%E6%95%88%E6%9E%9C.png" alt="menu效果"> 这里只有两层结构，下面看下三层的结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line"> * Copyright © 2013-2017 Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Backend:etc/menu.xsd&quot;&gt;</span><br><span class="line">    &lt;menu&gt;</span><br><span class="line">        &lt;add id=&quot;Magento_Sales::sales&quot; title=&quot;Sales&quot; translate=&quot;title&quot; module=&quot;Magento_Sales&quot; sortOrder=&quot;15&quot; dependsOnModule=&quot;Magento_Sales&quot; resource=&quot;Magento_Sales::sales&quot;/&gt;</span><br><span class="line">        &lt;add id=&quot;Magento_Sales::sales_operation&quot; title=&quot;Operations&quot; translate=&quot;title&quot; module=&quot;Magento_Sales&quot; sortOrder=&quot;10&quot; parent=&quot;Magento_Sales::sales&quot; resource=&quot;Magento_Sales::sales_operation&quot; /&gt;</span><br><span class="line">        &lt;add id=&quot;Magento_Sales::sales_order&quot; title=&quot;Orders&quot; translate=&quot;title&quot; module=&quot;Magento_Sales&quot; sortOrder=&quot;10&quot; parent=&quot;Magento_Sales::sales_operation&quot; action=&quot;sales/order&quot; resource=&quot;Magento_Sales::sales_order&quot;/&gt;</span><br><span class="line">        &lt;add id=&quot;Magento_Sales::sales_invoice&quot; title=&quot;Invoices&quot; translate=&quot;title&quot; module=&quot;Magento_Sales&quot; sortOrder=&quot;20&quot; parent=&quot;Magento_Sales::sales_operation&quot; action=&quot;sales/invoice&quot; resource=&quot;Magento_Sales::sales_invoice&quot;/&gt;</span><br><span class="line">        ....</span><br><span class="line">    &lt;/menu&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>对应第一张的图片。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/create-admin-menu-magento-2.html">Magento 2 Create Admin Menu</a><br><a href="http://alanstorm.com/magento_2_admin_menu_items/">Magento 2: Admin Menu Items</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>Magento 2 admin menu</tag>
        <tag>menu.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 css js 404</title>
    <url>/magento-2-css-js-404/</url>
    <content><![CDATA[<p>首先排除掉权限问题。 然后执行 <code>php bin/magento setup:static-content:deploy</code> 看静态文件是否生成了。 如果已经生成了，那么很可能是 rewrite 问题。 本次遇到的问题是，<code>http://www.example.com/static/version1511952472/frontend/Magento/luma/en_US/mage/loader.js</code> 是 404 但是 <code>http://www.example.com/static/frontend/Magento/luma/en_US/mage/loader.js</code> 可以访问。 可以看出，下面的路径比上面的少了 <code>version1511952472</code> ，该文件夹实际上是不存在的，是通过 rewrite 来实现转向的。 首先后台是可以控制是否使用 static files versioning 的 <img src="/wp-content/uploads/2017/11/static-files-versioning.png" alt="static files versioning"></p>
<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80"></a>方法一</h2><p>设置 <code>Sign Static Files</code> 为 No 这样就不存在转向问题了。但是治标不治本。 这时候你很可能无法进入后台了，所以得直接改数据库记录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into core_config_data(path, value) VALUES (&#x27;dev/static/sign&#x27;, 0);</span><br></pre></td></tr></table></figure>

<p>然后执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento cache:clean</span><br></pre></td></tr></table></figure>

<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C"></a>方法二</h2><p>Apache 下，按照一般情况，在 <code>pub/static/.htacess</code> 中是设置好了的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">    RewriteEngine On</span><br><span class="line"></span><br><span class="line">    # Remove signature of the static files that is used to overcome the browser cache</span><br><span class="line">    RewriteRule ^version.+?/(.+)$ $1 [L]</span><br><span class="line"></span><br><span class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">    RewriteCond %&#123;REQUEST_FILENAME&#125; !-l</span><br><span class="line"></span><br><span class="line">    RewriteRule .* ../static.php?resource=$0 [L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>Nginx 设置，以下仅供参考：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /static/ &#123;</span><br><span class="line">    # Uncomment the following line in production mode</span><br><span class="line">    # expires max;</span><br><span class="line"></span><br><span class="line">    # Remove signature of the static files that is used to overcome the browser cache</span><br><span class="line">    location ~ ^/static/version &#123;</span><br><span class="line">        rewrite ^/static/(version\d*/)?(.*)$ /static/$2 last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~* \.(icojpgjpegpnggifsvgjscssswfeotttfotfwoffwoff2)$ &#123;</span><br><span class="line">        add_header Cache-Control &quot;public&quot;;</span><br><span class="line">        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">        expires +1y;</span><br><span class="line"></span><br><span class="line">        if (!-f $request_filename) &#123;</span><br><span class="line">            rewrite ^/static/(version\d*/)?(.*)$ /static.php?resource=$2 last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* \.(zipgzgzipbz2csvxml)$ &#123;</span><br><span class="line">        add_header Cache-Control &quot;no-store&quot;;</span><br><span class="line">        add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">        expires    off;</span><br><span class="line"></span><br><span class="line">        if (!-f $request_filename) &#123;</span><br><span class="line">           rewrite ^/static/(version\d*/)?(.*)$ /static.php?resource=$2 last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (!-f $request_filename) &#123;</span><br><span class="line">        rewrite ^/static/(version\d*/)?(.*)$ /static.php?resource=$2 last;</span><br><span class="line">    &#125;</span><br><span class="line">    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://magento.stackexchange.com/questions/150418/static-content-is-not-loading-after-upgrade">Static Content is not loading after upgrade</a> <a href="https://magento.stackexchange.com/questions/156766/magento-2-css-js-not-found-404">Magento 2: CSS &amp; JS not found (404) [duplicate]</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Magento 2 css js 404</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 最新源文件下载</title>
    <url>/magento-2-download/</url>
    <content><![CDATA[<p>Magento 源文件去官方下载速度比较慢，要登录，有点麻烦。这里给大家提供我下载的源文件，放在百度运盘中了。我会尽快把最新的版本放到盘里。</p>
<p>这里提供的是 <a href="https://magento.com/tech-resources/download">Magento 2 官方下载网址</a> 下载的源文件。</p>
<p>地址：<a href="http://pan.baidu.com/s/1skJVqiD">http://pan.baidu.com/s/1skJVqiD</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 custom theme layout xml not working</title>
    <url>/magento-2-custom-theme-layout-xml-not-working/</url>
    <content><![CDATA[<p>Check your DB. There is a table called <code>theme</code> that stores a reference to all the themes that have ever been installed in your store. If the <code>type</code> of the theme is set to 1, that means Magento sees the theme are virtual (what ever that means) and will no longer load your xml files. If that is the case, just change it to 0. I don’t know the why of this issue, but it has tripped me up a few time. Reference:</p>
<p><a href="https://magento.stackexchange.com/questions/134523/magento-2-custom-theme-layout-xml-and-css-not-working">Magento 2 custom theme layout xml and css not working</a></p>
<p><a href="https://www.nahuelsanchez.com/magento-virtual-themes-or-why-theme-changes-dont-show-up-in-the-front-end/">Magento virtual themes or why theme changes don’t show up in the front end</a></p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 插件提交 MarketPlace 小记</title>
    <url>/magento-2-extension-submit-to-marketplace/</url>
    <content><![CDATA[<p>Magento MarketPlace 是类似 APPStore 这样的官方应用市场，您可以从 MarketPlace 购买下载插件，然后安装到自己的店铺中，实现所需要的功能。<br>Magento Connect 负责 Magento 1 的插件， Magneto MarketPlace 则负责 Magento 2 的插件。</p>
<p>ThankIT 的支付宝和微信插件既然开发好了，何不提交官方市场呢？于是博主开始了暴躁的提交历程。现记述下来，一是不吐不快，二是或可供后来者参考。</p>
<p>博主翻阅工作日志后，发现 ThankIT 插件从今年8月1日就开始提交 MarketPlace，至今仍然卡在 Market Review 部分，算起来已经有50天了！天，想到这个博主就很暴躁。虽然整个过程中也有忙其他事情，但是等待真的是让人心碎的！</p>
<p>博主总结一下慢的大原因：<br>一是语言障碍，虽然每个字都看得懂，但是就是没明白啥意思，囧！<br>二是时间差，发邮件询问问题，今天问，最快明天才能看到回答。</p>
<p>具体原因我们细细说：<br>Magento MarketPlace 的提交流程大致是这样的，先要告诉他们该插件解决了什么问题，然后你插件独特在哪里，通过初步的审核后，可以上传插件进行 Techincal Review 了，这一步会对代码进行检查，如果有 Error 就不能通过，这一步很严格，比如不允许用 echo 直接输出，可以参考如下资料：<br><a href="http://docs.magento.com/marketplace/user_guide/extensions/review-code-validation.html">Code Validation</a><br><a href="http://magento.stackexchange.com/questions/111085/how-to-fix-warnings-errors-raised-by-the-magento-marketplace-technical-review/111086">How to fix warnings &#x2F; errors raised by the Magento Marketplace technical review report</a></p>
<p>这一步博主遇到官方提交的一个坑，就是明明我的描述没有超过规定的字数，鬼知道什么时候他给我的描述加了<code>&lt;p&gt;</code>标签，于是报错不能提交，这时候既无法上传插件又无法修改描述，天，博主的内心是崩溃的！<br>而且位置什么的全错位了。根本没有办法进入下一步。就像这样(这是微信支付插件依赖的一个Package，微信插件已经通过 Technical Review 了)：</p>
<p><img src="/wp-content/uploads/2016/09/marketplace.png"></p>
<p>第一次遇到这个问题（ThankIT&#x2F;MobileDetect），我发邮件过去询问没有得到回答，想想算了改个名字（改成了ThankIT&#x2F;DeviceDetect）重新上传一下吧，于是不了了之了。尼玛，这次又遇到了，这次要改名字，有点麻烦了！于是只好再试试看问官方吧，目前还没有得到回复。。</p>
<p>支付宝的插件已经通过 Technical Review 进入 Market Review 阶段，这个阶段遇到的问题有：介绍自己的文字和图像不过关，我也不晓得有什么区别。。为什么不让过。自己的域名不能包含“magento”二字，博主只好特意又申请一个域名。。标题必须得是英文的（我有中英文啊。。），还有介绍内容得让别人知道 Alipay 是什么等等…最后终于提交 Market Review 博主默默地等了六天，还是没有动静。于是博主问官方，到底要多久啊？对面说，一般非支付插件，5至7个工作日，支付插件要更久一些。。好吧，博主默默等待了小半个月，突然醒悟可能是有文件没签。。就是下面提到的这个：</p>
<p>支付插件是个特殊的存在，原文如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello all,</span><br><span class="line"></span><br><span class="line">We thank you for your patience as we have diligently been working on a process to curate payments extensions.</span><br><span class="line"></span><br><span class="line">As you know, Magento has moved to a highly curated model for the Magento Marketplace and we are requiring that select third-party payment providers approve all payment extensions that are listed in the Marketplace.  This ensures that each payment extension has been evaluated and tested by the payment provider before an extension can be submitted to Magento for review and listing on the Magento Marketplace.  This process will ensure high quality payment capabilities within the Magento platform.</span><br><span class="line"></span><br><span class="line">As we continue to work on the approval process with the payment providers for their “official” payment extension(s), we want to inform merchants that your Magento 2 compatible extensions are already available.  To achieve this, Magento will agree to list your payment extension in the Magento Marketplace on a temporary evaluation basis for  6 months.  If the payment provider does not select your extension as its “official” extension(s), at the conclusion of the 6 month period, your extension will be removed from the Magento Marketplace.</span><br><span class="line"></span><br><span class="line">For those paid extension(s) that have a cost associated with the purchase, the standard Magento Marketplace revenue share terms will apply at the time of listing on the Magento Marketplace, and Magento will remit to you an amount equal to 70% of the Net Revenue from the sale, per the terms of the Developer Agreement.</span><br><span class="line"></span><br><span class="line">To be admitted into the Marketplace, please sign and return a scanned copy of the attached Magento Developer Agreement and Appendix A to marketplace@magento.com.</span><br></pre></td></tr></table></figure>

<p>好吧，还要填表，那就填吧！还要上交“30%”，好吧。。六个月的考核期，也没看明白到底怎么考核的，然后发邮件问，还是没有弄明白，博主已经快要耐心耗尽了，所以管他什么考核，以后再说吧。于是博主填了表发过去。</p>
<p>后来博主又要填表了，这次好像是关于税的，于是又填了表发过去。</p>
<p>总结一下：<br>支付宝插件进入 Market Reviw 阶段，希望不要又因为什么被拒绝了。<br>微信插件目前是 Ready for Market Reviw 阶段，但是他依赖的 QRcode 包因为提交 Bug 无法前进了，正在等待官方回复。</p>
<hr>
<p>2016年9月20日</p>
<p>气死本宝宝了，支付宝的插件又被打回来了，现在的状态是 MarketIssue。其中有两个问题是老问题。<br>一是 Developer Avata，要求：<br>Add a Developer Avatar to your profile (company or personal).<br>It must look professional; however, it does not necessarily need to be a picture of you.<br>It should be 255 x 255 px, jpg, gif or png.<br>宝宝的头像是255*255 的png，难道是说我不够正式？我就一个logo 加一个名字而已（ThankIT），MarketPlace 中就有这样的，凭啥说俺们的不正式？</p>
<p>二是Developer Profile 要求是: Add a short bio to your profile to help merchants better understand you or your company.<br>宝宝的介绍是简短了点，可也是照着MakertPlace 中其他家的写的，到底少什么？</p>
<p>第三个说是Screen Name 问题，上次倒没有说过，要求是Update your Screen Name to represent you or your company.The Screen Name cannot infer that Magento is affiliated with your company or extension.<br>宝宝的Screen Name 是PiscesThankIT，怎么不满足要求了？哭啊~</p>
<p>其他问题，如自己的域名不能带 magento ，尼玛，这个问题很麻烦啊！如语法错误，怪我。。说我的详细介绍说得不清楚，得，怪我！<br>可是我真的很怀疑，就算写得很详细歪果仁能搞懂支付宝到底干嘛使的吗，再看看Paypal 的支付插件，寥寥数语，根本没解释Paypal 到底干啥的好吧，严重怀疑，MarketPlace 你是***局啊，管那么宽？<br>花在乱七八糟的文案上的时间都要超过花在技术上的了。虽然 MarketPlace  的本意是为商户着想，<br>但为了兼顾不同语言，要求必须以英文介绍为主，可以加入其他语言，这给开发者增加了提交难度啊。原来1可没有这么严格。。</p>
<p>关键是我都不知道为什么不符合要求啊。前三个问题宝宝真的是一脸的懵比</p>
<p>抱怨归抱怨，宝宝还是带着埋怨之意打破沙锅问到底，发邮件去询问官方市场到底错在哪里了，可恶的是，发过去连个自动回复也没有，石沉大海一般。。</p>
<p>本宝宝，是绝不会轻易放弃的，奶奶的熊！</p>
<hr>
<p>9月26日</p>
<p>9月20日的更新，满满的都是怨气啊，博主应该深刻反省一下。虽然有些事情很容易让人暴躁，可是我们应该学着控制自己的情绪才是。<br>而且今天看到有同学给我加油打气，觉得挺受鼓舞的，谢谢你！</p>
<p>最近忙着其他事情，所以跟 MarketPlace 的事情慢了。</p>
<p>上面提到的上传 bug , 官方有回应了，询问了我的产品ID，是否有建议等。不过最近的一封邮件表明他还是没有明白我的意思。<br>他告诉我说我的 Code 中有 Warning，我需要重新上传以通过审核。但是我的问题是，我根本无法重新上传啊，一上传就说我描述信息超过150个字符。博主这次截了图，继续说明问题，虽然上次也截了图的，不过希望这次他可以明白我的意思吧。</p>
<p>至于最近提到的头像名字错误什么的，博主的询问果然石沉大海一般没有回应了，博主会继续发邮件问的，然后试着按自己的理解修改后提交，试试看能不能过呗。</p>
<p>博主最近有个感悟，希望在此分享一下。:)</p>
<p>如果我们理解并接受这个世界上有许多无法掌控的事情，我们会更好地适应环境。减少内心的损耗，也是提高效率的一种方法呢。</p>
<hr>
<p>10月5日</p>
<p>MarketPlace Package 的文件无法上传的问题终于奇迹般的好了，官方并没有回应说是什么问题，只是很意外得收到邮件说QRcode 的 package 被拒绝了。然后我一检查发现 ok 了。不管是为什么，这下终于可以继续推进了。</p>
<p>中间过程略有曲折，官方说看起来像是禁用了Js，本来应该是富文本的，我却是纯文本的样子，还截了图给我看。宝宝经提醒发现，我的所有package 都是纯文本，而且确实没有禁用Js，检查了加载也没有发现问题，于是截图并附加了文本说明回复。大概是这种方式说得比较明白了，所以终于解决了，哈哈。图的表现力确实会比文字强不少呢！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>MarketPlace</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 Goals （翻译）</title>
    <url>/magento-2-goals/</url>
    <content><![CDATA[<p><em>前言：本篇是 Alan Kent 关于 Magento 2 的目标的个人看法，原文地址：<a href="https://alankent.me/2014/05/17/magento-2-goals/">https://alankent.me/2014/05/17/magento-2-goals/</a>。Alen Kent 是 Magento 的架构副总裁（ VP of Architecture 不知道这么翻译对不对额）。希望有助于多一点了解 Magento 2 。原文发布时间为2014年5月17日</em></p>
<p>Magento 2 像所有的重大项目一样，有一套自己的目标。这些已经在最近的 Magento Imagine 2014 研讨会上讨论过了。在这里，我结合自己的看法，做一个总结，以供有兴趣的人继续探讨。</p>
<p>声明：本篇仅代表个人观点，不代表 eBay 公司的观点。</p>
<h2 id="全新的技术栈"><a href="#全新的技术栈" class="headerlink" title="全新的技术栈"></a><a href="#%E5%85%A8%E6%96%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E6%A0%88"></a>全新的技术栈</h2><p>Magento 2 对技术栈的最低版本要求提高了。Magneto 2 被设计成为一个强大稳定的平台，所以选择了相对成熟的技术，而不是停留在过去。不依赖太多不同的技术，但努力做到允许社区在平台的基础上选择他们喜欢的技术，也是其中的一个目标。But I expect this is an area you just have to expect to not satisfy somebody （不知道怎么翻译。。囧）</p>
<p>需要升级的技术有：</p>
<ul>
<li>php 5.4 版本支持的最低版本</li>
<li>现在用上 jQuery 了。要注意升级技术栈并不是说就要用最前沿的技术。</li>
<li>Html5 和 CSS 3</li>
<li>RequireJS</li>
<li>PSR-0, PSR-1,PSR-2 （PHP 编码规范）</li>
<li>LESS</li>
</ul>
<h2 id="改进的性能和可扩展性"><a href="#改进的性能和可扩展性" class="headerlink" title="改进的性能和可扩展性"></a><a href="#%E6%94%B9%E8%BF%9B%E7%9A%84%E6%80%A7%E8%83%BD%E5%92%8C%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7"></a>改进的性能和可扩展性</h2><p>提高性能（更快处理请求）和可扩展性（使他可以通过加硬件来支持更高的负载）是 Magento 2 的重要目标。正在进行基准测试工作，不过这块还有更多的工作计划。优化代码要反工是非常没有成效的事，所以这部分到目前为止不是 Magento 2 的重点。这一点将会改变。</p>
<h2 id="简化的自定义工作"><a href="#简化的自定义工作" class="headerlink" title="简化的自定义工作"></a><a href="#%E7%AE%80%E5%8C%96%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B7%A5%E4%BD%9C"></a>简化的自定义工作</h2><p>大量的精力已投入到简化 Magneto 2 自定义工作中来。Magneto 的核心好处之一就是可以很大程度上进行自定义另外满足特定的需求。Magneto 并不是个仅有一些模板通用系统。新颖的功能可以被整合进去，以支持他们的品牌或是让商家走在前列。相关的例子有：</p>
<ul>
<li>解决许多痛点：添加新的模块却不能自定义想要的功能(不得不对他依赖的底层的代码进行改造)；有些模块会发生冲突。这里的技术升级包括改进布局文件的继承，新的依赖注入，支持拦截，模块化使其易于被移除或替换，等等。Magento 的基础代码量挺大的，因此第一阶段先介绍采用了哪些新技术，第二阶段渐进式地重构代码，以发挥新技术的力量。</li>
<li>目录结构被重组了，所以关于某 module 的所有文件会在同一个目录下。</li>
<li>将业务逻辑和模板文件分离出来，这样可以减少自定义模板时的重复。</li>
</ul>
<p>许多倍用来减少扩展的冲突的技术，结果带来了额外的好处，就是让自定义所需编写的代码量减少了。这可能导致相比较 Magento 1，Magento 2上手更困难些，但是最终的结果是由于需要编写和维护的代码量减少了，完成自定义项目所需的时间会更少。更少的冲突，更好的封装会让升级变得更容易和更可靠。</p>
<p>2014年5月18日增加内容：当然有些人要抠字眼，“可能导致 Magento 2 上手更困难”，可能作何解释？展开来说，减少扩展冲突的方法一部分是通过阻止某些做法。这里用到了现代软件工程的实践。产品文档更加强调如何更好地解释这些概念。最终的结果可能是Magento 2 更容易开发，但是还是要看社区的反应才能知道是不是更容易开发了，在这个阶段文档还没有完成，所以现在说还是言之过早。我当然相信整体上一定会更好。如果开发者遵守新的规则，扩展之间的冲突应该会大大减少。</p>
<h2 id="简化外部的集成"><a href="#简化外部的集成" class="headerlink" title="简化外部的集成"></a><a href="#%E7%AE%80%E5%8C%96%E5%A4%96%E9%83%A8%E7%9A%84%E9%9B%86%E6%88%90"></a>简化外部的集成</h2><p>Magneto 2 很酷的一项技术就是新增了服务层。虽然它只是一个不错的设计，定义模块的接口，相对较小的API，其他模块(还有表示层的布局和块)可以依赖这些接口或者API。我认为非常酷的一点是，用一个简单的 XML 配置文件，PHP API 自动作为 REST 和 SOAP 的 endpoint (自动生成的 WSDL 文件)。不需要多写什么。因此，如果你想为其他系统提供 API 接入，你可以创建一个新的模块，申明一个简短的 XML 文件，这就OK了。我认为这带来了一系列有趣的新方法（这些方法以前实现起来太费力气太贵了），可能会对 Magento 的后端集成产生很大影响。</p>
<p>将业务逻辑与模板分离，位于服务层下，带来另一个好处，这样更容易保证 APIs 的行为和用户在站点上交互保持一致效果。（Magento 1 的 APIs 和web 交互可能会有偏差）</p>
<h2 id="更容易安装和升级"><a href="#更容易安装和升级" class="headerlink" title="更容易安装和升级"></a><a href="#%E6%9B%B4%E5%AE%B9%E6%98%93%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%87%E7%BA%A7"></a>更容易安装和升级</h2><p>Magento 的安装过程正在被革新。大量简化自定义工作的努力也让升级变得更简单了。自动化测试（下文会提到）也有助于平滑升级。这是一个刚刚开始的工作领域。Composer 也是你安装第三方插件时，帮助你更容易安装的技术之一。</p>
<h2 id="高质量的代码和测试"><a href="#高质量的代码和测试" class="headerlink" title="高质量的代码和测试"></a><a href="#%E9%AB%98%E8%B4%A8%E9%87%8F%E7%9A%84%E4%BB%A3%E7%A0%81%E5%92%8C%E6%B5%8B%E8%AF%95"></a>高质量的代码和测试</h2><p>Magento 2 采用现代的自动测试策略。目标是减少手动测试，发布自动测试套件，让所有开发者和商家都可以了解到模块的测试覆盖率，希望有助于建立更多的测试用例来提高代码质量。测试类包括：</p>
<ul>
<li>单元测试</li>
<li>继承测试</li>
<li>JavaScript 测试</li>
<li>性能测试</li>
<li>静态代码分析</li>
<li>完整性测试</li>
<li>功能测试</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>在某些方面，Magneto 2 的一些改变并不很激进——只是应用了更好的软件设计原则。不过我相信这类平台级别的变化可能会有意想不到的间接好处，这种好处有时候很难解释清楚。很难想商家解释为什么依赖注入（这也正好简化自动测试）是那么叫人兴奋。对他们来说这可不叫人激动。令人激动的是他会减少开发新站点、进行自定义、之后升级的工作量，当然会减少成本了。这带来了加速创新的巨大潜能。商家可能会对升级抱有更大的信心，更愿意频繁升级。你什么时候愿意升级手机上的APP呢？这会让商家更快接受新的趋势。</p>
<p>我认为 Magento 2 的潜在好处就是他的加速效果。只有时间可以证明我的预言是否应验！</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>magento 2 helper</title>
    <url>/magento-2-helper/</url>
    <content><![CDATA[<p>Helpers are classes that can be used anywhere we want,we can use them in controllers,views,modeles and even in other helpers. Helpers are usually created to provide methods for a common functionality. 它一般位于 <code>&lt;module_dir&gt;/Helper</code>目录下，常用的文件名是 Data.php 它继承自 <code>Magento\Framework\App\Helper\AbstractHelper</code> 因为他的父类已经注入了<code>\Magento\Framework\App\Config\ScopeConfigInterface</code> 所以我们可以在 helper 中使用 <code>$this-&gt;scopeConfig-&gt;getValue()</code> 来获得配置值。 在 block 中我们可以通过 <code>$this-&gt;helper(&#39;&#123;Vendor&#125;\&#123;Module&#125;\Helper\Data&#39;);</code> 来获得 helper 。注意，此处一定是右斜杠。path 是左斜杠。 举例： File: ThankIT&#x2F;HelloWorld&#x2F;Helper&#x2F;Data.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Helper;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\App\Helper\AbstractHelper;</span><br><span class="line">use Magento\Framework\App\Helper\Context;</span><br><span class="line">use Magento\Store\Model\ScopeInterface;</span><br><span class="line"></span><br><span class="line">class Data extends AbstractHelper</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    const XML_PATH_HELLOWORLD = &#x27;helloworld/general/&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct(Context $context)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getConfigValue($field, $storeId = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;scopeConfig-&gt;getValue(</span><br><span class="line">            $field, ScopeInterface::SCOPE_STORE, $storeId</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getGeneralConfig($code, $storeId = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getConfigValue(self::XML_PATH_HELLOWORLD . $code, $storeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\code\ThankIT\HelloWorld\view\frontend\templates\index\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h3&gt;get configuration value by helper file&lt;/h3&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$helper = $this-&gt;helper(&#x27;ThankIT\HelloWorld\Helper\Data&#x27;);</span><br><span class="line">echo $helper-&gt;getConfigValue(&#x27;helloworld/general/display_text&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo $helper-&gt;getGeneralConfig(&#x27;display_text&#x27;);</span><br></pre></td></tr></table></figure>

<p>参考 <a href="https://www.hellomagento2.com/system-xml-configuration/">System.xml Configuration</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>magento2</tag>
        <tag>helper</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 如何安装插件</title>
    <url>/magento-2-how-to-install-extension-1/</url>
    <content><![CDATA[<p>这里的插件是指 Module。<br>Magneto 2 有多种方式安装 Module，本文将介绍手动的方式。（由于国内的网络环境问题，有些方式可能不顺畅。有机会以后再介绍）</p>
<p>步骤：</p>
<ol>
<li><p>将插件文件拷贝到 Magento 的目录<code>app/code/</code> 下，如果没有<code>code</code>目录请自行创建，不过记得注意权限问题。拷贝进去后，文件的目录结构应该是<code>app/code/vendorName/moduleName</code> 如果你不知道<code>vendorName</code>或<code>moduleName</code>，那么你可以插件查看 module 的<code>registration.php</code>，里面的第二个参数以<code>_</code>连接，前面就是VendorName，后面是 ModuleName。例如“ThankIT_AlipayDirect”，我的目录结构就是<code>app/code/ThankIT/AlipayDirect/</code>（一般情况下，你拿到的目录都是已经组织好的）</p>
</li>
<li><p>打开<code>CMD</code>切换到 Magento 的根目录下，执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin\magento module:status</span><br></pre></td></tr></table></figure>

<p>可以查看已经启用的插件和未启用的插件</p>
<p>使用下面的命令，启用某个插件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin\magento module:enable VendorName_ModuleName</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据提示运行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin\magento setup:upgrade</span><br></pre></td></tr></table></figure></li>
</ol>
<p>这样插件就被启用了。</p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Https</title>
    <url>/magento-2-https/</url>
    <content><![CDATA[<p>本篇我们来谈一谈 Magento 2 如何使用 Https</p>
<h2 id="Https-是什么"><a href="#Https-是什么" class="headerlink" title="Https 是什么"></a><a href="#https-%E6%98%AF%E4%BB%80%E4%B9%88"></a>Https 是什么</h2><p>超文本传输安全协议（Hypertext Transfer Protocol Secure 缩写：HTTPS，也被称为HTTP over TLS，HTTP over SSL 或 HTTP Secure）他是一种网络安全传输协议。</p>
<p>HTTPS 使用 HTTP 进行通信，但利用 SSL&#x2F;TLS 来对数据包进行加密。HTTPS 开发的主要目的，是提供对网络服务器的身份认证，保护交换数据的隐私与完整性。</p>
<p>简单说来，使用 HTTPS 通信，信息是加密的，而使用 HTTP 传输，信息是明文。所以 HTTPS 更加安全。</p>
<p>Google 是鼓励使用 HTTPS 的， HTTPS 的站点会获得更好的排名。百度 2014 年也已经从 HTTP 转向了 HTTPS 。所以使用 HTTPS 实在是大势所趋。</p>
<h2 id="阿里云免费证书"><a href="#阿里云免费证书" class="headerlink" title="阿里云免费证书"></a><a href="#%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E8%AF%81%E4%B9%A6"></a>阿里云免费证书</h2><p>博主的 Magento 2 搭建在阿里云上，所以以阿里云为例，申请一个免费的证书配置到 Magento 2上。</p>
<p>登录阿里云后，在产品与服务中，找到证书服务 &gt; 购买证书，然后按照提示申请好就行了。博主使用的域名验证类型是 DNS ，所以还要去域名解析中做好配置。然后下载该证书。</p>
<p>请根据你的服务器类型下载证书，就像下面这样：</p>
<p><img src="/wp-content/uploads/2016/12/magento2-https.png"></p>
<p>你看，他都告诉你怎么安装证书了。不过这个是 Centos 上的 Apache 配置方式。博主是 Ubuntu，所以下面的内容针对的是 Ubuntu 下 Apache 的证书配置。</p>
<h2 id="Ubuntu-Apache-配置证书"><a href="#Ubuntu-Apache-配置证书" class="headerlink" title="Ubuntu Apache 配置证书"></a><a href="#ubuntu-apache-%E9%85%8D%E7%BD%AE%E8%AF%81%E4%B9%A6"></a>Ubuntu Apache 配置证书</h2><p>首先，确保 SSL 模块加载进 Apache 了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a2enmod ssl</span><br><span class="line">...</span><br><span class="line">Module ssl already enabled</span><br></pre></td></tr></table></figure>

<p>如果你看到上面类似的信息，说明你已经 ok 了。如果看到 “Enabling module ssl” ，你还需要重启下 Apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service apache2 restart</span><br></pre></td></tr></table></figure>

<p>下面我们将下载的证书上传到服务器上并放到安全的位置。在配置文件中进行配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:443&gt;</span><br><span class="line">        DocumentRoot /www/html/yoursite</span><br><span class="line">        ServerName www.example.com</span><br><span class="line">        ServerAlias example.com</span><br><span class="line">        Options +FollowSymLinks</span><br><span class="line">        rewriteEngine on</span><br><span class="line">        rewriteCond %&#123;http_host&#125; ^example.com [NC]</span><br><span class="line">        rewriteRule ^(.*)$ https://www.example.com$1 [R=301,L]</span><br><span class="line"></span><br><span class="line">        ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">        CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line">        SSLEngine on</span><br><span class="line">        SSLCertificateFile /etc/apache2/ssl/yourdomainname.pem</span><br><span class="line">        SSLCertificateKeyFile /etc/apache2/ssl/yourdomainname.key</span><br><span class="line">        SSLCACertificateFile  /etc/apache2/ssl/yourdomainname.pem</span><br><span class="line">        &lt;Directory &quot;/www/html/yoursite&quot;&gt;</span><br><span class="line">           Options Indexes FollowSymLinks MultiViews</span><br><span class="line">           AllowOverride all</span><br><span class="line">           Order allow,deny</span><br><span class="line">           Allow from all</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>保存后重启。下面我们要去 Magento 2 后台进行配置了</p>
<h2 id="Magento-2-后台配置-Https"><a href="#Magento-2-后台配置-Https" class="headerlink" title="Magento 2 后台配置 Https"></a><a href="#magento-2-%E5%90%8E%E5%8F%B0%E9%85%8D%E7%BD%AE-https"></a>Magento 2 后台配置 Https</h2><p>Stores &gt; Configuration &gt; General &gt; Web &gt; Base URLs (Secure)</p>
<p>配置好后刷新缓存（资料太多不详细说了），我相信你的网站就可以用 https 了。</p>
<p>如果你希望 80 端口重定向到 443 端口，可以用下面的配置(当然是80端口的配置中)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;SERVER_port&#125; 80</span><br><span class="line">RewriteRule ^(.*)$ https://www.example.com$1 [R=301,L]</span><br></pre></td></tr></table></figure>

<p>不管是80 还是 443 端口的配置，请一定要不要少了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Directory /www/html/yoursite&gt;</span><br><span class="line">    Options Indexes FollowSymLinks MultiViews</span><br><span class="line">    AllowOverride all</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>

<p>另外，需要注意浏览器的缓存，建议使用隐私窗口进行测试，排除浏览器缓存的影响。</p>
<p>诸位，Good Luck!</p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
  </entry>
  <entry>
    <title>type=&quot;text/x-magento-init&quot;</title>
    <url>/magento-2-javascript-init-ways/</url>
    <content><![CDATA[<p>我们在 magento 2 的 phtml 中经常会看到 <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 和 <code>data-mage-init</code> ，那么这两个标签是用来做什么的？本篇将给出解释，并说明这样设计的用意。</p>
<h2 id="Magento-2-的自定义设计"><a href="#Magento-2-的自定义设计" class="headerlink" title="Magento 2 的自定义设计"></a><a href="#magento-2-%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E8%AE%A1"></a>Magento 2 的自定义设计</h2><p>首先 <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 是 Magento 2 的自定义设计。我们新建一个 html 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    alert(&#x27;common&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    alert(&#x27;magento&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>然后从浏览器中访问他，我们会看到 <code>common</code> 的 alert 但不会看到 <code>magento</code> 的 alert 。这是因为浏览器不认识 <code>type=&quot;text/x-magento-init&quot;</code> 的这个 <code>&lt;script&gt;</code>，所以会直接忽略它。</p>
<h2 id="创建一个演示模块"><a href="#创建一个演示模块" class="headerlink" title="创建一个演示模块"></a><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%BC%94%E7%A4%BA%E6%A8%A1%E5%9D%97"></a>创建一个演示模块</h2><p>我们还是以 <code>ThankIT_HelloWorld</code> 为基础。</p>
<h3 id="创建-Controller"><a href="#创建-Controller" class="headerlink" title="创建 Controller"></a><a href="#%E5%88%9B%E5%BB%BA-controller"></a>创建 Controller</h3><p>File:app\code\ThankIT\HelloWorld\Controller\Javascript\Example.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Javascript;</span><br><span class="line"></span><br><span class="line">class Example extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-layout"><a href="#创建-layout" class="headerlink" title="创建 layout"></a><a href="#%E5%88%9B%E5%BB%BA-layout"></a>创建 layout</h3><p>File:app\code\ThankIT\HelloWorld\view\frontend\layout\helloworld_javascript_example.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;page layout=&quot;1column&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\HelloWorld\Block\Javascript\Example&quot; name=&quot;Javascript.Example&quot; template=&quot;ThankIT_HelloWorld::javascript/example.phtml&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建-Block"><a href="#创建-Block" class="headerlink" title="创建 Block"></a><a href="#%E5%88%9B%E5%BB%BA-block"></a>创建 Block</h3><p>File:app\code\ThankIT\HelloWorld\Block\Javascript\Example.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Javascript;</span><br><span class="line"></span><br><span class="line">class Example extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-template"><a href="#创建-template" class="headerlink" title="创建 template"></a><a href="#%E5%88%9B%E5%BB%BA-template"></a>创建 template</h3><p>File:app\code\ThankIT\HelloWorld\view\frontend\templates\javascript\example.phtml 内容为空 然后刷新缓存，访问 url <code>http://example/helloworld/javascript/example</code> 我们就会看到带 header 和 footer 的页面，内容为空。 这里没有什么稀奇的，只是一个准备工作，预热一下。</p>
<h2 id="创建一个-requirejs-模块"><a href="#创建一个-requirejs-模块" class="headerlink" title="创建一个 requirejs 模块"></a><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-requirejs-%E6%A8%A1%E5%9D%97"></a>创建一个 requirejs 模块</h2><p>我们先关闭掉 fpc (Full page caching)，这样不用每次清缓存看结果。 我们先在 <code>File:app\code\ThankIT\HelloWorld\view\frontend\templates\javascript\example.phtml</code> 中填入以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    console.log(&#x27;hello&#x27;);</span><br><span class="line">    jQuery(function($)&#123;</span><br><span class="line">        alert(&quot;Hello World&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们刷新页面，查看控制台，会发现： <img src="/wp-content/uploads/2017/09/jquery-is-not-defined.png" alt="jQuery is not defined"> 这是因为 Magento 2 使用 RequireJS 做基础，对 JS 进行模块化，默认不会使用全局命名空间，<code>jQuery</code> 也不再暴露到全局空间。我们应该使用 <code>RequireJS</code> 的方式来访问 js 模块。 Magento 2 本身就是集成了 <code>jQuery</code> 的，所以我们可以这样访问：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    requirejs([&#x27;jquery&#x27;], function($) &#123;</span><br><span class="line">        alert(&quot;Hello World&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>关于 <code>RequireJS</code> 可以参阅 <a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/">Magento 2 and RequireJS (翻译)</a> 我们现在创建以下文件： File: app\code\ThankIT\HelloWorld\view\frontend\web\example.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([], function()&#123;</span><br><span class="line">    alert(&quot;A simple RequireJS module&quot;);</span><br><span class="line">    var mageJsComponent = function()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;A simple magento component.&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return mageJsComponent;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样我们就定义了一个简单的 RequireJS module，这个模块的位置是 <code>app\code\ThankIT\HelloWorld\view\frontend\web\example.js</code>，那么他的模块名，在没有重新命名的情况下，就是 <code>ThankIT_HelloWorld/example</code>。 然后我们来更改 phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    requirejs([&#x27;ThankIT_HelloWorld/example&#x27;], function($) &#123;</span><br><span class="line">        alert(&quot;Hello World&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>刷新网页，然后我们会先看到弹出框 A simple RequireJS module，然后是 Hello World。就是我们先加载 <code>ThankIT_HelloWorld/example</code> 然后执行 <code>alert(&quot;Hello World&quot;);</code> 好，这样看来，我们已经会给 Magento 2 加 js module ，并且在 phtml 中使用它了。 要了解更详细的解释，请参阅 <a href="https://www.hellomagento2.com/alan-magento-2-javascript-init-scripts/">Magento 2 Javascript Init Scripts（翻译）</a></p>
<h2 id="lt-script-type-quot-text-x-magento-init-quot-gt"><a href="#lt-script-type-quot-text-x-magento-init-quot-gt" class="headerlink" title="&lt;script type=&quot;text/x-magento-init&quot;&gt;"></a><a href="#%60%60"></a><code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code></h2><p>让我们来修改 phtml 为以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &quot;ThankIT_HelloWorld/example&quot;:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>example</code> 的内容不变：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([], function()&#123;</span><br><span class="line">    alert(&quot;A simple RequireJS module&quot;);</span><br><span class="line">    var mageJsComponent = function()</span><br><span class="line">    &#123;</span><br><span class="line">        alert(&quot;A simple magento component.&quot;);</span><br><span class="line">    &#125;;</span><br><span class="line">    return mageJsComponent;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这时候刷新页面（有时也需要情况浏览器缓存），我们会发现，这次先弹出 <code>A simple RequireJS module</code> 然后弹出 <code>A simple magento component.</code> 上面我们用 <code>requirejs</code> 的方法，并没有弹出 <code>A simple magento component.</code> 也就是说，<code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 方式不仅会使用 <code>requirejs</code> 的方式加载该模块，而且还湖调用它。</p>
<h2 id="传参"><a href="#传参" class="headerlink" title="传参"></a><a href="#%E4%BC%A0%E5%8F%82"></a>传参</h2><p>phtml 改成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;text&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;#text&quot;: &#123;</span><br><span class="line">            &quot;ThankIT_HelloWorld/example&quot;:&#123;&quot;config&quot;:&#123;&quot;text&quot;:&quot;Hello Magento 2, Hello ThankIT ...&quot;&amp;#125;&amp;#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>example</code> 改成:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([&#x27;jquery&#x27;], function($)&#123;</span><br><span class="line">    var setText = function(config, node) &#123;</span><br><span class="line">        console.log(config);</span><br><span class="line">        console.log(node);</span><br><span class="line">        $(node).html(config.config.text);</span><br><span class="line">    &#125;</span><br><span class="line">    return setText;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>清空浏览器缓存，刷新页面，这时候，我们的页面会是这样的： <img src="/wp-content/uploads/2017/09/node-config-results.png" alt="magento 2 x-magento-init"> <img src="/wp-content/uploads/2017/09/console.log_.results.png" alt="magento 2 x-magento-init console log"> 不过这里<code>console.log</code> 出的结果有点奇怪，按照我的理解，输出的 node 不应该含有 <code>Hello Magento 2, Hello ThankIT ...</code> 内容。。。有清楚的朋友请给我留个言吧，感谢！ <em>通过上面这个例子，我们知道 ** <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 方式可以传递要作用的节点，可以传递配置参数，并且之后被调用执行。**通过这样的设计，Magento 鼓励开发者避免在 RequireJS 模块中硬编码 DOM 节点。传递的配置参数可以由服务器端生成。这进一步分离的会让代码更清晰。</em></p>
<h2 id="data-mage-init"><a href="#data-mage-init" class="headerlink" title="data-mage-init"></a><a href="#data-mage-init"></a>data-mage-init</h2><p>这个方式实际上和 <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 是一样的。 我们把 phtml 改成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-mage-init=&#x27;&#123;&quot;ThankIT_HelloWorld/example&quot;: &#123;&quot;config&quot;:&#123;&quot;text&quot;:&quot;Hello Magento 2, Hello ThankIT ... use data-mage-init ...&quot;&amp;#125;&amp;#125;&#125;&#x27;&gt;A single div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>刷新页面，是不是先看到 <code>A single div</code> ，随后被替换成了 <code>Hello Magento 2, Hello ThankIT ... use data-mage-init ...</code> <em>注意，我们的属性中使用的是单引号</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-mage-init=&#x27;...&#x27;&gt;A single div&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这是必要的，<code>data-mage-init</code> 属性会严格按照 JSON 格式解析，就是说 JSON 对象必须使用双引号，所以我们的属性就只能用单引号了。</p>
<h2 id="关于如何实现的-type-x3D-”text-x2F-x-magento-init”"><a href="#关于如何实现的-type-x3D-”text-x2F-x-magento-init”" class="headerlink" title="关于如何实现的 type&#x3D;”text&#x2F;x-magento-init”"></a><a href="#%E5%85%B3%E4%BA%8E%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E7%9A%84-type="></a>关于如何实现的 type&#x3D;”text&#x2F;x-magento-init”</h2><p>The code that uses them is located in <code>lib/web/mage/apply/scripts.js</code> 参考 <a href="https://magento.stackexchange.com/questions/89187/in-magento2-what-is-script-type-text-x-magento-init">In Magento2 what is<code>&lt;script type=“text/x-magento-init”&gt;</code>?</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/">Magento 2 and RequireJS (翻译)</a> <a href="https://www.hellomagento2.com/alan-magento-2-javascript-init-scripts/">Magento 2 Javascript Init Scripts（翻译）</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>data-mage-init</tag>
        <tag>magneto2</tag>
        <tag>requirejs</tag>
        <tag>x-magento-init</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 如何引入 CSS</title>
    <url>/magento-2-include-css/</url>
    <content><![CDATA[<p>Magento 2 通过 layout 文件引入 CSS。从技术讲，使用模板文件也可以引入 CSS，但是我们强烈推荐<strong>不要</strong>这样做。</p>
<p><em>CSS 的类名可以用在 templates 和 layouts 中</em></p>
<p>本篇描述 Magento 应用文件系统中默认情况下 CSS 文件是如何组织的，以及在布局中引入 CSS 的推荐做法。</p>
<h2 id="Magento-的-CSS-是如何组织的"><a href="#Magento-的-CSS-是如何组织的" class="headerlink" title="Magento 的 CSS 是如何组织的"></a><a href="#magento-%E7%9A%84-css-%E6%98%AF%E5%A6%82%E4%BD%95%E7%BB%84%E7%BB%87%E7%9A%84"></a>Magento 的 CSS 是如何组织的</h2><p>按照惯例来讲， CSS 和 LESS 文件只存在 theme 中。Module 文件夹中不包含任何样式。<br>在 theme 文件夹中，样式表被存放在如下位置：</p>
<p>Directory, relative to</p>
<p>Description</p>
<p><code>/&lt;Namespace&gt;_&lt;Module&gt;/web/css</code></p>
<p>特定模块的样式</p>
<p><code>/web/css</code></p>
<p>包含以下文件:</p>
<ul>
<li><code>print.less</code>: used to generate styles for the printed version of store pages.</li>
<li><code>_styles.less</code> – a composite file, which includes all LESS files used in the theme. The underscore sign (<code>_</code>) in a file name conventionally means that a file is not used independently, but is included in other files.</li>
<li><code>styles-m.less</code>: used to generate mobile-specific styles, includes <code>_styles.less</code></li>
<li><code>styles-l.less</code>: used to generate desktop-specific styles, includes <code>_styles.less</code>.</li>
<li><code>/source</code>: this subdirectory contains LESS configuration files that invoke mixins from the Magento UI library.</li>
<li><code>/source/_theme.less</code>: overrides the default Magento UI library variables values.</li>
</ul>
<h2 id="通过布局引入-CSS"><a href="#通过布局引入-CSS" class="headerlink" title="通过布局引入 CSS"></a><a href="#%E9%80%9A%E8%BF%87%E5%B8%83%E5%B1%80%E5%BC%95%E5%85%A5-css"></a>通过布局引入 CSS</h2><p>通常来讲，你引入的 CSS ，所有的店铺页都是可以访问的。<code>Magento_Theme</code>的<code>default_head_blocks.xml</code>定义了所有 Magento 页面的<code>&lt;head&gt;</code>部分。推荐做法是在你自己的theme 中增加一个<code>default_head_blocks.xml</code>来扩展它。</p>
<p>你 theme 中的<code>default_head_blocks.xml</code>应该放置在类似下面的位置<code>&lt;theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml</code>。要引入某个 css 文件，在<code>&lt;head&gt;</code>部分添加这样的代码：<code>&lt;css src=&quot;&lt;path&gt;/&lt;file&gt;&quot; media=&quot;print&lt;option&gt;&quot;/&gt;</code><br><code>&lt;path&gt;</code>是相对于你主题文件目录的（<code>&lt;theme_dir&gt;/web</code>）。下面是 Blank 主题引入 css 的例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: &lt;Magento_Blank_theme_dir&gt;/Magento_Theme/layout/default_head_blocks.xml</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;css src=&quot;css/styles-m.css&quot; /&gt;</span><br><span class="line">        &lt;css src=&quot;css/styles-l.css&quot; media=&quot;screen and (min-width: 768px)&quot;/&gt;</span><br><span class="line">        &lt;css src=&quot;css/print.css&quot; media=&quot;print&quot; /&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p><em>如果系统没有找到css 文件，就会找同名的<code>.less</code>文件。这是Magento 内置的机制，可以参考 <a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/css-topics/css-preprocess.html">CSS Preprocessing</a> 获得更多信息</em></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/css-topics/css-themes.html">Include CSS</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magento 2 引入 css</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 JS 开发入门</title>
    <url>/magento-2-js-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>默认情况下，Magento 2 使用 RequireJS （可参考 <a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/#requirejs-and-jquery-plugins">Magento 2 and RequireJS (翻译)</a> 和 <a href="https://www.hellomagento2.com/requirejs-modularity-async/">关于 RequireJS</a>）来异步加载 js 模块，管理模块依赖。在这个大前提下，Magento 2 中使用的主要 JS 库是 jQuery 和 KnockoutJS （简称 ko），还使用了 AngularJS （used for the web based installer）和 Underscore (This provides some useful Javascript functions to manipulate Javascript arrays, functions, objects and collections.) 另外 Magento 做了许多自定义的设置，比如对 ko 模版引擎的改造，让我们不需要用 <code>&lt;script type=&quot;text/html&quot;&gt;</code> 来声明模版，也把模版从 phtml 文件中分离到独立的 html 文件中，有利于模版的复用。比如，创建了 ko 的自定义绑定 <code>scope</code> 。上面提到的可以参考 <a href="https://www.hellomagento2.com/magento-2-and-konockoutjs/">Magento 2 and konockoutjs</a>。还有，<code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> 也是 Magento 2 的自定义设计（可参考 <a href="https://www.hellomagento2.com/magento-2-javascript-init-ways/"><code>&lt;script type=&quot;text/x-magento-init&quot;</code>&gt;</a>）。 既然用到了 jQuery ，那么 jQuery 丰富的插件就绝对是绕不过去的话题。但是 jQuery 的插件并不都是符合 AMD 规范的，所以，我们需要用到 requireJS 的 <code>shim</code> ，参考 <a href="https://www.hellomagento2.com/requirejs-%E7%9A%84-shim-%E7%94%A8%E6%B3%95/">RequireJS 的 shim 用法</a>。 <em>RequireJS 的 shim 解决的是加载非 AMD 规范模块的问题，并不限于 jQuery 的插件</em> 我们中文语境中的 <strong>jQuery 插件</strong>，可能指的是 jQuery Plugin 或者是 jQuery widget。但是这两者是有差别的，参考 <a href="/jquery-plugin-and-widget">jQuery Plugin and Widget</a>。下面介绍 Magento 2 中的几个术语，是比较容易混淆的概念。</p>
<p>术语</p>
<p>描述</p>
<p>JavaScript component (JS component)</p>
<p>Any separate .js file decorated as AMD module。 符合 AMD 规范的 JS 模块，通常都是一个文件一个模块</p>
<p>Ui component</p>
<p>JS component located in the Magento_Ui module, in the app&#x2F;code&#x2F;Magento&#x2F;Ui&#x2F;view directory. 他是 Magento_Ui 模块中的一组 JS ，位于 app&#x2F;code&#x2F;Magento&#x2F;Ui&#x2F;view 目录下</p>
<p>jQuery UI widget</p>
<p>A JS component&#x2F;widget provided by jQuery UI library used in Magento. jQuery UI 中包含的组件，参考 <a href="http://jqueryui.com/">jQuery UI</a></p>
<p>jQuery widget</p>
<p>Custom widget created using jQuery UI Widget Factory and decorated as AMD module. Many Magento JS components are jQuery widget. 使用 jQuery UI Widget Factory 创建并且符合 AMD 规范的 js 模块， Magento 中许多 js 组件都是 jQuery widget ，参考 <a href="http://devdocs.magento.com/guides/v2.0/javascript-dev-guide/widgets/jquery-widgets-about.html">Magento jQuery widgets</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/javascript-dev-guide/javascript/js_overview.html">JavaScript</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Magento 2 javascript 入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 layout 文件类型</title>
    <url>/magento-2-layout-types/</url>
    <content><![CDATA[<p>page 页面的布局由两种主要的布局组件决定：page layout file 和 page configuration file。</p>
<p>page layout file 决定页面的线框，比如一列的布局。技术上来讲，page layout 是 xml 文件，决定 HTML 页面中 <code>&lt;body&gt;</code> 里面的结构。Page layouts feature only containers。page layout 需要声明然后才能使用。</p>
<p>page configuration 也是 xml 文件。它决定更详细的结构（header,footer 等等，也就是 body 中的其他 html 标签），页面内容，页面的 meta 信息。他引用 page layout 文件。Page configuration features both main elements, blocks of particular classes and containers.</p>
<p>第三种布局文件是 generic layout。他们也是 xml 文件，定义 html 页面中<code>&lt;body&gt;</code>部分的内容和详细结构，跟 page configuration 基本一样，但是他们用在比较特殊的情况下，比如 AJAX 请求返回页面，emails，HTML 片段等。</p>
<h2 id="Page-layout"><a href="#Page-layout" class="headerlink" title="Page layout"></a><a href="#page-layout"></a>Page layout</h2><p>page layout 决定页面中<code>&lt;body&gt;</code>中的线框结构（wireframe），比如一列布局或者两列布局。</p>
<p>允许的指令：</p>
<ul>
<li><code>&lt;container&gt;</code></li>
<li><code>&lt;referenceContainer&gt;</code></li>
<li><code>&lt;move&gt;</code></li>
<li><code>&lt;update&gt;</code></li>
</ul>
<p><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/layouts/xml-instructions.html#fedg_layout_xml-instruc_ex_cont">指令参考文档</a></p>
<p>page layout 例子<br><code>&lt;Magento_Theme_module_dir&gt;/view/frontend/page_layout/1column.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;layout xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_layout.xsd&quot;&gt;</span><br><span class="line">    &lt;update handle=&quot;empty&quot;/&gt;</span><br><span class="line">    &lt;referenceContainer name=&quot;page.wrapper&quot;&gt;</span><br><span class="line">        &lt;container name=&quot;header.container&quot; as=&quot;header_container&quot; label=&quot;Page Header Container&quot; htmlTag=&quot;header&quot; htmlClass=&quot;page-header&quot; before=&quot;main.content&quot;/&gt;</span><br><span class="line">        &lt;container name=&quot;page.top&quot; as=&quot;page_top&quot; label=&quot;After Page Header&quot; after=&quot;header.container&quot;/&gt;</span><br><span class="line">        &lt;container name=&quot;footer-container&quot; as=&quot;footer&quot; before=&quot;before.body.end&quot; label=&quot;Page Footer Container&quot; htmlTag=&quot;footer&quot; htmlClass=&quot;page-footer&quot;/&gt;</span><br><span class="line">    &lt;/referenceContainer&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>

<p>如果你打开 Magento 首页（默认的主题），用浏览器工具查看源代码，可以看到如下类似的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;div class=&quot;page-wrapper&quot;&gt;</span><br><span class="line">    &lt;header class=&quot;page-header&quot;&gt;&lt;/header&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;footer class=&quot;page-footer&quot;&gt;&lt;/footer&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这样应该有助于理解为什么说 page layout 决定了页面的线框。</p>
<h3 id="page-layout-文件一般位置"><a href="#page-layout-文件一般位置" class="headerlink" title="page layout 文件一般位置"></a><a href="#page-layout-%E6%96%87%E4%BB%B6%E4%B8%80%E8%88%AC%E4%BD%8D%E7%BD%AE"></a>page layout 文件一般位置</h3><ul>
<li>Module page layouts: <code>&lt;module_dir&gt;/view/frontend/page_layout</code></li>
<li>Theme page layouts:<code>&lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/page_layout</code></li>
</ul>
<h3 id="page-layout-声明文件-layouts-xml"><a href="#page-layout-声明文件-layouts-xml" class="headerlink" title="page layout 声明文件 layouts.xml"></a><a href="#page-layout-%E5%A3%B0%E6%98%8E%E6%96%87%E4%BB%B6-layouts.xml"></a>page layout 声明文件 layouts.xml</h3><p>需要使用<code>layout.xml</code>文件来声明 page layout<br>位置：</p>
<ul>
<li>Module layout declarations: <code>&lt;module_dir&gt;/view/frontend/layouts.xml</code></li>
<li>Theme layout declaration: <code>&lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layouts.xml</code></li>
</ul>
<h3 id="创建自定义的-page-layout"><a href="#创建自定义的-page-layout" class="headerlink" title="创建自定义的 page layout"></a><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84-page-layout"></a>创建自定义的 page layout</h3><p>我们以<a href="/how-to-create-magento-2-frontend-theme/">如何创建 Magneto 2 前端主题</a>创建好的主题<code>ThankIT/Pisces</code>为基础，创建一个自定义的 page layout</p>
<p>我们在<code>app\design\frontend\ThankIT\Pisces</code> 文件夹下创建 <code>Magento_Theme</code>文件夹，这样我的主题就会对该模块进行一些自定义。在该文件夹下创建<code>layouts.xml</code>文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: app\design\frontend\ThankIT\Pisces\Magento_Theme\layouts.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;page_layouts xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/PageLayout/etc/layouts.xsd&quot;&gt;</span><br><span class="line">    &lt;layout id=&quot;custom-home&quot;&gt;</span><br><span class="line">        &lt;label translate=&quot;true&quot;&gt;Custom Home&lt;/label&gt;</span><br><span class="line">    &lt;/layout&gt;</span><br><span class="line">&lt;/page_layouts&gt;</span><br></pre></td></tr></table></figure>

<p>这是一个page layout 声明文件，<code>id</code>是他的名称，<code>label</code>是我们后台可以看到的标签。</p>
<p>下面创建<code>custom-home.xml</code>文件，我直接拷贝了1column.xml的内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: app\design\frontend\ThankIT\Pisces\Magento_Theme\page_layout\custom-home.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;layout xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_layout.xsd&quot;&gt;</span><br><span class="line">    &lt;update handle=&quot;empty&quot;/&gt;</span><br><span class="line">    &lt;referenceContainer name=&quot;page.wrapper&quot;&gt;</span><br><span class="line">        &lt;container name=&quot;header.container&quot; as=&quot;header_container&quot; label=&quot;Page Header Container&quot;  htmlTag=&quot;header&quot; htmlClass=&quot;page-header&quot; before=&quot;main.content&quot;/&gt;</span><br><span class="line">        &lt;container name=&quot;page.top&quot; as=&quot;page_top&quot; label=&quot;After Page Header&quot; after=&quot;header.container&quot;/&gt;</span><br><span class="line">        &lt;container name=&quot;footer-container&quot; as=&quot;footer&quot; before=&quot;before.body.end&quot; label=&quot;Page Footer Container&quot; htmlTag=&quot;footer&quot; htmlClass=&quot;page-footer&quot; /&gt;</span><br><span class="line">    &lt;/referenceContainer&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure>

<p>这两个都到位后，我们进入后台，<strong>Content -&gt; Pages</strong> 找到 Home page，进入编辑，<strong>Design &gt; Page Layout &gt; Layout</strong> 就可以看到我们已经声明的<code>Custom Home</code> page layout 可以用了。</p>
<p><img src="/wp-content/uploads/2016/11/layout-file-types-1.png"></p>
<p>如果我们对首页应用该布局，并且当前店铺的主题是<code>ThankIT\Pisces</code>，也就是我们刚刚创建的主题，这时候去首页看下他的源代码，注意下图红框中的<code>page-layout-custom-home</code>。（如果当前主题不是刚刚创建的主题，那么首页会是空白页面，博主也不清楚为什么。）</p>
<p><img src="/wp-content/uploads/2016/11/layout-file-types-2.png"></p>
<p>（上面两张图仅供参考，并不是<code>Pisces</code>主题的真实截图，图方便拿了别人的图来示意一下。）</p>
<h2 id="Page-configuration"><a href="#Page-configuration" class="headerlink" title="Page configuration"></a><a href="#page-configuration"></a>Page configuration</h2><p>page configuration 往 page layout 文件规定的线框结构中填充内容。它还包含 meta 信息，还有<code>&lt;head&gt;</code>部分的内容。</p>
<p>他的一般位置在：</p>
<ul>
<li>Module page configurations: <code>&lt;module_dir&gt;/view/frontend/layout</code></li>
<li>Theme page configurations: <code>&lt;theme_dir&gt;/&lt;Namespace&gt;_&lt;Module&gt;/layout</code></li>
</ul>
<p>page configuration 中允许的指令请查看参考文档第一条。</p>
<p>我们说 page configuration 引用 page layout 文件，我们来看看他是怎么引用的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: module-theme/view/frontend/layout/default.xml</span><br><span class="line">&lt;page layout=&quot;3columns&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;update handle=&quot;default_head_blocks&quot;/&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    ......</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>看<code>&lt;page/&gt;</code>节点中的<code>layout=&quot;3columns&quot;</code>，这就是说，我用的是<code>3columns</code>这个 page layout。<br><code>&lt;update handle=&quot;default_head_blocks&quot;/&gt;</code> 指令的意思是包含<code>default_head_block.xml</code>，这个文件和<code>default.xml</code>文件同一目录，用来规定 html 页面<code>&lt;head&gt;</code>中的内容，我们之前讨论引入 css 文件，也提到过他。</p>
<ul>
<li><code>&lt;Magento_Theme_module_dir&gt;/view/frontend/layout/default.xml</code>: defines the page layout.</li>
<li><code>&lt;Magento_Theme_module_dir&gt;/view/frontend/layout/default_head_blocks.xml</code>: defines the scripts, images, and meta data included in pages’ <code>&lt;head&gt;</code> section.</li>
</ul>
<p>这两个布局文件就是 Magento 前端页面的基本布局。</p>
<h2 id="Generic-layout"><a href="#Generic-layout" class="headerlink" title="Generic layout"></a><a href="#generic-layout"></a>Generic layout</h2><p>和 page configuration 基本一致，请查看参考文档第一条了解详细信息。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/layouts/layout-types.html">Layout file types</a></p>
<p><a href="http://magento.stackexchange.com/questions/118278/creating-a-custom-homepage-template-in-magento2">Creating a custom homepage template in Magento2</a> 第一个答案。</p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Less extend and override</title>
    <url>/magento-2-less-extend-and-override/</url>
    <content><![CDATA[<h2 id="Less-fallback"><a href="#Less-fallback" class="headerlink" title="Less fallback"></a><a href="#less-fallback"></a>Less fallback</h2><p>在 <a href="/magento-2-include-css/">Magento 2 如何引入 CSS</a> 文章中说到 Magento 的 CSS 是如何组织的。在 blank 主题中，通过观察其<code>default_head_blocks.xml</code>文件，可以发现两个重要的 CSS 引入。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;css src=&quot;css/styles-m.css&quot; /&gt;</span><br><span class="line">&lt;css src=&quot;css/styles-l.css&quot; media=&quot;screen and (min-width: 768px)&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>根据 CSS 的预处理机制，我们可以知道这两个 CSS 是由<code>&lt;theme-frontend-blank&gt;/web/css</code>下的<code>style-l.less</code>和<code>style-m.less</code>解析得到的。</p>
<p>以<code>style-m</code>为例，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//</span><br><span class="line">//  Blank theme mobile styles</span><br><span class="line">//  _____________________________________________</span><br><span class="line"></span><br><span class="line">//  These mobile styles are mandatory and will be used as basis according to the mobile first design</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//  Global lib + theme styles + theme extends</span><br><span class="line">//  ---------------------------------------------</span><br><span class="line"></span><br><span class="line">@import &#x27;source/_reset.less&#x27;;</span><br><span class="line">@import &#x27;_styles.less&#x27;;</span><br><span class="line">@import (reference) &#x27;source/_extends.less&#x27;;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//  Magento Import instructions</span><br><span class="line">//  ---------------------------------------------</span><br><span class="line"></span><br><span class="line">//@magento_import &#x27;source/_module.less&#x27;; // Theme modules</span><br><span class="line">//@magento_import &#x27;source/_widgets.less&#x27;; // Theme widgets</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//  Media queries collector</span><br><span class="line">//  ---------------------------------------------</span><br><span class="line"></span><br><span class="line">@import &#x27;source/lib/_responsive.less&#x27;;</span><br><span class="line"></span><br><span class="line">@media-target: &#x27;mobile&#x27;; // Sets target device for this file</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//  Global variables override</span><br><span class="line">//  ---------------------------------------------</span><br><span class="line"></span><br><span class="line">@import &#x27;source/_theme.less&#x27;;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line">//  Extend for minor customisation</span><br><span class="line">//  ---------------------------------------------</span><br><span class="line"></span><br><span class="line">//@magento_import &#x27;source/_extend.less&#x27;;</span><br></pre></td></tr></table></figure>

<p><code>@import</code> 指令引入了更多的 Less 文件。这些 Less 文件大部分位于当前文件目录的<code>source</code>子目录下，但是<code>@import &#39;source/lib/_responsive.less&#39;;</code> 中<code>source/lib/_responsive.less</code> 在当前文件目录下可找不到。这是因为 Magento 使用了 theme fallback 机制，当他在当前主题中找不到某个文件时，就会一直向上搜寻父主题的目录继续找，Less 这里最终 fallback 到了<code>&lt;magento-root&gt;/lib/web/css/</code>。</p>
<p>该文件中出现了一个特别的指令<code>//@magento_import</code>，他其实并不是被注释掉了，这是 Magento 自己的一个指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//@magento_import &#x27;source/_module.less&#x27;; // Theme modules</span><br><span class="line">//@magento_import &#x27;source/_widgets.less&#x27;; // Theme widgets</span><br></pre></td></tr></table></figure>

<p>这段指令告诉 Magento 包含如下的 Less 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Catalog/web/css/source/_widgets.less&#x27;;</span><br><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Catalog/web/css/source/_module.less&#x27;;</span><br><span class="line"></span><br><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Cms/web/css/source/_widgets.less&#x27;;</span><br><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Cms/web/css/source/_module.less&#x27;;</span><br><span class="line"></span><br><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Reports/web/css/source/_widgets.less&#x27;;</span><br><span class="line">&#x27;&lt;theme-dir&gt;/Magento_Reports/web/css/source/_module.less&#x27;;</span><br><span class="line">...and so on</span><br></pre></td></tr></table></figure>

<p>可以查看参考文档第一条，获得更详细的官方解释。</p>
<p>上面说到 theme fallback 机制，这里讲讲博主自己的理解，不一定是正确的，如果你发现有误，欢迎批评指正。</p>
<p>Less 的 fallback 就是按照当前主题，父主题，<code>&lt;magento-root&gt;/lib/web/css/</code> 的顺序，查找第一个符合位置名称的文件。举个例子，假设当前主题有<code>web/css/styles-m.less</code>，父主题也有<code>web/css/styles-m.less</code>，那么使用的就是当前主题文件，也就是当前主题 override 了父主题的文件。</p>
<h2 id="如何-override-和-extend-Magento-UI"><a href="#如何-override-和-extend-Magento-UI" class="headerlink" title="如何 override 和 extend Magento UI"></a><a href="#%E5%A6%82%E4%BD%95-override-%E5%92%8C-extend-magento-ui"></a>如何 override 和 extend Magento UI</h2><h3 id="override"><a href="#override" class="headerlink" title="override"></a><a href="#override"></a>override</h3><p>在自定义主题下新建<code>web/css/source/_theme.less</code><br>注意，他将会覆盖父主题的<code>web/css/source/_theme.less</code>，所以如果你想保留父主题的一些样式，请拷贝过来。在<code>_theme.less</code>中可以重新定义<code>variables</code>。</p>
<h3 id="extend"><a href="#extend" class="headerlink" title="extend"></a><a href="#extend"></a>extend</h3><p>在自定义主题下新建<code>web/css/source/_extend.less</code>。同上，子主题会覆盖父主题。</p>
<p>用哪个文件只是一种约定，并非技术上的强制要求。不过大家都遵守约定，会让我们工作更高效对不？<br>当然你可以在<code>_extend.less</code> import 更多 Less 文件，比如<code>@import &#39;_buttons_extend.less&#39;; @import &#39;_navigation_extend.less&#39;;</code>，这样的结构化命名会更清楚。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/css-topics/css-preprocess.html">CSS preprocessing</a><br><a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/css-guide/css_quick_guide_approach.html">Simple ways to customize a theme’s styles</a><br><a href="http://magento.stackexchange.com/questions/110164/how-do-you-override-less-in-a-custom-theme">How do you override LESS in a custom theme?</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magento 2 less extend and override</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 memory_limit 设置</title>
    <url>/magento-2-memory-limit-%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>phpinfo() 的很多部分有两列值：Local Value 和 Master Value 。 Master Value 是 php.ini 文件中设置的值。 Local Value 是当前目录中的设置值，该值会覆盖 Master Value 的值。 web server config 或者 .htaccess 的设置或者程序中的 ini_set() 都可以修改 local value 的值。 所以修改了 php.ini 中的 memory_limit 很可能实际上并未产生实际效果。 打开 Magento 根目录下的 .htacess 文件，修改 memory_limit 为更大的值（默认 768M），然后重启 web server ，检查 phpinfo() 中 memory_limit 的 local value 是否设置好了。</p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>local value</tag>
        <tag>master value</tag>
        <tag>memory_limit</tag>
        <tag>php.ini</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 New Configurable product - selecting existing simple products manually</title>
    <url>/magento-2-new-configurable-product-selecting-existing-simple-products-manually/</url>
    <content><![CDATA[<p>I create a module which allow simply selecting existing simple products manually without having to generate configurable to see the link ‘Add Products Manually’. See here: <a href="https://github.com/PiscesThankIT/ThankIT_ConfigurableWizard">https://github.com/PiscesThankIT/ThankIT_ConfigurableWizard</a></p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Newsletter Subscription Event</title>
    <url>/magento-2-newsletter-subscription-event/</url>
    <content><![CDATA[<p><code>vendor/module/etc/events.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Event/etc/events.xsd&quot;&gt;</span><br><span class="line">    &lt;event name=&quot;newsletter_subscriber_save_after&quot;&gt;</span><br><span class="line">        &lt;observer name=&quot;vendor_module_observer_myobserver&quot; instance=&quot;Vendor\Module\Observer\MyObserver&quot; /&gt;</span><br><span class="line">    &lt;/event&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p><code>Vendor\Module\Observer\MyObserver.php</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Vendor\Module\Observer;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Event\Observer;</span><br><span class="line"></span><br><span class="line">class MyObserver implements \Magento\Framework\Event\ObserverInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function execute(Observer $observer)</span><br><span class="line">    &#123;</span><br><span class="line">        $subscriber = $observer-&gt;getEvent()-&gt;getSubscriber();</span><br><span class="line">        $email = $subscriber-&gt;getEmail();</span><br><span class="line">        $subscriberStatus = $subscriber-&gt;getSubscriberStatus();</span><br><span class="line">        // subscriberStatus = 1 subscribe</span><br><span class="line">        // subscriberStatus = 3 unsubscribed</span><br><span class="line">        if ( $subscriberStatus == &#x27;1&#x27;) &#123;</span><br><span class="line">            // your code</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>It works both on frontend and backend</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="https://magento.stackexchange.com/questions/170157/magento-2-newsletter-subscription-event?noredirect=1&lq=1&utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa">https://magento.stackexchange.com/questions/170157/magento-2-newsletter-subscription-event?noredirect=1&lq=1&utm_medium&#x3D;organic&amp;utm_source&#x3D;google_rich_qa&amp;utm_campaign&#x3D;google_rich_qa</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>magento 2 redirect url</title>
    <url>/magento-2-redirect-url/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\ModuleName\Controller\Index;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Framework\App\Action\Action &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\Result\Redirect</span><br><span class="line">     */</span><br><span class="line">    public function execute() &#123;</span><br><span class="line"></span><br><span class="line">        $url = &#x27;http://hellomagento2.com&#x27;;</span><br><span class="line">        // internal</span><br><span class="line">        // return $this-&gt;resultRedirectFactory-&gt;create()-&gt;setPath(&#x27;*/*/&#x27;);</span><br><span class="line">        // external</span><br><span class="line">        return $this-&gt;resultRedirectFactory-&gt;create()-&gt;setUrl($url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 的请求处理流程</title>
    <url>/magento-2-request-flow/</url>
    <content><![CDATA[<p>Magento 2 的入口是 index.php，有两个：</p>
<ul>
<li><code>&lt;your Magento install dir&gt;/index.php</code></li>
<li><code>&lt;your Magento install dir&gt;/pub/index.php</code></li>
</ul>
<p>简化后的入口像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require __DIR__ . &#x27;/app/bootstrap.php&#x27;;</span><br><span class="line">$bootstrap = \Magento\Framework\App\Bootstrap::create(BP, $_SERVER);</span><br><span class="line">$app = $bootstrap-&gt;createApplication(&#x27;Magento\Framework\App\Http&#x27;);</span><br><span class="line">$bootstrap-&gt;run($app);</span><br></pre></td></tr></table></figure>

<p>第一句，就是将<code>&lt;your Magento install dir&gt;/app/bootstrap.php</code> 包含进来。这个<code>bootstrap.php</code>文件主要做了一件事情，就是将<code>&lt;your Magento install dir&gt;/app/autoload.php</code> 和<code>&lt;your Magento install dir&gt;/app/functions.php</code>包含进来。<code>autoload.php</code>负责了Magneto 系统中所有类的自动加载。<code>functions.php</code>负责翻译用的。</p>
<p>第二句，调用静态方法，返回实例给<code>$bootstrap</code></p>
<p>第三句，调用<code>$bootstrap</code>的<code>createApplication</code>方法，该方法调用 Object Manager 创建了<code>Magento\Framework\App\Http</code> 实例。</p>
<p>第四句，将上一步骤的实例传递给<code>$bootstrap-&gt;run()</code></p>
<p>下面进入<code>\Magento\Framework\App\Bootstrap -&gt; run</code> 看一看，简化后的方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function run(\Magento\Framework\AppInterface $application)</span><br><span class="line">&#123;</span><br><span class="line">    //PART-2-1</span><br><span class="line">    $this-&gt;initErrorHandler();</span><br><span class="line">    $this-&gt;initObjectManager();</span><br><span class="line">    $this-&gt;assertMaintenance();</span><br><span class="line">    $this-&gt;assertInstalled();</span><br><span class="line">    //PART-2-2</span><br><span class="line">    $response = $application-&gt;launch();</span><br><span class="line">    //PART-2-3</span><br><span class="line">    $response-&gt;sendResponse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PART-2-1 handles the sort of housekeeping bits. It initializes the<br>custom error handler, initializes the object manager, checks if our application is in maintenance mode, and checks that it is installed.</p>
<p>PART-2-2 部分调用<code>Magento\Framework\App\Http -&gt; launch()</code> 暂时把<code>$response</code>看作是<code>\Magento\Framework\App\Response\Http</code>类</p>
<p>PART-2-3 调用<code>\Magento\Framework\App\Response\Http</code> 实例的<code>sendResponse</code>方法，该方法在该类的父类<code>\Magento\Framework\HTTP\PhpEnvironment\Response</code>中。这个父类继承自<code>\Zend\Http\PhpEnvironment\Response</code> 不继续深入了。总之，到这个类为止，真正开始输出数据了。</p>
<p>总结一下，到目前为止的流程是：</p>
<ul>
<li>index.php</li>
<li>\Magento\Framework\App\Bootstrap -&gt; run</li>
<li>\Magento\Framework\App\Http -&gt; launch</li>
<li>\Magento\Framework\App\Response\Http -&gt; sendResponse</li>
</ul>
<p>来看<code>\Magento\Framework\App\Http -&gt; launch</code><br>简化后是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function launch()</span><br><span class="line">&#123;</span><br><span class="line">    // PART-3-1</span><br><span class="line">    $frontController = $this-&gt;_objectManager-&gt;get(&#x27;Magento\Framework\App\FrontControllerInterface&#x27;);</span><br><span class="line"></span><br><span class="line">    // PART-3-2</span><br><span class="line">    $result = $frontController-&gt;dispatch($this-&gt;_request);</span><br><span class="line">    if ($result instanceof \Magento\Framework\Controller\ResultInterface) &#123;</span><br><span class="line">        // PART-3-3</span><br><span class="line">        $result-&gt;renderResult($this-&gt;_response);</span><br><span class="line">    &#125; elseif ($result instanceof \Magento\Framework\App\Response\HttpInterface &#123;</span><br><span class="line">        $this-&gt;_response = $result;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        throw new \InvalidArgumentException(&#x27;Invalid return type&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // PART-3-4</span><br><span class="line">    return $this-&gt;_response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PART-3-1 创建一个实现<code>\Magento\Framework\App\FrontControllerInterface</code>接口的类的实例，具体是哪个接口，需要查看di.xml 文件。这个类一般是<code>Magento\Framework\App\FrontController</code>。</p>
<p>PART-3-2 <code>Magento\Framework\App\FrontController -&gt; dispatch</code> 具体的稍后再看。他的返回值一般<code>$result</code> 是<code>\Magento\Framework\Controller\ResultInterface</code>，一般是<code>\Magento\Framework\View\Result\Page</code>类</p>
<p>PART-3-3 执行<code>$result-&gt;renderResult($this-&gt;_response)</code>这一步没有输出，只是对<code>$this-&gt;_response</code>的修改，之后 PART-3-4 把<code>$this-&gt;response</code>返回出去。</p>
<p>再总结一下，流程现在是：</p>
<ul>
<li>index.php</li>
<li>\Magento\Framework\App\Bootstrap -&gt; run</li>
<li>\Magento\Framework\App\Http -&gt; launch</li>
<li>\Magento\Framework\App\FrontController -&gt; dispatch</li>
<li>\Magento\Framework\View\Result\Page -&gt; renderResult</li>
<li>\Magento\Framework\App\Response\Http -&gt; sendResponse</li>
</ul>
<p><code>\Magento\Framework\App\FrontController -&gt; dispatch</code> 需要更深入一下。简化后的方法是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function dispatch(\Magento\Framework\App\RequestInterface $request)</span><br><span class="line">&#123;</span><br><span class="line">    // PART-4-1</span><br><span class="line">    while (!$request-&gt;isDispatched() &amp;&amp; $routingCycleCounter++ &lt; 100) &#123;</span><br><span class="line">        //PART-4-2</span><br><span class="line">        foreach ($this-&gt;_routerList as $router) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                //PART-4-3</span><br><span class="line">                $actionInstance = $router-&gt;match($request);</span><br><span class="line">                if ($actionInstance) &#123;</span><br><span class="line">                    $request-&gt;setDispatched(true);</span><br><span class="line">                    //PART-4-4</span><br><span class="line">                    $result = $actionInstance-&gt;dispatch($request);</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (\Magento\Framework\Exception \NotFoundException $e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    // PART-4-5</span><br><span class="line">    return $result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PART-4-1 和 PART-4-2 给每个<code>$router</code> 100次机会找出匹配项，避免死循环。<br>routers 有以下类型：</p>
<ul>
<li>Magento\Framework\App\Router\Base</li>
<li>Magento\UrlRewrite\Controller\Router</li>
<li>Magento\Cms\Controller\Router</li>
<li>Magento\Framework\App\Router\DefaultRouter</li>
</ul>
<p>他们都实现了<code>\Magento\Framework\App\RouterInterface</code> 以确保他们都实现了<code>match</code>方法。<code>match</code>返回的<code>$actionInstance</code>是一个实现了<code>\Magento\Framework\App\ActionInterface</code>接口的类的实例。</p>
<p>PART-4-4 <code>$actionInstance</code>（比如 controller）继承自<code>\Magento\Framework\App\Action\Action</code> 类，返回<code>\Magento\Framework\App\ResponseInterface</code>。在<code>dispatch</code>方法中会执行<code>controller</code>的<code>execute</code> 方法。</p>
<p>流程现在变成：</p>
<ul>
<li>index.php</li>
<li>\Magento\Framework\App\Bootstrap -&gt; run</li>
<li>\Magento\Framework\App\Http -&gt; launch</li>
<li>\Magento\Framework\App\FrontController -&gt; dispatch</li>
<li>\Magento\Framework\App\Router\Base -&gt; match</li>
<li>\Magento\Framework\App\Action\Action -&gt; dispatch</li>
<li>\Magento\Framework\View\Result\Page -&gt; renderResult</li>
<li>\Magento\Framework\App\Response\Http -&gt; sendResponse</li>
</ul>
<p>总结，对前端开发者来说，controller 返回 Page 类型的对象后，会自动调用该page的 renderResult 方法。<br><strong>Page</strong> and <strong>Layout</strong> is where all the theme translations, layout, and template loading are triggering</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p>Magento 2 Developer’s Guide by Branko Ajzele<br><a href="http://inchoo.net/magento-2/routing-in-magento-2/">Routing in Magento 2</a><br><a href="http://brideo.co.uk/magento2/Request-Flow-In-Magento-2/">Request Flow in Magento 2</a></p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Store Email Addresses &gt; Sender Name 有规则限制</title>
    <url>/magento-2-store-email-addresses-sender-name-%E6%9C%89%E8%A7%84%E5%88%99%E9%99%90%E5%88%B6/</url>
    <content><![CDATA[<p>如果 Store Email Addresses &gt; Sender Name  配置成中文，那么邮件就发不出去了。 具体看<code>vendor\zendframework\zend-mail\src\Header\HeaderValue.php::isValid</code> 部分的规则。</p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 Templates: Use $block or $this</title>
    <url>/magento-2-templates-use-block-or-this/</url>
    <content><![CDATA[<p>在 Magento 2 的 templates 中使用 <code>$block</code> 还是 <code>$this</code> ？ 结论：<code>$block</code> 和 <code>$this</code> 指向同一个 block 对象，但是建议使用 <code>$block</code> 不建议使用 <code>$this</code>。 在 M2 的 template 中，<code>$this</code> 指向的不再是该 template 的 block 对象，而是一个 template 类：<code>Magento\Framework\View\TemplateEngine\Php</code> 以之前的 ThankIT_HelloWorld 模块为基础，修改以下文件，进行实验。 File：app\code\ThankIT\HelloWorld\view\frontend\templates\index\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to hellomagento2.com</span><br><span class="line">&lt;?php</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo get_class($this);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo $block-&gt;sayHello();</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">// discouraged</span><br><span class="line">echo $this-&gt;sayHello();</span><br></pre></td></tr></table></figure>

<p>File: app\code\ThankIT\HelloWorld\Block\Index\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Index;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Index extends Template</span><br><span class="line">&#123;</span><br><span class="line">    # ... other code</span><br><span class="line">    public function sayHello()</span><br><span class="line">    &#123;</span><br><span class="line">        return __(&#x27;Hello World&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    #... ohter code ...</span><br></pre></td></tr></table></figure>

<p>那么访问我们的 url <code>http://example.com/helloworld/index/index/</code> 得到的类名正是 <code>Magento\Framework\View\TemplateEngine\Php</code> 查看该类的以下方法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Redirects methods calls to the current block</span><br><span class="line"> *</span><br><span class="line"> * This is needed because the templates are included in the context of this engine</span><br><span class="line"> * rather than in the context of the block.</span><br><span class="line"> *</span><br><span class="line"> * @param   string $method</span><br><span class="line"> * @param   array  $args</span><br><span class="line"> * @return  mixed</span><br><span class="line"> */</span><br><span class="line">public function __call($method, $args)</span><br><span class="line">&#123;</span><br><span class="line">    return call_user_func_array([$this-&gt;_currentBlock, $method], $args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就解释了为什么我们可以通过 <code>$this</code> 来调用 block 中的方法。 查看该类的以下方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Render output</span><br><span class="line"> *</span><br><span class="line"> * Include the named PHTML template using the given block as the $this</span><br><span class="line"> * reference, though only public methods will be accessible.</span><br><span class="line"> *</span><br><span class="line"> * @param BlockInterface           $block</span><br><span class="line"> * @param string                   $fileName</span><br><span class="line"> * @param array                    $dictionary</span><br><span class="line"> * @return string</span><br><span class="line"> * @throws \Exception</span><br><span class="line"> */</span><br><span class="line">public function render(BlockInterface $block, $fileName, array $dictionary = [])</span><br><span class="line">&#123;</span><br><span class="line">    ob_start();</span><br><span class="line">    try &#123;</span><br><span class="line">        $tmpBlock = $this-&gt;_currentBlock;</span><br><span class="line">        $this-&gt;_currentBlock = $block;</span><br><span class="line">        extract($dictionary, EXTR_SKIP);</span><br><span class="line">        include $fileName;</span><br><span class="line">        $this-&gt;_currentBlock = $tmpBlock;</span><br><span class="line">    &#125; catch (\Exception $exception) &#123;</span><br><span class="line">        ob_end_clean();</span><br><span class="line">        throw $exception;</span><br><span class="line">    &#125;</span><br><span class="line">    /** Get output buffer. */</span><br><span class="line">    $output = ob_get_clean();</span><br><span class="line">    return $output;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>include $fileName;</code> 前，<code>$this-&gt;_currentBlock = $block</code> ，而在 template 中，<code>$block</code> 和 <code>$this-&gt;_currentBlock</code> 是一样的。这就解释了为什么我们可以通过 <code>$block</code> 来访问 block 中的方法。 但是 <code>The php sniffer with the EcgM2 standards</code> 不建议使用 <code>$this</code> ，所以我们还是用 <code>$block</code> 吧。</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p><a href="https://magento.stackexchange.com/questions/103096/magento-2-templates-use-block-or-this">Magento 2 Templates: Use <code>$block</code> or <code>$this</code>?</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>Magento 2 template</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 用户使用手册 目录索引</title>
    <url>/magento-2-user-guide-contents/</url>
    <content><![CDATA[<p><em>前言：该目录索引记录了本网站内目前翻译出的文档结构，会不定期更新。后期有空的时候会增加目录树的展开收起，方便阅读。欢迎给我提建议。谢谢！</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户使用手册是非常详细的，翻译过程中有的地方博主都觉得太啰嗦了。但是我们要理解用户手册设计的目的，目的是当你在使用Magento 2的时候遇到问题，通过查手册就可以了解到详细内容，他实际上是一本说明书。说明书，你懂的，枯燥而且内容间的联系比较少，就算你把说明书全读一遍，还是会不明白怎么做。所以他不是很好的入门教程，他是遇到问题时的查询手册。当然，如果你有兴趣通读的话，也会有收获的。比如会发现Magento 的一些操作共性。</span><br><span class="line">博主的翻译实际上根据自己需要来推进的，研究哪一部分，就会顺道翻译出来，所以整个文档的翻译完工日，是不确定的哦！╮(～▽～)╭</span><br></pre></td></tr></table></figure>

<ul>
<li>Getting Started<ul>
<li><a href="/configuration-basic/">基本设置 (Basic Configuration)</a><ul>
<li><a href="/admin/">管理后台 (Store Admin)</a><ul>
<li><a href="/admin-signin/">Admin 登录 (Admin Sign In)</a></li>
<li><a href="/admin-account/">管理员账户 (Your Admin Account)</a></li>
<li><a href="/admin-menu/">管理后台菜单 (Admin Sidebar)</a></li>
<li><a href="/admin-workspace/">管理工具 (Admin Workspace)</a><ul>
<li><a href="/admin-dashboard/">控制面板 (Dashboard)</a></li>
<li><a href="/admin-message-inbox/">后台消息收件箱 (Message Inbox)</a></li>
<li><a href="/admin-global-search/">后台全局搜索 (Global Search)</a></li>
<li><a href="/grid-controls/">表格控件 (Grid Controls)</a><ul>
<li><a href="/admin-grid-layout/">表格布局 (Grid Layout)</a></li>
</ul>
</li>
<li><a href="/admin-actions-control/">操作控件 (Actions Control)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/store-details/">店铺详情 (Store Details)</a><ul>
<li><a href="/store-information/">店铺信息 (Store Information)</a></li>
<li><a href="/locale-options/">区域设置选项 (Locale Options)</a></li>
<li><a href="/state-options/">行政区域选项 (State Options)</a></li>
<li><a href="/country-options/">国家选项 (Country Options)</a></li>
<li><a href="/merchant-location/">商户位置 (Merchant Location)</a></li>
<li><a href="/currency-overview/">货币 (Currency)</a></li>
<li><a href="/store-email-addresses/">店铺邮箱 (Store Email Addresses)</a></li>
<li><a href="/contact-us/">联系我们 (Contact Us)</a></li>
</ul>
</li>
<li><a href="/storefront-branding/">店面品牌 (Storefront Branding)</a><ul>
<li><a href="/logo-upload/">上传您的 Logo (Uploading Your Logo)</a></li>
<li><a href="/favicon/">上传 Favicon (Adding a Favicon)</a></li>
<li><a href="/welcome-message/">欢迎信息 (Welcome Message)</a></li>
<li><a href="/copyright-notice/">版权声明 (Copyright Notice)</a></li>
<li><a href="/demo-notice/">店铺演示提示 (Store Demo Notice)</a></li>
</ul>
</li>
<li><a href="/websites-stores-views/">网站(Websites), 店铺(Stores) 和 视图(Views)</a><ul>
<li><a href="/configuration-scope/">配置范围 (Scope)(out of date)</a></li>
<li><a href="/store-mode-single/">单店模式 (Single Store Mode)</a></li>
</ul>
</li>
<li>行业规范</li>
</ul>
</li>
</ul>
</li>
<li>products<ul>
<li><a href="/products-menu/">商品菜单 (Products Menu)</a><ul>
<li><a href="/catalog-workspace/">产品目录工作区 (Catalog Workspace)</a><ul>
<li><a href="/product-scope/">产品作用范围 (Product Scope)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/product-create/">创建商品 (Creating Products)</a><ul>
<li><a href="/catalog-urls/">目录 URL (Catalog URLs)</a><ul>
<li><a href="/catalog-urls-dynamic-media/">动态媒体网址 (Dynamic Media URLs)</a></li>
</ul>
</li>
<li><a href="/product-workspace/">产品工作区 (Product Workspace)</a><ul>
<li><a href="/product-fields-autogenerated/">默认字段值 (Default Field Values)</a></li>
</ul>
</li>
<li><a href="/product-types/">商品类型 (Product Types)</a></li>
<li><a href="/product-create-simple/">简单商品 (Simple Product)</a></li>
<li><a href="/product-create-configurable/">可配置商品 (Configurable Product)</a><ul>
<li><a href="/product-create-configurable-add-configurations">可配置商品添加配置项 (Adding Configurations)</a></li>
</ul>
</li>
<li><a href="/product-create-grouped/">组合商品 (Grouped Product)</a></li>
<li><a href="/product-create-virtual/">虚拟商品 (Virtual Product)</a></li>
<li><a href="/product-create-bundle/">捆绑商品 (Bundle Product)</a></li>
<li><a href="/product-create-downloadable/">可下载商品 (Downloadable Product)</a><ul>
<li><a href="/product-download-options/">配置下载选项 (Configuring Download Options)</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/settings-basic/">基本设置 （Basic Settings）</a><ul>
<li><a href="/settings-basic-product-details/">商品详情（Product Details）</a></li>
<li><a href="/settings-basic-image-management/">图像和视频（Images and Video）</a><ul>
<li><a href="/product-image-upload/">上传产品图片（Uploading Product Images）</a></li>
<li><a href="/product-video/">添加产品视频 (Adding Product Video)</a></li>
<li><a href="/media-gallery/">媒体库 (Media Gallery)</a></li>
<li><a href="/product-image-placeholders/">占位图 (Placeholders)</a></li>
<li><a href="/product-image-watermarks/">水印 (Watermarks)</a></li>
<li><a href="/swatches/">色板 (Swatches)</a><ul>
<li><a href="/swatch-create/">创建色板 (Creating Swatches)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Product Settings</li>
<li>Categories<ul>
<li>Creating Categories<ul>
<li><a href="/category-root/">根类别 (Root Categories)</a></li>
</ul>
</li>
</ul>
</li>
<li>Attributes</li>
</ul>
</li>
<li>Marketing<ul>
<li>Communications<ul>
<li><a href="/variables/">使用变量 (Using Variables)</a><ul>
<li><a href="/variables-predefined/">添加预定义的变量 (Adding Predefined Variables)</a></li>
<li><a href="/variables-custom/">添加自定义变量 (Adding Custom Variables)</a></li>
<li><a href="/markup-tags/">Markup Tags</a><ul>
<li><a href="/markup-tags-links/">在链接中使用 Markup Tags(Using Markup Tags in Links)</a></li>
</ul>
</li>
<li><a href="/catalog-urls-dynamic-media/">动态媒体网址 (Dynamic Media URLs)</a></li>
<li><a href="/variables-reference/">变量参考列表 (Variable Reference)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Content<ul>
<li>Elements<ul>
<li>Content Elements Menu<ul>
<li><a href="/pages/">页面 Pages</a><ul>
<li><a href="/pages-core/">核心内容页 (Core Content Pages)</a><ul>
<li><a href="/pages-default/">默认页面 Default Pages</a></li>
</ul>
</li>
<li><a href="/pages-workspace/">页面工作区 Page Workspace Controls</a><ul>
<li>Page Search</li>
<li>Page Actions</li>
<li>Grid Layout</li>
</ul>
</li>
<li><a href="/page-add/">新增页面 (Adding a New Page)</a><ul>
<li><a href="/page-home-new/">更改首页 (Changing the Home Page)</a></li>
</ul>
</li>
<li><a href="/media-storage/">媒体库 (Media Storage)</a></li>
<li>Using the Editor<ul>
<li>Inserting a Link</li>
<li>Inserting an Image</li>
<li>Inserting a Widget</li>
<li>Inserting a Variable</li>
<li>Configuring the Editor</li>
</ul>
</li>
</ul>
</li>
<li><a href="/blocks/">Blocks</a><ul>
<li><a href="/block-add/">新增 Blocks (Adding New Blocks)</a><ul>
<li>Adding Social Plugins</li>
<li>Adding a Lightbox or Slider</li>
</ul>
</li>
<li><a href="/block-position/">定位 Blocks (Positioning Blocks)</a><ul>
<li><a href="/widget-static-block/">使用 widget (Using a Widget)</a></li>
<li><a href="/layout-update-place-block/">Using a Layout Update</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="/widgets/">Widgets</a><ul>
<li><a href="/widget-types/">小部件类型 (Widgets Types)</a></li>
<li><a href="/widget-create/">创建小部件 (Creating a Widget)</a><ul>
<li><a href="/widget-new-products-list/">新产品列表 (New Products List)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Design &amp; Theme<ul>
<li><a href="/design-menu/">Design Menu</a><ul>
<li><a href="/design-configuration/">Design Configuration</a></li>
<li><a href="/page-setup/">Page Setup</a><ul>
<li>HTML Head</li>
<li>Header</li>
<li>Footer</li>
</ul>
</li>
<li>Page Layout<ul>
<li><a href="/standard-page-layouts/">Standard Block Layout</a></li>
<li><a href="/page-layout-examples/">Storefront Examples</a></li>
<li>Layout Updates (这一部分官方未更正)</li>
</ul>
</li>
<li>Themes</li>
<li>Scheduling Design Changes</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Sales<ul>
<li>Shipping<ul>
<li><a href="/shipping-settings/">发货设置 (Shipping Settings)</a><ul>
<li><a href="/point-of-origin/">起点 (Point of Origin)</a></li>
<li><a href="/shipping-multiaddress/">多个地址 (Multiple Addresses)</a></li>
<li><a href="/shipping-policy-parameters/">发货条款 (Shipping Policy)</a></li>
</ul>
</li>
<li><a href="/shipping-methods/">基本的送货方式 (Basic Shipping Methods)</a><ul>
<li><a href="/shipping-free/">包邮 (Free Shipping)</a></li>
<li><a href="/shipping-flat-rate/">固定运费 (Flat Rate Shipping)</a></li>
<li><a href="/shipping-table-rate/">表费率 (Table Rates)</a></li>
<li><a href="/weight-dimensional/">体积重量 (Dimensional Weight)</a></li>
</ul>
</li>
<li>Carriers<ul>
<li><a href="/ups/">UPS</a></li>
</ul>
</li>
<li>Shipping Labels<ul>
<li><a href="/shipping-label-workflow/">Shipping Label Workflow</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2.0/2.1 表单验证翻译 bug 修复</title>
    <url>/magento-2-validation-js-bug-fix/</url>
    <content><![CDATA[<p><em>谢绝转载！</em> 这是 Magento 2 中文化问题的一部分。如果你已经阅读过 <a href="/magento-2-zh-hans-cn-csv/">Magento 2 中文化问题（原创）</a> 并且经过实践了，那么你可能还会发现有些英文没有被中文化。 其中之一就是表单验证中的错误提示。本篇就介绍这个 bug 如何修复。Magento 2.2 现在尚在开发中，但是已经修复了这个问题。所以到 2.2 正式发布的时候应该就没有这个问题了。 表单验证的时候，使用到了 <code>lib/web/mage/validation.js</code> 这个 JS。 查看这个文件，比方说下面这一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line"> &quot;validate-email&quot;: [</span><br><span class="line">            function (v) &#123;</span><br><span class="line">                return $.mage.isEmptyNoTrim(v)  /^([a-z0-9,!\#\$%&amp;&#x27;\*\+\/=\?\^_`\&#123;\\&#125;~-][\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9,!\#\$%&amp;&#x27;\*\+\/=\?\^_`\&#123;\\&#125;~-][\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*@([a-z0-9-][\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z0-9-][\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*\.(([a-z][\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])&#123;2,&#125;)$/i.test(v);</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x27;Please enter a valid email address (Ex: johndoe@domain.com).&#x27;</span><br><span class="line">        ],</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>这里的错误提示 <code>&#39;Please enter a valid email address (Ex: johndoe@domain.com).&#39;</code>并没有进行翻译。 Magento 2 中进行翻译使用的是 <code>&#39;mage/translate&#39;</code> ，引入它，然后 <code>$.mage.__(&#39;Please enter a valid email %1 address (Ex: johndoe@domain.com).&#39;)</code> 会得到翻译后的内容。而他取的翻译短语来自于 <code>js-translation.json</code> 。这是一个根据翻译 csv 文件自动生成的文件。 如果你的翻译没有效果，需要检查 csv 文件中是否有了，<code>js-translation.json</code> 中是否有了，还有翻译短语是否和需要翻译的完全一致。 如果要重新生成 <code>js-translation.json</code> 可以使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf pub/static/*</span><br><span class="line">rm -rf var/view_preprocessed/*</span><br><span class="line">php bin/magento setup:static-content:deploy</span><br></pre></td></tr></table></figure>

<p>下面说修复方法。 下载这个文件替换掉原先的文件。 <a href="https://github.com/magento/magento2/blob/develop/lib/web/mage/validation.js">https://github.com/magento/magento2/blob/develop/lib/web/mage/validation.js</a> 替换可以在 theme 中进行，我们知道 theme 是可以覆盖掉同路径的文件的。 所以可以在正在使用的 theme 文件中的 web 路径下，创建 <code>mage/validation.js</code> 这样就将原来 <code>lib/web/mage/validation.js</code> 的覆盖掉了。 也可以使用 <code>requirejs-config.js</code> 来达到目的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    &quot;map&quot;: &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &#x27;mage/validation&#x27;: &#x27;YourVendor_CoreBugFix/js/model/validation&#x27;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>当然解决办法不止一种。我们也可以在模板层面，删掉不能正确翻译的验证的方法，或者再不成对调用的 js 硬编码。不过都不建议直接修改源码，而应采用覆写的方法。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://github.com/magento/magento2/issues/8179">https://github.com/magento/magento2/issues/8179</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 中文化问题（原创）</title>
    <url>/magento-2-zh-hans-cn-csv/</url>
    <content><![CDATA[<p><em>转载请注明出处</em> Magento 作为多语言的电商系统，提供了很全面的多语言支持，下面我将总结一下目前我所了解的 Magento 中文化的知识，欢迎补充！谢绝转载。以下中文化指的的简体中文。</p>
<h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a><a href="#%E8%AE%BE%E7%BD%AE"></a>设置</h2><p>首先我们从简单的使用谈起。 如果你希望你的前台是中文，那么请在后台 <strong>Stores</strong> &gt; <strong>Configuration</strong> &gt; <strong>General</strong> &gt; <strong>Local</strong> 中设置 <strong>Local</strong> 为 Chinese（China） 我们知道 <strong>*Stores</strong> &gt; <strong>Configuration</strong> 的设置是有作用域的，在左上角如下图， <img src="/wp-content/uploads/2016/12/about-zh-hans-cn-csv-1.png" alt="Magento 2 后台设置"> 你的设置会应用到选定的 Store view 上，这样就实现了不同的 store view 或 website store 可以使用不同的语言。 如果你希望你的账户后台是中文，那么请在后台你的账户 <strong>Account Setting</strong> &gt; <strong>Interface Local</strong> 中设置 <strong>Interface Local</strong> 为 Chinese（China） 既然是账户中的设置，那么不同的账户当然可以设置为不同的语言，这样也是非常体贴到位的。</p>
<h2 id="中文包"><a href="#中文包" class="headerlink" title="中文包"></a><a href="#%E4%B8%AD%E6%96%87%E5%8C%85"></a>中文包</h2><p>上面的设置都到位了以后，你会发现毛线变化也没有，这很正常，因为你还缺少中文包。Magento 2 官方的语言包地址是 <a href="https://crowdin.com/project/magento-2">https://crowdin.com/project/magento-2</a> 从这里下载的语言包，打开后会发现他是由许多个文件夹组成的，并非单个的包。你从其他地方下载的语言包大多数都是这里来的，有的添加了使用说明，告诉你把他们复制到你的目录下。这个说法<strong>不完全正确</strong>。 首先这个语言包是按照 github 上的目录结构组织的，如果你不是通过 composer 或者 git 安装的 Magento 2 ，我的意思是 Magento 的模块都在 vendor 目录下，那么很明显，这个包不适合你。复制不能让语言文件到达相应的目录。另一个问题是，如果你使用的是简体中文，那么简体中文的翻译文件必须是 <code>zh_Hans_CN.csv</code> ，但是这个包的翻译文件是 <code>zh_CN.csv</code>，所以即使你的目录结构是正确的，还是没有效果。 如果你仔细看上面的官方地址，你会看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To build and download translations go to http://107.170.242.99/.</span><br></pre></td></tr></table></figure>

<p>那就戳进去看看咯，这个地址提供了单个的包，找到 <code>zh_CN</code> 然后下载后改名为 <code>zh_Hans_CN.csv</code> 然后丢到相应的位置就可以了。</p>
<h2 id="中文包的位置"><a href="#中文包的位置" class="headerlink" title="中文包的位置"></a><a href="#%E4%B8%AD%E6%96%87%E5%8C%85%E7%9A%84%E4%BD%8D%E7%BD%AE"></a>中文包的位置</h2><p>接下来我们来说位置。Magento 2 的 Component 主要有三种：module、theme、lanaguage package。在 module 和 theme 中 都有 <code>i18n</code> 这个文件夹（如果没有可以自己建），这个文件夹负责放翻译文件。 经过测试，博主发现，module 中 <code>i18n</code> 下的翻译文件会被应用到前台和后台（假设你前后台都是简体中文的话），但是 theme 中的翻译只会被应用到前台。所以理论上讲，你下载了上面的包改名后丢到任意的 module 中，都是可以的。 至于 language package ，他当然前后台都得负责了，关于 language package 的继承问题，还是以后用到的时候再探索吧。 博主的建议是把整站的中文包丢到 language package 里面比较好。就是说 Magento 自带模块的中文翻译放到 language package 中，你购买的主题，插件什么的中文包放在自己对应的目录下，这样会清晰很多。 Magento 拥有中文的 language package，请各位寻找下，如果包都在 vendor 下，那么在该目录下找名字叫 <code>language-zh_hans_cn</code> 的，如果你是 git 上那种目录结构，那么在 <code>app/i18n/Magento/zh_Hans_CN</code> 下 好了，把你的包丢进去，刷新缓存，有效果了吧？</p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a><a href="#%E5%AD%98%E5%9C%A8%E7%9A%84%E9%97%AE%E9%A2%98"></a>存在的问题</h2><p>官方的语言包托管在 Crowdin 上，如果你注册一下，也可以参与翻译，反正就是给有兴趣锻炼翻译的人准备的，而且会有机器翻译提示，质量不是很好。博主查看了语言包的内容，有些实在是风马牛不相及，当然不相关的还是很少的。 另一个问题是 Magento 2 每次有新版本，那么需要翻译的字段都会有一些差异或者是增减。很明显，如果等待官方的更新的话，估计是不太可能了。 然后就是翻译的结构问题。打个比方来说，英文中使用 <code>127 records found</code> 这里的 127 不在翻译短语中，翻译短语是<code>records found</code>，翻成中文就是 <code>找到的记录</code> ，连起来变成 <code>127 找到的记录</code>， 是不是很别扭？因为中英文的句子结构不同。看起来这种事情也没有更好的解决办法了。 最后一个问题就是翻译的情境问题，在 csv 里面你可不知道这个短语在什么情境下面，所以翻译可能不是很贴切，有一些词汇还和业务逻辑有关，如果不是很了解业务逻辑，还真是不可能找到合适的词汇。 好吧，说了这么多，其实总结起来就是中文化是要长期迭代的过程。需要大家的共同努力。 <strong>博主根据上面的官方翻译文件进行了部分校正，发布在 github ，大家可以去下载</strong> 地址是：<a href="https://github.com/PiscesThankIT/zh_Hans_CN">https://github.com/PiscesThankIT/zh_Hans_CN</a> 我的想法是，既然我们有了一个还不错的基础包，<strong>请下载使用的人，在发现有需要改进的词汇或者问题时，在我的 github 下给我提评论，或者在我的博客上评论，或者将你更改后的文件发给我（<a href="mailto:&#49;&#x35;&#49;&#x38;&#x35;&#50;&#53;&#x38;&#x36;&#x32;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;">&#49;&#x35;&#49;&#x38;&#x35;&#50;&#53;&#x38;&#x36;&#x32;&#64;&#113;&#113;&#x2e;&#99;&#111;&#x6d;</a>），我更正后更新到 github 上，这样我们就有一个正向的循环，大家都能受益。</strong></p>
<h2 id="如何更正中文包"><a href="#如何更正中文包" class="headerlink" title="如何更正中文包"></a><a href="#%E5%A6%82%E4%BD%95%E6%9B%B4%E6%AD%A3%E4%B8%AD%E6%96%87%E5%8C%85"></a>如何更正中文包</h2><p>很多朋友不知道如何修改 csv 文件。csv 文件就是纯文本文件，只是用逗号分隔符来分割字段。你完全可以用记事本打开，不过记事本打开实在是很不好查看。默认情况下，你的电脑一定会替你用 EXCEL 打开， 用它打开有中文是会乱码的，要想不乱码，方法有点复杂，修改又有麻烦，所以博主还是放弃了这个念头。 你可以用任何编辑器打开，比如 notepad sublime 之类。博主觉得 notepad 编辑 csv 比较好。他的文件搜索在搜模板文件的时候真的很好用（题外话）。 有朋友推荐使用 csv 的编辑器，当然针对 csv 的编辑器，那查看起来真是很舒服的，but，大部分 csv 编辑器中文依然会乱码，因为不支持 unicode 编码的方式吧。博主找到一个很好用的，可惜免费版不能进行修改，破解版刚下载就提示有毒，吓得宝宝还是不要用了。这个编辑器的名字叫 Ron’s Editor ，不差钱的朋友可以支持下开发者哈。 回到正题，我们现在已经有合适的编辑器来编辑 csv 文件了。打开它，会发现至少有两栏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;Report Bugs&quot;,报告错误,module,Magento_Backend</span><br></pre></td></tr></table></figure>

<p>相信不用说你也知道了，就是第一栏翻译成第二栏呗。后面两个栏，博主还没有搞清楚具体的作用。官方文档说是 lanaguage package 要有四栏，不过博主用两栏测试，效果也没有什么差别。这个再说再说。。 好了，把翻译不到位的改成你要的短语，然后清缓存，就可以看到效果了。</p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Magento 2中文化</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 中的 Controller</title>
    <url>/magento-2-%E4%B8%AD%E7%9A%84-controller/</url>
    <content><![CDATA[<p>本篇围绕 Magento 2 的 Controller ，介绍控制器是怎么工作的，怎么创建，它和 layout 配置文件配合，怎么输出一个页面，以及控制器中经常用到的两个方法 <code>_redirect()</code> 和 <code>_forward()</code> 。 控制器在 Magento 2 中是很重要的，一般而言，对 PHP MVC 框架来说也是很重要的。它的功能是接受请求，处理请求和呈现页面(render page)。 模块的 Controller 目录下有一个或多个文件，每个文件都是一个单独的 class ，每个 class 都有一个 <code>execute</code> 方法。Magento 2 中有两种类型的控制器，一种是前台控制器，另一种是后台控制器。他们大体上是一样的流程，后台控制器稍微特别点，它拥有一个检查权限的方法。</p>
<h2 id="控制器怎么工作的？"><a href="#控制器怎么工作的？" class="headerlink" title="控制器怎么工作的？"></a><a href="#%E6%8E%A7%E5%88%B6%E5%99%A8%E6%80%8E%E4%B9%88%E5%B7%A5%E4%BD%9C%E7%9A%84%EF%BC%9F"></a>控制器怎么工作的？</h2><p>它从终端用户（浏览器或命令行）接受请求，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/route_name/controller/action</span><br></pre></td></tr></table></figure>

<ul>
<li><code>route_name</code> 是一个在 routes.xml 中设置的唯一名称</li>
<li><code>controller</code> 是 Controller 目录下的文件夹</li>
<li><code>action</code> 是一个有 execute 方法的 class</li>
</ul>
<p>Magento 2 系统中处理请求，路由到对应控制器的类是 frontController (<code>Magento\Framework\App\FrontController</code>) 看代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">foreach ($this-&gt;_routerList as $router) &#123;</span><br><span class="line">   try &#123;</span><br><span class="line">      $actionInstance = $router-&gt;match($request);</span><br><span class="line">   …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果找到匹配的 action 类，那么就会执行其中的 <code>execute</code> 方法。</p>
<h2 id="如何创建控制器"><a href="#如何创建控制器" class="headerlink" title="如何创建控制器"></a><a href="#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%99%A8"></a>如何创建控制器</h2><p>如果还不清楚怎么创建模块，请参考 <a href="/%E5%88%9B%E5%BB%BA-magento-2-hello-world-simple-module/">创建 Magento 2 Hello World Simple Module</a>。本篇以该文中创建的模块为基础。该文末尾可以找到对应的代码下载地址，可以下载后跟着本文的步骤做。本文末尾也附带完成后的代码供比对。 要创建控制器，首先需要在模块目录下创建 <code>Controller</code> 目录。 假设我们在 <code>ThankIT_HelloWorld</code> 模块的基础上创建一个 <code>Index</code> controller 和一个 <code>Index</code> action</p>
<h3 id="创建-routes-xml"><a href="#创建-routes-xml" class="headerlink" title="创建 routes.xml"></a><a href="#%E5%88%9B%E5%BB%BA-routes.xml"></a>创建 routes.xml</h3><p>File: etc&#x2F;frontend&#x2F;routes.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;standard&quot;&gt;</span><br><span class="line">        &lt;route frontName=&quot;helloworld&quot; id=&quot;helloworld&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;ThankIT_HelloWorld&quot;/&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a><a href="#%E5%88%9B%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%99%A8"></a>创建控制器</h3><p>File: Controller&#x2F;Index&#x2F;Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Index;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Framework\App\Action\Action &#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    )</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所有 controller 都必须继承自 <code>\Magento\Framework\App\Action\Action</code> 该类有 <code>dispatch</code> 方法，就是 <code>dispatch</code> 方法会调用 <code>execute</code> 方法。在 <code>execute</code> 方法中我们放控制器的逻辑并返回响应结果。</p>
<h3 id="创建-layout-文件"><a href="#创建-layout-文件" class="headerlink" title="创建 layout 文件"></a><a href="#%E5%88%9B%E5%BB%BA-layout-%E6%96%87%E4%BB%B6"></a>创建 layout 文件</h3><p>File: view&#x2F;frontend&#x2F;layout&#x2F;helloworld_index_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; ?&gt;</span><br><span class="line">&lt;page layout=&quot;1column&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\HelloWorld\Block\Index\Index&quot; name=&quot;index.index&quot; template=&quot;ThankIT_HelloWorld::index/index.phtml&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建-Block"><a href="#创建-Block" class="headerlink" title="创建 Block"></a><a href="#%E5%88%9B%E5%BB%BA-block"></a>创建 Block</h3><p>File: app\code\ThankIT\HelloWorld\Block\Index\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Block\Index;</span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Index extends Template</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建-template"><a href="#创建-template" class="headerlink" title="创建 template"></a><a href="#%E5%88%9B%E5%BB%BA-template"></a>创建 template</h3><p>File: view&#x2F;frontend&#x2F;templates&#x2F;index&#x2F;index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to hellomagento2.com</span><br></pre></td></tr></table></figure>

<h3 id="刷新缓存"><a href="#刷新缓存" class="headerlink" title="刷新缓存"></a><a href="#%E5%88%B7%E6%96%B0%E7%BC%93%E5%AD%98"></a>刷新缓存</h3><p>命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento cache:flush</span><br></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a href="#%E6%B5%8B%E8%AF%95"></a>测试</h3><p>浏览器中打开<code>http://&lt;yourhost.com&gt;/helloworld/index/index</code> 或者 <code>http://&lt;yourhost.com&gt;/helloworld/</code> 我们就可以看到结果了，这次不是纯字符串哦。 <img src="/wp-content/uploads/2017/08/How-to-create-Controllers-in-Magento-2.png" alt="How to create Controllers in Magento 2"></p>
<h2 id="Permission-ACL"><a href="#Permission-ACL" class="headerlink" title="Permission - ACL"></a><a href="#permission---acl"></a>Permission - ACL</h2><p>参考 <a href="/magento-2-admin-acl-access-control-lists">Magento 2 Admin ACL Access Control Lists</a></p>
<h2 id="Magento-2-控制的其他方法"><a href="#Magento-2-控制的其他方法" class="headerlink" title="Magento 2 控制的其他方法"></a><a href="#magento-2-%E6%8E%A7%E5%88%B6%E7%9A%84%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95"></a>Magento 2 控制的其他方法</h2><h3 id="Forward-method"><a href="#Forward-method" class="headerlink" title="Forward method"></a><a href="#forward-method"></a>Forward method</h3><p><code>_forward()</code> protected 方法会将请求转向其他 <code>controller/action</code> 但是用户在浏览器中看到的 URL 是不变的。 例如: File: Controller&#x2F;Index&#x2F;Forward.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Index;</span><br><span class="line"></span><br><span class="line">class Forward extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_forward(&#x27;index&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建好以后 <code>cache:flush</code> 然后访问 <code>http://&lt;yourhost.com&gt;/helloworld/index/forward</code> 会看到和访问 <code>http://&lt;yourhost.com&gt;/helloworld/index/index</code> 一样的结果，但是我们的 url 并没有改变。 <code>_forward()</code> 还有其他参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function _forward($action, $controller = null, $module = null, array $params = null)</span><br></pre></td></tr></table></figure>

<p>其中的 <code>$module</code> 指的是 route_name 对应在 routes.xml 中设置的唯一名称。</p>
<h3 id="Redirect-method"><a href="#Redirect-method" class="headerlink" title="Redirect method"></a><a href="#redirect-method"></a>Redirect method</h3><p><code>_redirect()</code> 除了会会将请求转向其他 <code>controller/action</code> ，响应的 URL 也会发生改变。 可将上述例子中的 <code>$this-&gt;_forward(&#39;index&#39;);</code> 改成 <code>$this-&gt;_redirect(&#39;*/*/index&#39;);</code> 查看效果。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/how-to-create-controllers-magento-2.html">how to create Controllers in Magento 2</a></p>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a><a href="#%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD"></a>代码下载</h2><p><a href="https://github.com/PiscesThankIT/ThankIT_HelloWorld_2">相关代码下载</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>forward</tag>
        <tag>Magento 2 Controller</tag>
        <tag>redirect</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 中翻译的优先级</title>
    <url>/magento-2-%E4%B8%AD%E7%BF%BB%E8%AF%91%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<p>我们已经知道 module、theme、language package 都可以用来翻译。 还有 <a href="http://docs.magento.com/m2/ee/user_guide/system/translate-inline.html">Translate Inline 工具</a>。 那么这些翻译的优先级（从高到低）是怎样的呢？ <code>vendor\magento\framework\Translate.php #205</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;_loadModuleTranslation();</span><br><span class="line">$this-&gt;_loadPackTranslation();</span><br><span class="line">$this-&gt;_loadThemeTranslation();</span><br><span class="line">$this-&gt;_loadDbTranslation();</span><br></pre></td></tr></table></figure>

<p>所以优先级是： translate inline 存在数据库中的 theme 中的 language package 中的 module 中的 注意，后台也是有主题的。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#%E5%8F%82%E8%80%83"></a>参考</h2><p><a href="https://gist.github.com/antonmakarenko/7538216">Translation Mechanism in Magento 2.x Platform</a></p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 中文化与 language package（原创）</title>
    <url>/magento-2-%E4%B8%AD%E6%96%87%E5%8C%96%E4%B8%8E-language-package%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89/</url>
    <content><![CDATA[<p><em>转载请注明出处</em> 关于 Magento 2 的中文化，之前博主已经写过三篇文章，感兴趣的请参阅本文的相关阅读部分。 下面我们来回顾一下。</p>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a><a href="#%E5%9B%9E%E9%A1%BE"></a>回顾</h2><p>首先是设置问题。 前台设置，<em>Stores &gt; Configuration &gt; General &gt; Local</em> 中设置 Local 为 Chinese（China） 账户设置，后台你的账户 <em>Account Setting &gt; Interface Local 中设置 Interface Local</em> 为 Chinese（China） Magento 2 的 component 有三种，module、theme、language package。 module 和 theme 中都有 <code>i18n</code> ，只要把 zh_Hans_CN.csv 放进去就可以了。module 中 <code>i18n</code> 下的翻译文件会被应用到前台和后台（假设你前后台都是简体中文的话），但是 theme 中的翻译只会被应用到前台。 提取的 csv 有四列，但是其实只有前两列有用。重复的字段，实际使用的是最后一个翻译值。 之前的文章博主教大家的方法是，寻找 Magento 自带的 language package。这个有一些局限性。 主要问题就在于，假如我们采用命令行的方式更新，那么文件会被退回到初始状态，我们放进去的 zh_Hans_CN 会被丢掉。 所以更妥当的做法是，我们建一个自己的 language package，或者下载一个，然后放到 app&#x2F;i18n 下面。</p>
<h2 id="如何创建-language-package"><a href="#如何创建-language-package" class="headerlink" title="如何创建 language package"></a><a href="#%E5%A6%82%E4%BD%95%E5%88%9B%E5%BB%BA-language-package"></a>如何创建 language package</h2><p>以创建中文包为例，但是方法是通用的。 我们在 app&#x2F;i18n 下创建一个文件夹 <code>ThankIT</code> ，在 <code>ThankIT</code> 下创建 <code>zh_Hans_CN</code>，然后在创建以下文件</p>
<h4 id="composer-json"><a href="#composer-json" class="headerlink" title="composer.json"></a><a href="#composer.json"></a>composer.json</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;thankit/language-zh_hans_cn&quot;,</span><br><span class="line">    &quot;description&quot;: &quot;Chinese (China) language&quot;,</span><br><span class="line">    &quot;version&quot;: &quot;100.3.0-dev&quot;,</span><br><span class="line">    &quot;license&quot;: [</span><br><span class="line">        &quot;OSL-3.0&quot;,</span><br><span class="line">        &quot;AFL-3.0&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;require&quot;: &#123;</span><br><span class="line">        &quot;magento/framework&quot;: &quot;100.3.*&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;type&quot;: &quot;magento2-language&quot;,</span><br><span class="line">    &quot;autoload&quot;: &#123;</span><br><span class="line">        &quot;files&quot;: [</span><br><span class="line">            &quot;registration.php&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="language-xml"><a href="#language-xml" class="headerlink" title="language.xml"></a><a href="#language.xml"></a>language.xml</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;language xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:App/Language/package.xsd&quot;&gt;</span><br><span class="line">    &lt;code&gt;zh_Hans_CN&lt;/code&gt;</span><br><span class="line">    &lt;vendor&gt;ThankIT&lt;/vendor&gt;</span><br><span class="line">    &lt;package&gt;zh_Hans_CN&lt;/package&gt;</span><br><span class="line">&lt;/language&gt;</span><br></pre></td></tr></table></figure>

<h4 id="registration-php"><a href="#registration-php" class="headerlink" title="registration.php"></a><a href="#registration.php"></a>registration.php</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::LANGUAGE,</span><br><span class="line">    &#x27;thankit_zh_hans-cn&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>最后把之前的 <code>zh_Hans_CN.csv</code> 放进去，齐活。 正确设置，并使用命令行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento setup:static-content:deploy</span><br></pre></td></tr></table></figure>

<p>然后就可以看到效果了。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a><a href="#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"></a>常见问题</h2><p>经常有人说安装中文包以后出错了，这通常是因为你的 <code>zh_Hans_CN.csv</code> 中含有空行，特别是在结尾的部分，有时候是提供安装包的人不小心干的，有时候是自己不小心干的。</p>
<h2 id="福利"><a href="#福利" class="headerlink" title="福利"></a><a href="#%E7%A6%8F%E5%88%A9"></a>福利</h2><p>上面的 package 上传到 github 了，可以自己下载，然后放到 app&#x2F;i18n 目录下。 <a href="https://github.com/PiscesThankIT/language-zh-hans-cn">PiscesThankIT&#x2F;language-zh-hans-cn</a> 另外放一个台湾繁体的。由于繁体的官方的翻译比率太低，所以，博主拿简体中文转化成了繁体中文，翻译比率大概是 88%。 <a href="https://github.com/PiscesThankIT/language-zh-hant-tw">PiscesThankIT&#x2F;language-zh-hant-tw</a> <a href="https://github.com/Magento2Translations">Magento 2 Translations &amp; language packs （所有语言）</a> 如果你想修改翻译，请参考相关阅读部分。</p>
<h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a><a href="#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB"></a>相关阅读</h2><p><a href="/magento-2-zh-hans-cn-csv/">Magento 2 中文化问题（原创）</a> <a href="/how-to-update-csv-using-older-csv-file/">关于中文包的更新方法问题 （原创）</a> <a href="/magento-csv-php-update/">中文包的更新方法问题（二）</a> 其他相关 <a href="/magento-2-validation-js-bug-fix/">Magento 2.0&#x2F;2.1 表单验证翻译 bug 修复</a> <a href="/excel-csv-utf8/">Excel 编辑 csv 中文乱码</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
        <category>Magento 2 用户使用教程</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>中文化</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 使用 Grunt 编译 Less</title>
    <url>/magento-2-%E4%BD%BF%E7%94%A8-grunt-%E7%BC%96%E8%AF%91-less/</url>
    <content><![CDATA[<p>Magento 2 前端使用 Less ，官方推荐的前端工具是 Grunt 。本文将介绍如何安装 Grunt ，使用流程和遇到的问题。</p>
<h2 id="安装-node-js"><a href="#安装-node-js" class="headerlink" title="安装 node.js"></a><a href="#%E5%AE%89%E8%A3%85-node.js"></a>安装 node.js</h2><p>由于没有找到 Magento 2 官方对 node.js 的版本要求说明，加上安装过程中遇到了一些奇怪的问题，所以博主尝试了 node.js 不同的安装方式和不同的版本。虽然最终问题解决了，但是博主也还是不能确定 Magento 2 使用 Grunt ，对 Node.js 的版本有没有要求。所以以下仅是个人实验的记录，仅供参考。</p>
<p>通过 nvm 来安装 node.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh  bash</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># command -v nvm</span><br></pre></td></tr></table></figure>

<p>如果输出 <code>nvm: command not found</code> 那么关掉终端，然后重新链接并再次输入上面的命令，如果输出 <code>nvm</code> 那么说明 nvm 已经安装好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure>

<p>可以列出所有的版本</p>
<p>要安装某个版本使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm install v0.10.30</span><br></pre></td></tr></table></figure>

<p>查看已经安装的版本使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure>

<p>切换版本，使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm use v0.10.30</span><br><span class="line">Now using node v0.10.30</span><br></pre></td></tr></table></figure>

<p>设置某个版本为默认的版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvm alias default v0.10.30</span><br><span class="line">default -&gt; v0.10.30</span><br></pre></td></tr></table></figure>

<p>博主使用的版本是 8.9.1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># node --version</span><br><span class="line">v8.9.1</span><br></pre></td></tr></table></figure>

<h2 id="安装-Grunt"><a href="#安装-Grunt" class="headerlink" title="安装 Grunt"></a><a href="#%E5%AE%89%E8%A3%85-grunt"></a>安装 Grunt</h2><p>全局安装 Grunt CLI 工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g grunt-cli</span><br></pre></td></tr></table></figure>

<h2 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a><a href="#%E5%AE%89%E8%A3%85%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96"></a>安装项目依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd &lt;your_Magento_instance_directory&gt;</span><br><span class="line">npm install</span><br><span class="line">npm update</span><br></pre></td></tr></table></figure>

<h3 id="记一次错误"><a href="#记一次错误" class="headerlink" title="记一次错误"></a><a href="#%E8%AE%B0%E4%B8%80%E6%AC%A1%E9%94%99%E8%AF%AF"></a>记一次错误</h3><p>错误代码类似</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Phantom installation failed &#123; [Error: Command failed: tar jxf /tmp/phantomjs/phantomjs-1.9.8-linux-x86_64.tar.bz2</span><br><span class="line">tar (child): bzip2: Cannot exec: No such file or directory</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>这是由于缺少 <code>bzip2</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br><span class="line">yum install bzip2</span><br></pre></td></tr></table></figure>

<h2 id="把自己的主题添加到-Grunt-配置中"><a href="#把自己的主题添加到-Grunt-配置中" class="headerlink" title="把自己的主题添加到 Grunt 配置中"></a><a href="#%E6%8A%8A%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E5%88%B0-grunt-%E9%85%8D%E7%BD%AE%E4%B8%AD"></a>把自己的主题添加到 Grunt 配置中</h2><p>以 2.2 版本为例<br>在安装目录下，找到 <code>grunt-config.json</code> 文件，打开：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;themes&quot;: &quot;dev/tools/grunt/configs/local-themes/themes&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么配置文件的地址就是 <code>dev/tools/grunt/configs/local-themes/themes.js</code> 而默认的配置文件地址是 <code>dev/tools/grunt/configs/themes.js</code> ，打开该文件，内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright © Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Define Themes</span><br><span class="line"> *</span><br><span class="line"> * area: area, one of (frontendadminhtmldoc),</span><br><span class="line"> * name: theme name in format Vendor/theme-name,</span><br><span class="line"> * locale: locale,</span><br><span class="line"> * files: [</span><br><span class="line"> * &#x27;css/styles-m&#x27;,</span><br><span class="line"> * &#x27;css/styles-l&#x27;</span><br><span class="line"> * ],</span><br><span class="line"> * dsl: dynamic stylesheet language (lesssass)</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    blank: &#123;</span><br><span class="line">        area: &#x27;frontend&#x27;,</span><br><span class="line">        name: &#x27;Magento/blank&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-m&#x27;,</span><br><span class="line">            &#x27;css/styles-l&#x27;,</span><br><span class="line">            &#x27;css/email&#x27;,</span><br><span class="line">            &#x27;css/email-inline&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    luma: &#123;</span><br><span class="line">        area: &#x27;frontend&#x27;,</span><br><span class="line">        name: &#x27;Magento/luma&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-m&#x27;,</span><br><span class="line">            &#x27;css/styles-l&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    backend: &#123;</span><br><span class="line">        area: &#x27;adminhtml&#x27;,</span><br><span class="line">        name: &#x27;Magento/backend&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-old&#x27;,</span><br><span class="line">            &#x27;css/styles&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们拷贝该文件到 <code>dev/tools/grunt/configs/local-themes/themes.js</code> 并且添加上我们的主题。<br>比如说像这样，我添加了一个前端主题 Tigertek</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright © Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Define Themes</span><br><span class="line"> *</span><br><span class="line"> * area: area, one of (frontendadminhtmldoc),</span><br><span class="line"> * name: theme name in format Vendor/theme-name,</span><br><span class="line"> * locale: locale,</span><br><span class="line"> * files: [</span><br><span class="line"> * &#x27;css/styles-m&#x27;,</span><br><span class="line"> * &#x27;css/styles-l&#x27;</span><br><span class="line"> * ],</span><br><span class="line"> * dsl: dynamic stylesheet language (lesssass)</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">module.exports = &#123;</span><br><span class="line">    blank: &#123;</span><br><span class="line">        area: &#x27;frontend&#x27;,</span><br><span class="line">        name: &#x27;Magento/blank&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-m&#x27;,</span><br><span class="line">            &#x27;css/styles-l&#x27;,</span><br><span class="line">            &#x27;css/email&#x27;,</span><br><span class="line">            &#x27;css/email-inline&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    luma: &#123;</span><br><span class="line">        area: &#x27;frontend&#x27;,</span><br><span class="line">        name: &#x27;Magento/luma&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-m&#x27;,</span><br><span class="line">            &#x27;css/styles-l&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    Tigertek: &#123;</span><br><span class="line">        area: &#x27;frontend&#x27;,</span><br><span class="line">        name: &#x27;ThankIT/Tigertek&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-m&#x27;,</span><br><span class="line">            &#x27;css/styles-l&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    backend: &#123;</span><br><span class="line">        area: &#x27;adminhtml&#x27;,</span><br><span class="line">        name: &#x27;Magento/backend&#x27;,</span><br><span class="line">        locale: &#x27;en_US&#x27;,</span><br><span class="line">        files: [</span><br><span class="line">            &#x27;css/styles-old&#x27;,</span><br><span class="line">            &#x27;css/styles&#x27;</span><br><span class="line">        ],</span><br><span class="line">        dsl: &#x27;less&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>如何创建主题，请参考 <a href="/how-to-create-magento-2-frontend-theme">如何创建 Magneto 2 前端主题</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><a href="#%E4%BD%BF%E7%94%A8"></a>使用</h2><p>首先将 Magento 2 设置成 developer 模式（虽然 2.2 的参考文档中说 default 模式也行，但是 default 模式是混合模式，对调试不友好）</p>
<p>然后可以使用以下命令了</p>
<p>Clean static files and caches:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt clean</span><br></pre></td></tr></table></figure>

<p>Collect resources and generate static files for our theme:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt exec:&lt;grunt theme name&gt;</span><br></pre></td></tr></table></figure>

<p>比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt exec:Tigertek</span><br></pre></td></tr></table></figure>

<p>Initialise the preprocessing:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grunt less:&lt;grunt theme name&gt;</span><br></pre></td></tr></table></figure>

<p>下面就是注意浏览器缓存和 CSS source maps</p>
<p>更多关于 <code>grunt watch</code> 请参考官方文档 <a href="http://devdocs.magento.com/guides/v2.0/frontend-dev-guide/css-topics/css_debug.html">Compile LESS with Grunt</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-a-centos-7-server">How To Install Node.js on a CentOS 7 server</a><br><a href="https://www.integer-net.com/magento-2-frontend-workflow-step-by-step/">Step by Step: Setting Up a Frontend Workflow for Magento 2</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Grunt</tag>
        <tag>Less</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 移除 Last Name</title>
    <url>/magento-2-%E7%A7%BB%E9%99%A4-last-name/</url>
    <content><![CDATA[<p>包括两个部分:</p>
<ul>
<li>Customer 账户中的 Last Name</li>
<li>Customer Address 中的 Last Name</li>
</ul>
<p>这两个字段在数据库中是有字段来控制它是否必填和显隐的。 <code>eav_attribute</code> 中的 <code>is_required</code> 控制是否必填 <code>customer_eav_attribute</code> 中的 <code>is_visible</code> 控制显隐 通过下面的代码即可将 Last Name 设置成非必填项并隐藏。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Vendor\ModuleName\Setup;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Setup\InstallDataInterface;</span><br><span class="line">use Magento\Framework\Setup\ModuleContextInterface;</span><br><span class="line">use Magento\Framework\Setup\ModuleDataSetupInterface;</span><br><span class="line"></span><br><span class="line">class InstallData implements InstallDataInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $eavSetupFactory;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Eav\Setup\EavSetupFactory $eavSetupFactory</span><br><span class="line">    )</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;eavSetupFactory = $eavSetupFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function install(</span><br><span class="line">        ModuleDataSetupInterface $setup,</span><br><span class="line">        ModuleContextInterface $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $eavSetup = $this-&gt;eavSetupFactory-&gt;create([&#x27;setup&#x27; =&gt; $setup]);</span><br><span class="line">        //update lastname to be not required and invisible</span><br><span class="line">        $eavSetup-&gt;updateAttribute(&#x27;customer&#x27;, &#x27;lastname&#x27;, &#x27;is_required&#x27;, 0);</span><br><span class="line">        $eavSetup-&gt;updateAttribute(&#x27;customer&#x27;, &#x27;lastname&#x27;, &#x27;is_visible&#x27;, 0);</span><br><span class="line">        $eavSetup-&gt;updateAttribute(&#x27;customer_address&#x27;, &#x27;lastname&#x27;, &#x27;is_required&#x27;, 0);</span><br><span class="line">        $eavSetup-&gt;updateAttribute(&#x27;customer_address&#x27;, &#x27;lastname&#x27;, &#x27;is_visible&#x27;, 0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过测试，所有通过 UI Component 加载的控件都可以正常工作了。比如管理后台，checkout 中。 还有用户注册页，用户后台账户页，可以通过 css 方式隐藏 Last Name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.field-name-lastname &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外用户后台创建 Customer Address 会报错 <code>lastname is a required field.</code> 这是因为 <code>Magento\Customer\Model\Address\AbstractAddress::validate</code> 中需要验证 lastname 我们可以通过 plugin 来 unset 掉这个错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Customer\Model\Address\AbstractAddress&quot;&gt;</span><br><span class="line">        &lt;plugin name=&quot;removelastname&quot; type=&quot;Vendor\ModuleName\Plugin\Address\AbstractAddress&quot; sortOrder=&quot;1&quot; /&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Vendor\ModuleName\Plugin\Address;</span><br><span class="line"></span><br><span class="line">class AbstractAddress &#123;</span><br><span class="line">    public function afterValidate(\Magento\Customer\Model\Address\AbstractAddress $subject, $result)</span><br><span class="line">    &#123;</span><br><span class="line">        $obj = __(&#x27;%fieldName is a required field.&#x27;, [&#x27;fieldName&#x27; =&gt; &#x27;lastname&#x27;]);</span><br><span class="line"></span><br><span class="line">        if (is_array($result)) &#123;</span><br><span class="line"></span><br><span class="line">            foreach ($result as $key =&gt; $value)</span><br><span class="line">            &#123;</span><br><span class="line">                if ($obj == $value) &#123;</span><br><span class="line">                    unset($result[$key]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            if (empty($result)) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                return $result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成。</p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>中文包的更新方法问题（二）</title>
    <url>/magento-csv-php-update/</url>
    <content><![CDATA[<p>在 <a href="/how-to-update-csv-using-older-csv-file/">关于中文包的更新方法问题 （原创）</a> 中，我们曾经提出过一个问题： 如何才能在每次版本升级后，快速地制作出最新的语言包？也就是说，两个版本的语言包大部分是重叠的，仅有少部分的更改，如何将旧版本的翻译短语直接用到新提取的 csv 文件中。 当时博主提出了使用数据库的连接查询来制作中文包的方法。后来，Neo 同学使用该方法时，出现了数据导入时并没有按照逗号分隔符分割字段的情况。于是 Neo 使用了 php 方法来替换。这种方法比之前省力许多，又好用，再次感谢 Neo ！ Neo 同意将代码放出来，下面的代码供大家参考。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</span><br><span class="line">$filename = &quot;newGenerate.csv&quot;;</span><br><span class="line">$handle = fopen($filename, &quot;a+&quot;);</span><br><span class="line">$ofile = fopen(&#x27;old.csv&#x27;,&#x27;r&#x27;);</span><br><span class="line">$nfile = fopen(&#x27;new.csv&#x27;,&#x27;r&#x27;);</span><br><span class="line">while ($data = fgetcsv($ofile)) &#123;</span><br><span class="line">    $olist[$data[0]] = $data;</span><br><span class="line">&#125;</span><br><span class="line">while ($sdata = fgetcsv($nfile)) &#123;</span><br><span class="line">    if(isset($olist[$sdata[0]]))&#123;</span><br><span class="line">        $sdata[1] = $olist[$sdata[0]][1];</span><br><span class="line">    &#125;</span><br><span class="line">    fputcsv( $handle, $sdata );</span><br><span class="line">&#125;</span><br><span class="line">fclose($handle);</span><br><span class="line">fclose($ofile);</span><br><span class="line">fclose($nfile);</span><br><span class="line">echo &#x27;suceess!&#x27;;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>主要就是用 php 读取 csv 文件放到数组中进行替换，然后写入文件。 在 <a href="/magento-2-zh-hans-cn-csv/">Magento 2 中文化问题（原创）</a>中曾经提到过 csv 文件有的有四栏，有的有两栏，但是实际使用时，却发现效果没什么差别。 如果你对 Magneto 的翻译机制比较好奇，请访问这里 <a href="https://gist.github.com/antonmakarenko/7538216#translation-mechanism-in-magento-2x-platform">Translation Mechanism in Magento 2.x Platform</a> 我们接下来要说结论了，的确，四栏的后两栏根本没有用到。假设我们的 csv 中有多个重复的字段，那么取得是最后一个的翻译值。 所以，我们提取出来的很多字段是重复的，不妨先进行一次清洗。以下是清洗的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</span><br><span class="line">$filename = &quot;newGenerate.csv&quot;;</span><br><span class="line">$handle = fopen($filename, &quot;a+&quot;);</span><br><span class="line">$ofile = fopen(&#x27;old.csv&#x27;,&#x27;r&#x27;);</span><br><span class="line">while ($data = fgetcsv($ofile)) &#123;</span><br><span class="line">    $olist[$data[0]] = $data;</span><br><span class="line">&#125;</span><br><span class="line">foreach ($olist as $key =&gt; $value) &#123;</span><br><span class="line">    $sdata[0] = $key;</span><br><span class="line">    $sdata[1] = $value[1];</span><br><span class="line">    fputcsv( $handle, $sdata );</span><br><span class="line">&#125;</span><br><span class="line">fclose($handle);</span><br><span class="line">fclose($ofile);</span><br><span class="line">echo &#x27;suceess!&#x27;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>最后，再次感谢 Neo 的分享！</p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Magento 2 中文包</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 基本功能列表（翻译一）</title>
    <url>/magento-feature-list-chinese-1/</url>
    <content><![CDATA[<p>本系列将概述 Magento 所有版本都具有的基本功能。</p>
<p>查看完整的原始英文文档，请<a href="/wp-content/uploads/2016/12/Magento-Feature-List-11.16.2015.pdf">点击这里下载</a>（文档还包含 Magento 企业版本的功能列表）</p>
<h2 id="促销和定价"><a href="#促销和定价" class="headerlink" title="促销和定价"></a><a href="#%E4%BF%83%E9%94%80%E5%92%8C%E5%AE%9A%E4%BB%B7"></a>促销和定价</h2><ul>
<li>为特定的店铺、商品类别、客户组或者商品，设置促销价格</li>
<li>为特定的店铺、客户组、时间段、商品、商品类别，创建灵活多样的优惠券</li>
<li>为线下销售、电子邮件营销、资讯订阅等生成优惠券代码</li>
<li>跟踪和报告优惠券的使用情况</li>
<li>提供各种折扣方式：免邮、按百分比的、按固定数量的、买 X 免费送 Y</li>
<li>根据购买量的不同，设置多级价格策略</li>
<li>支持最低广告价格</li>
</ul>
<h2 id="搜索引擎优化"><a href="#搜索引擎优化" class="headerlink" title="搜索引擎优化"></a><a href="#%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96"></a>搜索引擎优化</h2><ul>
<li>自动生成 Google 站点地图</li>
<li>创建搜索引擎友好的 URL</li>
<li>通过 URL 重写完全控制 URL</li>
<li>为商品，类别，内容页创建元数据</li>
</ul>
<h2 id="网站管理"><a href="#网站管理" class="headerlink" title="网站管理"></a><a href="#%E7%BD%91%E7%AB%99%E7%AE%A1%E7%90%86"></a>网站管理</h2><ul>
<li>通过同一个后台管理多个网站和店铺。</li>
<li>通过现代、友好的管理面板，快速学会如何管理和监控店铺的情况</li>
<li>通过自定义管理面板，保存为不同的视图，帮助你更高效地管理商品、客户及订单</li>
<li>定义角色和权限，控制各项管理功能的访问</li>
<li>使用内容管理系统来创建和轻松编辑页面和内容块</li>
<li>通过 100% 可定制的响应式参考主题，打造独一无二的站点</li>
<li>根据地理位置、产品类型、客户组（例如，零售 vs 批发），设置税率</li>
<li>添加验证码功能，防止自动化软件尝试登录</li>
</ul>
<h2 id="（商品）目录管理"><a href="#（商品）目录管理" class="headerlink" title="（商品）目录管理"></a><a href="#%EF%BC%88%E5%95%86%E5%93%81%EF%BC%89%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86"></a>（商品）目录管理</h2><ul>
<li>可创建简单商品、可配置商品（例如，选择尺寸、颜色等）、捆绑商品（例如，同样型号的电脑，可以选配不同的 CPU）、组合商品（例如，沙发套件，可以单独出售，更多的是为了方便客户的）</li>
<li>虚拟商品</li>
<li>包括可下载的&#x2F;电子产品，可提供样本</li>
<li>允许客户自定义的产品（例如，客户可以上传图片、设置文本，制作文化衫）</li>
<li>通过在线引导过程创建新的产品</li>
<li>可定义无限的产品属性</li>
<li>通过创建预定义的产品模板，来快速设置新产品的特定属性集</li>
<li>高效地批量导入导出目录信息</li>
<li>轻松管理库存，支持延期交货（with support for back ordered items）</li>
<li>需要补充库存时，会收到通知</li>
<li>选择缺货时的通知和显示选项</li>
<li>定义可以加入购物车的商品最少和最多数量</li>
<li>批量更新商品，例如，为多个商品设置某个值</li>
<li>自动调整图片大小，包括加水印</li>
<li>如果客户搜索无结果，可以改写和重定向搜索结果</li>
<li>设置搜索目录属性权重和搜索同义词，来管理站点的搜索转换</li>
<li>适当的评价和产品标签</li>
</ul>
<h2 id="目录浏览"><a href="#目录浏览" class="headerlink" title="目录浏览"></a><a href="#%E7%9B%AE%E5%BD%95%E6%B5%8F%E8%A7%88"></a>目录浏览</h2><ul>
<li>通过层级导航，根据价格范围，品牌，颜色及其他属性，筛选目录和搜索结果中的商品</li>
<li>商品目录的呈现可以是表格或列表方式</li>
<li>自定义商品目录页面的外观和感觉</li>
<li>显示商品比较的历史</li>
<li>显示最近浏览过的商品</li>
<li>添加面包屑导航</li>
</ul>
<h2 id="商品浏览"><a href="#商品浏览" class="headerlink" title="商品浏览"></a><a href="#%E5%95%86%E5%93%81%E6%B5%8F%E8%A7%88"></a>商品浏览</h2><ul>
<li>每个商品可显示多张图片</li>
<li>商品图片可以放大查看</li>
<li>可以播放 YouTube 或 Vimeo 上的商品视频</li>
<li>包括显示颜色、面料或其他的面板（swatches）</li>
<li>包括组合商品的视图</li>
<li>设置相关商品、up-sell（同一需求的更高级商品）、cross-sell（追加销售，客户的其他需求）</li>
<li>表明库存情况</li>
<li>显示分级价格</li>
<li>显示商品的评价和评分</li>
<li>可添加商品到愿望清单</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 基本功能列表（翻译二）</title>
    <url>/magento-feature-list-chinese-2/</url>
    <content><![CDATA[<h2 id="结账，付款和发货"><a href="#结账，付款和发货" class="headerlink" title="结账，付款和发货"></a><a href="#%E7%BB%93%E8%B4%A6%EF%BC%8C%E4%BB%98%E6%AC%BE%E5%92%8C%E5%8F%91%E8%B4%A7"></a>结账，付款和发货</h2><ul>
<li>简化结账流程，减少数据输入来促进购买</li>
<li>根据发货地址自动显示物流选项</li>
<li>结账显示带有商品图片的订单汇总</li>
<li>购物车显示估计的税费和运费</li>
<li>提供注册用户和 Guest 用户结账（就是不注册马上结账）注册用户输入邮箱地址，结账时会自动识别出该客户</li>
<li>在购物结束（checkout thank you page）页面，客户可一键创建账户</li>
<li>前台后台都可以使用 HTTPS</li>
<li>允许客户保存购物车，稍后再购买</li>
<li>每个订单的每件物品都接受赠礼留言</li>
<li>发货后或是结账时验证信用卡和信用卡扣款（Authorize and charge credit cards upon shipment or checkout）</li>
<li>整合了 Paypal 的多个支付网关，以及 Braintree 和 Authorize.net</li>
<li>通过 Magneto 市场获得更多支付插件</li>
<li>客户浏览器直接安全地发送信用卡信息到支付网关，不经过 Magento 应用</li>
<li>根据不同支付方法，遵守 PCI 规范（Qualify for the easiest level of PCI compliance (SAQ-A or SAQ A-EP), depending on payment methods used）</li>
<li>提供 Paypal 信用卡选项</li>
<li>接受支票和汇票</li>
<li>接受采购订单</li>
<li>接受银行转账和货到付款</li>
<li>接受如下公司的实时运费： UPS, UPS XML (account rates), FedEx (account rates), USPS, and DHL</li>
<li>根据发货方式的不同，指定允许的目的地国家</li>
<li>为每个订单或每件物品设置固定运费</li>
<li>根据重量、价格、目的地以及物品数量，设置表费率</li>
<li>可免费送货</li>
<li>对所有主要的承运公司，集成 shipping label 打印功能</li>
<li>客户账户可实时追踪物流情况</li>
</ul>
<h2 id="订单管理和客户服务"><a href="#订单管理和客户服务" class="headerlink" title="订单管理和客户服务"></a><a href="#%E8%AE%A2%E5%8D%95%E7%AE%A1%E7%90%86%E5%92%8C%E5%AE%A2%E6%88%B7%E6%9C%8D%E5%8A%A1"></a>订单管理和客户服务</h2><ul>
<li>可在管理后台查看、编辑、创建和完成订单，并&#x2F;或开票</li>
<li>对每笔订单，可创建多个发票、多次发货、多个贷项通知单（credit memo），以便分开履约</li>
<li>打印发票、装箱单(packing slips) 和 快递单（shipping labels）</li>
<li>创建自定义的订单状态标签，以跟踪进度</li>
<li>允许客户服务代表创建订单及客户账户</li>
<li>允许更改客户购物车和愿望清单中的商品及优惠券</li>
<li>通过电子邮件通知和 RSS 订阅发送订单状态</li>
<li>账户更改，密码重置等，可自定义电子邮件</li>
<li>通过创建资讯订阅，发布内容，建立与客户的联系</li>
<li>通过联系我们表单，连接客户</li>
</ul>
<h2 id="客户账户"><a href="#客户账户" class="headerlink" title="客户账户"></a><a href="#%E5%AE%A2%E6%88%B7%E8%B4%A6%E6%88%B7"></a>客户账户</h2><ul>
<li>查看综合账户面板</li>
<li>选择默认的 billing 和发货地址</li>
<li>可在地址簿中保存无限个地址</li>
<li>查看订单状态和历史纪录</li>
<li>允许客户在账户中再次购买</li>
<li>查看最近购买的商品</li>
<li>创建可分享的愿望清单</li>
<li>管理资讯订阅</li>
<li>查看提交的商品评价</li>
<li>访问可下载的&#x2F;电子产品</li>
</ul>
<h2 id="支持全球网站"><a href="#支持全球网站" class="headerlink" title="支持全球网站"></a><a href="#%E6%94%AF%E6%8C%81%E5%85%A8%E7%90%83%E7%BD%91%E7%AB%99"></a>支持全球网站</h2><ul>
<li>在同一个店铺或环境中管理面向多个国家的站点</li>
<li>支持本地化，多货币及地区税率</li>
<li>适用任何语言</li>
<li>使用重音字符（accented characters）和从右向左的排版</li>
<li>配置站点注册、发货、开票允许的国家列表</li>
<li>支持固定产品税，例如欧盟的 WEEE&#x2F;DEEE</li>
<li>Automatically calculate tax for transactions in the EU with VAT-ID validation2</li>
<li>Use EU cookie notification to simplify EU Privacy and Electronic Communications Directive compliance</li>
</ul>
<h2 id="移动电子商务"><a href="#移动电子商务" class="headerlink" title="移动电子商务"></a><a href="#%E7%A7%BB%E5%8A%A8%E7%94%B5%E5%AD%90%E5%95%86%E5%8A%A1"></a>移动电子商务</h2><p>响应式设计</p>
<ul>
<li>通过内置的响应式基本参考主题，快速创建可供任何设备访问的网站。响应式主题：<ul>
<li>可以很容易地进行自定义，更快上线</li>
<li>包含主要流程，商品类型和功能</li>
<li>减少长期的维护费用，使站点更新更容易</li>
<li>通过使用 Google 青睐的方法优化移动站点，提供了 SEO 好处</li>
<li>让客户可以通过手机阅读响应式的电子邮件，包括：订阅的资讯，通知，以及促销邮件等</li>
</ul>
</li>
</ul>
<h2 id="分析和报告"><a href="#分析和报告" class="headerlink" title="分析和报告"></a><a href="#%E5%88%86%E6%9E%90%E5%92%8C%E6%8A%A5%E5%91%8A"></a>分析和报告</h2><ul>
<li>通过 Google Universal Analytics 获得分析报告</li>
<li>通过后台面板获得下列报告：<ul>
<li>销售报告</li>
<li>税务报告</li>
<li>被丢弃的购物车情况报告</li>
<li>浏览最多的商品报告</li>
<li>购买最多的商品报告</li>
<li>低库存报告</li>
<li>搜索词报告</li>
<li>产品评价报告</li>
<li>优惠券使用报告</li>
<li>总销售开票报告</li>
<li>总销售退款报告</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 基本功能列表（翻译三）</title>
    <url>/magento-feature-list-chinese-3/</url>
    <content><![CDATA[<h2 id="架构及安全"><a href="#架构及安全" class="headerlink" title="架构及安全"></a><a href="#%E6%9E%B6%E6%9E%84%E5%8F%8A%E5%AE%89%E5%85%A8"></a>架构及安全</h2><ul>
<li>建立在现代的技术栈上，使用了流行的框架，支持行业标准</li>
<li>可以进行细粒度的自定义，模块化的代码库，很容易添加和移除功能</li>
<li>业务逻辑使用稳定 service contract interfaces ，以确保站点更容易升级和自定义</li>
<li>可以使用高效的 web Api （SOAP 和 REST）与第三方应用集成</li>
<li>通过 plug-ins 和依赖注入的软件设计模式，更顺利的管理扩展之间的交互</li>
<li>加快上线速度，通过完全自动化的测试框架提高代码质量</li>
<li>Update code with a standalone installer that checks for prerequisites before starting the installation process</li>
<li>通过命令行接口自动化某些开发和生产任务</li>
<li>定期的扫描、外部渗透测试，bug 赏金程序，促进平台核心的安全</li>
<li>Magento 安全中心和安全警报邮件列表，会通知你安全问题</li>
</ul>
<h2 id="布局和主题"><a href="#布局和主题" class="headerlink" title="布局和主题"></a><a href="#%E5%B8%83%E5%B1%80%E5%92%8C%E4%B8%BB%E9%A2%98"></a>布局和主题</h2><ul>
<li>自定义 blank 主题 或 luuma 主题，以加快上线速度</li>
<li>通过主题集成，更容易地位不同的国家、品牌或季节促销活动创建站点</li>
<li>通过 Magento UI 和 模式库，使得主题开发更快速和更一致</li>
<li>使用 Less 预处理节省时间，通过代码复用和全局变量的更改，更易于站点维护</li>
<li>通过分离表现层和业务逻辑，降低前段编码的复杂性</li>
</ul>
<h2 id="性能和可扩展性"><a href="#性能和可扩展性" class="headerlink" title="性能和可扩展性"></a><a href="#%E6%80%A7%E8%83%BD%E5%92%8C%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7"></a>性能和可扩展性</h2><ul>
<li>使用预先集成在 Apache 中的 Varnish 缓存页面内容，获得更好的性能</li>
<li>Implement hole punching and Edge Side Includes (ESI) to handle page elements that can’t be cached</li>
<li>收益于更快的索引，以及增量索引，以更新站点内容和更好的性能</li>
<li>Minify JavaScript, CSS 和 HTML ，压缩图像，以减少文件大小，加快加载速度</li>
<li>将 JavaScript 和他们的依赖打包，加快浏览器加载速度</li>
<li>访问的第一个页面缓存所有 Js 和 CSS ，以尽量减少后续页面必须加载的内容</li>
<li>使用 Magento 内置的性能工具包，测量和优化站点的性能</li>
<li>允许大型团队（许多管理用户）管理订单，按计划更新产品</li>
</ul>
<h2 id="相关文档下载"><a href="#相关文档下载" class="headerlink" title="相关文档下载"></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3%E4%B8%8B%E8%BD%BD"></a>相关文档下载</h2><p>本系列翻译的是第三个文档中 Magento General Feature List (Features found in all Magento projects) 部分</p>
<p><a href="/wp-content/uploads/2016/12/Magento%20Full%20Features%20List%20052714.pdf">Magento Full Features List 052714.pdf</a><br><a href="/wp-content/uploads/2016/12/Magento_Enterprise_Edition_2.1_Feature_List_06.15.16.pdf">Magento_Enterprise_Edition_2.1_Feature_List_06.15.16.pdf</a><br><a href="/wp-content/uploads/2016/12/Magento-Feature-List-11.16.2015.pdf">Magento-Feature-List-11.16.2015.pdf</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 之我见</title>
    <url>/magento-in-my-eyes/</url>
    <content><![CDATA[<p>Magento 是世界领先的企业级 B2C 电商系统。他的基础框架规范而扎实，文档齐全，业务流程成熟，安全性有保障，特别是可扩展性那是非常强悍的，这也是 Magento 最大的特点。在一众 PHP 开源电商系统中，从程序员的角度看，那绝对是数一数二的，甩国内系统几条街，而且一直保持活跃状态，使用人数众多，真是太有吸引力了！</p>
<p>以上只是一个程序员眼中的 Magento。在实际的应用中，博主发现 Magento 在欧美等国家很流行，而国内用的很少。很少是根据百度指数和相关信息的不活跃情况推测出来的，博主对实际的情况不敢妄断，只是说说自己的推测和感想。这毕竟是本宝宝的自留地嘛，嘿嘿！如果各位看官觉得有出入，感谢指正。接着说，国内用的很少，即使是用的很少的这一部分，大部分也是做外贸的。</p>
<p>博主认为造成上述现象的主要原因是 Magento 在国外市场那是“开箱即用”，国内的话有点不适应中国特色，所以得二次开发。架构上能甩国内系统几条街的系统，对于国内大部分程序员来说肯定是比较难上手的，成本必然比直接用国内系统来得高。毕竟国内的系统套个模板看上去就是那么回事了，就能卖钱了。（没有瞧不起的意思，此处仅是阐述事实。）所以造成了做 Magento 内贸的公司会相对少一些。当然肯定还有一些其他原因。</p>
<p>世界上没有最好，只有合适不合适。从学习的角度来说，Magento 是非常值得学习的。对于有特别要求又很注重长期投资的公司，Magento 也是非常合适的，拥有良好基础的系统才能陪伴企业一同成长，不是么？</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 安装成功后速度很慢</title>
    <url>/magento-is-slow-after-installation/</url>
    <content><![CDATA[<p>相信很多朋友遇到这样的情况，Magento 2 成功安装后速度非常慢，尤其是第一次打开的时候。</p>
<p>事实上第一次打开速度比之后打开慢是正常的，因为第一次打开要做很多额外工作。下面就说一说博主所知道的影响速度的一些因素，不是很系统，仅能帮助刚入门或尚未入门的朋友增加对 Magento 2 的了解，而<strong>不是</strong>简单认定 Magento 2 的速度就是慢！</p>
<h2 id="内存问题"><a href="#内存问题" class="headerlink" title="内存问题"></a><a href="#%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98"></a>内存问题</h2><p>很多朋友是用 WampServer 或者 Xampp 来测试 Magento 2 的。（关于搭建本地测试环境可以参考博主的另一片文章<a href="/wampserver-install-magento-2/">wampserver 本地搭建 Magento 2</a>）需要注意的是，默认情况下，<code>php.ini</code> 设置的 <code>memory_limit</code> 是128M，而 Magneto 官方的推荐至少是768M，如果是用作测试，<br>建议2G。内存的调整对速度的影响那是相当大的，尤其是对后台使用来说。所以，务必检查<code>memory_limit</code>，马儿吃不饱怎么跑得快呢？</p>
<h2 id="模式问题"><a href="#模式问题" class="headerlink" title="模式问题"></a><a href="#%E6%A8%A1%E5%BC%8F%E9%97%AE%E9%A2%98"></a>模式问题</h2><p>Magento 2 有三种模式：default、developer 和 production<br>默认是 default 模式，而 default、developer 模式都不是为生产环境进行优化的。如果你想看看 Magento 2 可以跑多块，可以切换成 Production 模式。</p>
<p>关于 <a href="/switch-magento-2-system-modes/">magento 2 modes – 每种模式的特点及如何切换</a></p>
<p>查看现在是什么模式（windows下是反斜杠哦）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento deploy:mode:show</span><br></pre></td></tr></table></figure>

<p>切换模式为 production</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento deploy:mode:set production</span><br></pre></td></tr></table></figure>

<p>查看所有命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento list</span><br></pre></td></tr></table></figure>

<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a><a href="#%E7%BC%93%E5%AD%98"></a>缓存</h2><p>Magento 2 有很多缓存类型，开启后速度也会有提升。<br>可以参考官方文档：<a href="http://devdocs.magento.com/guides/v2.0/config-guide/cli/config-cli-subcommands-cache.html">管理缓存</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Magento 2 speed</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento Layout</title>
    <url>/magento-layout/</url>
    <content><![CDATA[<p>假设读者朋友们已经会自己创建简单的模块，并且使用过 layout xml 来展示某个页面了。那么本篇将对 magento layout 做一个总结，从概念上理顺 magento layout 是什么，它是为了解决什么问题，并串联与之相关的一些知识。 如果你还不会创建模块，请参阅 <a href="https://www.hellomagento2.com/%E5%88%9B%E5%BB%BA-magento-2-hello-world-simple-module/">创建 Magento 2 Hello World Simple Module</a> 如果还没有使用过 layout ，请参阅 <a href="https://www.hellomagento2.com/magento-2-%E4%B8%AD%E7%9A%84-controller/">Magento 2 中的 Controller</a></p>
<h2 id="magento-layout-是什么"><a href="#magento-layout-是什么" class="headerlink" title="magento layout 是什么"></a><a href="#magento-layout-%E6%98%AF%E4%BB%80%E4%B9%88"></a>magento layout 是什么</h2><p><em>A Layout is a collection of blocks in a tree structure</em> Layout 是 block 的集合，这些 block 是树形结构组织的。 那么 magento block 是什么？ <em>A Magento block is an object with a toHtml method defined. When this toHtml method is called, it returns the string which should be output to the screen.</em> 可以认为，Magento block 是对象，这个对象拥有方法 <code>toHtml()</code> ，调用这个方法会返回 html 片段的字符串。 早期的 php 开发是 html 和 php 代码混淆在一起的，但是这样很难维护和分工，所以将 html 分离出来，成为模版层。 我们知道 block 都会对应一个 phtml 模版。当 block 的 <code>toHtml()</code> 被调用时，phtml 文件会被 <code>include</code> （就是 php 内置的 <code>include</code>）进去。（详情请参考 <a href="https://www.hellomagento2.com/magento-2-templates-use-block-or-this/">Magento 2 Templates: Use $block or $this</a> 中 <code>Magento\Framework\View\TemplateEngine\Php</code> 的 <code>render</code> 方法。） phtml 是可以 override 的，参考 <a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/themes/theme-inherit.html">Theme inheritance</a> layout 可以 extend 也可以 override 。参考 <a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/layouts/layout-extend.html">Extend a layout</a> 和 <a href="http://devdocs.magento.com/guides/v2.1/frontend-dev-guide/layouts/layout-override.html">Override a layout</a></p>
<h2 id="嵌套结构"><a href="#嵌套结构" class="headerlink" title="嵌套结构"></a><a href="#%E5%B5%8C%E5%A5%97%E7%BB%93%E6%9E%84"></a>嵌套结构</h2><p>layout xml 的内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;referenceContainer name=&quot;customer.login.container&quot;&gt;</span><br><span class="line">        &lt;block class=&quot;ThankIT\SocialLogin\Block\SocialBlock&quot; name=&quot;thankit_social_block&quot; ifconfig=&quot;thankit_sociallogin/general/enable&quot; template=&quot;ThankIT_SocialLogin::login/socialblock.phtml&quot; cacheable=&quot;false&quot; after=&quot;customer.new&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;ThankIT\SocialLogin\Block\Buttons&quot; name=&quot;thankit_login_buttons&quot; template=&quot;ThankIT_SocialLogin::login/buttons.phtml&quot; /&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">    &lt;/referenceContainer&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>可以看出我们的 block 中嵌套了一个 block ，那么最外面的 block 对应的 <code>ThankIT_SocialLogin::login/socialblock.phtml</code> 模版内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$helper = $this-&gt;helper(&#x27;ThankIT\SocialLogin\Helper\Data&#x27;);</span><br><span class="line">if($helper-&gt;hasButtons()) : ?&gt;</span><br><span class="line">    // ... 省略内容</span><br><span class="line">    &lt;?php echo $block-&gt;getChildHtml(&#x27;thankit_login_buttons&#x27;); ?&gt;</span><br><span class="line">&lt;?php endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>注意此处<code>$block-&gt;getChildHtml(&#39;thankit_login_buttons&#39;);</code> 我们调用了 block 的 <code>getChildHtml</code> 方法，该方法来自 class <code>Magento\Framework\View\Element\AbstractBlock</code> ，他将取他的 child block ，并调用其 <code>toHtml</code> 方法。 所以我们的 block 可以有序组织起来，形成嵌套的结构。 <code>getChildHtml()</code> 如果不给参数，则 render all child blocks 。</p>
<h2 id="controller-中直接创建-block"><a href="#controller-中直接创建-block" class="headerlink" title="controller 中直接创建 block"></a><a href="#controller-%E4%B8%AD%E7%9B%B4%E6%8E%A5%E5%88%9B%E5%BB%BA-block"></a>controller 中直接创建 block</h2><p>我们在 <code>ThankIT_HelloWorld</code> 模块的基础上，创建以下 controller</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Create;</span><br><span class="line"></span><br><span class="line">class Block extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\App\Action\Context  $context</span><br><span class="line">     * @param \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Execute view action</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Controller\ResultInterface</span><br><span class="line">     */</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $resultPage = $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">        // var_dump(get_class($resultPage-&gt;getConfig()-&gt;getTitle()));</span><br><span class="line">        $resultPage-&gt;getConfig()-&gt;getTitle()-&gt;set(__(&#x27;create block directly and fpc&#x27;));</span><br><span class="line"></span><br><span class="line">        $block = $resultPage-&gt;getLayout()</span><br><span class="line">            -&gt;createBlock(&#x27;ThankIT\HelloWorld\Block\Index\Index&#x27;)</span><br><span class="line">            -&gt;setTemplate(&#x27;ThankIT_HelloWorld::index/index.phtml&#x27;)</span><br><span class="line">            -&gt;toHtml();</span><br><span class="line">        $this-&gt;getResponse()-&gt;setBody($block);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么我们会得到一些字符串，连 html 结构都没有。此处仅仅为了说明是如何调用 <code>toHtml</code> 来得到 html 片段的。 关于 <a href="https://www.hellomagento2.com/magento-2-controller-and-fpc/">Magento 2 Controller and FPC</a></p>
<h2 id="layout-xml-要解决的问题"><a href="#layout-xml-要解决的问题" class="headerlink" title="layout xml 要解决的问题"></a><a href="#layout-xml-%E8%A6%81%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98"></a>layout xml 要解决的问题</h2><p>layout xml 要解决的是让主题开发人员也可以控制 HTML 的输出。其实就是又一层抽象，让主题开发人员不需要去改 php 。 博主个人认为，layout xml 带来的好处是他的分散性，可以很方便的进行扩展、更改、维护。如果我们要在 controller 中控制 block 的输出，那么我们都要去改 controller ，这就很难维护了。</p>
<h2 id="Magento-2-layout-文件类型"><a href="#Magento-2-layout-文件类型" class="headerlink" title="Magento 2 layout 文件类型"></a><a href="#magento-2-layout-%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B"></a>Magento 2 layout 文件类型</h2><p>参考 <a href="https://www.hellomagento2.com/magento-2-layout-types/">Magento 2 layout 文件类型</a></p>
<h2 id="Magento-2-layout-使用"><a href="#Magento-2-layout-使用" class="headerlink" title="Magento 2 layout 使用"></a><a href="#magento-2-layout-%E4%BD%BF%E7%94%A8"></a>Magento 2 layout 使用</h2><p>关于指令： <a href="https://www.hellomagento2.com/layout-instruction-%E4%B9%8B-argument-%E5%92%8C-action">Layout instruction 之 argument 和 action</a> 后台的使用 <a href="https://www.hellomagento2.com/layout-update-place-block/">Using a Layout Update</a></p>
<h2 id="获得-layout-的工具"><a href="#获得-layout-的工具" class="headerlink" title="获得 layout 的工具"></a><a href="#%E8%8E%B7%E5%BE%97-layout-%E7%9A%84%E5%B7%A5%E5%85%B7"></a>获得 layout 的工具</h2><p><a href="https://www.hellomagento2.com/debug-tool-how-to-get-all-xml-layout/">调试工具：如何得到页面的布局文件</a> 可进一步挖掘，获得想要的 layout 文件。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p>《No Frills Magento Layout》 by Alan Storm 2011</p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
      <tags>
        <tag>layout</tag>
        <tag>magento</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento Soap 错误</title>
    <url>/magento-soap-%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>php 版本 5.6.31 Magento 1 wamp 环境 使用 soap 登录时遇到错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Uncaught SoapFault exception: [Client] looks like we got no XML document in D:\wamp64\www\soap_wq.php:3 Stack trace: #0 D:\wamp64\www\soap_wq.php(3): SoapClient-&gt;__call(&#x27;login&#x27;, Array) #1 D:\wamp64\www\soap_wq.php(3): SoapClient-&gt;login....</span><br></pre></td></tr></table></figure>

<p>解决办法： 修改 <code>php.ini</code> 的 <code>always_populate_raw_post_data = -1</code> 之前是被注释掉的状态。</p>
]]></content>
      <categories>
        <category>Magento 1</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 的时区和时间（原理）</title>
    <url>/magento-time-timezone%EF%BC%89/</url>
    <content><![CDATA[<p>Magento 的时间存储使用的是 MySQL 的 TIMESTAMP 。TIMESTAMP 在数据库内部是以 UTC 时间存储的，在取回显示时却是依据当前时区进行转化的。</p>
<p>比如当前时区是UTC，存入UTC时间00：00，你看到的是00：00，但当你将时区改成UTC+8以后，你看到的时间将会是08：00，存储的值一直没有变，但是你看到的不一样了。关于这个请参考MySQL 文档： <a href="https://dev.mysql.com/doc/refman/5.5/en/datetime.html">The DATE, DATETIME, and TIMESTAMP Types</a></p>
<p>重点摘要：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MySQL converts TIMESTAMP values from the current time zone to UTC for storage, and back from UTC to the current time zone for retrieval. (This does not occur for other types such as DATETIME.) By default, the current time zone for each connection is the server&#x27;s time. The time zone can be set on a per-connection basis. As long as the time zone setting remains constant, you get back the same value you store. If you store a TIMESTAMP value, and then change the time zone and retrieve the value, the retrieved value is different from the value you stored. This occurs because the same time zone was not used for conversion in both directions. The current time zone is available as the value of the time_zone system variable.</span><br></pre></td></tr></table></figure>

<p>Magento 的系统使用的都是 UTC 时间，两个地方有体现：</p>
<p>第一处是 PHP 的时区设置，在 Magento 2 的入口文件 <code>app/bootstrap.php</code> 中有设置<code>date_default_timezone_set(&#39;UTC&#39;);</code><br>了解更多可参考：<a href="/php-time-timezone-strtotime/">PHP 的时间和时区</a>。</p>
<p>第二处是与数据库连接的时候，<code>gento\Framework\DB\Adapter\Pdo\Mysql::_connect</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;_connection-&gt;query(&quot;SET time_zone = &#x27;+00:00&#x27;&quot;);</span><br></pre></td></tr></table></figure>

<p>下面是一个关于 MySQL 的时区例子，为了帮助理解的。</p>
<p>MySQL 的 time_zone 默认是 SYSTEM，我将他改为 UTC</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL time_zone = &#x27;+00:00&#x27;;</span><br></pre></td></tr></table></figure>

<p>查看时区</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%time_zone%&#x27;;</span><br></pre></td></tr></table></figure>

<p>然后我建立了一个表:</p>
<p>name</p>
<p>描述</p>
<p>id</p>
<p>自增</p>
<p>create_time</p>
<p>timestamp 默认CURRENT_TIMESTAMP</p>
<p>然后插入几行数据</p>
<p>id</p>
<p>create_time</p>
<p>1</p>
<p>2016-10-12 03:23:31</p>
<p>2</p>
<p>2016-10-12 03:28:16</p>
<p>因为我的时区设置的是 UTC ，所以本地时间是 2016-10-12 11:23</p>
<p>我们来用php 取出时间看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$servername = &quot;localhost&quot;;</span><br><span class="line">$username = &quot;root&quot;;</span><br><span class="line">$password = &quot;&quot;;</span><br><span class="line">$sql = &quot;&quot;;</span><br><span class="line">$conn = new PDO(&quot;mysql:host=$servername;dbname=test&quot;, $username, $password);</span><br><span class="line">$conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line">$conn-&gt;exec(&quot;SET CHARACTER SET UTF8&quot;); </span><br><span class="line"></span><br><span class="line">// 注意这里</span><br><span class="line">// $conn-&gt;exec(&quot;SET time_zone = &#x27;+08:00&#x27;&quot;);</span><br><span class="line"></span><br><span class="line">$sql=&quot;select * from test.time&quot;;</span><br><span class="line">$sth = $conn-&gt;query($sql);</span><br><span class="line">while($row = $sth-&gt;fetch())&#123;</span><br><span class="line">    echo &quot;id:&quot;.$row[&#x27;id&#x27;].&quot;&lt;br /&gt;&quot;;</span><br><span class="line">    echo &quot;create_time:&quot;.$row[&#x27;create_time&#x27;].&quot;&lt;br /&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们得到的结果是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id:1</span><br><span class="line">create_time:2016-10-12 03:23:31</span><br><span class="line">id:2</span><br><span class="line">create_time:2016-10-12 03:27:37</span><br></pre></td></tr></table></figure>

<p>看这个时间是UTC 的时间吧。然后我们将上面的注释去掉，得到的将会是本地时间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id:1</span><br><span class="line">create_time:2016-10-12 11:23:31</span><br><span class="line">id:2</span><br><span class="line">create_time:2016-10-12 11:27:37</span><br></pre></td></tr></table></figure>

<p>Magento 2 当前的版本中关于cron 的时间有 Bug，时间有误，详情请见 <a href="https://github.com/magento/magento2/issues/4237">https://github.com/magento/magento2/issues/4237</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>时区</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 和 woocommerce 分别可以处理多少产品？</title>
    <url>/magento-woocommerce-how-many-products-can-they-handle/</url>
    <content><![CDATA[<p>Magento 算是很老牌的电商平台了（Magento 于 2015 年发布了全新的版本 Magento 2 ），woocommerce 则是基于 wordpress 的电商插件，全球市场近 39% 的份额（Builtwith 统计）。 Magento 的开发成本要比 woocommerce 高出不少，也更加耗资源，woocommerce 则比较容易上手。 本文旨在探索 Magento 和 woocommerce 分别可以处理多少产品。 这是个很难回答的问题，因为即使是相同的工具，看怎么用，也会有不同的结果。 首先我们要给他一些限定条件： 默认情况下，在一般的服务器上跑，可以处理的产品数量范围。额外扩展和优化后，可以达到的上线是多少？ <strong>以下结论来自于网络整理，并没有非常权威的答案，仅供参考</strong> Magento CE 1.9X 大多数情况下，不做额外的优化，管理 1 - 2.5 万产品妥妥的。通过系统扩展、资源调整和代码优化，可以处理 10 - 20 万产品甚至更多。 Magento EE 13.x 14.x 大多数情况下，没有额外优化，可以管理 10 - 20 万产品。合理优化和扩展后，可以处理 40 - 50 万甚至更多。 Magento 2 CE 大多数情况下，没有额外优化，可以管理 10 - 20 万产品，合理优化和扩展后，可以处理 40 - 50 万甚至更多。 Magento 2 EE 被设计为处理更多产品，取决于一些企业版的高级特性，比如：database sharding, job queues, advanced mysql and web server topologies and proper resources。 这样我们大概就知道 Magento 处理十万级别的是没有问题的了。 下面说 woocommerce ，官方的说法： <em>Sky is the limit. We’ve seen instances of shops with 100,000+ products listed, handling thousands of transactions per minute. In those cases, they had great hosting support and their own developer team focused on optimization.</em> 然后社区的回答，商品数量在 1500 - 2500 之间的时候，会出现性能问题，这时候需要做优化。 所以，我们大概得出的结论是： woocommerce 在大多数情况下，不做额外的优化，可以处理 1500 - 2500 的产品。如果做优化，可以到达 10 万甚至更多。</p>
<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a><a href="#%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80"></a>参考地址</h2><p><a href="https://aionhill.com/how-many-products-can-magento-handle">Can Magento really handle over 500,000 products? If yes, how?</a> <a href="https://www.quora.com/Can-I-use-WooCommerce-for-a-large-store">Can I use WooCommerce for a large store?</a> <a href="https://docs.woocommerce.com/document/woocommerce-scaling-faqs/">WooCommerce Scaling FAQs</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 中文资料下载</title>
    <url>/magento-%E4%B8%AD%E6%96%87%E8%B5%84%E6%96%99%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>今天整理文件，发现了以前收集的一些关于 Magento 的中文资料（不是关于 2 的）。忘记资料是怎么收集来的了。如有侵权，请告知，我会删掉。 以下是下载地址： <a href="/wp-content/uploads/2017/05/Magento-%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C.pdf">Magento 使用手册.pdf</a> <a href="/wp-content/uploads/2017/05/Magento.doc">Magento中文用户手册.doc</a> 上面两个类似 Magento 的中文版 User Guide <a href="/wp-content/uploads/2017/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Magento.pdf">深入理解Magento.pdf</a> 上面这个关于开发</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>magento 资料下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 数据库图解下载</title>
    <url>/magento-%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9B%BE%E8%A7%A3%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>以下是关于 Magento 的数据库图解，有三个版本的可以下载。资料来源于网络，侵删。 <a href="/wp-content/uploads/2017/05/ce1922">Magento 1.9.2.2 Database</a> <a href="/wp-content/uploads/2017/05/MAGENTO_v1.3.2.4-Database_Diagram.pdf">MAGENTO_v1.3.2.4-Database_Diagram</a> <a href="/wp-content/uploads/2017/05/magento_v116-database_diagram.pdf">magento_v116-database_diagram</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>magento 数据库图解下载</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2 命令行升级</title>
    <url>/magento2-cli-upgrade/</url>
    <content><![CDATA[<p><em>本文记录的是从 <a href="https://magento.com/tech-resources/download">Magento Tech Resources 下载安装包</a>，进行安装后的命令行升级方式。不同的安装方式升级方法有一些差异。可以参考官方文档 <a href="http://devdocs.magento.com/guides/v2.0/comp-mgr/bk-compman-upgrade-guide.html">Upgrade the Magento application and components</a></em></p>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a><a href="#%E8%AF%B4%E6%98%8E"></a>说明</h2><p>本篇中使用的是 Ubuntu 系统<br>测试站点的根目录没有设置在 pub 之下。</p>
<h2 id="安装-composer"><a href="#安装-composer" class="headerlink" title="安装 composer"></a><a href="#%E5%AE%89%E8%A3%85-composer"></a>安装 composer</h2><p>先安装 curl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install curl</span><br></pre></td></tr></table></figure>

<p>Composer 需要 PHP 5.3.2+ 才能运行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ curl -sS https://getcomposer.org/installer  php</span><br></pre></td></tr></table></figure>

<p>这个命令会将 composer.phar 下载到当前目录。PHAR（PHP 压缩包）是一个压缩格式，可以在命令行下直接运行。</p>
<p>全局安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv composer.phar /usr/local/bin/composer</span><br></pre></td></tr></table></figure>

<h2 id="Magento-升级"><a href="#Magento-升级" class="headerlink" title="Magento 升级"></a><a href="#magento-%E5%8D%87%E7%BA%A7"></a>Magento 升级</h2><p>测试站点的根目录没有设置在 pub 之下。如果设置在 pub 之下请参考官方文档。<a href="http://devdocs.magento.com/guides/v2.0/comp-mgr/cli/cli-upgrade.html">Command-line upgrade</a></p>
<p>首先将站点调成维护模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento maintenance:enable</span><br></pre></td></tr></table></figure>

<p>切换成 Magento 文件所有者，并切换到安装根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su User</span><br><span class="line">cd /var/www/html/magento2</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer require magento/product-community-edition 2.1.3 --no-update</span><br><span class="line">composer update</span><br></pre></td></tr></table></figure>

<p>这时候会提示你输入验证信息。如何获得 Access Key 请参考 <a href="http://devdocs.magento.com/guides/v2.0/comp-mgr/prereq/prereq_auth-token.html">Enter your authentication keys in the Admin</a></p>
<p>简单说来就是进入 Magento MarketPlace 自己的账户中生成一个 Access Key</p>
<p><img src="/wp-content/uploads/2017/01/install_mkpl_access-keys.png"></p>
<p><img src="/wp-content/uploads/2017/01/install_mkpl_access-keys-detail.png"></p>
<p>这个过程有点漫长…</p>
<p>清除 var 子目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf &lt;Magento install dir&gt;/var/cache/*</span><br><span class="line">rm -rf &lt;Magento install dir&gt;/var/page_cache/*</span><br><span class="line">rm -rf &lt;Magento install dir&gt;/var/generation/*</span><br></pre></td></tr></table></figure>

<p>Update the database schema and data</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>如果使用了 Varnish 这里重启一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service varnish restart</span><br></pre></td></tr></table></figure>

<p>然后我们关闭维护模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento maintenance:disable</span><br></pre></td></tr></table></figure>

<p>升级成功啦！</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/comp-mgr/cli/cli-upgrade.html">Command-line upgrade</a></p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
  </entry>
  <entry>
    <title>Magento2 产品放大镜效果的实现</title>
    <url>/magento2-product-image-zoom/</url>
    <content><![CDATA[<p>产品放大镜效果指的是类似下图这样的功能：</p>
<p><img src="/wp-content/uploads/2016/12/product-zoom-case.jpg"></p>
<p>Magento 2 安装好后一般是没有看到这个功能的。注意，我说的是没有看到，因为实际上他是有的。</p>
<p>当然如果你使用了非内置的主题（blank 或者 luma 之外的），那么你很可能会发现有这个功能，而且有的还可以进行效果配置呢。</p>
<p>这篇文章想要讨论的是放大镜功能实现层面的事情，对于主题开发者来说，可能更有用，对于纯使用者来说，可能就没有必要了解了。</p>
<p>首先，要实现这样的功能一定是涉及到 js 的，为了让 js 工作，需要相应的模板文件（就是 html 代码片段）。Magento 2 自带了实现该功能的 js 和 模板文件，所以你只需要配置，就可以启用这个功能了。</p>
<p>假设你已经会创建前端主题了，如果你不清楚的话，请参考<a href="/how-to-create-magento-2-frontend-theme/">如何创建 Magneto 2 前端主题</a></p>
<p>然后我们也介绍过 view.xml 的，如果不清楚，请参考<a href="/about-view-xml/">关于 view.xml</a></p>
<p>关于 view.xml 的 part-2 说的就是产品图片的放大镜效果，只是当时没有具体说。</p>
<p>Luma 主题 magnifier 部分在 view.xml 中是这样配置的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;var name=&quot;magnifier&quot;&gt;</span><br><span class="line">            &lt;var name=&quot;fullscreenzoom&quot;&gt;20&lt;/var&gt;  &lt;!-- Zoom for fullscreen (integer)--&gt;</span><br><span class="line">            &lt;var name=&quot;top&quot;&gt;&lt;/var&gt; &lt;!-- Top position of magnifier --&gt;</span><br><span class="line">            &lt;var name=&quot;left&quot;&gt;&lt;/var&gt; &lt;!-- Left position of magnifier --&gt;</span><br><span class="line">            &lt;var name=&quot;width&quot;&gt;&lt;/var&gt; &lt;!-- Width of magnifier block --&gt;</span><br><span class="line">            &lt;var name=&quot;height&quot;&gt;&lt;/var&gt; &lt;!-- Height of magnifier block --&gt;</span><br><span class="line">            &lt;var name=&quot;eventType&quot;&gt;hover&lt;/var&gt; &lt;!-- Action that atcivates zoom (hover/click) --&gt;</span><br><span class="line">            &lt;var name=&quot;enabled&quot;&gt;false&lt;/var&gt; &lt;!-- Turn on/off magnifier (true/false) --&gt;</span><br><span class="line">        &lt;/var&gt;</span><br></pre></td></tr></table></figure>

<p>看到了吗？ <code>enabled</code> 是 <code>false</code>，所以自然看不到效果啦~</p>
<p>下面请自行创建子主题，继承 blank 或者 luma ，然后将 luma 的 &#x2F;etc&#x2F;view.xml 拷贝到你的主题下，修改相应的内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;var name=&quot;magnifier&quot;&gt;</span><br><span class="line">            &lt;var name=&quot;fullscreenzoom&quot;&gt;20&lt;/var&gt;  &lt;!-- Zoom for fullscreen (integer)--&gt;</span><br><span class="line">            &lt;var name=&quot;top&quot;&gt;&lt;/var&gt; &lt;!-- Top position of magnifier --&gt;</span><br><span class="line">            &lt;var name=&quot;left&quot;&gt;&lt;/var&gt; &lt;!-- Left position of magnifier --&gt;</span><br><span class="line">            &lt;var name=&quot;width&quot;&gt;500&lt;/var&gt; &lt;!-- Width of magnifier block --&gt;</span><br><span class="line">            &lt;var name=&quot;height&quot;&gt;500&lt;/var&gt; &lt;!-- Height of magnifier block --&gt;</span><br><span class="line">            &lt;var name=&quot;eventType&quot;&gt;hover&lt;/var&gt; &lt;!-- Action that atcivates zoom (hover/click) --&gt;</span><br><span class="line">            &lt;var name=&quot;enabled&quot;&gt;true&lt;/var&gt; &lt;!-- Turn on/off magnifier (true/false) --&gt;</span><br><span class="line">        &lt;/var&gt;</span><br></pre></td></tr></table></figure>

<p>然后启用你的主题，一定会发现已经有产品图片的放大镜效果了。<br>就像下面这样：</p>
<p><img src="/wp-content/uploads/2016/12/magnifier.png"></p>
<p>博主刚开始并不知道 Magento 2 自带这样的功能，所以到处找插件，当然找着一个免费的当然有点粗糙，不过核心已经完整了，博主已上传到 github 上，地址：<a href="https://github.com/PiscesThankIT/ktree-zoom">https://github.com/PiscesThankIT/ktree-zoom</a></p>
<p>原文的参考地址：<a href="https://ktree.com/blog/Zoom-Extension-for-Magento2.html">https://ktree.com/blog/Zoom-Extension-for-Magento2.html</a></p>
<p>感兴趣的可以自行研究。他使用的 js 插件是 elevateZoom 。博主粗略的看了下，大多数实现产品放大镜效果的插件都是使用的该插件，而且他的功能还是很全面的，也比较健壮。官网：<a href="http://www.elevateweb.co.uk/image-zoom/examples">http://www.elevateweb.co.uk/image-zoom/examples</a></p>
<p>如果你对配置 Magento 2 自带的放大镜功能感兴趣，可以去看看这个 issue，地址： <a href="https://github.com/magento/magento2/issues/4977">https://github.com/magento/magento2/issues/4977</a> ，问题中指出了他基于哪个插件。</p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magento 2 放大镜</tag>
      </tags>
  </entry>
  <entry>
    <title>在链接中使用 Markup Tags(Using Markup Tags in Links)</title>
    <url>/markup-tags-links/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/markup-tags-links.html">Using Markup Tags in Links</a></em></p>
<p>你可以在 HTML <code>&lt;a&gt;</code> 标签中使用 markup tags，这样可以让链接指向您网站上的任何页面。链接可以放置在内容页面，blocks，banners，email 和 newsletter 模板中。您还可以用它让图片指向特定的页面。</p>
<h2 id="第一步：确定目标-URL"><a href="#第一步：确定目标-URL" class="headerlink" title="第一步：确定目标 URL"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E7%A1%AE%E5%AE%9A%E7%9B%AE%E6%A0%87-url"></a>第一步：确定目标 URL</h2><p>你可以在浏览器地址栏中整个复制目标 URL 的地址，我们需要的是你域名后的部分。或者可以查看 CMS 页面的的 URL Key</p>
<p>Full URL to Category Page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/apparel/shoes/womens</span><br><span class="line">http://mystore.com/apparel/shoes/womens.html</span><br></pre></td></tr></table></figure>

<p>Full URL to Product Page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/apparel/shoes/womens/nine-west-pump</span><br><span class="line">http://mystore.com/apparel/shoes/womens/nine-west-pump.html</span><br></pre></td></tr></table></figure>

<p>Full URL to CMS Page</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://mystore.com/about-us</span><br></pre></td></tr></table></figure>

<h2 id="第二步：Add-the-Markup-to-the-URL"><a href="#第二步：Add-the-Markup-to-the-URL" class="headerlink" title="第二步：Add the Markup to the URL"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9Aadd-the-markup-to-the-url"></a>第二步：Add the Markup to the URL</h2><p>store URL markup tag 代表的是 Base url 部分，就像这样：<code>http://mystore.com/</code>。有两种用法：</p>
<p><code>store direct_url</code> ：Base url<br><code>store url</code>: 可以加参数的</p>
<p>好了，如果我想要一个<code>http://mystore.com/apparel/shoes/womens</code>，应该怎么用呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;store url=&#x27;apparel/shoes/womens&#x27;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>这样应该就懂了。</p>
<h2 id="第三步：Complete-the-Anchor-Tag"><a href="#第三步：Complete-the-Anchor-Tag" class="headerlink" title="第三步：Complete the Anchor Tag"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9Acomplete-the-anchor-tag"></a>第三步：Complete the Anchor Tag</h2><p>要把上面的地址放到<code>&lt;a&gt;</code>中，就像下面这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#123;&amp;#123;markup tag goes here&amp;#125;&amp;#125;&quot;&gt;Link Text&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>举个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;&amp;#123;&amp;#123;store url=&#x27;apparel/shoes&#x27;&amp;#125;&amp;#125;&quot;&gt;Shoe Sale&lt;/a&gt;</span><br></pre></td></tr></table></figure>

<p>注意引号的用法。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Markup Tags</title>
    <url>/markup-tags/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/markup-tags.html">原文地址</a></em></p>
<p>Markup tag (标记) 是一段包含对某个对象的引用的代码，这个对象可以是变量，URL，图片或者 block。Markup tag 可以嵌入到 pages,blocks,email templates,newsletters 等 HTML 片段中。</p>
<p>Markup tag 被包含在<code>&amp;#123;&amp;#123;&amp;#125;&amp;#125;</code>中，注意他是闭合的。而且他可以由 widget tool 生成，可以直接卸载 HTML 内容里。举例来说，你可以使用 markup tag 来表示店铺的 URL，而不是把完整的路径硬编进 page 中。看下面的例子：</p>
<h2 id="Custom-Variable"><a href="#Custom-Variable" class="headerlink" title="Custom Variable"></a><a href="#custom-variable"></a>Custom Variable</h2><p>变量的 markup tag 可以用来（向 email 模板，blocks,newsletters,content pages 中）插入自定义的变量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;CustomVar code= &quot;my_custom_variable&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<h2 id="Store-URL"><a href="#Store-URL" class="headerlink" title="Store URL"></a><a href="#store-url"></a>Store URL</h2><p>店铺 url markup tag 代表着网站的 base URL，他被当作完整 URL 的第一部分用，就是网站的域名。有两种：<code>store direct_url</code>指向 Base url,<code>store url</code>可以添加参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;store url=&#x27;apparel/shoes/womens&#x27;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>假设你的 base url 是<code>http://example.com</code>，那么该 markup tag 代表的就是<code>http://example.com/apparel/shoes/womens/</code></p>
<h2 id="Media-URL"><a href="#Media-URL" class="headerlink" title="Media URL"></a><a href="#media-url"></a>Media URL</h2><p>动态的媒体 URL markup tag 代表存储在 CDN 上的媒体路径。（译者注：这句不太正确，媒体可以存储在本地，也可以在CDN，都可以使用 media url，他代表着媒体文件的相对位置）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;media url=&#x27;shoe-sale.jpg&#x27;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>假设我都是默认配置，媒体文件存储在本地，那么上面的 markup tag 代表的文件是<code>&lt;root&gt;/pub/media/shoe-sale.jpg</code></p>
<h2 id="Block-ID"><a href="#Block-ID" class="headerlink" title="Block ID"></a><a href="#block-id"></a>Block ID</h2><p>Block ID markup tag 是最容易使用的一种，可以用来在 CMS page 中插入一个 block，甚至可以在 block 中内嵌一个 block。你可以用它为不同的促销或者语言而修改 block 。他是通过 <code>id</code> 引用的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;block id=&#x27;block-id&#x27;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<h2 id="Template-Tag"><a href="#Template-Tag" class="headerlink" title="Template Tag"></a><a href="#template-tag"></a>Template Tag</h2><p>template tag 引用 phtml 模板文件。可以用它在 CMS page 或者 static block 中加载 block 。下面的例子展示了如何向 page 或者 block 中插入 Contact US 表单。</p>
<p>“Contact Us” Template Tag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;block type=&quot;core/template&quot; name=&quot;contactForm&quot; template=&quot;contacts/form.phtml&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>下面的例子展示的是如何按照 category ID 来显示产品列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;block type=&quot;catalog/product_list&quot; category_id=&quot;22&quot; template=&quot;catalog/product/list.phtml&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p><em>译者注：官方 User guide 还没有更正，Magento 2 中上面的写法不起作用，应该是下面的格式。注意原来是 type 现在是 class，译者就在这里白白浪费了一个小时，桑心~~</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;block class=&quot;Magento\Framework\View\Element\Template&quot; name=&quot;contactFormwq&quot; template=&quot;Magento_Contact::form.phtml&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<h2 id="Widget-Code"><a href="#Widget-Code" class="headerlink" title="Widget Code"></a><a href="#widget-code"></a>Widget Code</h2><p>Widget 可以用来展示产品列表，插入复杂的链接，比如基于产品ID的特定产品页。The code that is generated includes the block reference, location of the code module, and corresponding PHTML template. After the code is generated, you can copy and paste it from one place to another.</p>
<p>下面的代码可以用来展示新产品列表</p>
<p>“New Products Grid” Code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;widget type=&quot;catalog/product_widget_new&quot; display_type=&quot;new_products&quot; products_count=&quot;10&quot; template=&quot;catalog/product/widget/new/content/new_grid.phtml&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>下面的代码可以用来展示一个链接到特定产品页（根据产品ID）的链接。<br>“Link to Product” Code</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;widget type=&quot;catalog/product_widget_link&quot; anchor_text=&quot;My Product Link&quot;  title=&quot;My Product Link&quot; template=&quot;catalog/product/widget/link/link_block.phtml&quot; id_path=&quot;product/31&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p>译者注：上面的写法在 Magento 2.1.2 中测试不起作用，译者用 Magento 自带的 <code>Insert Widget</code> 插入第一个例子的 Widget，生成的代码是这样的，各位可以参考下，看看变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;widget type=&quot;Magento\Catalog\Block\Product\Widget\NewWidget&quot; display_type=&quot;new_products&quot; products_count=&quot;10&quot; template=&quot;product/widget/new/content/new_grid.phtml&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>媒体库(Media Gallery)</title>
    <url>/media-gallery/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/media-gallery.html">原文网址</a></em> 产品页面上的 Media Gallery 展示多个与该产品相关的图像、视频或色板。每个缩略图都可以表现不同的产品视角或产品的变体。单击缩略图以浏览, 虽然库的位置因主题而异, 但默认位置就在产品页中主图像的下方。 <img src="/wp-content/uploads/2017/08/storefront-thumbnail-gallery.png" alt="Media Gallery"></p>
<h2 id="放大图片"><a href="#放大图片" class="headerlink" title="放大图片"></a><a href="#%E6%94%BE%E5%A4%A7%E5%9B%BE%E7%89%87"></a>放大图片</h2><p>如果图片尺寸够大可以创造放大效果，那么可以就可以查看鼠标位置的放大图像。放大效果激活时，您可以移动鼠标以查看不同位置的放大图像。放大的选取图像出现在主图的右侧。 <img src="/wp-content/uploads/2017/08/storefront-image-zoom.png" alt="Image Zoom"></p>
<h2 id="Light-Boxes-and-Sliders"><a href="#Light-Boxes-and-Sliders" class="headerlink" title="Light Boxes and Sliders"></a><a href="#light-boxes-and-sliders"></a>Light Boxes and Sliders</h2><p>有许多第三方插件实现 Light Boxes and Sliders ，您可以用他们来增强产品图片的显示效果。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>媒体库(Media Storage)</title>
    <url>/media-storage/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/media-storage.html">原文地址</a></em></p>
<p>Media storage 帮助您组织和获取存储在服务器上的媒体文件。文件的路径是由配置中的 Base URL 决定的。当您编辑pages 和 static blocks 的时候，在编辑器上可以进入 Media Storage 。Media Storage 通常位于和 Magento 程序文件所在的服务器。另外，文件也可以托管在数据里，或者在单独的服务器或 CDN 上。编辑器可以配置为使用静态的或动态的媒URL。（The editor can be configured to use either static or dynamic media URLs for catalog content in category or product descriptions.）</p>
<p><img src="/wp-content/uploads/2016/10/media-storage.png" alt="Media Storage"></p>
<p>译者注：这个 Media Storage 真难找。只有在编辑页面或者静态块的时候，先点击<strong>Show &#x2F; Hide Editor</strong>，然后出现<strong>Insert Image</strong>（在第三个），点击它，就是 Media Storage 了。</p>
<h2 id="上传图片到媒体库"><a href="#上传图片到媒体库" class="headerlink" title="上传图片到媒体库"></a><a href="#%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E5%AA%92%E4%BD%93%E5%BA%93"></a>上传图片到媒体库</h2><ol>
<li>左侧是文件夹树结构。要保存到哪个文件夹，就进入哪个文件。必要的话可以创建文件夹。</li>
<li>点击选择文件，然后选择要上传的文件。</li>
<li>点击 Insert File 就会插入文件了。</li>
<li>To complete the Alt tag, place the cursor between the double-quotes, and enter the alt text（译者没有发现可以写入 Alt ，版本是2.1.0）</li>
<li>点击<strong>Show &#x2F; Hide Editor</strong>可以看到效果。</li>
</ol>
<p>译者注：感觉不太好用。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>商户位置</title>
    <url>/merchant-location/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/payment/merchant-location.html">原文地址</a></em></p>
<p>商户位置设置用来配置付款方式(Payment methods)，如果没有设置任何值的话，会使用默认的国家(Default Country)</p>
<p><img src="/wp-content/uploads/2016/08/config-sales-payment-methods-merchant-location_thumb_0_0.png"></p>
<h2 id="输入商户位置"><a href="#输入商户位置" class="headerlink" title="输入商户位置"></a><a href="#%E8%BE%93%E5%85%A5%E5%95%86%E6%88%B7%E4%BD%8D%E7%BD%AE"></a>输入商户位置</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>付款方式</strong>(Payment methods)</li>
<li>展开 <strong>商户位置</strong> (Merchant Location)选择商户位置</li>
<li>完成后点击保存设置</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>关于邮件服务器</title>
    <url>/mta-mda-mua-relationship/</url>
    <content><![CDATA[<p>Linux 邮件服务器通常使用 Sendmail ，不过看起来 sendmail 的配置比较复杂，所以很多人用 Postfix 。本篇主要是概念篇。</p>
<p><img src="/wp-content/uploads/2016/10/MTA-MDA-MUA_relationship.png"></p>
<p>MTA: Mail Transfer Agent 邮件传输代理，Sendmail 和 Postfix 就是此类。<br>MUA: Mail User Agent 邮件用户代理，像Outlook， Foxmail<br>MDA：Mail Delivery Agent 邮件投递代理，提供邮箱，存放邮件的地方。</p>
<p>MUA 到 MTA，以及 MTA 到 MTA 之间使用的协议就是 SMTP 协议，就是发邮件的过程是 SMTP 协议。<br>MDA 到 MUA 之间常用的协议是 POP3 或 IMAP</p>
<p>专业邮件服务商都有大量的机器来为用户服务，所以通常 MTA 和 MDA 并不是同一台服务器，因此，在Outlook等软件里，我们需要分别填写 SMTP 发送服务器的地址和 POP3 接收服务器的地址。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>MySQL 远程访问</title>
    <url>/mysql-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<h2 id="授权问题"><a href="#授权问题" class="headerlink" title="授权问题"></a><a href="#%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98"></a>授权问题</h2><p>以 root 身份登陆 MySQL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; SELECT User, Host FROM user; -- 查看现有用户和允许连接的主机</span><br><span class="line">+------+-----------+</span><br><span class="line"> User  Host      </span><br><span class="line">+------+-----------+</span><br><span class="line"> root  localhost </span><br><span class="line">+------+-----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>Host 为 localhost 表示只允许 localhost 连接，下面把他改为 <code>%</code> 就可以任意访问了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br></pre></td></tr></table></figure>

<p>理论上来讲只需要下面的代码就行了。 grant all on yourdb.* to yourUsername@yourHost identified by “yourPassword” WITH GRANT OPTION;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>

<h2 id="端口问题"><a href="#端口问题" class="headerlink" title="端口问题"></a><a href="#%E7%AB%AF%E5%8F%A3%E9%97%AE%E9%A2%98%E3%80%82"></a>端口问题</h2><p>登录到服务器后，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -angrep 3306</span><br></pre></td></tr></table></figure>

<p>查看 mysql 默认的端口 3306 是否开启，允许哪个 ip 使用，如果发现 127.0.0.1 就说明 3306 端口只允许本机 ip 访问 下面修改设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure>

<p>将 bind-address &#x3D; 127.0.0.1 注释掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>mysql 远程访问</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 插入中文出错</title>
    <url>/mysql-incorrect-string-value/</url>
    <content><![CDATA[<p>插入中文 MySQL 报告错误：incorrect string value …</p>
<p>原来是字符集的问题。我的数据库，表都使用了默认的字符集 latin1</p>
<p>修改数据字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database databasename default character set utf8;</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database databasename;</span><br></pre></td></tr></table></figure>

<p>修改表的字符集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter table tablename convert to character set utf8 collate utf8_general_ci;</span><br></pre></td></tr></table></figure>

<p>查看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table tablename;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Name in Layout xml is required for cacheable=\&quot;false\&quot; to disable Full Page Cache in Magento 2.3.5</title>
    <url>/name-in-layout-xml-is-required-for-cacheablefalse-to-disable-full-page-cache-in-magento-2-3-5/</url>
    <content><![CDATA[<p>Name in Layout xml is required for cacheable&#x3D;”false” to disable Full Page Cache in Magento 2.3.5, if miss name, the page cache will hit even though we used cacheable&#x3D;”false”</p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>商业创新的新时代(翻译)</title>
    <url>/new-era-commerce-innovation/</url>
    <content><![CDATA[<p><em>前言：很多对 Magento 1有所了解的人，非常想知道 Magento 2 有哪些改变。博主认为要尽量全面的描述这种改变是一个很大的挑战，可选择的角度也很多，有的是从营销的角度，有的是技术的角度，有的宏观，有的比较详细，有的来自社区，有的来自官方。那么如何将他们总结出来，方便读者更快地抓住重点呢？博主经验有限，于是决定从翻译一些比较权威的文章开始，或许翻译的过程中可以理清思路呢。有翻译错误的，不到位的请指正，谢谢！</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是 MAGENTO 的营销团队于2015年11月17日发布在官方博客的文章，是 Magento 2.0 全面上市的一个通告。我们可以从这里了解下官方所认为的营销亮点。</span><br></pre></td></tr></table></figure>

<p><em>原文地址<a href="https://magento.com/blog/magento-news/new-era-commerce-innovation">A NEW ERA OF COMMERCE INNOVATION</a></em></p>
<p>今天，我们宣布下一代开源电子商城平台 —— Magento 2.0 全面上市了！新的平台让品牌商、零售商及 B2B、 B2C 行业的各类企业能够快速地、经济高效地，交付引人入胜的全方位渠道购物体验。Magento 2.0 提供了更好的性能和可扩展性，还提供了新的特性以提高转化率、业务灵活性和生产率。新平台还建立在我们的开源传统上，为全球的合作伙伴和开发者提供无与伦比的灵活性和创新机会。</p>
<p>基于这个强大平台的新产品：Magento 2.0 企业版和社区版今天开始可供下载。</p>
<h2 id="开放，灵活的架构"><a href="#开放，灵活的架构" class="headerlink" title="开放，灵活的架构"></a><a href="#%E5%BC%80%E6%94%BE%EF%BC%8C%E7%81%B5%E6%B4%BB%E7%9A%84%E6%9E%B6%E6%9E%84"></a>开放，灵活的架构</h2><p>支撑这些新版本的是下一代架构，该架构提供了无与伦比的灵活性，他将实现您的商务愿景。它的代码是模块化的，可以更容易地定制，更快发布到市场上，更灵活地部署到公有的或私有的云环境中。更多，更有效的 APIs 让您比以往更容易地连接第三方解决方案，操作为新产品线或地区制作的主题。种类繁多的扩展也让您的站点能够更快地、更省钱地得到增强。</p>
<h2 id="有吸引力的购物体验"><a href="#有吸引力的购物体验" class="headerlink" title="有吸引力的购物体验"></a><a href="#%E6%9C%89%E5%90%B8%E5%BC%95%E5%8A%9B%E7%9A%84%E8%B4%AD%E7%89%A9%E4%BD%93%E9%AA%8C"></a>有吸引力的购物体验</h2><p>创建有吸引力的、无缝跨越任何设备的、个性化的客户体验是 Magento 2.0 平台的核心。新的响应式设计的默认主题让您可以快速搭建一个没有时间地区限制的网站。您还可以通过视频展示您的产品。新的结算页更容易定制化，他更少的结算步骤和更少的必要信息填写，进一步提高了转化率。您还可以提供更方便的一键创建账户，以保存客户信息供后续购物用。</p>
<h2 id="增强的业务敏捷性和生产力"><a href="#增强的业务敏捷性和生产力" class="headerlink" title="增强的业务敏捷性和生产力"></a><a href="#%E5%A2%9E%E5%BC%BA%E7%9A%84%E4%B8%9A%E5%8A%A1%E6%95%8F%E6%8D%B7%E6%80%A7%E5%92%8C%E7%94%9F%E4%BA%A7%E5%8A%9B"></a>增强的业务敏捷性和生产力</h2><p>Magento 平台也正在革新商家的经验，让您能够更有效地运作和处理快速增长，而不用扩大您的团队。新的管理员面板设计提供了一个精简的、像消费者那样的界面，这将帮助您节约日常管理事务的时间，而且对新的团队成员更直观，更容易学习。它还是触屏友好的，所以您可以在您的触屏设备上更新或者追踪销售什么的。</p>
<p>改进的业务工具使您可以不断地优化您的操作来促进业务增长。现在，您可以毫不费力地在管理面板中自定义和保存视图，以便快速访问关键业务信息。通过一步一步引导的产品创建工具，及比以前快4倍的产品导入功能，让设置新产品也更快了。</p>
<h2 id="企业级的可扩展性和性能"><a href="#企业级的可扩展性和性能" class="headerlink" title="企业级的可扩展性和性能"></a><a href="#%E4%BC%81%E4%B8%9A%E7%BA%A7%E7%9A%84%E5%8F%AF%E6%89%A9%E5%B1%95%E6%80%A7%E5%92%8C%E6%80%A7%E8%83%BD"></a>企业级的可扩展性和性能</h2><p>Magento 的平台已经努力提供许多目录和结账页面50%以上的更快的页面加载时间，以帮助您取悦客户和提高转化率。它预先集成 Varnish 来缓存页面内容，以提供更好的性能，优化代码和图像以更快加载他们。您的团队也会很高兴，因为改进的 Admin 管理性能和更多的并发更新支持。Magento 2.0 企业版还提供了企业级的可扩展性和高可用性，支持数据库集群。</p>
<h2 id="安全支付"><a href="#安全支付" class="headerlink" title="安全支付"></a><a href="#%E5%AE%89%E5%85%A8%E6%94%AF%E4%BB%98"></a>安全支付</h2><p>此外，Magento 平台自带PayPal, Braintree, 和 Authorize.net 的支付集成。Magento 2.0 企业版还集成了 WorldPay（苏格兰皇家银行）和 CyberSource。所有版本都提高了安全性，提供了根据所选付款方法，追求符合PCI法规最简单的级别的能力。</p>
<h2 id="更容易升级和维护"><a href="#更容易升级和维护" class="headerlink" title="更容易升级和维护"></a><a href="#%E6%9B%B4%E5%AE%B9%E6%98%93%E5%8D%87%E7%BA%A7%E5%92%8C%E7%BB%B4%E6%8A%A4"></a>更容易升级和维护</h2><p>最后，这种现代的、模块化的架构减少了复杂性和维护成本，他通过简化升级将在未来证明您的投资是正确的。这意味着，每季 Magento 发布新版时，您都可以轻易地融入创新功能，以推动更多的销售和更高的效率。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>Object lifestyle configuration</title>
    <url>/object-lifestyle-configuration/</url>
    <content><![CDATA[<p>The lifestyle of an object determines the number of instances that can exist of that object. You can configure dependencies in Magento to have the following lifestyles:</p>
<ul>
<li>Singleton(default) - One instance of this class exists. The object manager creates it at the first request. Requesting the class again returns the same instance. Disposing or ending the container registered to it releases the instance.</li>
<li>Transient - The object manager creates a new instance of the class for every request.</li>
</ul>
<p>The shared property determines the lifestyle of both argument and type configurations.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Filesystem&quot; shared=&quot;false&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;adapter&quot; xsi:type=&quot;object&quot; shared=&quot;false&quot;&gt;Magento\Filesystem\Adapter\Local&lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>In this example Magento\Filesystem is not shared, so all clients will retrieve separate instances of Magento\Filesystem. Also, every instance of Magento\Filesystem will get separate instance of $adapter, because it too is non-shared.</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h1><p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/build/di-xml-file.html#object-lifestyle-configuration">devDocs — Object lifestyle configuration</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>新增页面 (Adding a New Page)</title>
    <url>/page-add/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/page-add.html">原文地址</a></em></p>
<p>不管是什么类型的页面，本质上新增页面的过程是一样的。您可以在页面中包含文本，图片，内容块，变量及widget。大多数内容页面被设计为给主要讨好搜索引擎，其次才是给人看的。当您选择页面的标题和URL，meta 数据和内容的时候，请牢记您的页面有两种完全不同的看客（搜索引擎和人），他们的需求是很不一样的。</p>
<p>下面的步骤帮助您通览创建一个基本的页面的过程。高级的用法此处略过，不过其他章节会有涉及。</p>
<p><img src="/wp-content/uploads/2016/10/pages.png" alt="Pages"></p>
<h2 id="第一步：创建新的页面"><a href="#第一步：创建新的页面" class="headerlink" title="第一步：创建新的页面"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%96%B0%E7%9A%84%E9%A1%B5%E9%9D%A2"></a>第一步：创建新的页面</h2><ol>
<li>后台侧边栏，点击<strong>内容</strong>(Content)，在<strong>元素</strong>(Elements)下选择<strong>页面</strong>(Pages)</li>
<li>点击<strong>Add New Page</strong>按钮<br><img src="/wp-content/uploads/2016/10/pages-new-page.png" alt="New Page"></li>
<li>在新的页面，做如下操作：<br>a. 默认情况下，你一保存，页面就被发不出去了。如果你不想马上发布出去，设置<strong>Enable Page</strong>为 No<br>b. 输入<strong>页面标题</strong>(Page Title)，这个标题会出现在面包屑导航中。</li>
</ol>
<h3 id="第二步：完成内容"><a href="#第二步：完成内容" class="headerlink" title="第二步：完成内容"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%86%85%E5%AE%B9"></a>第二步：完成内容</h3><ol>
<li>展开<strong>内容</strong>(Content)部分<br><img src="/wp-content/uploads/2016/10/page-content.png" alt="Content"></li>
<li>在<strong>内容标题</strong>中输入您页面上希望显示的标题</li>
<li>默认情况下，编辑工具是所见即所得的模式。如果你更喜欢编写HTML代码的话，点击<strong>Show &#x2F; Hide Editor</strong></li>
<li>按需要完成内容的文本和格式组织。您可以添加图片，变量和widgets。了解更多，请查看Using the Editor</li>
<li>点击<strong>Save and Continue Edit</strong></li>
</ol>
<h3 id="第三步：完成SEO信息的填写"><a href="#第三步：完成SEO信息的填写" class="headerlink" title="第三步：完成SEO信息的填写"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90seo%E4%BF%A1%E6%81%AF%E7%9A%84%E5%A1%AB%E5%86%99"></a>第三步：完成SEO信息的填写</h3><ol>
<li>展开<strong>搜索引擎优化</strong>(Search Engine Optimization)部分，做如下操作：<br>a. 页面保存时，会创建一个默认的URL Key，这个URL Key取了Content Heading 的值。您可以接受这个默认值，或者输入其他的值。推荐做法是小写字母加短横线作为分隔符，不要用空格。<br>b. 输入<strong>Meta Title</strong>，这个值必须少于70个字符，会出现在浏览器的标题栏和选项卡中。<br>c. 输入您选择的高质量的关键词，Meta Keywords 搜索引擎会用它来索引您的页面。关键词之间使用英文逗号分隔。Meta Keywords 会被有些搜索引擎忽略，不过有些还是会采用的。<br>d. 在<strong>Meta Description</strong>字段中，输入您页面的简短描述，这个影响搜索引擎排序。理想情况下，描述信息应该在150到160个字符之间，最多不要超过255个字符。<br><img src="/wp-content/uploads/2016/10/page-search-engine-optimization.png" alt="Search Engine Optimization"></li>
<li>点击<strong>Save and Continue Edit</strong></li>
</ol>
<h3 id="第四步：决定该页面的作用域"><a href="#第四步：决定该页面的作用域" class="headerlink" title="第四步：决定该页面的作用域"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%86%B3%E5%AE%9A%E8%AF%A5%E9%A1%B5%E9%9D%A2%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F"></a>第四步：决定该页面的作用域</h3><ol>
<li>展开<strong>Page in Websites</strong>部分</li>
<li>在<strong>Store View</strong>列表中选择你希望该页面出现的店铺视图。如果您有多个websites，选择希望该页面可见的每个website 和store view<br><img src="/wp-content/uploads/2016/10/page-in-websites.png" alt="Pages in Websites"></li>
</ol>
<h3 id="第五步：Enter-Any-Design-Changes-（可选）"><a href="#第五步：Enter-Any-Design-Changes-（可选）" class="headerlink" title="第五步：Enter Any Design Changes （可选）"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9Aenter-any-design-changes-%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"></a>第五步：Enter Any Design Changes （可选）</h3><p><img src="/wp-content/uploads/2016/10/page-design.png" alt="Design"></p>
<p>要设定Design 变动的时间，请展开<strong>Custom Design Update</strong>部分，做如下事情：</p>
<p>a. 使用日历控件选择 Design Change 起作用的时间段。<br>b. 需要的话，设置<strong>New Theme</strong>为该页面使用的不同主题。<br>c. 需要的话，设置<strong>New Layout</strong>为以下值：</p>
<ul>
<li>1 column</li>
<li>2 columns with left bar</li>
<li>2 columns with right bar</li>
<li>3 columns</li>
<li>Empty</li>
</ul>
<p><img src="/wp-content/uploads/2016/10/page-custom-design-update.png" alt="Custom Design Update"></p>
<h2 id="第六步：预览页面"><a href="#第六步：预览页面" class="headerlink" title="第六步：预览页面"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E9%A2%84%E8%A7%88%E9%A1%B5%E9%9D%A2"></a>第六步：预览页面</h2><ol>
<li>点击<strong>Save Page</strong>保存页面，点击<strong>Back</strong>返回页面表格。</li>
<li>在表格中找到页面，在 Action 列，选择 View。</li>
</ol>
<h2 id="第七步：发布页面"><a href="#第七步：发布页面" class="headerlink" title="第七步：发布页面"></a><a href="#%E7%AC%AC%E4%B8%83%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E9%A1%B5%E9%9D%A2"></a>第七步：发布页面</h2><p>设置页面的 status 为 Enabled 就发布出去了。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>更改首页(Changing the Home Page)</title>
    <url>/page-home-new/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/page-home-new.html">原文地址</a></em></p>
<p>您可以有好几个不同的主页，然后选择和激活其中某个作为默认的首页。</p>
<h2 id="更改首页"><a href="#更改首页" class="headerlink" title="更改首页"></a><a href="#%E6%9B%B4%E6%94%B9%E9%A6%96%E9%A1%B5"></a>更改首页</h2><ol>
<li>完成页面的新增。</li>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>常规</strong>(General)&gt; <strong>Web</strong>(Web)</li>
<li>展开 <strong>Default Pages</strong> 做如下操作:<br><img src="/wp-content/uploads/2016/10/config-general-web-default-pages.png" alt="Default Pages"><br>a. 设置<strong>CMS Home Pag</strong>为一个新的页面<br>b. 点击 <strong>Save Config</strong></li>
<li>前往<strong>Cache Management</strong>，刷新缓存。</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Storefront Examples</title>
    <url>/page-layout-examples/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/page-layout-examples.html">原文网址</a></p>
<p>列的大小是由 theme 的 css 决定的。有些主题使用的是固定宽度的布局，而另一些使用百分比以使得他响应设备的宽度。</p>
<p>大多数的桌面主题是固定宽度的，所有的活动也发生在这个封闭的列中。根据您的屏幕分辨率，主要列的两侧会有不同的大小的空白空间。</p>
<h2 id="1-Column-Layout"><a href="#1-Column-Layout" class="headerlink" title="1 Column Layout"></a><a href="#1-column-layout"></a>1 Column Layout</h2><p>The content area of a “1 Column” layout spans the full-width of the main column. This layout is often used for a home page with a large banner or slider, or pages that require no navigation, such as a login page, splash page, video, or full-page advertisement.</p>
<p><img src="/wp-content/uploads/2016/11/page-layout-1-col_thumb_0_0.png"></p>
<h2 id="2-Columns-with-Left-Bar"><a href="#2-Columns-with-Left-Bar" class="headerlink" title="2 Columns with Left Bar"></a><a href="#2-columns-with-left-bar"></a>2 Columns with Left Bar</h2><p><img src="/wp-content/uploads/2016/11/page-layout-2-col-left-bar_thumb_0_0.png"></p>
<h2 id="2-Columns-with-Right-Bar"><a href="#2-Columns-with-Right-Bar" class="headerlink" title="2 Columns with Right Bar"></a><a href="#2-columns-with-right-bar"></a>2 Columns with Right Bar</h2><p><img src="/wp-content/uploads/2016/11/page-layout-2-col-right-bar_thumb_0_0.png"></p>
<h2 id="3-Columns"><a href="#3-Columns" class="headerlink" title="3 Columns"></a><a href="#3-columns"></a>3 Columns</h2><p><img src="/wp-content/uploads/2016/11/page-layout-3-col_thumb_0_0.png"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Page Setup</title>
    <url>/page-setup/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/page-setup.html">原文地址</a></p>
<p>页面的主要部分是由一组标准的 HTML 标签控制的。一些标记用来决定页面中每个部分的字体，颜色，大小，背景色以及图片。其他设置控制页面中的元素，例如头部的 logo，页脚的版权声明。Page Setup 部分对应着页面的 HTML 结构，许多基础的属性可以在后台进行设置。</p>
<p><img src="/wp-content/uploads/2016/11/storefront-home-html-inspect.png" alt="HTML Page Sections"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>page types</title>
    <url>/page-types/</url>
    <content><![CDATA[<p>Page types are semantic abstractions of those controller actions which are used for page rendering. They help to qualify pages by context type, like Product View page, Shopping Cart page, and so on, providing business users the ability to customize page design. In particular, page types are used in the widget creation to define the pages where a widget can be displayed.</p>
<p>Page types are defined for the frontend area only, that is for the store front pages.</p>
<p>详细的请阅读参考文档。下面说说个人的理解。</p>
<p>page type 是页面的类型，比如产品列表页，不管你浏览的是哪一个产品分类，它的 layout handle 都是 <code>catalog_category_view</code>，而他的 label 是 <code>Catalog Category</code>。</p>
<p>你应该已经知道 module 的 layout handle 是怎样申明以及如何对应的，如果不是很清楚，可以参考<a href="/alan-magento-2-mvvm-mvc/">Magento 2 简介 —— 不再是 MVC （翻译）</a></p>
<p>page type 的声明</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># File: magento\module-catalog\etc\frontend\page_types.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page_types xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_types.xsd&quot;&gt;</span><br><span class="line">    &lt;type id=&quot;catalog_category_view&quot; label=&quot;Catalog Category&quot;/&gt;</span><br><span class="line">    &lt;type id=&quot;catalog_product_compare_index&quot; label=&quot;Catalog Product Compare List&quot;/&gt;</span><br><span class="line">    &lt;type id=&quot;catalog_product_gallery&quot; label=&quot;Catalog Product Image Gallery Popup&quot;/&gt;</span><br><span class="line">    &lt;type id=&quot;catalog_product_view&quot; label=&quot;Catalog Product View (Any)&quot;/&gt;</span><br><span class="line">&lt;/page_types&gt;</span><br></pre></td></tr></table></figure>

<p>注意，他只可以用于 <code>frontend</code>，在相应的位置创建 <code>page_types.xml</code>，并像上面那样申明，widget 创建时就可以找到这个页面类型了。</p>
<p>创建 wiget 请参考<a href="/widget-create/">创建小部件 (Creating a Widget)</a></p>
<p>下面讲创建小部件与 page types 相关的地方。</p>
<p>在 <strong>Layout Updates</strong> 部分点击 <strong>Add Layout Update</strong>，当你在 <strong>Display on</strong> 中选择了 <strong>Specified Pages</strong> 后，在 <strong>Page</strong> 下拉列表中你就可以看到如下所示的各种 page types。你可以找到 <code>Catalog Category</code> ，这和上面的声明是一致的。</p>
<p><img src="/wp-content/uploads/2016/11/page_types_widget_specified-page.png"></p>
<p><img src="/wp-content/uploads/2016/11/page_types_widget_layout-handles.png"></p>
<p>你自己的模块也可以通过声明一个 page type ，这样就可以在创建 widget 时指定它了。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://devdocs.magento.com/guides/v2.0/architecture/view/page-type.html">Introduction to page types</a></p>
]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>核心内容页(Core Content Pages)</title>
    <url>/pages-core/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/pages-core.html">原文地址</a></em></p>
<p>Magento 带演示数据的店铺包含了一些帮助您入门的关于核心内容页的例子。您可以看一看以下页面，确定他们的内容包含的是您店铺的资料，而不是演示数据。</p>
<p>不带演示数据的 Magento 安装后的核心内容页没有 Magento Demo 多。Magento 不带演示数据的核心内容页有：Home Page, Enable Cookies, 404 Not Found, Privacy and Cookie Policy.</p>
<h2 id="内容页"><a href="#内容页" class="headerlink" title="内容页"></a><a href="#%E5%86%85%E5%AE%B9%E9%A1%B5"></a>内容页</h2><h3 id="主页-Home"><a href="#主页-Home" class="headerlink" title="主页 Home"></a><a href="#%E4%B8%BB%E9%A1%B5-home"></a>主页 Home</h3><p><img src="/wp-content/uploads/2016/10/storefront-homepage_212x210.png"><br>demo 的主页包含一个Banner，图像轮播，几个静态的Blocks，还有一些新产品列表</p>
<h3 id="关于我们-About-Us"><a href="#关于我们-About-Us" class="headerlink" title="关于我们 About Us"></a><a href="#%E5%85%B3%E4%BA%8E%E6%88%91%E4%BB%AC-about-us"></a>关于我们 About Us</h3><p><img src="/wp-content/uploads/2016/10/storefront-about-us_212x160.png"><br>主页页脚有关于我们的链接。您可以放一些图片、视频、新闻或者公告的链接。</p>
<h3 id="客户服务-Customer-Service"><a href="#客户服务-Customer-Service" class="headerlink" title="客户服务 Customer Service"></a><a href="#%E5%AE%A2%E6%88%B7%E6%9C%8D%E5%8A%A1-customer-service"></a>客户服务 Customer Service</h3><p><img src="/wp-content/uploads/2016/10/storefront-customer-service_212x297.png"><br>The “Customer Service” page is another node in the page hierarchy. The two headers on the page have content that only becomes visible when the header is clicked.<br>(为什么没翻译呢？因为博主没发现 M2.1 像上面说的那样。。)</p>
<h3 id="保密规则-Privacy-Policy"><a href="#保密规则-Privacy-Policy" class="headerlink" title="保密规则 Privacy Policy"></a><a href="#%E4%BF%9D%E5%AF%86%E8%A7%84%E5%88%99-privacy-policy"></a>保密规则 Privacy Policy</h3><p><img src="/wp-content/uploads/2016/10/storefront-privacy-policy_212x173.png"><br>您店铺的 Privacy Policy 内容页应该被更正为您店铺自己的规则。推荐做法是，该页内容陈述您公司收集客户的哪些信息，以及这些信息如何使用。</p>
<h3 id="404页-Page-Not-Found"><a href="#404页-Page-Not-Found" class="headerlink" title="404页 Page Not Found"></a><a href="#404%E9%A1%B5-page-not-found"></a>404页 Page Not Found</h3><p><img src="/wp-content/uploads/2016/10/storefront-page-not-found_212x163.png"><br>这是找不到页面返回404错误时呈现的页面。这个页面还可以用来给客户提供一些他可能感兴趣的产品链接。</p>
<h3 id="启用Cookie-Enable-Cookies"><a href="#启用Cookie-Enable-Cookies" class="headerlink" title="启用Cookie (Enable Cookies)"></a><a href="#%E5%90%AF%E7%94%A8cookie-(enable-cookies)"></a>启用Cookie (Enable Cookies)</h3><p><img src="/wp-content/uploads/2016/10/storefront-enable-cookies_212x163.png"><br>如果您的客户使用的浏览器禁用了 Cookie，那么他会看到这个页面。这个页面教客户如何一步步地启用cookie。</p>
<h3 id="服务不可用-Service-Unavailable"><a href="#服务不可用-Service-Unavailable" class="headerlink" title="服务不可用 Service Unavailable"></a><a href="#%E6%9C%8D%E5%8A%A1%E4%B8%8D%E5%8F%AF%E7%94%A8-service-unavailable"></a>服务不可用 Service Unavailable</h3><p><img src="/wp-content/uploads/2016/10/storefront-503-service-unavailable_212x138.png"><br>这个页面又叫503页面，服务器返回503错误代码的时候就会显示这个页面。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>默认页面 Default Pages</title>
    <url>/pages-default/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/pages-default.html">原文网址</a></em></p>
<p>默认页面的配置决定着和Base URL 相关的着陆页，和相应的主页。他还决定着页面找不到时的返回错误页面，和面包屑导航到最顶端时。</p>
<h2 id="配置默认页面"><a href="#配置默认页面" class="headerlink" title="配置默认页面"></a><a href="#%E9%85%8D%E7%BD%AE%E9%BB%98%E8%AE%A4%E9%A1%B5%E9%9D%A2"></a>配置默认页面</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>常规</strong>(General)&gt; <strong>Web</strong></li>
<li>展开 <strong>默认页面</strong>(Default Pages) 做如下操作<br><img src="/wp-content/uploads/2016/10/config-general-web-default-pages.png" alt="Default Pages"><br>a. In the <strong>Default Web URL</strong> field, enter the relative path to the folder in the Magento installation that contains the landing page. The default value is “cms.”<br>(译者注：此处指默认的首页对应的URL 路径，虽然我们在浏览器中看到的URL 和此处设置的不同，但是通过访问该路径可以访问到默认的首页。当您输入网站地址后，首页实际上转到了该页面，但是没有改变浏览器的地址栏。)<br>b. 设置<strong>CMS Home Page</strong> 为您的首页<br>c. In the <strong>Default No-route URL</strong> field, enter the relative path to the folder in the Magento installation where the page is redirected when a “404 Page Not Found” error occurs. The default value is “cms&#x2F;index&#x2F;noRoute.”<br>(译者注：404页面的路径，同上面的首页路径)<br>d. 设置<strong>CMS No Route Page</strong>为您404 Not Found 页面<br>e. 设置<strong>CMS No Cookies Page</strong>为客户禁用Cookie时看到的页面。<br>f. 如果想要每个CMS 页面均包含面包屑导航，设置<strong>Show Breadcrumbs for CMS Pages</strong>为 Yes</li>
<li>完成后，点击 Save Config</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>页面工作区 Page Workspace Controls</title>
    <url>/pages-workspace/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/pages-workspace.html">原文地址</a></em></p>
<p>页面工作区包含一些工具，帮助您快速找到需要的页面，完成单个或多个页面的日常维护工作。您还可以在表格中快速编辑页面的属性。</p>
<p><img src="/wp-content/uploads/2016/10/pages.png" alt="Pages Grid"></p>
<h2 id="快速编辑页面的属性"><a href="#快速编辑页面的属性" class="headerlink" title="快速编辑页面的属性"></a><a href="#%E5%BF%AB%E9%80%9F%E7%BC%96%E8%BE%91%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%B1%9E%E6%80%A7"></a>快速编辑页面的属性</h2><ol>
<li>点击表格的任意行。多选请使用行前的复选框。<br><img src="/wp-content/uploads/2016/10/page-grid-properties-update.png" alt="Update Page Properties"></li>
<li>修改如下属性：<ul>
<li>Titl</li>
<li>URL Key</li>
<li>Status</li>
<li>Layout</li>
</ul>
</li>
<li>完成后，点击 Save</li>
</ol>
<h2 id="工作区控件-Workspace-Controls"><a href="#工作区控件-Workspace-Controls" class="headerlink" title="工作区控件 Workspace Controls"></a><a href="#%E5%B7%A5%E4%BD%9C%E5%8C%BA%E6%8E%A7%E4%BB%B6-workspace-controls"></a>工作区控件 Workspace Controls</h2><p>控件</p>
<p>描述</p>
<p>Add New Page</p>
<p>新增页面</p>
<p>Search</p>
<p>Initiates a catalog search based on the current filters.</p>
<p>Actions</p>
<p>这里是可对选中的行进行的操作：Delete,Disable,Enable,Edit</p>
<p>Select</p>
<p>控制表格第一列的复选框，全选或者全不选</p>
<p>Edit</p>
<p>进入新的页面对更详细的内容进行编辑</p>
<h2 id="列说明-Columns"><a href="#列说明-Columns" class="headerlink" title="列说明 Columns"></a><a href="#%E5%88%97%E8%AF%B4%E6%98%8E-columns"></a>列说明 Columns</h2><p>Column</p>
<p>Description</p>
<p>Select</p>
<p>用来进行全选和全不选</p>
<p>ID</p>
<p>每个页面分配到的ID</p>
<p>Title</p>
<p>页的标题</p>
<p>URL Key</p>
<p>类似于文件名，URL 路径唯一确定该页面</p>
<p>Layout</p>
<p>决定页的布局：有一栏式的，带左侧边栏的两栏式，带右侧边栏的两栏，三栏式，空样式</p>
<p>Store View</p>
<p>可以用来关联页面和特定的店铺视图</p>
<p>Status</p>
<p>表示当前页面是否对外可见或者不可见</p>
<p>Modified</p>
<p>最近修改时间</p>
<p>Created</p>
<p>页面创建时间</p>
<p>Action</p>
<p>对单个记录可以进行的操作：Edit(以编辑模式打开某个页面)，Delete（删除该页面），View（以预览模式展示该页面）</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>页面 Pages</title>
    <url>/pages/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/pages.html">原文网址</a></em></p>
<p>所有内容可以看作是商店里货架上的商品。你知道吗？社会媒体的内容保质期只有不到24小时。内容的潜在保质期概念可以帮助您更好地决定投资在哪些内容上。</p>
<p>保质期长的内容有时被称为evergreen content。这种内容包括客户成功案例，完成某事的指导，FAQ。相反，保质期短的内容有事件，行业新闻，新闻稿。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0"></a>相关文章</h2><ul>
<li><a href="/pages-core/">核心内容页(Core Content Pages)</a><ul>
<li><a href="/pages-default/">默认页面 Default Pages</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>php debug</title>
    <url>/php-debug/</url>
    <content><![CDATA[<h2 id="postman-请求断点调试"><a href="#postman-请求断点调试" class="headerlink" title="postman 请求断点调试"></a><a href="#postman-%E8%AF%B7%E6%B1%82%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95"></a>postman 请求断点调试</h2><p>请求地址 + <code>?XDEBUG_SESSION_START=PHPSTORM</code> for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://wendym230ce.me/test/index/index?XDEBUG_SESSION_START=PHPSTORM</span><br></pre></td></tr></table></figure>

<h2 id="php-cli-远程断点调试"><a href="#php-cli-远程断点调试" class="headerlink" title="php cli 远程断点调试"></a><a href="#php-cli-%E8%BF%9C%E7%A8%8B%E6%96%AD%E7%82%B9%E8%B0%83%E8%AF%95"></a>php cli 远程断点调试</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export XDEBUG_CONFIG=&quot;remote_enable=1 remote_mode=req remote_port=9000 remote_host=XX.XX.XX.XX remote_connect_back=1&quot;</span><br><span class="line">export PHP_IDE_CONFIG=&quot;serverName=wendym231ce.me&quot;</span><br></pre></td></tr></table></figure>

<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p><a href="https://www.hellomagento2.com/php-%e8%b0%83%e8%af%95/">PHP 调试</a> <a href="https://www.jetbrains.com/help/phpstorm/debugging-a-php-cli-script.html">Debugging a PHP CLI script</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>php 不是内部或外部命令，也不是可运行的程序或批处理文件</title>
    <url>/php-path/</url>
    <content><![CDATA[<p>在 windows CMD 下运行php bin\magento 出现错误提示：’php’ 不是内部或外部命令，也不是可运行的程序或批处理文件，这是因为没有配置 PATH 环境变量。</p>
<p>以 win10 为例，找到<code>此电脑</code>右击选择属性，点击左侧的<code>高级系统设置</code>，选择<code>高级</code> &gt; <code>环境变量</code></p>
<p><img src="/wp-content/uploads/2016/08/php-path.png"></p>
<p>弹出<code>环境变量</code>窗口，找到<code>PATH</code>，点击<code>编辑</code></p>
<p><img src="/wp-content/uploads/2016/08/php-path2.png"></p>
<p>在<code>编辑环境变量</code>窗口，输入你的 php.exe 所在的路径，保存后要重启一下才会生效.</p>
<p><img src="/wp-content/uploads/2016/08/php-path3.png"></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP - SSL certificate error unable to get local issuer certificate</title>
    <url>/php-ssl-certificate-error-unable-to-get-local-issuer-certificate/</url>
    <content><![CDATA[<p>WAMP worked!</p>
<p><a href="https://stackoverflow.com/a/32095378">Solution</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>php 的时间和时区</title>
    <url>/php-time-timezone-strtotime/</url>
    <content><![CDATA[<p><code>time</code>返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数。不受时区设置的影响。</p>
<p><code>date</code>格式化一个本地时间。跟时区设置有关系。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$timezone = &quot;Asia/Shanghai&quot;;</span><br><span class="line">$currentTimezone = &quot;UTC&quot;;</span><br><span class="line">@date_default_timezone_set($timezone);</span><br><span class="line">echo $date = date(&#x27;Y-m-d H:i:s&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo  time();</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">@date_default_timezone_set($currentTimezone);</span><br><span class="line">echo date(&#x27;Y-m-d H:i:s&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo time();</span><br><span class="line">---------------------------------</span><br><span class="line">2016-10-08 11:24:43</span><br><span class="line">1475897083</span><br><span class="line">2016-10-08 03:24:43</span><br><span class="line">1475897083</span><br></pre></td></tr></table></figure>

<p><code>strtotime</code>受时区设置的影响，将日期时间描述解析为 Unix 时间戳。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$timezone = &quot;Asia/Shanghai&quot;;</span><br><span class="line">$currentTimezone = &quot;UTC&quot;;</span><br><span class="line">@date_default_timezone_set($timezone);</span><br><span class="line">echo $date = date(&#x27;Y-m-d H:i:s&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo time();</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">@date_default_timezone_set($currentTimezone);</span><br><span class="line">echo date(&#x27;Y-m-d H:i:s&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">// 这个时间戳是不正确的，不符合实际的</span><br><span class="line">echo $time = strtotime($date);</span><br><span class="line">------------------------------</span><br><span class="line">2016-10-08 11:22:06</span><br><span class="line">1475896926</span><br><span class="line">2016-10-08 03:22:06</span><br><span class="line">1475925726</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>php 函数返回值声明</title>
    <url>/php-%E5%87%BD%E6%95%B0%E8%BF%94%E5%9B%9E%E5%80%BC%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<p>php7 支持函数返回值声明。就像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function sum($a, $b): float &#123;</span><br><span class="line">    return $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Note that a float will be returned.</span><br><span class="line">var_dump(sum(1, 2));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">float(3)</span><br></pre></td></tr></table></figure>

<p>在 default weak 模式下，会自动转换返回的类型。在 strong 模式下，如果类型不正确，会抛出类型错误异常。 如果是重写父函数，那么该函数的返回值类型声明也要跟父函数一样。如果父函数没有声明返回值类型，那么子函数是可以声明的。 php7.1.0 开始，可以在冒号以前加上问号(?:) 来表示可以返回 NULL 或特定的类型 比如像这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function sum($a, $b): ?float &#123;</span><br><span class="line">    return $a + $b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Note that a float will be returned.</span><br><span class="line">var_dump(sum(1, 2));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>这表示可以返回 NULL 或者 float 问号不仅可以放在返回值之前，还可以放在函数参数前，表示可以为 NULL 比如这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="line"></span><br><span class="line">function test(?string $name)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&#x27;elePHPant&#x27;);</span><br><span class="line">test(null);</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string(9) &quot;elePHPant&quot;</span><br><span class="line">null</span><br><span class="line">Uncaught Error: Too few arguments to function test(), 0 passed in...</span><br></pre></td></tr></table></figure>

<p>这并不影响默认值的用法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="line"></span><br><span class="line">function test(?string $name = &#x27;dudu&#x27;)</span><br><span class="line">&#123;</span><br><span class="line">    var_dump($name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&#x27;elePHPant&#x27;);</span><br><span class="line">test(null);</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>结果是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string(9) &quot;elePHPant&quot;</span><br><span class="line">null</span><br><span class="line">string(4) &quot;dudu&quot;</span><br></pre></td></tr></table></figure>

<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.php.net/manual/en/functions.returning-values.php">Returning values</a> <a href="https://php.net/manual/en/migration71.new-features.php">Nullable types</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>PHPStorm 一直 index</title>
    <url>/phpstorm-%E4%B8%80%E7%9B%B4-index/</url>
    <content><![CDATA[<p>解决方法： 删除 <code>Users\.PhpStorm2017.3\system</code> 下的 <code>caches</code> 文件夹</p>
<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p><a href="https://stackoverflow.com/questions/15991561/intelli-j-idea-takes-forever-to-update-indices">https://stackoverflow.com/questions/15991561/intelli-j-idea-takes-forever-to-update-indices</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>PHP 调试</title>
    <url>/php-%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="500-错误"><a href="#500-错误" class="headerlink" title="500 错误"></a><a href="#500-%E9%94%99%E8%AF%AF"></a>500 错误</h2><p><img src="/wp-content/uploads/2018/02/50-http-error.png"> 下面我们对开发环境（Apache）做一些配置，使其返回错误提示： 修改配置文件 <code>vi /etc/php/7.0/apache2/php.ini</code> 使得：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display_errors = On</span><br><span class="line">error_reporting = E_ALL  E_STRICT</span><br></pre></td></tr></table></figure>

<p>修改 apache 配置 <code>vi /etc/apache2/apache2.conf</code> 添加以下行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php_flag display_errors on</span><br><span class="line">php_value error_reporting 2039</span><br></pre></td></tr></table></figure>

<p>重启 apache 后，错误提示如下： <img src="/wp-content/uploads/2018/02/500%E6%8F%90%E7%A4%BA.png"></p>
<h3 id="本节参考链接"><a href="#本节参考链接" class="headerlink" title="本节参考链接"></a><a href="#%E6%9C%AC%E8%8A%82%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>本节参考链接</h3><p><a href="http://blog.csdn.net/googlg/article/details/52814387">php 服务器500错误解决</a></p>
<h2 id="Xdebug"><a href="#Xdebug" class="headerlink" title="Xdebug"></a><a href="#xdebug"></a>Xdebug</h2><p>Xdebug 提供了各种自带的函数，并对已有的某些 PHP 函数进行覆写，可以方便地用于调试排错； Xdebug 还可以跟踪程序的运行，通过对日志文件的分析，我们可以迅速找到程序运行的瓶颈所在，提高程序效率，从而提高整个系统的性能。 ubuntu 下的安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install php-xdebug</span><br></pre></td></tr></table></figure>

<p>查看模块情况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure>

<p>重启 Apache</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure>

<p>返回的错误 <img src="/wp-content/uploads/2018/02/xdebug.png"></p>
<h2 id="xbebug-对-var-dump-的覆写"><a href="#xbebug-对-var-dump-的覆写" class="headerlink" title="xbebug 对 var_dump() 的覆写"></a><a href="#xbebug-%E5%AF%B9-%60var_dump()%60-%E7%9A%84%E8%A6%86%E5%86%99"></a>xbebug 对 <code>var_dump()</code> 的覆写</h2><p>我们关闭 xdebug ，那么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$arrTest = array(</span><br><span class="line">    &quot;test&quot;=&gt;&quot;abc&quot;,</span><br><span class="line">    &quot;test2&quot;=&gt;&quot;abc2&quot;</span><br><span class="line">);</span><br><span class="line">echo &#x27;&lt;pre&gt;&#x27;;</span><br><span class="line">var_dump(  $arrTest );</span><br><span class="line">echo &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">var_dump(  $arrTest );</span><br></pre></td></tr></table></figure>

<p>输出结果看起来是这样的： <img src="/wp-content/uploads/2018/02/disable-xdebug-vardump-.png"> 打开 xdebug ，同样的 php 文件 输出结果好看多了 <img src="/wp-content/uploads/2018/02/enable-xdebug-vardump-.png"></p>
<h3 id="本节参考链接-1"><a href="#本节参考链接-1" class="headerlink" title="本节参考链接"></a><a href="#%E6%9C%AC%E8%8A%82%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>本节参考链接</h3><p><a href="http://www.oschina.net/question/54100_44230">使用xdebug调试PHP程序</a></p>
<h2 id="phpstorm-配置-xdebug"><a href="#phpstorm-配置-xdebug" class="headerlink" title="phpstorm 配置 xdebug"></a><a href="#phpstorm-%E9%85%8D%E7%BD%AE-xdebug"></a>phpstorm 配置 xdebug</h2><p>首先 xdebug 已经安装好了。 <code>phpinfo()</code> 找到 xdebug 有一个设置文件在 <code>/etc/php/7.0/apache2/conf.d/20-xdebug.ini</code> 设置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xdebug.remote_enable = on</span><br><span class="line">xdebug.idekey=PHPSTORM</span><br><span class="line">xdebug.remote_port= 9000</span><br><span class="line">xdebug.remote_host = localhost</span><br></pre></td></tr></table></figure>

<p><code>xdebug.remote_host</code> <strong>是 xdebug 远程调试时要连接的主机地址。用本机开发的话填 “localhost” 就可以了，如果开发环境在远程，比如，在 vritualbox 的虚机里，你需要让虚拟机中的 Xdebug 连接上你本地，地址类似 “192.168.1.1”</strong> <code>xdebug.remote_port</code> <strong>是 xebug 远程调试时要连接的端口号</strong> 然后重启下 apache 打开 phpStorm 打开设置面板（windows Ctrl+Alt+S） “Languages &amp; Frameworks -&gt; PHP -&gt; Debug” ，端口改成 “9000” <img src="/wp-content/uploads/2018/02/xdebug-port.png"> 然后设置 Remote Web Server “Run -&gt; Web Server Debug Validation”, 选择 “Remote Web Server” 现在还没有“Deployment server”，点右侧的 “…”, 新增一个。详细的图文可以参考下面的链接。这步的目的是让 phpstorm 可以操作你的文件。 下面我们需要给浏览器装一个辅助工具，比如 <a href="https://chrome.google.com/webstore/detail/xdebug-helper/eadndfjplgieldjbigjakmdgkmoaaaoc?utm_source=chrome-app-launcher-info-dialog">xdebug Helper</a></p>
<h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a><a href="#%E8%B0%83%E8%AF%95%E8%BF%87%E7%A8%8B"></a>调试过程</h3><p>在 phpStorm 中开启监听端口 点击电话状图标 <img src="/wp-content/uploads/2018/02/phpstorm-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3-disable.png"> 使其变成 <img src="/wp-content/uploads/2018/02/phpstorm-%E7%9B%91%E5%90%AC%E7%AB%AF%E5%8F%A3-enable.png"> 然后设置断点 回到 chrome 中，打开要调试的页面，然后点击刚刚安装的虫子按钮，使其变绿。 如果一切顺利，刷新页面，程序会暂停在断点处。</p>
<h3 id="本节参考链接-2"><a href="#本节参考链接-2" class="headerlink" title="本节参考链接"></a><a href="#%E6%9C%AC%E8%8A%82%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>本节参考链接</h3><p><a href="http://www.dahouduan.com/2017/10/15/phpstorm-config-xdebug/">Phpstorm 配置 Xdebug 断点调试教程</a> <a href="http://guojianxiang.com/posts/2015-09-06-PHP_Debug_Tool-Xdebug.html">PHP调试工具-Xdebug</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a><a href="#%E5%8E%9F%E7%90%86"></a>原理</h2><p><img src="/wp-content/uploads/2018/02/debug%E5%8E%9F%E7%90%86.png" alt="xdebug 原理图示"></p>
<h3 id="本节参考链接-3"><a href="#本节参考链接-3" class="headerlink" title="本节参考链接"></a><a href="#%E6%9C%AC%E8%8A%82%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>本节参考链接</h3><p><a href="https://laravel-china.org/articles/4090/the-first-step-to-becoming-a-senior-php-programmer-debugging-xdebug-principle">成为高级 PHP 程序员的第一步——调试（xdebug 原理篇）</a></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a href="#%E5%85%B6%E4%BB%96"></a>其他</h3><p><a href="https://blog.spoock.com/2017/09/19/xdebug-attack-surface/">xdebug的攻击面</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>PHP短路运算符</title>
    <url>/php%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$a = 5; $b = 20;</span><br><span class="line">if ($a = 10  $b = 7) &#123;</span><br><span class="line">$a++;</span><br><span class="line">$b++;</span><br><span class="line">&#125;</span><br><span class="line">echo $a,&quot;\n&quot;,&quot;&quot;,$b; // 1 21</span><br><span class="line">// 递增／递减运算符不影响布尔值。递减 NULL 值也没有效果，但是递增 NULL 的结果是 1。</span><br><span class="line">var_dump($a); // boolean true $a++ 是不能进行加法运算的</span><br><span class="line">var_dump($b); // int 21</span><br><span class="line">var_dump($a = $a+1); // 2</span><br><span class="line"></span><br><span class="line">// 下面的 foo() 不会被调用，因为它们被运算符“短路”了。</span><br><span class="line">$a = (false &amp;&amp; foo());</span><br><span class="line">$b = (true  foo());</span><br><span class="line">$c = (false and foo());</span><br><span class="line">$d = (true or foo());</span><br><span class="line"></span><br><span class="line">// &quot;&quot; 的优先级比 &quot;or&quot; 高</span><br><span class="line">$e = false  true; // $e 被赋值为 (false  true)，结果为 true</span><br><span class="line">$f = false or true; // $f 被赋值为 false [注：&quot;=&quot; 的优先级比 &quot;or&quot; 高]</span><br><span class="line">var_dump($e, $f);</span><br><span class="line"></span><br><span class="line">// &quot;&amp;&amp;&quot; 的优先级比 &quot;and&quot;　高</span><br><span class="line">$g = true &amp;&amp; false; // $g 被赋值为 (true &amp;&amp; false)，结果为 false</span><br><span class="line">$h = true and false; // $h 被赋值为 true [注：&quot;=&quot; 的优先级比 &quot;and&quot; 高]</span><br><span class="line">var_dump($g, $h);</span><br></pre></td></tr></table></figure>

<p>Reference: <a href="https://segmentfault.com/a/1190000002949450">PHP短路运算符</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2中的图片</title>
    <url>/pictures-in-magento-2/</url>
    <content><![CDATA[<p>本篇主要总结 Magento 2 中的产品图片和素材图片。</p>
<p>产品图片的存储位置在<code>pub/media/catalog/product</code>位置下，该目录下的原始图片按照一定的目录索引存储，子目录<code>cache</code>存放各种调整过大小的图片。</p>
<p>素材图片存储位置在<code>pub/media/wysiwyg</code>，<code>Luma</code>主题首页的一些展示图片就在该目录下，<a href="/media-storage/">Media Storage</a>指的也是它。</p>
<p>产品图片有角色（Image Roles）</p>
<p>Role</p>
<p>Descriptions</p>
<p>Swatch Image</p>
<p>A swatch image can illustrate a color, texture, finish, or pattern. Swatch images that are specific to the product can be uploaded to the image gallery.</p>
<p>Base Image</p>
<p>The base image is the main image on the product detail page. Image zoom is activated if you upload an image that is larger image than the image container. Example sizes:<br>470 x 470 pixels (without Zoom)<br>1100 x 1100 pixels (with Zoom)</p>
<p>Small Image</p>
<p>The small image is used for the product images in listings on category and search results pages, and to display the product images needed for sections such as for Up-sells, Cross-sells, and the New Products List. Example size:<br>470 x 470 pixels</p>
<p>Thumbnail</p>
<p>Thumbnail images appear in the thumbnail gallery, shopping cart, and in some blocks such as Related Items. Example size:<br>50 x 50 pixels</p>
<p>为什么图片要有角色呢？<br>不同的页面对图片的尺寸要求不一样。比如列表页面，这个页面就是一个概览，小图片就可以满足要求了，而且图片小一点加载更快。但是他没有解决多终端的图片加载问题。多终端下按需加载会是最好的方案。</p>
<p>在创建自定义主题中，提到用<code>view.xml</code>来配置图片的属性。但是这样的结构看起来完全没有考虑到按需加载。所谓按需加载，指的是根据不同的终端提供不同尺寸的图片。因为我们不会希望在手机端加载一张大图，然后只是在前端缩小他的尺寸，实现视觉上的变小。以 luma 主题为例，我们用调试工具就会发现，尽管是响应式，但他只是样式上变小，而不是按需加载。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://www.magestore.com/magento-2-tutorial/how-to-manage-product-images-in-magento-2-addremove/">How to Manage Product Images in Magento 2? (Add&#x2F;Remove)</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magento 2 图片</tag>
      </tags>
  </entry>
  <entry>
    <title>Plugins</title>
    <url>/plugins/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#notes"></a>Notes</h2><p>Plugins Limitations: Plugins can not be used on following:</p>
<ul>
<li>Final methods</li>
<li>Final classes</li>
<li>Non-public methods</li>
<li>Class methods (such as static methods)</li>
<li>__construct</li>
<li>Virtual types</li>
<li>Objects that are instantiated before Magento\Framework\Interception is bootstrapped</li>
</ul>
<p><em>Important: plugins can be used on interfaces, abstract classes or parent classes. The plugin methods will be called for any implementation of those abstractions.</em></p>
<p>The <code>di.xml</code> file in your module declares a plugin for a class object:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;config&gt;</span><br><span class="line">    &lt;type name=&quot;&#123;ObservedType&#125;&quot;&gt;</span><br><span class="line">      &lt;plugin name=&quot;&#123;pluginName&#125;&quot; type=&quot;&#123;PluginClassName&#125;&quot; sortOrder=&quot;1&quot; disabled=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>Before methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    public function beforeXXX(ObserverdType, $argument1, $argument2) &#123;</span><br><span class="line">        return [$argument1, $argument2];</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>After methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    public function afterXXX(ObserverdType, $result, $argument1, $argument2)&#123;</span><br><span class="line">        return $result</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Around methods</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    public function aroundXXX(ObserverdType, callable $proceed, $argument1, $argument2)&#123;</span><br><span class="line">        $result = $proceed($argument1, $argument2));</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>vendor\magento\framework\Interception\Interceptor.php::___callPlugins</code></p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><p>Plugin A</p>
<p>Plugin B</p>
<p>Action</p>
<p>sortOrder</p>
<p>10</p>
<p>20</p>
<p>before</p>
<p>Before10</p>
<p>Before20</p>
<p>around(first half)</p>
<p>Around10 first half</p>
<p>Around20 first half</p>
<p>original</p>
<p>original dispatch</p>
<p>around(second half)</p>
<p>Around10 second half</p>
<p>Around20 second half</p>
<p>after</p>
<p>After10</p>
<p>After20</p>
<p>The execution flow will be as follows: Before10 Around10 first half Before20 Around20 first half original dispatch After20 Around20 second half After10 Around10 second half etc&#x2F;di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;VendorName\TestModule\Model\Attribute&quot;&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_before_10&quot; type=&quot;VendorName\TestModule\Plugin\Before10&quot; sortOrder=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_before_20&quot; type=&quot;VendorName\TestModule\Plugin\Before20&quot; sortOrder=&quot;20&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_around_10&quot; type=&quot;VendorName\TestModule\Plugin\Around10&quot; sortOrder=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_around_20&quot; type=&quot;VendorName\TestModule\Plugin\Around20&quot; sortOrder=&quot;20&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_after_10&quot; type=&quot;VendorName\TestModule\Plugin\After10&quot; sortOrder=&quot;10&quot;/&gt;</span><br><span class="line">        &lt;plugin name=&quot;get_bar_after_20&quot; type=&quot;VendorName\TestModule\Plugin\After20&quot; sortOrder=&quot;20&quot;/&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Model;</span><br><span class="line"></span><br><span class="line">class Attribute extends  \Magento\Framework\DataObject</span><br><span class="line">&#123;</span><br><span class="line">    public function setOrderId($value)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;setData(&#x27;order_id&#x27;, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getOrderId()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getData(&#x27;order_id&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function setBar($value)</span><br><span class="line">    &#123;</span><br><span class="line">         return $this-&gt;setData(&#x27;bar&#x27;, $value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getBar()</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;original&#x27;);</span><br><span class="line">        return $this-&gt;getData(&#x27;bar&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class Before10</span><br><span class="line">&#123;</span><br><span class="line">    public function beforeGetBar(\VendorName\TestModule\Model\Attribute $subject, $name = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;before10&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class Before20</span><br><span class="line">&#123;</span><br><span class="line">    public function beforeGetBar(\VendorName\TestModule\Model\Attribute $subject, $name = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;before20&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class Around10</span><br><span class="line">&#123;</span><br><span class="line">    public function aroundGetBar(\VendorName\TestModule\Model\Attribute $subject, callable $proceed, $name = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;around10 -- before proceed&#x27;);</span><br><span class="line"></span><br><span class="line">        $result = $proceed();</span><br><span class="line"></span><br><span class="line">        $logger-&gt;info(&#x27;around10 -- after proceed&#x27;);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class Around20</span><br><span class="line">&#123;</span><br><span class="line">    public function aroundGetBar(\VendorName\TestModule\Model\Attribute $subject, callable $proceed, $name = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;around20 -- before proceed&#x27;);</span><br><span class="line"></span><br><span class="line">        $result = $proceed();</span><br><span class="line"></span><br><span class="line">        $logger-&gt;info(&#x27;around20 -- after proceed&#x27;);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class After10</span><br><span class="line">&#123;</span><br><span class="line">    public function afterGetBar(\VendorName\TestModule\Model\Attribute $subject, $result)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;after10&#x27;);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\Plugin;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Exception\NoSuchEntityException;</span><br><span class="line"></span><br><span class="line">class After20</span><br><span class="line">&#123;</span><br><span class="line">    public function afterGetBar(\VendorName\TestModule\Model\Attribute $subject, $result)</span><br><span class="line">    &#123;</span><br><span class="line">        $writer = new \Zend\Log\Writer\Stream(BP . &#x27;/var/log/layout_block.xml&#x27;);</span><br><span class="line">        $logger = new \Zend\Log\Logger();</span><br><span class="line">        $logger-&gt;addWriter($writer);</span><br><span class="line">        $logger-&gt;info(&#x27;after20&#x27;);</span><br><span class="line"></span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>If we call this function, we will get our log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    $attribute = $this-&gt;_objectManager-&gt;get(&#x27;VendorName\TestModule\Model\Attribute&#x27;);</span><br><span class="line">    echo $attribute-&gt;getBar();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>Log file</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2019-06-03T04:13:46+00:00 INFO (6): before10</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): around10 -- before proceed</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): before20</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): around20 -- before proceed</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): original</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): after20</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): around20 -- after proceed</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): after10</span><br><span class="line">2019-06-03T04:13:46+00:00 INFO (6): around10 -- after proceed</span><br></pre></td></tr></table></figure>

<h2 id="Practice-Tests"><a href="#Practice-Tests" class="headerlink" title="Practice Tests"></a><a href="#practice-tests"></a>Practice Tests</h2><p>You need to make some modifications to an entity before it is saved to the database. Your tool of choice is a plugin. What are requirements for a plugin? (Multiple Choice) A. The targeted method or class must not be marked final. B. The plugin method must begin with the type of the plugin. C. The plugin class must not inherit the targeted class. D. The plugin class must not be marked abstract. E. The plugin class must be specified in di.xml. Answer A B E</p>
<hr>
<p>What are valid plugin types: A. around B. instead C. post D. before E. after Answer A D E</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a><a href="#reference"></a>Reference</h2><p>Code: <code>vendor\magento\framework\Interception\Interceptor.php::___callPlugins</code> <a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/plugins.html">Plugins (Interceptors)</a> I think the ‘Prioritizing plugins’ section of developer guide has error. According to our experiment, <strong>after</strong> executes before <strong>around’s second half</strong>.</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>plugins(interceptor) best practice</title>
    <url>/pluginsinterceptor-best-practice/</url>
    <content><![CDATA[<h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a><a href="#notes"></a>Notes</h2><ul>
<li>Around-plugins SHOULD only be used when behavior of an original method is supposed to be substituted in certain scenarios.</li>
<li>Plugins SHOULD NOT be used within own module.</li>
<li>Plugins SHOULD NOT be added to data objects. ( why? )</li>
<li>Plugins MUST be stateless.</li>
<li>Plugins SHOULD NOT change the state of an intercepted object (Intercepted object is $subject).</li>
</ul>
<p>plugins SHOULD BE used for modifying the input or output of a function.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://devdocs.magento.com/guides/v2.3/coding-standards/technical-guidelines.html#4-interception">technical-guidelines-interception</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>起点(Point of Origin)</title>
    <url>/point-of-origin/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/point-of-origin.html">原文地址</a></em></p>
<p>配置建立从您的店铺或仓库发货的起点。起点也被用来确定销售商品的税率。</p>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-settings-origin.png" alt="Origin"></p>
<h2 id="设置起点"><a href="#设置起点" class="headerlink" title="设置起点"></a><a href="#%E8%AE%BE%E7%BD%AE%E8%B5%B7%E7%82%B9"></a>设置起点</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>发货设置</strong>(Shipping Settings)</li>
<li>展开 <strong>起点</strong>(Origin) 完成如下内容：<ul>
<li>Country</li>
<li>Region&#x2F;State</li>
<li>ZIP &#x2F; Postal Code</li>
<li>City</li>
<li>Street Address (and line 2, if needed)</li>
</ul>
</li>
<li>完成后，单击 Save Config</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Postfix 安装与配置</title>
    <url>/postfix-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>本篇介绍在虚拟机（ubuntu 16）中搭建 Postfix ，实现发送邮件功能。这样虚拟机中的站点（Magento、Wordpress 等不需要通过插件也能发送邮件啦。）</p>
<h2 id="设置-hostname"><a href="#设置-hostname" class="headerlink" title="设置 hostname"></a><a href="#%E8%AE%BE%E7%BD%AE-hostname"></a>设置 hostname</h2><p>事先设置好 hostname 的话，Postfix 可以自动配置好很多参数，节省时间。假设你的网站域名是 example.com，要搭建独立的邮件服务器（推荐），就把主机名设置为 mail.example.com。 查看服务器名称</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hostname</span><br><span class="line">ubuntu16</span><br></pre></td></tr></table></figure>

<p>主机名设置为 <code>mail.example.com</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo &#x27;mail.example.com&#x27; &gt; /etc/hostname</span><br><span class="line"># hostname -F /etc/hostname</span><br></pre></td></tr></table></figure>

<h2 id="安装-Postfix"><a href="#安装-Postfix" class="headerlink" title="安装 Postfix"></a><a href="#%E5%AE%89%E8%A3%85-postfix"></a>安装 Postfix</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># apt-get install postfix</span><br></pre></td></tr></table></figure>

<h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a><a href="#%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE"></a>基本配置</h2><p>Postfix 的配置文件位于 <code>/etc/postfix</code> 文件夹。<code>/etc/postfix/main.cf</code> 是 Postfix 的主要配置文件，几乎所有的设置参数都是通过这个文档规定的。 修改需要注意的是：</p>
<ul>
<li>『 # 』符号是批注的意思；</li>
<li>所有设定值以类似『变量』的设定方法来处理，例如 myhostname &#x3D; <a href="http://www.centos.vbird,请注意等号的两边要给予空格符喔,/">www.centos.vbird，请注意等号的两边要给予空格符喔，</a> 且第一个字符不可以是空白，亦即『my..』要由行首写起；</li>
<li>可以使用『 $ 』来延伸使用变量设定，例如 myorigin &#x3D; $myhostname，会等于 myorigin &#x3D; <a href="http://www.centos.vbird;/">www.centos.vbird；</a></li>
<li>如果该变量支持两个以上的数据，则使用空格符来分隔，不过建议使用逗号加空格符『, 』来处理。 例如： mydestination &#x3D; $myhostname, $mydomain, linux.centos.vbird，意指 mydestination 支持三个数据内容之意。</li>
<li>可使用多行来表示同一个设定值，只要在第一行最后有逗号，且第二行开头为空格符， 即可将数据延伸到第二行继续书写 (所以刚刚第二点才说，开头不能留白！)；</li>
<li>若重复设定某一项目，则以较晚出现的设定值为准！</li>
</ul>
<p>以上摘自<a href="http://cn.linux.vbird.org/linux_server/0380mail.php#postfix_basic">鸟哥的 Linux 私房菜</a>，更详细的介绍也可参考该文章。 比较重要的参数设置</p>
<ul>
<li><strong>myhostname</strong> 设定主机名 这个参数会被很多其他参数所引用，所以务必设置正确，在本例中，它的值是 <code>mail.example.com</code></li>
<li><strong>myorigin</strong> 发信时显示的“发信源主机” 在通过 Postfix 发送邮件的时候，如果 From 字段不完整，例如 From: user，Postfix 会根据 myorigin 的值将地址补全为 From: <a href="mailto:&#x75;&#x73;&#101;&#x72;&#x40;&#109;&#97;&#x69;&#x6c;&#46;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x75;&#x73;&#101;&#x72;&#x40;&#109;&#97;&#x69;&#x6c;&#46;&#x65;&#120;&#97;&#109;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a>。在本例中，我们将它的值设置为 <code>$myhostname</code></li>
<li><strong>mynetworks</strong> 规定信任的客户端，默认只有自己</li>
<li><strong>mydestination</strong> 规定能够收信的主机名 这个设置很重要。在本例中，我希望这台服务器能接受主域名 example.com 的邮件，所以 example.com 要出现在其中。</li>
</ul>
<p>我们的配置现在是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">myhostname = mail.example.com</span><br><span class="line">myorigin = $myhostname</span><br><span class="line">mydestination = $myhostname, example.com, localhost</span><br></pre></td></tr></table></figure>

<p>重载 Postfix</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service postfix reload</span><br></pre></td></tr></table></figure>

<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a><a href="#%E6%B5%8B%E8%AF%95"></a>测试</h2><p>给自己的邮箱发送一封空邮件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sendmail youremail@gmail.com</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p>输入第一行的时候，sendmail 会等待输入邮件内容，此时直接输入一个 <code>.</code> 结束输入，就会发送一封空邮件。 登录你的邮箱，如无意外可以在垃圾邮件箱找到这封邮件。这说明 Postfix 已经具有发送能力。 发送一封有主题的邮件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sendmail youremail@gmail.com</span><br><span class="line">Subject:Hello</span><br><span class="line">Nice to meet you..</span><br><span class="line">.</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2018/02/postfix-sendmail.png" alt="收到邮件"> 日志位置：<code>/var/log/mail.log</code></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="http://chloerei.com/2015/04/22/install-and-configure-postfix/">安装和配置 Postfix</a> <a href="http://cn.linux.vbird.org/linux_server/0380mail.php">鸟哥的 Linux 私房菜 —— 第二十二章、邮件服务器： Postfix</a></p>
<h2 id="本站其他相关文章"><a href="#本站其他相关文章" class="headerlink" title="本站其他相关文章"></a><a href="#%E6%9C%AC%E7%AB%99%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0"></a>本站其他相关文章</h2><p><a href="https://www.hellomagento2.com/mta-mda-mua-relationship/">关于邮件服务器</a> <a href="https://www.hellomagento2.com/telnet-smtp-send-email/">telnet 登录 SMTP 发邮件</a> <a href="https://www.hellomagento2.com/how-magento-sends-email/">Magento 是怎么发邮件的</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Practices Tests 2</title>
    <url>/practices-tests-2/</url>
    <content><![CDATA[<p>1.You have added a system configuration field Store Owner Name in module MyModule_MyStoreData. Now you need to add the default value for this field programmatically. In which file would you add this value? A. etc&#x2F;system.xml B. etc&#x2F;adminhtml&#x2F;system.xml C. etc&#x2F;config.xml D. etc&#x2F;di.xml Answer C</p>
<hr>
<p>2.In a project you need to integrate custom payment provider gateway using Magento standard guidelines. Which of the following 3 steps you need to compulsory follow in order to integrate it? A. Extend the controller Magento\Payment\Controller\ProcessPayment in custom payment module B. Use Response Handler to modify the state of the order based on the gateway client response C. Add gateway command virtual type using dependency injection configuration. D. Create a virtual type in a dependency injection configuration using payment_gateway.xml E. Create transfer object using Transfer Factory interface Magento\Payment\Gateway\Http\TransferFactoryInterface Answer B C E</p>
<hr>
<p>3.A merchant sells a number of products related to bed and mattress industry. Some of these products are Bed sheets, pillows and mattresses. Merchant wants to sell these products separately but want to show all the details of these related products on the same page. Keeping maintainability and customization in mind how would you implement this in Magento? A. In Magento admin panel, create simple products for Bedsheets, Pillows, Mattresses and create a custom product type using product_types.xml and write a logic to assign all these products to newly created product type B. In Magento admin panel, create a configurable product using custom attributes. C. In Magento admin panel, create a bundle product using products Bedsheets, Pillows and Mattresses. D. In Magento admin panel, create a grouped product using simple products Bed sheets, Pillows and Mattresses. Answer D</p>
<hr>
<p>4.For creating a product dropdown attribute with custom module data as data source, which of the following would you use to fetch the result from custom module model? A. Source Model B. Backend Model C. Frontend Model D. Backend Type Answer A</p>
<hr>
<p>5.For a template on frontend, related block has lots of dependencies on other objects to perform the logic before rendering the data through template. In this case you decide to use the viewModel to remove these dependencies from generic block. How would you define the viewModel in magento module? A. Add a viewModel class dependency injection in the generic block for which we need to create view model. B. Add a viewModel class argument in the arguments node of the layout declaration xml. C. Add a viewModel class argument in the arguments node of the dependency injection xml. D. Create a virtual type for the generic block and add the viewModel class as one of the argument. Answer B</p>
<hr>
<p>6.Which of the following scenarios will purge the varnish cache automatically in a magento store? (choose any 2) A. Adding new categories from magento admin panel B. Registering any customer from the magento frontend C. Adding any product in the cart on magento frontend D. Creating a new order from magento admin panel E. Adding a catalog pricing rule Answer A E</p>
<hr>
<p>7.In Magento Installation, you need to create a custom URL structure where category filters will appear as a readable and user friendly URL like “category&#x2F;4&#x2F;products-within-price- range-10-50-and-having-color-red”. Which of the following would you use to achive this? A. Router B. FrontController C. URL Rewrite D. Controller Action Answer A</p>
<hr>
<p>8.In a custom module you have controller in &#x2F;Controller&#x2F;Deposit&#x2F;Index.php Also route id and front name are deposit and depositroute respectively What will be the name of the layout file? A.deposit_depositroute_index.xml B.depositroute_deposit_index.xml C.deposit_deposit_index.xml D.depositroute_index.xml Answer C</p>
<hr>
<p>9.Image properties are configured in which file? A. View.xml B. Theme.xml C. config.xml D. Di.xml Answer A</p>
<hr>
<p>10.Following is the block declaration in a layout xml. How would you access the block argument “customdata” in a template?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;block name=&quot;get_custom_arg&quot;&gt;</span><br><span class="line">    &lt;arguments&gt;</span><br><span class="line">        &lt;argument name=&quot;customdata&quot; xsi:type=&quot;string&quot;&gt;abcd&lt;/argument&gt;</span><br><span class="line">    &lt;/arguments&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure>

<p>A. $block-&gt;getBlockData(‘customdata’); B. $block-&gt;getCustomData(‘customdata’); C. $block-&gt;getData(‘customdata’); D. $block-&gt;getArgument(‘customdata’); Answer C</p>
<hr>
<p>11.How would you add a custom shipping address field in a checkout form? A. Create a new EAV attribute for quote model B. Create a new field in the Quote table C. Create a JS mixin and add an extension attribute D. Create a new EAV attribute for Cart Model Answer C</p>
<hr>
<p>12.A product has a base price of $30 and a special price of $25. Tiered price discount for this product is $20 for 5 products and there’s also a catalog rule active of 25% discountfor this product. What will the product price shown on product detail page? A. $15 B. $22.5 C. $25 D. $18.75 Answer B</p>
<hr>
<p>13.You need to remove static resource linked from a custom page. Which layout instruction would you use? A. <remove> B. <delete> C. <move> D. <unlink> Answer A</p>
<hr>
<p>14.In which order the observers will get executed which are listening to the same event? A. Higher to lower depending upon defined sortOrder B. Lower to higher depending upon defined sortOrder C. In any order D. None Answer C</p>
<hr>
<p>15.For a certain EAV entity in a magento installation, you need to create an attribute. You also need to store the value of the attribute appending certain string to every value. How would you accomplish this? A. Defining a source model for the attribute while creating and adding the login this model to append string. B. Create an entry for EAV attribute in eav_attribute.xml and set the string as an argument C. Defining a backend model for other the attribute while creating and adding the login this model to append string. D. Setting the string in the dependency injection configuration for \Magento\EAV\Model\Attribute\Source Answer C</p>
<hr>
<p>16.How to implement the X-Frame-Options in a magento project? A. Create a new module and add configuration in etc&#x2F;di.xml B. Add configuration in app&#x2F;etc&#x2F;di.xml C. Edit app&#x2F;etc&#x2F;env.php D. Create a jQuery widget Answer C</p>
<hr>
<p>17.hich 3 of the following payment operations Magento 2 payment provider supports? A. Refund B. Void C. Encryption D. Sale E. Deposit Answer A B D</p>
<hr>
<p>18.Location of the UI component configuration file is A. <code>&lt;Module&gt;/view/ adminhtml /layout/ui_component/&lt;Ui Component Name&gt;.xml</code> B. <code>&lt;Module&gt;/view/ adminhtml /layout/Ui_Component/&lt;Ui Component Name&gt;.xml</code> C. <code>&lt;Module&gt;/view/adminhtml/ui_component/&lt;Ui Component Name&gt;.xml</code> D. <code>&lt;Module&gt;/view/ adminhtml /Ui_Component/&lt;Ui Component Name&gt;.xml</code> Answer C</p>
<hr>
<p>19.Where would you place events.xml when event which you want to observe occurs in both frontend and admin area? A. &#x2F;etc&#x2F;base&#x2F;events.xml B. &#x2F;etc&#x2F;adminhtml&#x2F;events.xml C. &#x2F;etc&#x2F;frontend&#x2F;events.xml D. &#x2F;etc&#x2F;events.xml Answer D</p>
<hr>
<p>20.With which entities Extension attributes will work? A. Entities which extends AbstractModel B. Entities which are the implementation of \Magento\Framework\Model\AbstractExtensibleModel C. Entities which are implementation of \Magento\Framework\Model\AbstractModel D. Extension attributes are independent of any entities Answer B</p>
<hr>
<p>21.How are Proxy classes created? A. Defining proxy class in di.xml and creating implementation of \Magento\Framework\ProxyInterface B. Defining proxy class in di.xml, but that class would be auto generated by Magento C. Extending a class for which the proxy needs to be created D. Adding instance of \Magento\Framework\ProxyInterface in the constructor definition of the class for which the proxy need to be created. Answer B</p>
<hr>
<p>22.Which command would you run to create the database schema for the newly created module? A. bin&#x2F;magento setup:static-content:deploy B. bin&#x2F;magento setup:upgrade C. bin&#x2F;magento setup:di:compile D. bin&#x2F;magento setup:Db:Schema Answer B</p>
<hr>
<p>23.You need to update the external ERP system after placing order from Magento frontend without affecting the order processing in Magento. How would you proceed keeping maintainability and ease of integration in mind? A. Extend the order model and add the customization functionality to new model B. Create an observer for the event sales_order_place_after C. Create an Plugin for the function where order place functionality is D. Create a cron job to fetch orders and save data in ERP Answer B</p>
<hr>
<p>24.How would you go about creating an admin theme? A. Define new admin theme in env.php B. Define new admin theme in config.xml C. Define new admin theme in view.xml D. Define new admin theme in di.xml Answer D</p>
<hr>
<p>25.What is the significance of the instruction the layout xml? A. Moving the layout container to other container B. Moving the layout block to other container C. Moving the layout block or container to other container D. Moving layout container to other block Answer C</p>
<hr>
<p>26.Which are the schema related files available in a magento 2 installtion? A. UpgradeSchema.php B. InstallSchema.php C. UpgradingData.php D. RecurringData.php E. InstallingData.php Answer A B D</p>
<hr>
<p>27.Which 3 are the static deployment strategies? A. Quick B. Default C. Developer D. Compact E. Standard Answer A D E</p>
<hr>
<p>28.Which of following is correct? A. While uninstalling a theme, if theme is a parent theme for other theme then you need to set child theme for at least one store view. B. While uninstalling a theme, if theme is a parent theme for other theme then you cannot uninstall child theme. C. While uninstalling a theme, if theme is a parent theme for other theme then you need to uninstall parent theme first. Child theme will be removed automatically. D. While uninstalling a theme, if theme is a parent theme for other theme then you need to uninstall child theme first. Answer D</p>
<hr>
<p>29.A merchant wants to create a custom functionality where after a customer adds certain product to cart he’ll get a mail containing related products customer can buy. Now you need to create a new email template for this functionality where would you create the email template? A. <code>&lt;module&gt;/view/&lt;area&gt;/email</code> B. <code>&lt;module&gt;/view/email</code> C. <code>&lt;module&gt;/view/&lt;area&gt;/email-template</code> D. <code>&lt;module&gt;/view/&lt;area&gt;/templates/email</code> Answer A</p>
<hr>
<p>30.What are the required files for creating a new theme in a Magento 2 project? A. theme.xml B. view.xml C. registration.php D. composer.json E. default.xml Answer A C</p>
<hr>
<p>31.When overriding a base layout in your theme, at which location would you put the layout xml file? A. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/</code> B. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/base/</code> C. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/override/base/</code> D. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/override/base/layout/</code> Answer C</p>
<hr>
<p>32.In which product type, created product depend on the multiple simple product types? A. Composite B. Grouped C. Virtual D. Simple E. Bundle Answer B E</p>
<hr>
<p>33.You need to customize an order create email template and you have a custom theme where you want to do this? A. &lt;theme_dir&gt;&#x2F;Magento_Sales&#x2F;view&#x2F;template&#x2F;email B. &lt;theme_dir&gt;&#x2F;email C. &lt;theme_dir&gt;&#x2F;Magento_Sales&#x2F;email D. &lt;theme_dir&gt;&#x2F;view&#x2F;frontend&#x2F;template&#x2F;email Answer C</p>
<hr>
<p>34.How would you enable dependency graph profiler? A. Run the command bin&#x2F;magento dev:profiler:enable B. Run the command bin&#x2F;magento setup:profiler:enable C. Run the command bin&#x2F;magento dev:dependency-profiler:enable D. Run the command bin&#x2F;magento dev:profiler:dependency Answer A</p>
<hr>
<p>35.Which file is used to create a scheduler? A. Config.xml B. Di.xml C. Env.php D. Crontab.xml Answer D</p>
<hr>
<p>36.How would you add dependent configuration field in the magento 2? A. Add depends node to the field for which you need to add dependency in system.xml B. Define the dependent field in the config.xml C. Add the virtual type for \Magento\Framework\Config\AbstractSource in di.xml with argument depend and value as field name D. You cannot add dependent field in the configuration area of magento 2 Answer A</p>
<hr>
<p>37.Which of the following action does <code>&lt;referenceContainer&gt;</code> node performs in a layout xml? A. Extending block with the same id. B. Extending the container with same id. C. Overriding the container with same id D. Adding the blocks of old container to new container Answer B</p>
<hr>
<p>38.Which escape function is need for JSON output in a teamplate? A. escapeHtml B. escapeJson C. escapeString D. no function needed for JSON data Answer D</p>
<hr>
<p>39.How would you add a name to new layout page type? A. Add page layout name to the di configuration file B. Create a layout file with name “.xml” and add it to the page_layout.xml under “name” node. C. Create a new page_layout.xml and add attribute “name” to the node “type” with value of new page layout name D. Create a new page_layout.xml and add node “name” with value of new page layout name Create a layout file with name “.xml” under page_layout directory, and add <code>&lt;layout id=&quot;newLayoutName&quot;&gt;</code> to layouts.xml</p>
<hr>
<p>40.Which class provides the available routes to the FrontController? A. \Magento\Framework\App\AbstractAction B. \Magento\Framework\App\Action\Action C. \Magento\Framework\App\RouteList D. \Magento\Framework\App\RouteListing Answer C</p>
<hr>
<p>41.Which of the following are not adminhtml area routers?(choose 3) A. \Magento\Framework\App\Router\DefaultRouter B. \Magento\Framework\App\Router\Base C. \Magento\Robots\Controller\Router D. \Magento\Backend\App\Router E. \Magento\Admin\App\Router Answer B C E</p>
<hr>
<p>42.What are the 3 plugin types in a magento 2 installation? A. Before B. After C. Inside D. Out E. Around Answer A B E</p>
<hr>
<p>43.To remove resource intensive dependency injection object from the constructor definition, which of the following functionality does magento 2 provide? A. Virtual types in di.xml B. Proxies C. Factories D. Routes Answer B</p>
<hr>
<p>44.What is the significance of the “resource” attribute while defining the menus in the admin area? A. To add the custom link for menu B. To add ACL rule for menu C. To define the needed resources to display the menu D. It’s just a identifier for the declared menu Answer B</p>
<hr>
<p>45.While overriding a theme layout in your custom theme, at which location would you put the layout xml file? A. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/override/theme/&lt;Parent_Vendor&gt;/&lt;Parent_Theme&gt;/</code> B. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/theme/</code> C. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/layout/override/theme/</code> D. <code>&lt;theme_Dir&gt;/&lt;Namespace_Module&gt;/override/theme/layout/</code> Answer A</p>
<hr>
<p>46.Which of the following are the limitations for the plugins? (choose 3) A. Non-Public method B. Preference C. Final Method D. Argument replacement E. Constructor Answer A C E</p>
<hr>
<p>47.To add a custom router to the list of routers for the front controller in which xml file would you need to add&#x2F;change? A. Config.xml B. Di.xml C. Routes.xml D. Route.xml E. Module.xml Answer B</p>
<hr>
<p>48.Which of the following are auto generated in magento 2? (choose 3) A. Proxies B. Service contracts C. Routes D. Factories E. Interceptors Answer A D E</p>
<hr>
<p>49.Which is the recommended way when you need to alter the functionality of core Magento 2 function? A. Observer B. Plugin C. Argument replacement D. Preference Answer B</p>
<hr>
<p>50.If product price is $50 and tier price is $40 for 3 products and catalog rule applied is $5 flat off for that product. What will be final product price? A. $35 B. $45 C. $50 D. $40 Answer B</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>Price Decimal Precision</title>
    <url>/price-decimal-precision/</url>
    <content><![CDATA[<p>This extension is good for customizing display decimal precision . <a href="https://github.com/lillik/magento2-price-decimal">https://github.com/lillik/magento2-price-decimal</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
  </entry>
  <entry>
    <title>private content</title>
    <url>/private-content/</url>
    <content><![CDATA[<p>Private content section is used to deal with customer private content for cacheable pages.</p>
<h2 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a><a href="#experiments"></a>Experiments</h2><p>etc&#x2F;frontend&#x2F;di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;preference for=&quot;VendorName\TestModule\Api\Data\AttributeInterface&quot; type=&quot;VendorName\TestModule\Model\Attribute&quot;/&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Customer\CustomerData\SectionPoolInterface&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;sectionSourceMap&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;customsection&quot; xsi:type=&quot;string&quot;&gt;VendorName\TestModule\CustomerData\CustomSection&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\TestModule\CustomerData;</span><br><span class="line">use Magento\Customer\CustomerData\SectionSourceInterface;</span><br><span class="line"></span><br><span class="line">class CustomSection implements SectionSourceInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * &#123;@inheritdoc&#125;</span><br><span class="line">     */</span><br><span class="line">    public function getSectionData()</span><br><span class="line">    &#123;</span><br><span class="line">        $randString = $this-&gt;getNonceStr();</span><br><span class="line">        return [</span><br><span class="line">            &#x27;msg&#x27; =&gt; $randString,</span><br><span class="line">        ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function getNonceStr($length = 32)</span><br><span class="line">    &#123;</span><br><span class="line">        $chars = &#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;;</span><br><span class="line">        $str   = &#x27;&#x27;;</span><br><span class="line">        for ($i = 0; $i &lt; $length; ++$i) &#123;</span><br><span class="line">            $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);</span><br><span class="line">        &#125;</span><br><span class="line">        return $str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>view&#x2F;frontend&#x2F;layout&#x2F;catalog_product_view.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;Magento\Framework\View\Element\Template&quot;  name=&quot;custom_section&quot; template=&quot;VendorName_TestModule::customsection.phtml&quot;&gt;</span><br><span class="line">            &lt;/block&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>view&#x2F;frontend&#x2F;templates&#x2F;customsection.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test section</span><br><span class="line">&lt;div class=&quot;customsection&quot; data-bind=&quot;scope: &#x27;section&#x27;&quot;&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text: customsection().msg&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &quot;Magento_Ui/js/core/app&quot;: &#123;</span><br><span class="line">                &quot;components&quot;: &#123;</span><br><span class="line">                    &quot;section&quot;: &#123;</span><br><span class="line">                        &quot;component&quot;: &quot;VendorName_TestModule/js/section&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>view&#x2F;frontend&#x2F;web&#x2F;js&#x2F;section.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">define([</span><br><span class="line">    &#x27;uiComponent&#x27;,</span><br><span class="line">    &#x27;Magento_Customer/js/customer-data&#x27;,</span><br><span class="line">    &#x27;Magento_Customer/js/section-config&#x27;</span><br><span class="line">], function (Component, customerData, config) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return Component.extend(&#123;</span><br><span class="line">        /** @inheritdoc */</span><br><span class="line">        initialize: function () &#123;</span><br><span class="line">            this._super();</span><br><span class="line">            // this.customsection = customerData.get(&#x27;customsection&#x27;); //pass your custom section name</span><br><span class="line"></span><br><span class="line">            customerData.reload(&#x27;customsection&#x27;);</span><br><span class="line">            this.customsection = customerData.get(&#x27;customsection&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Ok, every time we refresh catalog detail page, we will see randonm string. Now, I want the random string to be refreshed when customer add a product to cart. etc&#x2F;frontend&#x2F;sections.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">        xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Customer:etc/sections.xsd&quot;&gt;</span><br><span class="line">    &lt;action name=&quot;checkout/cart/add&quot;&gt;</span><br><span class="line">        &lt;section name=&quot;customsection&quot;/&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/cache/page-caching/private-content.html">DevDocs - Private content</a> <a href="https://webkul.com/blog/sections-magento-2/">Sections in Magento 2</a> <a href="https://magento.stackexchange.com/questions/112948/magento-2-how-do-customer-sections-sections-xml-work">Magento 2: how do customer sections &#x2F; sections.xml work?</a> During cacheable page rendering Magento is cleaning all data that can be specific to a particular user (unsetting private data). That’s why session is empty during rendering. The responsibility of cleaning private data lies on several depersonalization plugins. Customer session for example is cleaned by <code>\Magento\Customer\Model\Layout\DepersonalizePlugin</code>. <a href="https://devdocs.magento.com/guides/v2.2/extension-dev-guide/cache/page-caching/private-content.html">Session depersonalization in Magento 2, why and how?</a> <a href="https://www.atwix.com/magento-2/session-depersonalization-in-magento-2-why-and-how/">customer session does not work except customer page - Magento 2</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>捆绑商品(Bundle Product)</title>
    <url>/product-create-bundle/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-bundle.html">原文地址</a></em></p>
<p>捆绑商品让客户从各种各样的选项中“创造他们自己的”商品。捆绑产品可以是礼品、电脑、或者其他可以自定义的商品。捆绑商品中的每个项可以是以下商品类型：</p>
<ul>
<li><a href="/product-create-simple/">简单商品</a></li>
<li><a href="/product-create-virtual/">虚拟商品</a></li>
</ul>
<p><img src="/wp-content/uploads/2017/01/product-bundle_thumb_0_0.png"></p>
<p>当客户点击 <strong>Customize and Add to Cart</strong> 按钮后，才会出现选型。因为商品包含在捆绑数组中，所以 SKU 、价格、重量 可以被设置为静态的或固定的</p>
<p><em>Minimum Advertised Price (MAP) is not available for Bundle products with dynamic pricing.</em></p>
<p><img src="/wp-content/uploads/2017/01/product-bundle-customize.png"></p>
<p>以下将指引你创建一个基本设置的捆绑商品。必填项以红色星号(*)标记出来。填完必填项并保存后，你可以继续填写剩下的字段。</p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Bundle Product</strong><br><img src="/wp-content/uploads/2017/01/product-add-bundle.png"></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集是产品的模板，要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li><p>输入产品的名称 <strong>Product Name</strong></p>
</li>
<li><p>使用基于产品名称的默认 SKU 或者重新输入一个 SKU<br>决定分配给每个捆绑项的 SKU 的类型，可以做如下事情：</p>
<ul>
<li>A Dynamic SKU can be assigned automatically to each bundle item by adding a suffix to the default SKU. By default, Dynamic SKU is set to “Yes.”</li>
<li>If you prefer to assign a unique SKU for each bundle item, set Dynamic SKU to the “No” <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"> position.<br><img src="/wp-content/uploads/2017/01/product-bundle-dynamic-sku-price.png"></li>
</ul>
</li>
<li><p>决定捆绑商品的价格，可以做如下设置：</p>
<ul>
<li>A Dynamic Price changes to reflect the options chosen by the customer. By default, Dynamic Price is set to “Yes,” and the Price field is left blank.</li>
<li>To charge a fixed price for the bundle, set Dynamic Price to the “No.” <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"> position. Then, enter the Price that you want to charge for the bundle.</li>
</ul>
</li>
<li><p>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></p>
</li>
<li><p>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</p>
</li>
<li><p>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></p>
</li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li>设置捆绑商品的重量，做如下事情：<ul>
<li>A Dynamic Weight changes to reflect the options chosen by the customer. By default, Dynamic Weight is set to “Yes,” and the Weight field is left blank.</li>
<li>To assign a fixed weight to the bundle, set Dynamic Weight to the “No.” <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"> position. Then, enter the Weight of the bundle.<br><img src="/wp-content/uploads/2017/01/product-bundle-dynamic-weight.png"></li>
</ul>
</li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。</li>
<li>如果要标记改商品为新品，勾选 New 复选框</li>
<li>选择 <strong>Country of Manufacture</strong><br><img src="/wp-content/uploads/2017/01/product-bundle-details.png"><br>可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ol>
<h2 id="第五步：添加捆绑商品"><a href="#第五步：添加捆绑商品" class="headerlink" title="第五步：添加捆绑商品"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%B7%BB%E5%8A%A0%E6%8D%86%E7%BB%91%E5%95%86%E5%93%81"></a>第五步：添加捆绑商品</h2><ol>
<li><p>下拉到捆绑商品选项部分，然后，设置 <strong>Ship Bundle Items</strong> 为以下值之一</p>
<ul>
<li>Separately</li>
<li>Together<br><img src="/wp-content/uploads/2017/01/product-bundle-items.png" alt="Bundle Items"></li>
</ul>
</li>
<li><p>点击 <strong>Add Option</strong>，做如下操作：<br><img src="/wp-content/uploads/2017/01/product-bundle-new-option.png"><br>a. 输入 Option Title 他将作为字段的标签名<br>b. 设置 Input Type 为下列值之一：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Drop-down</span><br><span class="line">* Radio buttons</span><br><span class="line">* Checkbox</span><br><span class="line">* Multiple Select</span><br></pre></td></tr></table></figure>

<p>c. 如要设置字段必选，则勾选 Required 复选框<br>d. 点击 <strong>Add Products to Option</strong>，然后选择你要包含的产品<br>e. 点击 <strong>Add Selected Products</strong><br><img src="/wp-content/uploads/2017/01/product-bundle-add-products-to-option.png" alt="Add Selected Products"><br>f. 等列表出现后，选择其中一个作为默认项<br>g. 输入 默认数量 <strong>Default Quantity</strong> (客户选择该项时的默认数量)<br>h. To allow customers to change the quantity of any bundle item, mark the User Defined checkbox of any item that you do not want changed.<br>By default, the Default Quantity that is included in a bundle item cannot be changed by the customer. However, the customer can enter the quantity of the item that is to be included in the bundle.<br>For example, if the Default Quantity of the Sprite Status Ball is set to 2, and the customer orders 4 of that bundle option, the total number of total balls purchased is 8.<br><img src="/wp-content/uploads/2017/01/product-bundle-item-detail.png"></p>
</li>
<li><p>重复上述过程，给每个要添加到捆绑商品中的项做好设置</p>
</li>
<li><p>如要移除，点击 <img src="/wp-content/uploads/2017/01/btn-delete_22x18.png"> 图标</p>
</li>
</ol>
<h2 id="第六步：填写商品信息"><a href="#第六步：填写商品信息" class="headerlink" title="第六步：填写商品信息"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%A1%AB%E5%86%99%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第六步：填写商品信息</h2><p>往下拉，然后根据需要填写以下部分：</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="第七步：发布商品"><a href="#第七步：发布商品" class="headerlink" title="第七步：发布商品"></a><a href="#%E7%AC%AC%E4%B8%83%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>第七步：发布商品</h2><ol>
<li>如果你已经准备好要发布产品了，那么设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>下面你可以点击右上角的 <strong>Save &amp; Close</strong> 或者 <strong>Save</strong> 然后再 <strong>Admin</strong> 菜单中选择 <strong>Customer View</strong> 检查下产品发布信息是否 OK</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="Input-Controls"><a href="#Input-Controls" class="headerlink" title="Input Controls"></a><a href="#input-controls"></a>Input Controls</h2><p>Control</p>
<p>Description</p>
<p>Drop-down</p>
<p>Displays a drop-down list of options with the product name and price. Only one item can be selected.<br><img src="/wp-content/uploads/2017/01/product-bundle-input-type-drop-down.png"></p>
<p>Radio Buttons</p>
<p>Displays a radio button for each option, followed by the product name and price. Only one item can be selected.<br><img src="/wp-content/uploads/2017/01/product-bundle-input-type-radio-buttons.png"></p>
<p>Checkbox</p>
<p>Displays a checkbox for each option, followed by the product name and price. Multiple items can be selected.<br><img src="/wp-content/uploads/2017/01/product-bundle-input-type-checkbox.png"></p>
<p>Multiple Select</p>
<p>Displays a list of options with the product name and price. To select multiple items, hold down the Ctrl (or Option) key, and click each item.<br><img src="/wp-content/uploads/2017/01/product-bundle-input-type-multiple-select.png"></p>
<h2 id="Field-Descriptions"><a href="#Field-Descriptions" class="headerlink" title="Field Descriptions"></a><a href="#field-descriptions"></a>Field Descriptions</h2><p>Field</p>
<p>Description</p>
<p>SKU</p>
<p>Determines if each item is assigned a variable, dynamic SKU, or if a fixed SKU is used for the bundle. Options include: Fixed &#x2F; Dynamic.</p>
<p>Weight</p>
<p>Specifies the weight is calculated based on the items selected, or is a fixed weight for the entire bundle. Options include: Fixed &#x2F; Dynamic.</p>
<p>Price View</p>
<p>Determines if the product price is shown as a range, from the least expensive to the most expensive (Price Range), or with the least expensive shown (As Low As). Options include: Price Range &#x2F; As Low As.</p>
<p>Ship Bundle Items</p>
<p>Specifies if individual items can be shipped separately.</p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ul>
<li>客户可以构建他们自己的捆绑商品</li>
<li>捆绑商品项可以是没有自定义选项的简单商品或虚拟商品</li>
<li>price view 可以被设置为价格区间或者是 As Low as (最低)</li>
<li>SKU 和 重量可以是固定的或动态的</li>
<li>数量可以是预定义的或客户自己定义的值</li>
<li>捆绑商品可以一起配送或分开配送</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>可配置商品添加配置项(Adding Configurations)</title>
    <url>/product-create-configurable-add-configurations/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-configurable-add-configurations.html">原文地址</a></em></p>
<p>下面这个例子中添加了三个颜色三个尺码的配置项。总共会创建9个简单商品，每个商品都有唯一的 SKU ，页面顶部的进度条会显示你现在在哪里，并引导你完成所有步骤。</p>
<p><img src="/wp-content/uploads/2017/01/product-configurable-progress-bar-step1.png" alt="Process bar"></p>
<h2 id="步骤一：选择属性"><a href="#步骤一：选择属性" class="headerlink" title="步骤一：选择属性"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7"></a>步骤一：选择属性</h2><ol>
<li>上一部分 <a href="/product-create-configurable/">可配置商品(Configurable Product)</a> 点击保存后，下拉到 <strong>Configurations</strong> 部分，然后点击 <strong>Create Configurations</strong><br><img src="/wp-content/uploads/2017/01/product-configurable-create-configurations_thumb_0_0.png"></li>
<li>勾选你要包含的属性。比如，这里我们选择 color 和 size</li>
<li>列表显示了该属性集中所有可被应用在可配置商品上的属性<br><img src="/wp-content/uploads/2017/01/product-create-configurable-step1.png"></li>
<li>如果你需要添加新的属性，点击 <strong>Create New Attribute</strong> 完成attribute 的属性，然后点击 <strong>Save Attribute</strong>，然后勾选复选框选择属性。</li>
<li>右上角，点击 <strong>Next</strong></li>
</ol>
<h2 id="步骤二：输入属性值"><a href="#步骤二：输入属性值" class="headerlink" title="步骤二：输入属性值"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A%E8%BE%93%E5%85%A5%E5%B1%9E%E6%80%A7%E5%80%BC"></a>步骤二：输入属性值</h2><ol>
<li>为每个属性勾选应用到该商品上的值<br><img src="/wp-content/uploads/2017/01/product-create-configurable-step2.png"></li>
<li>重新排列属性的顺序，可以拖动 <img src="/wp-content/uploads/2017/01/btn-sort-order-inline_16x18.png">图标到新的位置。他们的顺序决定着产品详情页中下拉列表的位置。</li>
<li>在进度条中，点击 <strong>Next</strong></li>
</ol>
<h2 id="步骤三：配置图片、价格和数量"><a href="#步骤三：配置图片、价格和数量" class="headerlink" title="步骤三：配置图片、价格和数量"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%89%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%9B%BE%E7%89%87%E3%80%81%E4%BB%B7%E6%A0%BC%E5%92%8C%E6%95%B0%E9%87%8F"></a>步骤三：配置图片、价格和数量</h2><p>这一步决定着每个配置项的图片、价格和数量。可选项是一样的，你只能选一个。可以是 apply the same setting to all SKUs, apply a unique setting to each SKU, or skip the settings for now</p>
<ol>
<li>选择应用的配置选项<ul>
<li><p>配置图片<br>方法一：对所有 SKUs 应用同一组图片(Apply a Single Set of Images to All SKUs)</p>
<ol>
<li>选择 Apply a Single Set of Images to All SKUs</li>
<li>浏览选择图片或者拖动图片到下图的框中<br><img src="/wp-content/uploads/2017/01/product-configurations-images-apply-single-set.png"><br>方法二：对每个 SKU 应用单独的图片<br>因为我们已经为父商品上传了图片，我们将使用这个选项来为每个颜色上传图片。假设某个客户购买了某个颜色的T恤，那么购物车中显示的就是这里的图片。</li>
<li>选择 Apply unique images by attribute to each SKU</li>
<li>选择图像要说明的属性，比如：color</li>
<li>对每个属性值，要么浏览选择图片，要么拖拽到框中<br>If you drag the an image to a value box, it appears in the sections for the other values, as well.如果你想要删除图片，点击 <img src="/wp-content/uploads/2017/01/btn-trashcan-sm_19x18.png">图标<br><img src="/wp-content/uploads/2017/01/product-configurable-create-configurations-add-images-unique.png"></li>
</ol>
</li>
<li><p>配置价格<br>方法一：对所有 SKU 应用相同的价格 (Apply the Same Price to All SKUs)</p>
<ol>
<li>选择 Apply single price to all SKUs</li>
<li>输入 价格<br><img src="/wp-content/uploads/2017/01/product-configurable-create-configurations-price-all-skus.png"><br>方法二：对每个 SKU 应用不同的价格 (Apply a Different Price for Each SKU)</li>
<li>如果商品的各种变体价格不一样，选择 Apply unique prices by attribute to each SKU</li>
<li>选择价格差异基于的属性</li>
<li>设置每个属性值的价格。在这个例子中，XL 尺码的更贵一点<br><img src="/wp-content/uploads/2017/01/product-configurable-create-configurations-price-unique.png"></li>
</ol>
</li>
<li><p>配置数量<br>方法一：对所有的 SKU 应用相同的数量 (Apply the Same Quantity to All SKUs)</p>
<ol>
<li>如果所有 SKU 的库存数量都是一样的，选择 Apply the Same Quantity to All SKUs</li>
<li>输入 数量<br><img src="/wp-content/uploads/2017/01/product-configurations-quantity-same-all-skus.png" alt="Same Quantity for All SKUs"><br>方法二：不同的属性应用不同的数量 (Apply Different Quantity by Attribute)</li>
<li>如果每个属性的数量不同，选择 Apply Different Quantity by Attribute</li>
<li>设置每个的值<br><img src="/wp-content/uploads/2017/01/product-configurations-quantity-different.png"></li>
</ol>
</li>
</ul>
</li>
<li>完成后，点击右上角的 <strong>Next</strong></li>
</ol>
<h2 id="步骤四：生成产品配置"><a href="#步骤四：生成产品配置" class="headerlink" title="步骤四：生成产品配置"></a><a href="#%E6%AD%A5%E9%AA%A4%E5%9B%9B%EF%BC%9A%E7%94%9F%E6%88%90%E4%BA%A7%E5%93%81%E9%85%8D%E7%BD%AE"></a>步骤四：生成产品配置</h2><p>等一会儿，等产品列表显示出来以后，做如下事情：</p>
<ul>
<li>如果你对生成的配置满意，点击 <strong>Next</strong></li>
<li>要做修改，点击 <strong>Back</strong></li>
</ul>
<p><img src="/wp-content/uploads/2017/01/product-create-configurable-summary.png"></p>
<h2 id="步骤五：添加产品图片"><a href="#步骤五：添加产品图片" class="headerlink" title="步骤五：添加产品图片"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%94%EF%BC%9A%E6%B7%BB%E5%8A%A0%E4%BA%A7%E5%93%81%E5%9B%BE%E7%89%87"></a>步骤五：添加产品图片</h2><ol>
<li>下拉到 <strong>Images and Videos</strong> 部分，然后展开</li>
<li>点击 相机 图标，选择该商品的主图<br>了解更多，请查阅 <a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-images-and-video.html">Images and Video</a></li>
</ol>
<h2 id="步骤六：完成产品信息"><a href="#步骤六：完成产品信息" class="headerlink" title="步骤六：完成产品信息"></a><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AD%EF%BC%9A%E5%AE%8C%E6%88%90%E4%BA%A7%E5%93%81%E4%BF%A1%E6%81%AF"></a>步骤六：完成产品信息</h2><p>下拉完成以下部分的信息</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="步骤七：发布商品"><a href="#步骤七：发布商品" class="headerlink" title="步骤七：发布商品"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%83%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>步骤七：发布商品</h2><ol>
<li>如果该商品可以发布了，则设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>你可以点击 <strong>Save &amp; Close</strong> 或者以客户的视角浏览商品的信息</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="步骤八：配置购物车缩略图-可选"><a href="#步骤八：配置购物车缩略图-可选" class="headerlink" title="步骤八：配置购物车缩略图(可选)"></a><a href="#%E6%AD%A5%E9%AA%A4%E5%85%AB%EF%BC%9A%E9%85%8D%E7%BD%AE%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%BC%A9%E7%95%A5%E5%9B%BE(%E5%8F%AF%E9%80%89)"></a>步骤八：配置购物车缩略图(可选)</h2><p>如果你商品的每个变体都有不同的图片，你可以配置购物车的缩略图使用正确的图片</p>
<ol>
<li>后台侧边栏，点击 <strong>Stores</strong>，在 Settings 下，选择 <strong>Configuration</strong></li>
<li>左侧边栏 Sales 下，选择 <strong>Checkout</strong>，展开 <strong>Shopping Cart</strong> 部分</li>
<li>设置 <strong>Configurable Product Image</strong> 为 Product Thumbnail Itself</li>
<li>完成后，点击 <strong>Save Config</strong></li>
</ol>
<p><img src="/wp-content/uploads/2017/01/config-sales-checkout-shopping-cart-configurable-product.png"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ul>
<li>可配置产品允许客户从下拉列表中选择选项。每个选项实际上都是一个单独的简单商品</li>
<li>每个下拉列表的值都是基于 dropdown 类型的属性。drop-down 类型的属性必须包含在属性集中，该属性集则是当前可配置产品的模板</li>
<li>购物车中产品的缩略图可以配置为产品的图片，或者是可配置产品的变体产品的图片</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>可配置商品(Configurable Product)</title>
    <url>/product-create-configurable/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-configurable.html">原文地址</a></em></p>
<p>可配置商品看起来有一系列的选项。每个选项代表着单独的具有唯一 SKU 的简单商品。这样可以追踪每个变体的库存。你可以通过简单商品的 custom option 来达到类似的效果，但是不能跟踪每个商品变体的库存。</p>
<p><img src="/wp-content/uploads/2017/01/product-configurable_thumb_0_0.png"></p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Configurable Product</strong><br><img src="/wp-content/uploads/2017/01/product-add-configurable.png"></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集决定着该产品中使用的选择字段有哪些。默认情况下，是 default 属性集。<em>对于可配置商品来说，属性集必须包含至少一个 drop-down 属性，另外，drop-down 属性的 scope 必须是 Global</em> 下面这个例子里使用的下拉选项式属性是 color 和 size</p>
<p>要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li>输入产品的名称 <strong>Product Name</strong></li>
<li>使用基于产品名称的默认 SKU 或者重新输入一个 SKU</li>
<li>输入产品的价格 <strong>Price</strong></li>
<li>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></li>
<li>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</li>
<li>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li>输入产品的重量</li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。</li>
<li>如果要标记改商品为新品，勾选 New 复选框</li>
<li>选择 <strong>Country of Manufacture</strong><br><img src="/wp-content/uploads/2017/01/product-details-configurable.png"><br>可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ol>
<h2 id="第五步：保存并继续"><a href="#第五步：保存并继续" class="headerlink" title="第五步：保存并继续"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E4%BF%9D%E5%AD%98%E5%B9%B6%E7%BB%A7%E7%BB%AD"></a>第五步：保存并继续</h2><p>现在保存你的商品，在下一个步骤中，你将为每个产品的变体配置设置。</p>
<ol>
<li>右上角，点击 <strong>Save</strong></li>
<li>下面阅读 <a href="/product-create-configurable-add-configurations">添加配置(Adding Configurations)</a></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>可下载商品(Downloadable Product)</title>
    <url>/product-create-downloadable/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-downloadable.html">原文地址</a></em></p>
<p>可下载商品可以是任何以文件形式交付的东西，比如电子书、音乐、视频、软件或更新。你可以出售专辑，单独出售每首歌曲。你还可以使用可下载商品提供电子版的产品目录。</p>
<p>因为直到付款后才可以下载商品，因此你可以提供样品。比如一本书的摘录、音频文件或视频文件中的一段剪辑，这样客户可以在购买前先感受下。供下载的文件可以放在自己的服务器上，也可以放在其他服务器上。</p>
<p><img src="/wp-content/uploads/2017/01/storefront-product-downloadable_thumb_0_0.png" alt="Downloadable Product"></p>
<p>可下载商品可以配置为要求客户登陆后获取下载链接，或者可以通过邮件发送，并与其他人分享。了解更多 <a href="/product-download-options">配置可下载商品的选项</a></p>
<p>以下将指引你创建一个基本设置的可下载商品。必填项以红色星号(*)标记出来。填完必填项并保存后，你可以继续填写剩下的字段、添加图片。</p>
<p><em>Downloadable file names can include letters and numbers. Either a dash or underscore character can be used to represent a space between words. Any invalid characters in the file name are replaced with an underscore.</em></p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Simple Product</strong><br><img src="/wp-content/uploads/2017/01/product-add-downloadable.png"></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集是产品的模板，要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li>输入产品的名称 <strong>Product Name</strong></li>
<li>使用基于产品名称的默认 SKU 或者重新输入一个 SKU</li>
<li>输入产品的价格 <strong>Price</strong></li>
<li>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></li>
<li>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</li>
<li>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li>可下载商品不用配送，也没有重量。</li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。</li>
<li>如果要标记改商品为新品，勾选 New 复选框</li>
<li>设置 <strong>Format</strong> 为以下值<ul>
<li>Download</li>
<li>DVD<br>如果必要的话，你可以编辑属性来增加更多选项值<br><img src="/wp-content/uploads/2017/01/product-details-downloadable.png"><br>可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ul>
</li>
</ol>
<h2 id="第五步：完成可下载商品信息"><a href="#第五步：完成可下载商品信息" class="headerlink" title="第五步：完成可下载商品信息"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%8F%AF%E4%B8%8B%E8%BD%BD%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第五步：完成可下载商品信息</h2><p>向下滚动找到 <strong>Downloadable Information</strong>，然后展开这部分，然后勾选 Is this downloadable product?</p>
<p>这部分有信息由两块内容组成。第一部分描述下载链接，第二部分描述样本文件。更多配置查看 <a href="/product-download-options">configuration</a></p>
<p><img src="/wp-content/uploads/2017/01/product-downloadable-information.png" alt="Downloadable Information"></p>
<h3 id="完成链接部分"><a href="#完成链接部分" class="headerlink" title="完成链接部分"></a><a href="#%E5%AE%8C%E6%88%90%E9%93%BE%E6%8E%A5%E9%83%A8%E5%88%86"></a>完成链接部分</h3><ol>
<li><p>输入 标题 <strong>Title</strong></p>
</li>
<li><p>如果需要的话，勾选 Links can be purchased separately</p>
</li>
<li><p>点击 <strong>Add Link</strong>，然后做如下事情：<br>a. 输入标题和价格<br>b. 不管是正式文件还是样品文件，选择下列方法之一</p>
<p>Upload File</p>
<p>上传到本服务器</p>
<p>URL</p>
<p>输入 URL</p>
<p>c. 设置 <strong>Shareable</strong> 为下列值之一</p>
<p>No</p>
<p>要求客户必须登陆账户获取下载链接</p>
<p>Yes</p>
<p>通过邮件发送连接，这样客户很方便与其他人分享</p>
<p>Use Config</p>
<p>使用在 <a href="http://docs.magento.com/m2/ce/user_guide/configuration/catalog/catalog.html#DownloadableProductOptions">Downloadable Product Options</a> 中指定的方法</p>
<p>d. 做如下操作：</p>
<ul>
<li>限制每位客户的下载，输入 <strong>Max. Downloads</strong></li>
<li>无限下载，勾选 <strong>Unlimited</strong> 复选框<br><img src="/wp-content/uploads/2017/01/product-downloadable-link-detail.png"></li>
</ul>
</li>
<li><p>要增加一个链接，点击 <strong>Add Link</strong>，然后重复上述步骤</p>
</li>
</ol>
<h3 id="完成样品部分"><a href="#完成样品部分" class="headerlink" title="完成样品部分"></a><a href="#%E5%AE%8C%E6%88%90%E6%A0%B7%E5%93%81%E9%83%A8%E5%88%86"></a>完成样品部分</h3><ol>
<li><p>输入 标题 Title</p>
</li>
<li><p>点击 Add Link<br><img src="/wp-content/uploads/2017/01/product-downloadable-samples.png"></p>
</li>
<li><p>完成以下操作：<br>a. 输入每个样本的标题<br>b. 选择下列之一的发行方法：</p>
<p>Upload File</p>
<p>上传到本服务器</p>
<p>URL</p>
<p>输入 URL</p>
<p>c. 点击 <strong>Add Link</strong> ，并重复上述步骤增加样本<br>d. 拖放 <img src="/wp-content/uploads/2017/01/btn-sort-order-inline_16x18.png"> 图标调整样本的位置</p>
</li>
</ol>
<h2 id="第六步：填写商品信息"><a href="#第六步：填写商品信息" class="headerlink" title="第六步：填写商品信息"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%A1%AB%E5%86%99%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第六步：填写商品信息</h2><p>往下拉，然后根据需要填写以下部分：</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="第七步：发布商品"><a href="#第七步：发布商品" class="headerlink" title="第七步：发布商品"></a><a href="#%E7%AC%AC%E4%B8%83%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>第七步：发布商品</h2><ol>
<li>如果你已经准备好要发布产品了，那么设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>下面你可以点击右上角的 <strong>Save &amp; Close</strong> 或者 <strong>Save</strong> 然后再 <strong>Admin</strong> 菜单中选择 <strong>Customer View</strong> 检查下产品发布信息是否 OK</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ul>
<li>可下载商品可以上传到当前服务器上，或者提供到另一服务器的下载链接</li>
<li>你可以决定客户可以下载的次数</li>
<li>购买可下载商品的客户可以被要求结账前必须登陆</li>
<li>The delivery of a downloadable product can be made when the order is in either a “Pending” or “Invoiced” state.</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>组合商品(Grouped Product)</title>
    <url>/product-create-grouped/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-grouped.html">原文地址</a></em></p>
<p>组合商品是一些独立的简单商品的组合，你可以提供简单商品的变体，或者按照季节、主题组合单品形成一套不同的商品。每个单品是可以单独购买的，或者作为组合商品的一部分购买。在购物车中，每个商品是单独列出的。</p>
<p><img src="/wp-content/uploads/2017/01/product-grouped_thumb_0_0.png"></p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Grouped Product</strong></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集是产品的模板，要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li>输入产品的名称 <strong>Product Name</strong></li>
<li>使用基于产品名称的默认 SKU 或者重新输入一个 SKU</li>
<li>输入产品的价格 <strong>Price</strong></li>
<li>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></li>
<li>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</li>
<li>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li>输入产品的重量</li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。</li>
<li>如果要标记改商品为新品，勾选 New 复选框</li>
<li>选择 <strong>Country of Manufacture</strong><br><img src="/wp-content/uploads/2017/01/product-grouped-details_thumb_0_0.png"><br>可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ol>
<h2 id="第五步：将商品添加到组合中"><a href="#第五步：将商品添加到组合中" class="headerlink" title="第五步：将商品添加到组合中"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E5%B0%86%E5%95%86%E5%93%81%E6%B7%BB%E5%8A%A0%E5%88%B0%E7%BB%84%E5%90%88%E4%B8%AD"></a>第五步：将商品添加到组合中</h2><ol>
<li>下拉找到 <strong>Grouped Products</strong> 部分，然后点击 <strong>Add Products to Group</strong><br><img src="/wp-content/uploads/2017/01/product-grouped-products.png"></li>
<li>如有必要，可以使用筛选找出你需要包含的商品</li>
<li>列表中，勾选需要包含的商品<br><img src="/wp-content/uploads/2017/01/product-grouped-add-products.png"></li>
<li>点击 <strong>Add Selected Products</strong> 将他们添加进去<br>选中的商品会出现在组合商品部分<br><img src="/wp-content/uploads/2017/01/product-grouped-grouped-products-section.png"></li>
<li>然后，可以做如下事情：<ul>
<li>为每个项填入 <strong>Default Quantity</strong></li>
<li>要调整商品的位置，拖动第一栏的 <img src="/wp-content/uploads/2017/01/btn-sort-order-inline_16x18.png"> 图标到新的位置。</li>
<li>要移除某个商品，点击 <strong>Remove</strong></li>
</ul>
</li>
</ol>
<h2 id="第六步：填写商品信息"><a href="#第六步：填写商品信息" class="headerlink" title="第六步：填写商品信息"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%A1%AB%E5%86%99%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第六步：填写商品信息</h2><p>往下拉，然后根据需要填写以下部分：</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="第七步：发布商品"><a href="#第七步：发布商品" class="headerlink" title="第七步：发布商品"></a><a href="#%E7%AC%AC%E4%B8%83%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>第七步：发布商品</h2><ol>
<li>如果你已经准备好要发布产品了，那么设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>下面你可以点击右上角的 <strong>Save &amp; Close</strong> 或者 <strong>Save</strong> 然后再 <strong>Admin</strong> 菜单中选择 <strong>Customer View</strong> 检查下产品发布信息是否 OK</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="第八步：配置购物车缩略图（可选）"><a href="#第八步：配置购物车缩略图（可选）" class="headerlink" title="第八步：配置购物车缩略图（可选）"></a><a href="#%E7%AC%AC%E5%85%AB%E6%AD%A5%EF%BC%9A%E9%85%8D%E7%BD%AE%E8%B4%AD%E7%89%A9%E8%BD%A6%E7%BC%A9%E7%95%A5%E5%9B%BE%EF%BC%88%E5%8F%AF%E9%80%89%EF%BC%89"></a>第八步：配置购物车缩略图（可选）</h2><p>如果你的组合商品中每个单品的图片都不同，你可以设置购物车中的缩略图使用正确的图片</p>
<ol>
<li>后台侧边栏，点击 <strong>Stores</strong>，在 Settings 下，选择 <strong>Configuration</strong></li>
<li>左侧边栏 Sales 下，选择 <strong>Checkout</strong>，展开 <strong>Shopping Cart</strong> 部分</li>
<li>设置 <strong>Grouped Product Image</strong> 为 Product Thumbnail Itself</li>
<li>完成后，点击 <strong>Save Config</strong></li>
</ol>
<p><img src="/wp-content/uploads/2017/01/config-sales-checkout-shopping-cart-grouped-product.png"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ul>
<li>组合商品本质上是简单商品的组合</li>
<li>作为组合商品的一部分的简单商品和虚拟商品不能拥有自定义选项(custom options)</li>
<li>组合商品中的每项被购买后都会单独存在于购物车中，而不是作为组合商品的一部分</li>
<li>购物车中的缩略图，可以被配置为使用组合商品的图片，或是组合商品中单项的图片</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>简单商品(Simple Product)</title>
    <url>/product-create-simple/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-simple.html">原文地址</a></em></p>
<p>发挥产品类型的力量的关键之一在于学会什么时候使用简单商品类型。简单商品可以被单独出售，或者作为组合商品、可配置商品及捆绑商品的组成部分出售。拥有自定义选项的简单商品，有时候也被称为符合商品 (composite product)</p>
<p>以下步骤将带领你，使用默认的商品模板和基本的设置，创建一个简单商品。学会基本的设置后，你就可以根据需要完成更高级的设置了。</p>
<p><img src="/wp-content/uploads/2017/01/product-simple_thumb_0_0.png"></p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Simple Product</strong><br><img src="/wp-content/uploads/2017/01/product-add-simple.png"></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集是产品的模板，要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li>输入产品的名称 <strong>Product Name</strong></li>
<li>使用基于产品名称的默认 SKU 或者重新输入一个 SKU</li>
<li>输入产品的价格 <strong>Price</strong></li>
<li>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></li>
<li>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</li>
<li>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li>输入产品的重量</li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。</li>
<li>如果要标记改商品为新品，勾选 New 复选框</li>
<li>选择 <strong>Country of Manufacture</strong><br><img src="/wp-content/uploads/2017/01/product-details-simple.png">可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ol>
<h2 id="第五步：填写商品信息"><a href="#第五步：填写商品信息" class="headerlink" title="第五步：填写商品信息"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E5%A1%AB%E5%86%99%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第五步：填写商品信息</h2><p>往下拉，然后根据需要填写以下部分：</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="第六步：发布商品"><a href="#第六步：发布商品" class="headerlink" title="第六步：发布商品"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>第六步：发布商品</h2><ol>
<li>如果你已经准备好要发布产品了，那么设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>下面你可以点击右上角的 <strong>Save &amp; Close</strong> 或者 <strong>Save</strong> 然后再 <strong>Admin</strong> 菜单中选择 <strong>Customer View</strong> 检查下产品发布信息是否 OK</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ol>
<li>简单商品可以被用在可配置商品、捆绑商品和组合商品中</li>
<li>简单商品类型可以使用自定义的选项，这样一个 SKU 也可以卖出不同的商品变体</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>虚拟商品(Virtual Product)</title>
    <url>/product-create-virtual/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create-virtual.html">原文地址</a></em></p>
<p>虚拟商品是无形的，通常用于出售如下商品：服务、会员资格、担保、订阅的产品等。虚拟商品可以单独出售，或被应用在<a href="/product-create-grouped/">组合商品</a>和<a href="/product-create-bundle">捆绑商品</a>中。</p>
<p>除了虚拟商品没有重量，他的创建过程和简单商品一样。</p>
<p><img src="/wp-content/uploads/2017/01/product-virtual-membership_thumb_0_0.png"></p>
<h2 id="第一步：选择产品类型"><a href="#第一步：选择产品类型" class="headerlink" title="第一步：选择产品类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BA%A7%E5%93%81%E7%B1%BB%E5%9E%8B"></a>第一步：选择产品类型</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> ，在 <strong>Inventory</strong> 下选择 <strong>Catalog</strong></li>
<li>右上角 <strong>Add Product</strong> 菜单，选择 <strong>Virtual Product</strong><br><img src="/wp-content/uploads/2017/01/product-add-virtual.png"></li>
</ol>
<h2 id="第二步：选择属性集"><a href="#第二步：选择属性集" class="headerlink" title="第二步：选择属性集"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E5%B1%9E%E6%80%A7%E9%9B%86"></a>第二步：选择属性集</h2><p>属性集是产品的模板，要选择属性集，可以在搜索框里输入属性集的名字。<br><img src="/wp-content/uploads/2017/01/product-create-choose-attribute-set.png"></p>
<h2 id="第三步：完成必要的设置"><a href="#第三步：完成必要的设置" class="headerlink" title="第三步：完成必要的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%BF%85%E8%A6%81%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：完成必要的设置</h2><ol>
<li>输入产品的名称 <strong>Product Name</strong></li>
<li>使用基于产品名称的默认 SKU 或者重新输入一个 SKU</li>
<li>输入产品的价格 <strong>Price</strong></li>
<li>因为产品还没有准备好发布，所以把 <strong>Enable Product</strong> 切换到 No 的位置 <img src="/wp-content/uploads/2017/01/btn-switch-no_32x18.png"></li>
<li>点击 <strong>Save</strong><br>产品被保存后，左上角会出现 <strong>Store View chooser</strong>（用来选择作用于哪个店铺）</li>
<li>选择作用于那个 <strong>store view</strong><br><img src="/wp-content/uploads/2017/01/product-create-store-view-choose.png"></li>
</ol>
<h2 id="第四步：完成基本设置"><a href="#第四步：完成基本设置" class="headerlink" title="第四步：完成基本设置"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E5%9F%BA%E6%9C%AC%E8%AE%BE%E7%BD%AE"></a>第四步：完成基本设置</h2><ol>
<li>设置 <strong>Tax Class</strong> 为以下值之一：<ul>
<li>None</li>
<li>Taxable Goods</li>
</ul>
</li>
<li>输入库存数量 <strong>Quantity</strong>，注意默认情况下 <strong>Stock Status</strong> 设置为 <strong>In Stock</strong></li>
<li><strong>Visibility</strong> 默认设置是 Catalog, Search</li>
<li>把产品分配给 <strong>Categories</strong>，点击选项框，这一步也可以创建 category ，都是显而易见的，所以不详细翻译了。<br>可能还有很多其他属性。属性集的选项是不一样的，你可以稍后再填写他们。</li>
</ol>
<h2 id="第五步：填写商品信息"><a href="#第五步：填写商品信息" class="headerlink" title="第五步：填写商品信息"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E5%A1%AB%E5%86%99%E5%95%86%E5%93%81%E4%BF%A1%E6%81%AF"></a>第五步：填写商品信息</h2><p>往下拉，然后根据需要填写以下部分：</p>
<ul>
<li>Content</li>
<li>Images and Videos</li>
<li>Related Products, Up-Sells, and Cross-Sells</li>
<li>Search Engine Optimization</li>
<li>Customizable Options</li>
<li>Products in Websites</li>
<li>Design</li>
<li>Gift Options</li>
</ul>
<h2 id="第六步：发布商品"><a href="#第六步：发布商品" class="headerlink" title="第六步：发布商品"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%8F%91%E5%B8%83%E5%95%86%E5%93%81"></a>第六步：发布商品</h2><ol>
<li>如果你已经准备好要发布产品了，那么设置 <strong>Enable Product</strong> 为 Yes <img src="/wp-content/uploads/2017/01/btn-switch-yes_32x18.png"></li>
<li>下面你可以点击右上角的 <strong>Save &amp; Close</strong> 或者 <strong>Save</strong> 然后再 <strong>Admin</strong> 菜单中选择 <strong>Customer View</strong> 检查下产品发布信息是否 OK</li>
</ol>
<p><img src="/wp-content/uploads/2017/01/product-edit-save-close.png"></p>
<p><img src="/wp-content/uploads/2017/01/product-admin-customer-view.png"></p>
<h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a><a href="#%E8%A6%81%E7%82%B9"></a>要点</h2><ol>
<li>虚拟商品用于无形的商品，例如服务，订阅，担保</li>
<li>虚拟商品很像简单商品，只是虚拟商品没有重量</li>
<li>结账时不会出现配送选项，除非购物车中有其他有形的商品</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>创建商品 (Creating Products)</title>
    <url>/product-create/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-create.html">原文地址</a></em></p>
<p>创建新商品前必须先选择一个商品类型。这部分，你将学习如何创建每种类型的商品。除了基本的商品类型，术语“complex product” 复杂商品，指的是要求客户选择选项的商品，了解更多可用的选项，请参考 Basic Settings 和 Advanced Settings</p>
<p>如果你才开始，可以创建一些商品练练手，看看怎么创建每种类型的商品。如果要深入了解的话，请阅读 Catalog navigation，如何设置 [categories] 和属性，还有<a href="/catalog-urls/">目录 URL</a></p>
<p><img src="/wp-content/uploads/2017/01/storefront-product-page.png"></p>
<h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a><a href="#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB"></a>相关阅读</h2><ul>
<li><a href="/catalog-urls/">目录 URL</a></li>
<li><a href="/product-workspace/">产品工作区</a><ul>
<li><a href="/product-fields-autogenerated/">默认字段值</a></li>
</ul>
</li>
<li><a href="/product-types/">商品类型 (Product Types)</a></li>
<li><a href="/product-create-simple/">简单商品(Simple Product)</a></li>
<li><a href="/product-create-configurable/">可配置商品(Configurable Product)</a><ul>
<li><a href="/product-create-configurable-add-configurations">可配置商品添加配置项(Adding Configurations)</a></li>
</ul>
</li>
<li><a href="/product-create-grouped/">组合商品(Grouped Product)</a></li>
<li><a href="/product-create-virtual/">虚拟商品(Virtual Product)</a></li>
<li><a href="/product-create-bundle/">捆绑商品(Bundle Product)</a></li>
<li><a href="/product-create-downloadable/">可下载商品(Downloadable Product)</a><ul>
<li><a href="/product-download-options/">配置下载选项(Configuring Download Options)</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>配置下载选项(Configuring Download Options)</title>
    <url>/product-download-options/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-download-options.html">原文地址</a></em></p>
<p>下载选项的配置决定着默认值，以及可下载商品的交付选项，还有 guest 客户是否可以购买</p>
<h2 id="配置下载选项"><a href="#配置下载选项" class="headerlink" title="配置下载选项"></a><a href="#%E9%85%8D%E7%BD%AE%E4%B8%8B%E8%BD%BD%E9%80%89%E9%A1%B9"></a>配置下载选项</h2><ol>
<li><p>后台侧边栏，点击 <strong>Stores</strong>，在 Settings 下，选择 <strong>Configuration</strong></p>
</li>
<li><p>左侧边栏 Catalog 下，选择 <strong>Catalog</strong>，展开 <strong>Downloadable Product Options</strong> 部分  </p>
<p><img src="/wp-content/uploads/2017/01/config-catalog-catalog-downloadable-product-options.png" alt="Downloadable Product Options "></p>
<p>a. 设置 <strong>Order Item Status to Enable Downloads</strong> 为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Pending</span><br><span class="line">* Invoiced</span><br></pre></td></tr></table></figure>

<p>b. <strong>Default Maximum Number of Downloads</strong> 默认的下载次数限制<br>c. 设置 <strong>Shareable</strong> 为</p>
<p>Yes</p>
<p>允许客户将下载链接邮件给其他人</p>
<p>No</p>
<p>通过要求客户登陆获得下载链接来阻止客户将下载链接分享给其他人</p>
<p>d. 输入 <strong>Default Sample Title</strong>，他将出现在样品上方，作为标题</p>
<p><img src="/wp-content/uploads/2017/01/product-downloadable-config-sample-title.png"></p>
<p>e. <strong>Default Link Title</strong> 中输入下载链接的文本<br>f. 如果你希望下载时使用另一个浏览器窗口，设置 <strong>Opens Links in New Window</strong> 为 Yes<br>g. 决定如何交付文件，设置 <strong>Use Content Disposition</strong> 为下列值之一</p>
<p>Attachment</p>
<p>Delivers the download link by email as an attachment.</p>
<p>Inline</p>
<p>Delivers the download link as a link on a web page.</p>
<p>h. 如果你希望客户购买必须注册并登录，设置 <strong>Disable Guest Checkout if Cart Contains Downloadable Items</strong> 为 Yes</p>
</li>
<li><p>完成后，点击 <strong>Save Config</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>默认字段值</title>
    <url>/product-fields-autogenerated/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-fields-autogenerated.html">原文网址</a></em></p>
<p>为了在创建商品时节约时间，有些商品的字段会参考另外一些字段作为默认值。您可以直接用默认值，也可以输入其他。下面的字段是会自动生成默认值的：</p>
<p>字段</p>
<p>描述</p>
<p>SKU</p>
<p>基于商品名称(product name)</p>
<p>Meta Title</p>
<p>基于商品名称(product name)</p>
<p>Meta Keywords</p>
<p>基于商品名称(product name)</p>
<p>Meta Description</p>
<p>基于商品名称和描述(product name and description)</p>
<p><code>&amp;#123;&amp;#123;&amp;#125;&amp;#125;</code>这种两个花括号括起来的是占位符，他表示某个字段的值。商品属性集中的任何属性代码都可以用来做占位符。</p>
<p><img src="/wp-content/uploads/2016/08/config-catalog-catalog-product-fields-auto-generation_thumb_0_0.png"></p>
<h2 id="修改占位符"><a href="#修改占位符" class="headerlink" title="修改占位符"></a><a href="#%E4%BF%AE%E6%94%B9%E5%8D%A0%E4%BD%8D%E7%AC%A6"></a>修改占位符</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板<strong>目录</strong>(Catalog)下选择<strong>目录</strong>(Catalog)</li>
<li>展开<strong>商品字段自动生成</strong>(Product Fields Auto-Generation)，进行修改。<br>举例来说，假设您想给每个商品加入某个关键字，或者给每个meta 描述加入一个短语，您可以在合适的字段内输入该关键字或短语。</li>
<li>完成后，点击保存设置</li>
</ol>
<h2 id="常用的占位符"><a href="#常用的占位符" class="headerlink" title="常用的占位符"></a><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%8D%A0%E4%BD%8D%E7%AC%A6"></a>常用的占位符</h2><p>Placeholder</p>
<p>&amp;#123;&amp;#123;color&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;country_of_manufacture&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;description&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;gender&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;material&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;name&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;short_description&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;size&amp;#125;&amp;#125;</p>
<p>&amp;#123;&amp;#123;sku&amp;#125;&amp;#125;</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>占位图 (Placeholders)</title>
    <url>/product-image-placeholders/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-image-placeholders.html">原文地址</a></em> Magento 在取得正式图片前会使用临时图片作为占位图。每种角色可以使用不同的占位图。默认的展位图是 Magento 的 logo 图像。您可以使用自己的图片。 <img src="/wp-content/uploads/2017/08/storefront-image-placeholder.png" alt="Image Placeholder"></p>
<h2 id="如何上传占位图"><a href="#如何上传占位图" class="headerlink" title="如何上传占位图"></a><a href="#%E5%A6%82%E4%BD%95%E4%B8%8A%E4%BC%A0%E5%8D%A0%E4%BD%8D%E5%9B%BE"></a>如何上传占位图</h2><ol>
<li>后台侧边栏，点击 <strong>Stores</strong> &gt; <strong>Settings</strong> &gt; <strong>Configuration</strong></li>
<li>在 <strong>Catalog</strong> 下选择 <strong>Catalog</strong></li>
<li>展开 <strong>Product Image Placeholders</strong> 部分</li>
<li>每个图片角色，点击 <strong>Choose File</strong> ，选择你要上传的图片。你可以给所有的角色使用相同的图片，也可以每种角色的图片都不同。 <img src="/wp-content/uploads/2017/08/config-catalog-catalog-product-image-placeholders.png" alt="Product Image Placeholders"></li>
<li>完成后，点击 <strong>Save</strong></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>上传产品图片（Uploading Product Images）</title>
    <url>/product-image-upload/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-image-upload.html">原文网址</a></em> 对于每个产品, 您可以上传多张图片, 重新排列它们的顺序, 控制每张图片的使用方式。如果要管理的图片数量很多, 您可能更愿意批处理导入, 而不是逐个上载。了解更多，请参考 <a href="http://docs.magento.com/m2/ce/user_guide/system/data-import-product-images.html">Importing Product Images</a> 要管理图片：</p>
<ol>
<li>进入产品编辑页，找到 <strong>Images and Videos</strong> 部分，然后做一下事情：<ul>
<li>上传图片<ul>
<li>从桌面上或者文件夹中拖动一张图片到 相机 <img src="/wp-content/uploads/2017/04/btn-camera_22x18.png"> images box 中，就像下图所示的。</li>
<li>在 images box 中，点击相机 <img src="/wp-content/uploads/2017/04/btn-camera_22x18.png"> 图标，然后从弹出的文件夹中找到你要上传的图片，选中后，点击 open <img src="/wp-content/uploads/2017/04/product-images-and-video-jewel-tee.png"></li>
</ul>
</li>
<li>调整图片顺序 要调整顺序，点击 <img src="/wp-content/uploads/2017/04/btn-sort2_19x18.png"> 图标，然后拖动图片到新的位置。 <img src="/wp-content/uploads/2017/04/product-images-and-videos-drag.png" alt="change order"></li>
<li>删除图片 点击 删除图标 <img src="/wp-content/uploads/2017/04/btn-delete_22x18.png"> 即可删除。</li>
</ul>
</li>
<li>点击图片，会进入图片详情视图，然后可以做如下事情： <img src="/wp-content/uploads/2017/04/product-image-detail-jewel-tee.png"><ul>
<li>输入 Alt text Alt text 指的是网页上的图片因为某种原因不能被显示时应该出现的替代文字。有些阅读器会用到它。搜索引擎也会用到它。有些浏览器会在鼠标移到图片上时显示 Alt Text。Alt text 可以是一些精心挑选的关键词。 在 Alt Text 中输入图片的简短描述。</li>
<li>分配角色 默认情况下，上传的第一张图片会被分配到所有角色。如果要分配角色给其他图片，可以如下操作：<ol>
<li>点击图片，打开图片详情视图</li>
<li>在 Role (角色) box 中，选择要分配给该图片的角色 当你返回到图片和视频部分的时候，当前的角色分配情况就会显示在图片的下方 <img src="/wp-content/uploads/2017/04%5Cproduct-images-video-swatch.png" alt="asigned roles"></li>
</ol>
</li>
<li>隐藏图片 排除图片，可以勾选 Hidden 复选框 <img src="/wp-content/uploads/2017/04%5Cproduct-images-and-videos-hidden.png" alt="Hidden Images"></li>
</ul>
</li>
<li>要关闭图片的详情视图，可以点击右上角的 × 来关闭。</li>
<li>完成后，点击 Save</li>
</ol>
<p>图片角色 Image Role</p>
<p>Role</p>
<p>Descriptions</p>
<p>Thumbnail 缩略图</p>
<p>缩略图用在购物车 shopping cart 中，还有一些内容块，比如相关产品中。示例大小：50 x 50 pixels</p>
<p>Small Image</p>
<p>小图片用在分类列表中和搜索结果页面，以及 Up-sells, Cross-sells, and the New Products List 示例大小：470 x 470 pixels</p>
<p>Base Image</p>
<p>base 图片是产品详情页的主要图片，如果上传的图片尺寸大于其容器的尺寸，那么图像放大镜的效果会被激活 示例大小：470 x 470 pixels(无缩放) 1100 x 1100 pixels (有缩放)</p>
<p>Swatch</p>
<p>Swatch 就是样品的意思，用来示例颜色、图案或者纹理。示例大小：50 x 50 pixels</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>水印 (Watermarks)</title>
    <url>/product-image-watermarks/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-image-watermarks.html">原文网址</a></em> 辛苦半天的原创图，别人点击一次鼠标就偷走了。郁闷吧？增添水印就是为了让别人盗图后用起来有难度，或者根本不好用了。水印文件可以是 jpg (jpeg) gif 或者 png 格式的。gif 和 png 格式都支持透明层，这样水印可以拥有透明的背景。 下面的例子是用在 “small” 图片上的水印，它是拥有透明背景的黑色的 logo ，这张水印图是 png 格式，设置如下：</p>
<p>Size</p>
<p>50*50</p>
<p>Opacity</p>
<p>5</p>
<p>Position</p>
<p>Tile</p>
<p><img src="/wp-content/uploads/2017/08/storefront-watermark-tiled.png" alt="Tiled Watermark"></p>
<h2 id="给产品图片加水印"><a href="#给产品图片加水印" class="headerlink" title="给产品图片加水印"></a><a href="#%E7%BB%99%E4%BA%A7%E5%93%81%E5%9B%BE%E7%89%87%E5%8A%A0%E6%B0%B4%E5%8D%B0"></a>给产品图片加水印</h2><ol>
<li>后台侧边栏，点击 <strong>Content</strong> &gt; <strong>Design</strong> &gt; <strong>Configuration</strong></li>
<li>找到你想设置的 store view ，在 <strong>Action</strong> 栏点击 <strong>Edit</strong></li>
<li>在 <strong>Other Settings</strong> 下，展开 <strong>Product Image Watermarks</strong> 部分</li>
<li>按照下面的操作完成对 <strong>Base</strong> ,<strong>Thumbnail</strong>, <strong>Small</strong>, and <strong>Swatch Image</strong> 的设置，他们的设置都是一样的。 a. 输入 <strong>Image Opacity</strong> ，图片的透明度，百分比格式，例如 40 b. 输入 <strong>Image Size</strong> ，图片的尺寸，px 为单位，例如 200×200 c. 点击 <strong>Upload</strong> 选择要使用的水印图片 d. 设置 <strong>Image Position</strong> 决定水印显示的位置<img src="/wp-content/uploads/2017/08/config-design-product-image-watermarks-base.png" alt="Product Image Watermarks - Base"></li>
<li>完成后，点击 <strong>Save Config</strong></li>
<li>刷新缓存</li>
</ol>
<h2 id="恢复默认值"><a href="#恢复默认值" class="headerlink" title="恢复默认值"></a><a href="#%E6%81%A2%E5%A4%8D%E9%BB%98%E8%AE%A4%E5%80%BC"></a>恢复默认值</h2><p>点击 <strong>Use Default Value</strong> (<img src="/wp-content/uploads/2017/08/btn-use-default_19x18.png">)</p>
<h2 id="删除水印"><a href="#删除水印" class="headerlink" title="删除水印"></a><a href="#%E5%88%A0%E9%99%A4%E6%B0%B4%E5%8D%B0"></a>删除水印</h2><ol>
<li>在图片左下脚，点击 <strong>Delete</strong> <img src="/wp-content/uploads/2017/08/btn-trashcan2_14x18.png"><img src="/wp-content/uploads/2017/08/product-image-watermark-delete.png" alt="Delete Watermark"></li>
<li>点击 <strong>Save Config</strong></li>
<li>刷新缓存，如果前台还显示水印，那么回到 Cache Management 页，点击 <strong>Flush Magento Cache</strong></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>产品作用范围</title>
    <url>/product-scope/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-scope.html">原文网址</a></em></p>
<p>对于有多个网站、店铺和视图的麦进斗来说，产品作用范围决定着该产品在哪个网站、店铺对外销售，以及管理对应视图下的产品信息。最初，您创建的所有产品都会发布到默认的网站、店铺和视图。</p>
<p>如果您只有一个店铺一个默认的视图，您可以运行<a href="/store-mode-single/">单店模式</a>，隐藏范围设置。但是，如果您有多个视图，每个字段的右边都有一个范围提示。</p>
<p>修改特定视图的产品信息，请使用左上角的视图选择器选择视图。选中视图后，会有额外的控制器可用让您编辑在该视图下可修改的字段。在下面的例子中，虽然选择了Spanish 视图，但是产品信息仍然是默认视图的语言。编辑某视图下的产品信息可以看作是向特定的视图增加产品信息层。举例来说，您可以切换到Spanish 视图下，然后翻译如产品标题、描述和元数据(meta data)什么的。要了解更多，您可以参阅：Translating Products.</p>
<h2 id="编辑不同视图下的产品信息"><a href="#编辑不同视图下的产品信息" class="headerlink" title="编辑不同视图下的产品信息"></a><a href="#%E7%BC%96%E8%BE%91%E4%B8%8D%E5%90%8C%E8%A7%86%E5%9B%BE%E4%B8%8B%E7%9A%84%E4%BA%A7%E5%93%81%E4%BF%A1%E6%81%AF"></a>编辑不同视图下的产品信息</h2><ol>
<li>在左上角，点击<strong>店铺视图</strong>(store view)选择要编辑的视图，弹出提示，选择OK 切换视图。<br><img src="/wp-content/uploads/2016/08/product-store-view-menu_thumb_0_0.png"></li>
<li>任何该视图下可编辑的字段后都会多出一个复选框。去掉<strong>使用默认值</strong>(Use Default Value)前的勾，对字段进行修改。<br><img src="/wp-content/uploads/2016/08/product-translate-field_thumb_0_0.png"></li>
<li>完成后，点击保存</li>
<li>左上角，切换回默认视图</li>
<li>要看到店铺的变化，可进行下面的操作：<br>a. 右上角，点击 Admin 菜单，选择<strong>客户视角</strong>(Customer View)<br><img src="/wp-content/uploads/2016/08/product-admin-menu-customer-view_thumb_0_0.png"><br>b. 在前台右上角，设置<strong>语言选择</strong>(Language Chooser)为上面修改的视图找到刚刚修改的产品。<br><img src="/wp-content/uploads/2016/08/storefront-language-chooser_thumb_0_0.png"></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>商品类型 (Product Types)</title>
    <url>/product-types/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-types.html">原文地址</a></em></p>
<h2 id="简单商品"><a href="#简单商品" class="headerlink" title="简单商品"></a><a href="#%E7%AE%80%E5%8D%95%E5%95%86%E5%93%81"></a>简单商品</h2><p>简单商品是具有单独的 SKU 的实体。简单商品有各种定价和输入控件，这样就可以在出售时有一些变化。简单商品可以和组合商品、捆绑商品、可配置商品联系起来使用。<br><img src="/wp-content/uploads/2017/01/product-simple_thumb_0_0.png"></p>
<h2 id="可配置商品"><a href="#可配置商品" class="headerlink" title="可配置商品"></a><a href="#%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%95%86%E5%93%81"></a>可配置商品</h2><p>可配置商品看起来有一系列的选项。每个选项代表着单独的具有唯一 SKU 的简单商品。这样可以追踪每个变体的库存（比如具体到某件衣服某个颜色某个尺码的库存）<br><img src="/wp-content/uploads/2017/01/product-configurable_thumb_0_0.png"></p>
<h2 id="组合商品"><a href="#组合商品" class="headerlink" title="组合商品"></a><a href="#%E7%BB%84%E5%90%88%E5%95%86%E5%93%81"></a>组合商品</h2><p>组合商品是组合在一起进行出售的商品，有时候这样是为了促销。可以单独购买，也可以购买几种组合。</p>
<p><img src="/wp-content/uploads/2017/01/product-grouped_thumb_0_0.png"></p>
<h2 id="虚拟商品"><a href="#虚拟商品" class="headerlink" title="虚拟商品"></a><a href="#%E8%99%9A%E6%8B%9F%E5%95%86%E5%93%81"></a>虚拟商品</h2><p>虚拟商品是无形的，通常用于出售如下商品：服务、会员资格、担保、订阅的产品等。虚拟商品可以被应用在组合商品和捆绑商品中。</p>
<p><img src="/wp-content/uploads/2017/01/product-virtual-membership_thumb_0_0.png"></p>
<h2 id="捆绑商品"><a href="#捆绑商品" class="headerlink" title="捆绑商品"></a><a href="#%E6%8D%86%E7%BB%91%E5%95%86%E5%93%81"></a>捆绑商品</h2><p>捆绑商品让客户从各种各样的选项中“创造他们自己的”商品。捆绑产品可以是礼品、电脑、或者其他可以自定义的商品。捆绑商品中的每个选项都是单独的商品。</p>
<p><img src="/wp-content/uploads/2017/01/product-bundle_thumb_0_0.png"></p>
<h2 id="可下载商品"><a href="#可下载商品" class="headerlink" title="可下载商品"></a><a href="#%E5%8F%AF%E4%B8%8B%E8%BD%BD%E5%95%86%E5%93%81"></a>可下载商品</h2><p>包含一个或多个可疑下载的电子文件的产品就是可下载的商品。这些文件可以放在自己的服务器上，或者是提供下载的 URL</p>
<p><img src="/wp-content/uploads/2017/01/storefront-product-downloadable_thumb_0_0.png"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>添加产品视频 (Adding Product Video)</title>
    <url>/product-video/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-video.html">原文网址</a></em> 要添加产品视频, 您必须首先从您的 Google 帐户获取一个 API 密钥, 然后在您的商店的配置中输入它。然后, 您才可以从产品链接到视频。</p>
<h2 id="第一步：获得-YouTube-API-key"><a href="#第一步：获得-YouTube-API-key" class="headerlink" title="第一步：获得 YouTube API key"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E8%8E%B7%E5%BE%97-youtube-api-key"></a>第一步：获得 YouTube API key</h2><ol>
<li>登录 Google 账户。然后进入 <a href="https://console.developers.google.com/">Google Developers Console</a>，然后，做以下事情： a. Under Use Google APIs, click <strong>Enable and manage APIs</strong> b. In the panel on the left choose <strong>Credentials</strong>. Expand the Add Credentials menu, and choose <strong>API key</strong>. c. When prompted to create a new key, choose <strong>Server key</strong>. Enter a name for the key, and tap <strong>Create</strong>.</li>
<li>等待生成密钥，然后把密钥复制一下，下一步，要将该密钥填进配置中。</li>
</ol>
<h2 id="第二步：配置"><a href="#第二步：配置" class="headerlink" title="第二步：配置"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E9%85%8D%E7%BD%AE"></a>第二步：配置</h2><ol>
<li>后台侧边栏，点击 <strong>Stores</strong> &gt; <strong>Settiings</strong> &gt; <strong>Configuration</strong></li>
<li>在 <strong>Catalog</strong> &gt; <strong>Catalog</strong> 下，</li>
<li>展开 <strong>Product Video</strong> 部分，然后粘贴上一步骤的 <strong>YouTube API key</strong> <img src="/wp-content/uploads/2017/08/config-catalog-catalog-product-video.png" alt="Product Video"></li>
<li>完成后，点击 <strong>Save Config</strong></li>
<li>刷新缓存</li>
</ol>
<h2 id="第三步：视频链接"><a href="#第三步：视频链接" class="headerlink" title="第三步：视频链接"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E8%A7%86%E9%A2%91%E9%93%BE%E6%8E%A5"></a>第三步：视频链接</h2><ol>
<li>打开某产品编辑，在图像和视频部分，点击 <strong>Add Video</strong> 如果你还没有输入 YouTube API key ，点击 <strong>OK</strong> 继续，你不能链接到 YouTube 视频，但是你仍然可以完成这个步骤 <img src="/wp-content/uploads/2017/08/product-video-add.png" alt="Add Video"></li>
<li>输入 YouTube 或 Vimeo 视频的链接</li>
<li>输入标题和描述</li>
<li>上传 <strong>Preview Image</strong> (预览图)，浏览图片并选择文件。</li>
<li>如果你喜欢用视频的元数据，点击 <strong>Get Video Information</strong></li>
<li>选中以下复选框来确定视频的角色<ul>
<li>Base Image</li>
<li>Small Image</li>
<li>Swatch Image</li>
<li>Thumbnail</li>
<li>Hide from Product Page</li>
</ul>
</li>
<li>完成后，点击 <strong>Save</strong> <img src="/wp-content/uploads/2017/08/product-video-new-with-data.png" alt="Add Video"></li>
</ol>
<h2 id="字段描述"><a href="#字段描述" class="headerlink" title="字段描述"></a><a href="#%E5%AD%97%E6%AE%B5%E6%8F%8F%E8%BF%B0"></a>字段描述</h2><p>Field</p>
<p>Description</p>
<p>URL</p>
<p>相关视频的链接</p>
<p>Title</p>
<p>视频的标题</p>
<p>Description</p>
<p>视频描述</p>
<p>Preview Image</p>
<p>视频的预览图</p>
<p>Get Video Information</p>
<p>Retrieves the video meta data that is stored on the host server. You can use the original data, or update it as needed.</p>
<p>Role</p>
<p>Determines how the preview image is used in your store. Options: Base Image Small Image Thumbnail Swatch Image Hide from Product Page</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>产品工作区</title>
    <url>/product-workspace/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/product-workspace.html">原文地址</a></em></p>
<p>产品工作区的左侧面板列出了基础设置(Basic Settings)和高级设置(Advanced Settings)两个选项，右侧是当前选项。该工作区包含多个保存选项，还让您控制商品的在线状态。</p>
<p><img src="/wp-content/uploads/2016/08/product-workspace_thumb_0_0.png" alt="Product Workspace"></p>
<h2 id="属性集-Attribute-Set"><a href="#属性集-Attribute-Set" class="headerlink" title="属性集(Attribute Set)"></a><a href="#%E5%B1%9E%E6%80%A7%E9%9B%86(attribute-set)"></a>属性集(Attribute Set)</h2><p>左上角的属性集决定着组成该产品记录的字段。创建一个新的产品时，您可以点击默认属性集边上的向下的小箭头来选择其他属性集。</p>
<p><img src="/wp-content/uploads/2016/08/product-detail-template_thumb_0_0.png" alt="Attribute Set"></p>
<h2 id="在线状态-Online-Status"><a href="#在线状态-Online-Status" class="headerlink" title="在线状态(Online Status)"></a><a href="#%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81(online-status)"></a>在线状态(Online Status)</h2><p>产品的在线状态通过右上角的开关指示。要更改在线状态，只需要点击开关按钮就行，很简单吧。</p>
<p>控件</p>
<p>描述</p>
<p><img src="/wp-content/uploads/2016/08/btn-online.png"></p>
<p>这个表示产品目前在线</p>
<p><img src="/wp-content/uploads/2016/08/btn-offline.png"></p>
<p>表示产品目前不在线，对外不可见</p>
<h2 id="展开-x2F-收起"><a href="#展开-x2F-收起" class="headerlink" title="展开&#x2F;收起"></a><a href="#%E5%B1%95%E5%BC%80/%E6%94%B6%E8%B5%B7"></a>展开&#x2F;收起</h2><p>要展开或收起某个部分，点击右侧的展开<img src="/wp-content/uploads/2016/08/btn-expand.png"> 或者 收起 <img src="/wp-content/uploads/2016/08/btn-collapse_19x18.png"> 小图标</p>
<p><img src="/wp-content/uploads/2016/08/product-details-collapse-expand_thumb_0_0.png"></p>
<h2 id="保存选项菜单"><a href="#保存选项菜单" class="headerlink" title="保存选项菜单"></a><a href="#%E4%BF%9D%E5%AD%98%E9%80%89%E9%A1%B9%E8%8F%9C%E5%8D%95"></a>保存选项菜单</h2><p>保存菜单有好几个选项：保存‘保存并创建一个新产品、保存并复制该产品、保存后关闭。</p>
<p><img src="/wp-content/uploads/2016/08/product-save-menu_thumb_0_0.png" alt="Save menu"></p>
<p>保存选项</p>
<p>描述</p>
<p>保存(Save)</p>
<p>保存当前产品并继续留在该产品页上</p>
<p>保存 &amp; 新建(Save &amp; New)</p>
<p>保存并关闭当前的产品，然后基于相同的产品类型和模板创建新的产品</p>
<p>保存 &amp; 复制(Save &amp; Duplicate)</p>
<p>保存当前的产品，然后打开一个克隆的新产品</p>
<p>保存 &amp; 关闭(Save &amp; Close)</p>
<p>保存并关闭当前产品，回到产品目录工作区</p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><p><a href="/product-fields-autogenerated/">默认字段值</a></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>商品菜单</title>
    <url>/products-menu/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/products-menu.html">原文地址</a></em></p>
<p>商品菜单提供了创建商品，分类和库存管理，以及目录内容管理的工具。</p>
<p><img src="/wp-content/uploads/2016/08/admin-menu-products_thumb_0_0.png" alt="Product Menu"></p>
<h2 id="菜单选项"><a href="#菜单选项" class="headerlink" title="菜单选项"></a><a href="#%E8%8F%9C%E5%8D%95%E9%80%89%E9%A1%B9"></a>菜单选项</h2><h3 id="目录"><a href="#目录" class="headerlink" title=")目录"></a><a href="//www.hellomagento2.com/catalog-workspace/"></a>)<a href="/catalog-workspace/">目录</a></h3><p>创建各种类型的新商品，管理商品库存。</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a><a href="#%5B%E5%88%86%E7%B1%BB%5D()"></a>分类</h3><p>创建类别结构，他是您店铺导航的基础。</p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/catalog-workspace/">产品目录工作区</a><ul>
<li><a href="/product-scope/">产品作用范围</a></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>px、pt、%、em 和 rem</title>
    <url>/px-pt-em-rem/</url>
    <content><![CDATA[<h2 id="常用单位"><a href="#常用单位" class="headerlink" title="常用单位"></a><a href="#%E5%B8%B8%E7%94%A8%E5%8D%95%E4%BD%8D"></a>常用单位</h2><p>单位</p>
<p>类型</p>
<p>描述</p>
<p>px</p>
<p>Absolute</p>
<p>1个 Viewport 像素</p>
<p>pt</p>
<p>Absolute</p>
<p>1pt &#x3D; 1&#x2F;72 英寸</p>
<p>pc</p>
<p>Absolute</p>
<p>1pc &#x3D; 12pt</p>
<p>%</p>
<p>Relative</p>
<p>相对于父元素的字体尺寸</p>
<p>em</p>
<p>Relative</p>
<p>相对于父元素的字体尺寸</p>
<p>rem</p>
<p>Relative</p>
<p>(即root em) 相对于html标签的字体尺寸</p>
<p>keyword</p>
<p>Relative</p>
<p>xx-small, x-small, small, medium, large, x-large, xx-large</p>
<p>vw</p>
<p>Relative</p>
<p>相当于Viewport宽度的1&#x2F;100</p>
<p>vh</p>
<p>Relative</p>
<p>相当于Viewport高度的1&#x2F;100</p>
<p>vmin</p>
<p>Relative</p>
<p>相当于Viewport高宽中长度相对较小的1&#x2F;100</p>
<p>vmax</p>
<p>Relative</p>
<p>相当于Viewport高宽中长度相对较大的1&#x2F;100</p>
<p>我们重点关注 px、pt、%、em 和 rem</p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a><a href="#%E5%AE%9E%E9%AA%8C"></a>实验</h2><p>默认设定下：<br>100% &#x3D; 1em &#x3D; 1rem &#x3D; 16px &#x3D; 12pt</p>
<p>我们来实验一下，chrome 浏览器环境。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">      text-align: center;</span><br><span class="line">      margin-top: 50px;</span><br><span class="line">      background-color: #efe1d6;</span><br><span class="line">    &#125;</span><br><span class="line">    html &#123;</span><br><span class="line">      font-size: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    body &#123;</span><br><span class="line">      font-size: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">      .px &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">      &#125;</span><br><span class="line">      .pt &#123;</span><br><span class="line">        font-size: 12pt;</span><br><span class="line">      &#125;</span><br><span class="line">      .percent &#123;</span><br><span class="line">        font-size: 100%;</span><br><span class="line">      &#125;</span><br><span class="line">      .em &#123;</span><br><span class="line">        font-size: 1em;</span><br><span class="line">      &#125;</span><br><span class="line">      .rem &#123;</span><br><span class="line">        font-size: 1rem;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;html &#123;font-size: 100%;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;body &#123;font-size: 100%;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;px&quot;&gt;16px这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;pt&quot;&gt;12pt这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;percent&quot;&gt;100%这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;em&quot;&gt;1em这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;rem&quot;&gt;1rem这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>下图可以看出，他们的大小是一样的，更改浏览器的缩放比例，他们也是同步放大或缩小的。<br><img src="/wp-content/uploads/2017/01/font-size-1.png"></p>
<p>如果我们更改浏览器中的字号为小（极小的情况 chrome 做了特别的处理），这样的话，我们又会发现他们是不一样大的：<br><img src="/wp-content/uploads/2017/01/font-size-2.png"></p>
<p>如果用调试工具去检查，会发现未做设置的字体大小和相对单位的字体大小都是 12px（100% 缩放比例下）</p>
<p>这是因为我们的根元素指定的是 100%，这时候他是相对于浏览器中设置的字号来渲染的。</p>
<p>如果改变 html 为 <code>font-size:200%</code>，可以看出，所有相对单位的字号是原先 100% 情况下的两倍。<br><img src="/wp-content/uploads/2017/01/font-size-3.png"></p>
<h2 id="em-与-rem"><a href="#em-与-rem" class="headerlink" title="em 与 rem"></a><a href="#em-%E4%B8%8E-rem"></a>em 与 rem</h2><p>em 和 % 是等价的，他们都是相对于父元素的尺寸来计算尺寸的。而 rem 是相对于根元素的。相对于根元素的好处是，更改根元素的属性就可以轻易调整整个页面。</p>
<p>我们将浏览器的字号调整为 16px （默认），然后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">  font-size: 100% /* =16px */</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">  font-size: 2em; /* =32px */</span><br><span class="line">&#125;</span><br><span class="line">p &#123;</span><br><span class="line">  font-size: 1em; /* =32px */</span><br><span class="line">  /* font-size: 0.5em; =16px */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="/wp-content/uploads/2017/01/font-size-4.png"></p>
<p>rem 相对于根元素所以只有 16px 其他则是 32 px</p>
<h2 id="rem-的兼容"><a href="#rem-的兼容" class="headerlink" title="rem 的兼容"></a><a href="#rem-%E7%9A%84%E5%85%BC%E5%AE%B9"></a>rem 的兼容</h2><p>为了兼容不支持 rem 的浏览器（IE8及更早的版本），我们可以在使用 rem 的地方，前面加上对应的 px 值，这样就可以优雅降级了。<br>查询兼容性，可以参考 <a href="http://caniuse.com/">Can I use</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://www.manongjc.com/article/89.html">CSS中字体尺寸px pt em rem等的区别</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>关于 RequireJS</title>
    <url>/requirejs-modularity-async/</url>
    <content><![CDATA[<p>文章没有什么特别之处，算是对 <a href="/alan-magento-2-and-requirejs/#requirejs-and-jquery-plugins">Magento 2 and RequireJS (翻译)</a>一点补充，主要是为了记录备查。 RequireJS 主要做的就是模块化异步加载 JS Js 模块化为了便于维护和团队协作。 参考： <a href="http://foio.github.io/requireJS/">RequireJS结构分析，实现自己的模块加载系统</a> 这篇文章提到 RequireJS 通过 script dom element 方法来异步加载 js 模块。RequireJS 在代码层面控制模块的加载顺序（依赖） js 异步加载，是为了解决 js 加载时阻塞网页上其他资源的下载的问题，为了让页面内容更早展现在用户面前。 参考: <a href="http://supersamchow.github.io/2016/05/16/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E5%92%8C%E6%97%A0%E9%98%BB%E5%A1%9E%E5%8A%A0%E8%BD%BD%E8%84%9A%E6%9C%AC%E7%9A%84%E7%90%86%E8%A7%A3/">浏览器线程阻塞和无阻塞加载脚本的理解</a> <a href="http://www.cnblogs.com/giggle/p/5513769.html">JavaScript阻塞剖析与改善</a> <a href="http://foio.github.io/javascript-async/">在网页中异步加载javascript</a> 例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: require-example.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My Sample Project&lt;/title&gt;</span><br><span class="line">        &lt;!-- data-main attribute tells require.js to load</span><br><span class="line">             scripts/main.js after require.js loads. --&gt;</span><br><span class="line">        &lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;My Sample Project&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>那么 require.js 会首先加载 <code>scripts/main.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: scripts/main.js --&gt;</span><br><span class="line">console.log(&#x27;load main&#x27;);</span><br><span class="line">require.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        &quot;hello&quot;: &quot;helper/world&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">requirejs([&#x27;hello&#x27;], function(helper_world) &#123;</span><br><span class="line">    var message = helper_world.getMessage();</span><br><span class="line">    console.log(&quot;I am second&quot;);</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: scripts/helper/world.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    var o = &#123;&#125;;</span><br><span class="line">    o.getMessage = function()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;Hello Module World&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(&quot;I am first load&quot;);</span><br><span class="line">    return o;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>那么在控制台我们应该看到的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.js:5  load main</span><br><span class="line">world.js:8 I am first load</span><br><span class="line">main.js:13 I am second</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/05/requirejs-dom.png"> 验证通过 script dom element 异步加载。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>RequireJS 的 shim 用法</title>
    <url>/requirejs-%E7%9A%84-shim-%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a><a href="#%E7%BB%BC%E8%BF%B0"></a>综述</h2><p>RequireJS 遵循 <a href="https://github.com/amdjs/amdjs-api/wiki/AMD">AMD 规范</a>（异步模块定义）。理论上来说，RequireJS 加载的模块必须符合 AMD 规范，使用 define() 函数定义。但是，由于历史原因，大量的 js 库并不符合规范。这样加载非规范的模块，就需要用到 <code>shim</code> 比如 underscore 和 backbone 都不符合 AMD 规范，如果要加载他们，就要像这样使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">　　　　shim: &#123;</span><br><span class="line">　　　　　　&#x27;underscore&#x27;:&#123;</span><br><span class="line">　　　　　　　　exports: &#x27;_&#x27;</span><br><span class="line">　　　　　　&#125;,</span><br><span class="line">　　　　　　&#x27;backbone&#x27;: &#123;</span><br><span class="line">　　　　　　　　deps: [&#x27;underscore&#x27;, &#x27;jquery&#x27;],</span><br><span class="line">　　　　　　　　exports: &#x27;Backbone&#x27;</span><br><span class="line">　　　　　　&#125;</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure>

<p><code>exports</code> 是模块的返回值，该值一定要与库暴露的全局变量名称一致。 <code>deps</code> 表明模块的依赖，如果 A 模块依赖于 B 模块，而 A 模块不符合 AMD 规范，使用全局变量，那么 B 模块也必须使用全局变量，不然 A 模块会找不到 B 模块的依赖对象而报错。</p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a><a href="#%E5%87%86%E5%A4%87"></a>准备</h2><p>下面开始做实验。 File: test.html</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;shim&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/require.js/2.3.5/require.min.js&quot; data-main=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>File: a.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 立即执行函数，不暴露私有成员</span><br><span class="line">(function(window)&#123;</span><br><span class="line">    var a = &#123;&#125;;</span><br><span class="line">    a.sayHello = function()&#123;</span><br><span class="line">        alert(&quot;Hello this is A&quot;);</span><br><span class="line">        return &#x27;Hello&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    window.a = a;</span><br><span class="line">&#125;)(window)</span><br></pre></td></tr></table></figure>

<p>File: main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require([&#x27;a&#x27;],function(a) &#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>载入文档，在 console 中我们会看到，输出 <code>undefined</code> <img src="/wp-content/uploads/2017/09/shim-1.png" alt="a is not defined"> 但是我们查看浏览器的 element 和 network 会发现，实际上 a.js 已经被加载进来了。 <img src="/wp-content/uploads/2017/09/shim-2.png" alt="a.js has been loaded"> <img src="/wp-content/uploads/2017/09/shim-3.png" alt="a.js has been loaded network"> 下面我们在 console 中输入:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a.sayHello();</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2017/09/shim-4.gif" alt="console 中输入命令"> 可以看出实际上 a.js 中暴露的全局变量还是存在的。</p>
<h2 id="使用-shim"><a href="#使用-shim" class="headerlink" title="使用 shim"></a><a href="#%E4%BD%BF%E7%94%A8-%60shim%60"></a>使用 <code>shim</code></h2><p>下面我们用 <code>shim</code> 让 RequireJS 可以获得暴露的全局变量作为返回值。 修改 <code>main.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">    shim: &#123;</span><br><span class="line">        a:&#123;</span><br><span class="line">            deps:[],</span><br><span class="line">            exports: &#x27;a&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">require([&#x27;a&#x27;],function(a) &#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后刷新文档，这次肯定是输出内容了。 <img src="/wp-content/uploads/2017/09/shim-5.png" alt="exports 有效"> 如果我们把 <code>exports: &#39;a&#39;</code> 改成 <code>exports: &#39;something&#39;</code> 那么再刷新，一定会发现又输出 <code>undefined</code> <em>所以，<code>exports</code> 是模块的返回值，该值一定要与库暴露的全局变量名称一致。</em></p>
<h2 id="使用-deps"><a href="#使用-deps" class="headerlink" title="使用 deps"></a><a href="#%E4%BD%BF%E7%94%A8-%60deps%60"></a>使用 <code>deps</code></h2><p>下面来实验 <code>deps</code> 的用法，假设 a.js 依赖于 b.js</p>
<h3 id="正确的写法"><a href="#正确的写法" class="headerlink" title="正确的写法"></a><a href="#%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%86%99%E6%B3%95"></a>正确的写法</h3><p>File: b.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var b = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">console.log(&#x27;b&#x27;);</span><br><span class="line"></span><br><span class="line">b.string = &#x27;Hello, this is a string from b.js&#x27;;</span><br><span class="line">b.getString = function() &#123;</span><br><span class="line">    return this.string;</span><br><span class="line">&#125;</span><br><span class="line">b.setString = function(string) &#123;</span><br><span class="line">    this.string = string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: a.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 立即执行函数，不暴露私有成员</span><br><span class="line">(function(window)&#123;</span><br><span class="line">    console.log(&#x27;a&#x27;);</span><br><span class="line"></span><br><span class="line">    var a = &#123;&#125;;</span><br><span class="line">    a.sayHello = function()&#123;</span><br><span class="line">        alert(&quot;Hello this is A&quot;);</span><br><span class="line">        return &#x27;Hello&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    a.getBString = function() &#123;</span><br><span class="line">        alert(b.getString());</span><br><span class="line">    &#125;</span><br><span class="line">    window.a = a;</span><br><span class="line">&#125;)(window)</span><br></pre></td></tr></table></figure>

<p>File:main.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">    shim: &#123;</span><br><span class="line">        a:&#123;</span><br><span class="line">            deps:[&#x27;b&#x27;],</span><br><span class="line">            exports: &#x27;a&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        b: &#123;</span><br><span class="line">            deps:[],</span><br><span class="line">            exports: &#x27;b&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">require([&#x27;a&#x27;],function(aAlias) &#123;</span><br><span class="line"></span><br><span class="line">    aAlias.getBString();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>效果如下： <img src="/wp-content/uploads/2017/09/shim-6.png" alt="depes 用法效果"> 这是标准的写法，下面我们来实验一个不好的写法。</p>
<h3 id="错误的写法"><a href="#错误的写法" class="headerlink" title="错误的写法"></a><a href="#%E9%94%99%E8%AF%AF%E7%9A%84%E5%86%99%E6%B3%95"></a>错误的写法</h3><p>将 main.js 改成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs.config(&#123;</span><br><span class="line">    shim: &#123;</span><br><span class="line">        a:&#123;</span><br><span class="line">            deps:[],</span><br><span class="line">            exports: &#x27;a&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        b: &#123;</span><br><span class="line">            deps:[],</span><br><span class="line">            exports: &#x27;b&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">require([&#x27;a&#x27;,&#x27;b&#x27;],function(aAlias, bAlias) &#123;</span><br><span class="line"></span><br><span class="line">    aAlias.getBString();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们并没有声明 a.js 依赖 b.js 而是在使用的时候将 b.js require 进来了。这样在本例中也是正常的。但仅仅是因为本例太简单，对执行的先后顺序没有要求而已，换个场景可能就失效了。 <code>require([&#39;a&#39;,&#39;b&#39;],function(aAlias, bAlias)</code> 仅仅表示 a b 都加载完成后，执行回调函数，但是 加载的顺序是不固定的。执行的顺序是固定的，按照依赖声明的先后顺序执行。 在上面我们埋了 <code>console.log(&#39;a)</code> 和 <code>console.log(&#39;b&#39;)</code> 那么在不好的写法中，控制台中打印的顺序是不固定的，有时候是 <code>a b</code> 有时候是 <code>b a</code> ，而正确的例子中，指定顺序是固定的，一定是 <code>b a</code> 下面是错误的写法，多次刷新的结果，可以看出，顺序是有变化的。 <img src="/wp-content/uploads/2017/09/shim-7.gif" alt="执行顺序不一定"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://blog.csdn.net/aitangyong/article/details/44225859">使用requireJS加载不符合AMD规范的js文件：shim的使用方式和实现原理</a> <a href="http://www.ruanyifeng.com/blog/2012/10/asynchronous_module_definition.html">Javascript模块化编程（二）：AMD规范</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>requirejs</tag>
        <tag>shim</tag>
      </tags>
  </entry>
  <entry>
    <title>Salesforce Commerce Cloud 开发入门</title>
    <url>/salesforce-commerce-cloud-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p>Salesforce Commerce Cloud 是付费的，没找到免费试用的 sandbox 。 环境搭建请参考 <a href="https://medium.com/@fsjohnny/lets-develop-with-salesforce-commerce-cloud-part-1-setting-up-your-development-environment-b16044708d09">Let’s Develop with Salesforce Commerce Cloud — Part 1: Setting Up Your Development Environment</a> 然后 <a href="https://medium.com/@fsjohnny/lets-develop-with-salesforce-commerce-cloud-part-2-creating-a-development-storefront-720cef540413">Let’s Develop with Salesforce Commerce Cloud — Part 2: Creating a Development Storefront</a> 下面我们自己写个 helloworld 在 sample_controllers &#x2F; cartridge &#x2F; controllers 下新建 HelloWorld.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Description of the Controller and the logic it provides</span><br><span class="line">*</span><br><span class="line">* @module  controllers/HelloWorld</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* A hello world controller. This file is in cartridge/controllers folder</span><br><span class="line">*</span><br><span class="line">* @module controllers/HelloWord This is used only to generate JSDoc</span><br><span class="line">*/</span><br><span class="line">exports.Start = function() &#123;</span><br><span class="line">    response.setContentType(&#x27;text/html&#x27;);</span><br><span class="line">    response.getWriter().println(&#x27;Hello World!&#x27;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.Start.public = true; //Start becomes the start node</span><br></pre></td></tr></table></figure>

<p>下面我们访问 <code>https://sandboxdomain/on/demandware.store/Sites-SiteGenesis-Site/default/HelloWorld-Start</code> <img src="/wp-content/uploads/2019/10/hello-world.png"> 下面带上 ISML 模板 在 controllers 下新建一个 HelloWorld2.js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Description of the Controller and the logic it provides</span><br><span class="line">*</span><br><span class="line">* @module  controllers/HelloWorld2</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">exports.Start = function()&#123;</span><br><span class="line">     var CurrentHttpParameterMap = request.httpParameterMap;</span><br><span class="line">     var myParameter=CurrentHttpParameterMap.param;</span><br><span class="line">//     response.setContentType(&#x27;text/html&#x27;);</span><br><span class="line">//     response.getWriter().print(myParameter);</span><br><span class="line"></span><br><span class="line">     var ISML = require(&#x27;dw/template/ISML&#x27;);</span><br><span class="line">     ISML.renderTemplate(&#x27;helloworld.isml&#x27;, &#123;myParameteronISML:myParameter&#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">exports.Start.public = true;</span><br></pre></td></tr></table></figure>

<p>然后在 sample_controllers &#x2F; cartridge &#x2F; templates &#x2F; default 下创建 helloworld.isml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--- TEMPLATENAME: hello.isml ---&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Hallo Tag&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        Hello $&#123;pdict.myParameteronISML&#125;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>下面我们访问 <code>https://sandboxdomain/on/demandware.store/Sites-SiteGenesis-Site/default/HelloWorld2-Start?param=Jack</code> <img src="/wp-content/uploads/2019/10/hello-world2.png"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Self-Hosting Google Web Fonts</title>
    <url>/self-hosting-google-web-fonts/</url>
    <content><![CDATA[<p><a href="https://google-webfonts-helper.herokuapp.com/fonts">A good tool for self-hosting Google Web Fonts</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>如何修改 Magento 2 product detail page 的 tab 名称和顺序</title>
    <url>/set-position-or-order-of-a-new-tab-on-the-product-detail-page-in-magento2/</url>
    <content><![CDATA[<p>Magento 2 product detail page 的 tab 指的是下图中红色框中的选项卡。 假设我想把 More information 改成 Specifications 并且让他在第一个位置，Details 改名为 Description 位于第二个位置。 <img src="/wp-content/uploads/2017/08/magento2-product-detail-page-tab.png"> 博主试过使用 Magento 的 <code>before</code> 和 <code>after</code> 来更改 tab 的顺序，但是没有成功（这不代表这个方法就一定不可以，此处仅是记录一下，以后有机会可以研究为什么没有成功。） 以下是一个成功的方法。通过 <code>catalog_product_view.xml</code> 来修改名称参数，并传递了一个额外的参数用来控制显示的顺序，修改了 <code>details.phtml</code> 来使用该参数，以达到排序的效果。</p>
<h2 id="第一步：layout-xml-的修改"><a href="#第一步：layout-xml-的修改" class="headerlink" title="第一步：layout xml 的修改"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9Alayout-xml-%E7%9A%84%E4%BF%AE%E6%94%B9"></a>第一步：layout xml 的修改</h2><p>我们的修改位于主题层面 <code>&lt;magento_root&gt;/app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/Magento_Catalog/layout/catalog_product_view.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line"> * Copyright © 2016 SW-THEMES. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;page layout=&quot;2columns-right&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceBlock name=&quot;product.info.details&quot;&gt;</span><br><span class="line">            &lt;referenceBlock name=&quot;product.attributes&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;title&quot; translate=&quot;true&quot; xsi:type=&quot;string&quot;&gt;Specifications&lt;/argument&gt;</span><br><span class="line">                    &lt;argument name=&quot;priority&quot; xsi:type=&quot;string&quot;&gt;1&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">            &lt;/referenceBlock&gt;</span><br><span class="line">            &lt;referenceBlock name=&quot;product.info.description&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;title&quot; translate=&quot;true&quot; xsi:type=&quot;string&quot;&gt;Description&lt;/argument&gt;</span><br><span class="line">                    &lt;argument name=&quot;priority&quot; xsi:type=&quot;string&quot;&gt;2&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">            &lt;/referenceBlock&gt;</span><br><span class="line">            &lt;referenceBlock name=&quot;reviews.tab&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;priority&quot; xsi:type=&quot;string&quot;&gt;3&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">            &lt;/referenceBlock&gt;</span><br><span class="line">        &lt;/referenceBlock&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<h2 id="第二步：修改-details-phtml"><a href="#第二步：修改-details-phtml" class="headerlink" title="第二步：修改 details.phtml"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E4%BF%AE%E6%94%B9-details.phtml"></a>第二步：修改 details.phtml</h2><p>拷贝 <code>&lt;magento_root&gt;/vendor/magento-catalog-view/frontend/templates/product/view/details.phtml</code> 到 <code>&lt;magento_root&gt;/app/design/frontend/&lt;Vendor&gt;/&lt;theme&gt;/Magento_Catalog/templates/product/view/details.phtml</code> 修改拷贝后的 <code>details.phtml</code> 使用传递的参数排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php if ($detailedInfoGroup = $block-&gt;getGroupChildNames(&#x27;detailed_info&#x27;, &#x27;getChildHtml&#x27;)):?&gt;</span><br><span class="line">    &lt;div class=&quot;product info detailed&quot;&gt;</span><br><span class="line">        &lt;?php $layout = $block-&gt;getLayout(); ?&gt;</span><br><span class="line">        &lt;?php</span><br><span class="line">            # We create a new array;</span><br><span class="line">            $newPriority = array();</span><br><span class="line">            # forEach the original $detailedInfoGroup Array;</span><br><span class="line">            foreach ($detailedInfoGroup as $name)&#123;</span><br><span class="line">                $alias = $layout-&gt;getElementAlias($name);</span><br><span class="line">                # Get the priority which we applied via xml file</span><br><span class="line">                # If no priority is applied via xml file then just set it to 10</span><br><span class="line">                $priority = $block-&gt;getChildData($alias,&#x27;priority&#x27;) ? $block-&gt;getChildData($alias,&#x27;priority&#x27;) : &#x27;10&#x27;;</span><br><span class="line">                # variables pushed into new two-dimensional array</span><br><span class="line">                array_push($newPriority, array($name, $priority));</span><br><span class="line">            &#125;</span><br><span class="line">            # Sort array by priority</span><br><span class="line">            usort($newPriority, function($a, $b) &#123;</span><br><span class="line">                # return $a[&#x27;1&#x27;] &lt;=&gt; $b[&#x27;1&#x27;];</span><br><span class="line">                if ($a == $b) &#123;</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125;</span><br><span class="line">                return ($a &lt; $b) ? -1 : 1;</span><br><span class="line">            &#125;);</span><br><span class="line">        ?&gt;</span><br><span class="line">        &lt;div class=&quot;product data items&quot; data-mage-init=&#x27;&#123;&quot;tabs&quot;:&#123;&quot;openedState&quot;:&quot;active&quot;&amp;#125;&amp;#125;&#x27;&gt;</span><br><span class="line">            &lt;?php</span><br><span class="line">            # Delete the original forEach statement</span><br><span class="line">            #foreach ($detailedInfoGroup as $name)</span><br><span class="line">            foreach ($newPriority as $name):?&gt;</span><br><span class="line">                &lt;?php</span><br><span class="line">                    # rename $name[0] to $name because it&#x27;s a two-dimensional array</span><br><span class="line">                    # No further changes to this file, it works as explained</span><br><span class="line">                    $name = $name[0];</span><br><span class="line">                    $html = $layout-&gt;renderElement($name);</span><br><span class="line">                    if (!trim($html)) &#123;</span><br><span class="line">                        continue;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $alias = $layout-&gt;getElementAlias($name);</span><br><span class="line">                    $label = $block-&gt;getChildData($alias, &#x27;title&#x27;);</span><br><span class="line">                ?&gt;</span><br><span class="line">                &lt;div class=&quot;data item title&quot;</span><br><span class="line">                     aria-labeledby=&quot;tab-label-&lt;?php /* @escapeNotVerified */ echo $alias;?&gt;-title&quot;</span><br><span class="line">                     data-role=&quot;collapsible&quot; id=&quot;tab-label-&lt;?php /* @escapeNotVerified */ echo $alias;?&gt;&quot;&gt;</span><br><span class="line">                    &lt;a class=&quot;data switch&quot;</span><br><span class="line">                       tabindex=&quot;-1&quot;</span><br><span class="line">                       data-toggle=&quot;switch&quot;</span><br><span class="line">                       href=&quot;#&lt;?php /* @escapeNotVerified */ echo $alias; ?&gt;&quot;</span><br><span class="line">                       id=&quot;tab-label-&lt;?php /* @escapeNotVerified */ echo $alias;?&gt;-title&quot;&gt;</span><br><span class="line">                        &lt;?php /* @escapeNotVerified */ echo $label; ?&gt;</span><br><span class="line">                    &lt;/a&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;data item content&quot; id=&quot;&lt;?php /* @escapeNotVerified */ echo $alias; ?&gt;&quot; data-role=&quot;content&quot;&gt;</span><br><span class="line">                    &lt;?php /* @escapeNotVerified */ echo $html; ?&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;?php endforeach;?&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;?php endif; ?&gt;</span><br></pre></td></tr></table></figure>

<p>然后刷新缓存就奏效了。将来 Magento 升级，可能 detail.phtml 会有更改，所以模版层面的更改，要注意更新。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://magento.stackexchange.com/questions/104193/set-position-or-order-of-a-new-tab-on-the-product-detail-page-in-magento2">Set position or order of a new tab on the product detail page in Magento2-juhanix 的回答</a></p>
]]></content>
      <categories>
        <category>Magento 2 主题</category>
      </categories>
      <tags>
        <tag>Magento 2</tag>
        <tag>product detail page</tag>
        <tag>tab order</tag>
        <tag>tab rename</tag>
      </tags>
  </entry>
  <entry>
    <title>图像和视频（Images and Video）</title>
    <url>/settings-basic-image-management/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/settings-basic-image-management.html">原文网址</a></em> 使用一致比例的高质量图片会使您的产品目录看起来很有吸引力，更专业。如果您的产品目录很多，每个产品有数张图片，那么您很容易就有数以百计，或者上千的产品图片要管理。在开始前，为您的图片文件规定好命名规则，并组织好他们，以便在需要的时候，可以找到原图。 <img src="/wp-content/uploads/2017/04/product-images-videos-swatch.png" alt="product images"> 每个产品图片在目录（catalog）中会以不同的尺寸被加载。图片 container 的尺寸在样式表中定义，但是图片如何使用则是由分配给该图片的角色决定的。产品的主要图片，或者称为“base image”必须足够大，这样才能实现放大镜的效果。此外，更小的图片会用在产品列表中，或者是用在购物车中的缩略图上。您可以最大尺寸的图片，让 Magento 去决定每种用途所需要的尺寸。同一张图片可以用于各种角色，也可以不同的角色用不同的图片。默认情况下，上传的第一张图篇将分配到三种角色。（这三种角色 role 是 Base, Small, Thumbnail）</p>
<h3 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a><a href="#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB"></a>相关阅读</h3><p>如果要更改图片尺寸，请参考<a href="/about-view-xml/">关于 view.xml</a> 为什么要有图片角色(<a href="/pictures-in-magento-2/">Magento 2中的图片</a>)</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>商品详情（Product Details）</title>
    <url>/settings-basic-product-details/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/settings-basic-product-details.html">原文网址</a></em> “产品详细信息” 部分提供有关产品的基本信息, 并使您能够在定义产品时添加产品的属性和类别。要了解更多信息, 请参阅每个产品类型的说明。 <img src="/wp-content/uploads/2017/04/product-basic-settings-product-details.png" alt="product details"></p>
<h3 id="字段说明-默认模板"><a href="#字段说明-默认模板" class="headerlink" title="字段说明 (默认模板)"></a><a href="#%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E-(%E9%BB%98%E8%AE%A4%E6%A8%A1%E6%9D%BF)"></a>字段说明 (默认模板)</h3><p>字段</p>
<p>范围</p>
<p>描述</p>
<p>Name 名称</p>
<p>Store View</p>
<p>（必填）产品的名称，您希望他在目录中显示的名称</p>
<p>SKU</p>
<p>Global</p>
<p>每件产品或服务的唯一标识，用来管理库存的，英文全称为 Stock Keeping Unit，默认会根据产品的名称自动生成一个 SKU</p>
<p>Price</p>
<p>Website</p>
<p>产品零售价格</p>
<p>Tax Class</p>
<p>Website</p>
<p>与产品相关的税类</p>
<p>Images and Videos</p>
<p>Store View</p>
<p>显示当前可用于产品的图像和视频。</p>
<p>Quantity</p>
<p>Global</p>
<p>当前库存中的产品数量</p>
<p>Weight</p>
<p>Global</p>
<p>决定产品的重量，计算运费时会基于该值。在美国, 重量是以磅和盎司来衡量的, 而公制系统的国家则使用克和公斤。在配置中为您的区域设置计重单位。</p>
<p>Categories 类别</p>
<p>Global</p>
<p>指示分配给产品的类别。</p>
<p>Description 描述</p>
<p>Store View</p>
<p>产品页面上显示的主要产品说明。产品描述最初以纯文本形式输入。如果 “说明” 属性允许, 可使用所见即所得的编辑器设置 html 标记的文本格式。不要直接从文本编辑器粘贴文本, 因为它可能包含无法正确联机呈现的打印控制代码。如果使用文本编辑器, 首先将文本保存为. txt 文件, 这样可以去打印控制代码，然后再粘贴到产品说明字段中。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>基本设置 （Basic Settings）</title>
    <url>/settings-basic/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/settings-basic.html">原文地址</a></em> “基本设置” 部分旨在帮助您快速创建产品, 包括产品详细信息、图像和视频、搜索引擎优化和网站。 (此部分和 Product Settings 中的部分内容重合) <img src="/wp-content/uploads/2017/08/product-basic-settings.png"></p>
<h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a><a href="#%E7%9B%B8%E5%85%B3%E9%98%85%E8%AF%BB"></a>相关阅读</h2><ul>
<li><a href="/settings-basic-product-details/">商品详情（Product Details）</a></li>
<li><a href="/settings-basic-image-management/">图像和视频（Images and Video）</a><ul>
<li><a href="/product-image-upload/">上传产品图片（Uploading Product Images）</a></li>
<li><a href="/product-video/">添加产品视频 (Adding Product Video)</a></li>
<li><a href="/media-gallery/">媒体库(Media Gallery)</a></li>
<li><a href="/product-image-placeholders/">占位图 (Placeholders)</a></li>
<li><a href="/product-image-watermarks/">水印 (Watermarks)</a></li>
<li><a href="/swatches/">色板 (Swatches)</a><ul>
<li><a href="/swatch-create/">创建色板(Creating Swatches)</a></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>shell 脚本编程小记</title>
    <url>/shell-%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>shell 脚本编程，主要是为了打包命令，减少重复工作。</p>
<h2 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a><a href="#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86"></a>第一部分</h2><p>我在 <code>/home/root/shellpractice</code> 下新建一个文本 <code>who</code>，输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># This script displays the date and who&#x27;s logged on</span><br><span class="line">date</span><br><span class="line">who</span><br></pre></td></tr></table></figure>

<p>在通常的 shell 脚本中，井号（#）用作注释行。 shell 并不会处理 shell 脚本中的注释行。 “#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行。 在当前目录下，运行该脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./who</span><br><span class="line">-bash: ./who: Permission denied</span><br></pre></td></tr></table></figure>

<p>这是因为文件所有者没有执行权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u+x ./who</span><br></pre></td></tr></table></figure>

<p>好了，再次运行该脚本。这就算是一个脚本编程了。</p>
<h2 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a><a href="#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86"></a>第二部分</h2><p>Linux 系统使用 cron 程序来安排要定期执行的作业。 cron 程序会在后台运行并检查一个特殊的表（被称作 cron 时间表） ，以获知已安排执行的作业。 <a href="https://www.hellomagento2.com/config-cron/">如何设置 Magento2 的 cron job</a> 中提到 Magento 2 需要的 cron 设置。 这里将记录一个小例子，每分钟调用 <code>echotime.php</code> 这个脚本。 新建 <code>echotime.php</code> 文件输入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo date(&#x27;Y-m-d H:i:s&#x27;). &quot; from hellomagento2.com \n&quot;;</span><br></pre></td></tr></table></figure>

<p>然后给 <code>echotime.php</code> 执行的权限：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod u+x echotime.php</span><br></pre></td></tr></table></figure>

<p>如果我们此时执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php echotime.php</span><br><span class="line">2017-11-14 16:57:28 from hellomagento2.com</span><br></pre></td></tr></table></figure>

<p>然后我们看下 php 的位置： <code>whereis php</code> 向 cron 时间表中添加条目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>然后他会让你选择编辑器，然后我们添加内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* * * * * /usr/bin/php /home/thankit/www/echotime.php &gt;&gt; /home/thankit/www/echotime.log</span><br></pre></td></tr></table></figure>

<p>这样就会每分钟执行 echotime.php 并将结果输出到 echotime.log 文件中。 <code>&gt;</code> 是输出重定向符号，他会覆盖原先的内容。 <code>&gt;&gt;</code> 则不会覆盖，而是追加内容。 所以接下来查看 <code>echotime.log</code> 会发现已经起作用了。 <img src="/wp-content/uploads/2017/11/echotimelog.png"> 需要注意的是，cron 会以创建该任务的所有者的身份执行命令。所以如果我希望以 root 的身份执行某个定时任务，我必须以 root 的身份来提交该定时任务。 查看任务：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br></pre></td></tr></table></figure>

<p>删除：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -r</span><br><span class="line">no crontab for thankit</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"></a>参考资料</h2><p><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md">Shell脚本编程30分钟入门</a> 《Linux 命令与 shell 脚本编程大全》</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>cron</tag>
        <tag>shell 脚本编程</tag>
      </tags>
  </entry>
  <entry>
    <title>固定运费(Flat Rate Shipping)</title>
    <url>/shipping-flat-rate/</url>
    <content><![CDATA[<p><em><a href="_blank">原文地址</a></em></p>
<p>固定运费是预先定义的固定的收费方式，可以按件或者按次计算。固定运费是一个简单计费方案，特别适合一些采用固定运费的物流公司。</p>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-flat-rate.png"></p>
<h2 id="设置固定运费"><a href="#设置固定运费" class="headerlink" title="设置固定运费"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%9B%BA%E5%AE%9A%E8%BF%90%E8%B4%B9"></a>设置固定运费</h2><ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>送货方式</strong>(Shipping Methods)</p>
</li>
<li><p>展开 <strong>固定运费</strong>(Flat Rate) 做如下操作:<br>a. 设置 启用(Enabled)为“Yes”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Flat Rate appears as an option in the Estimate Shipping and Tax section of the shopping cart, and also in the Shipping section during checkout.</span><br></pre></td></tr></table></figure>

<p>b. 输入<strong>标题</strong>(Title)。<br>c. 输入<strong>方法名</strong>(Method Name)，他会出现在购物车计算费率边上。默认的名字叫“Fixed”。如果您收取手续费，您可以把方法名改为“Plus Handling” 或者其他合适的名字。<br>d. <strong>类型</strong>(Type)中有如下选项，描述了固定运费的使用方式：</p>
<p>name</p>
<p>description</p>
<p>None</p>
<p>固定运费会被列出来，但费率为0，相当于包邮</p>
<p>Per Order 每笔订单</p>
<p>按订单计算</p>
<p>Per Item</p>
<p>按件计算，不管是不是同一种商品，每一件都计算</p>
<p>e. 在<strong>价格</strong>(Price)中输入要收取的价格<br>f. 如果收取额外手续费的话，在<strong>计算手续费</strong>(Calculate Handling Fee)中选择：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ Fixed 固定</span><br><span class="line">+ Percent 按百分比</span><br></pre></td></tr></table></figure>

<p>然后在<strong>手续费</strong>(Handling Fee)中输入相应的值。比如，如果费用按百分比算，输入0.06表示百分之六。如果按固定的算法，输入数值。<br>g. 在<strong>出错提示信息</strong>(Displayed Error Message)中输入固定运费方式出错时的提示信息。<br>h. 设置<strong>哪些国家可用</strong>(Ship to Applicable Countries)</p>
<p>name</p>
<p>description</p>
<p>所有允许的国家All Allowed Countries</p>
<p>Allow Country设置中允许的所有国家都允许</p>
<p>指定国家Specific Countries</p>
<p>选择本项后，下面的(Ship to Specific Countries)列表可以用了，选择哪些国家的客户可以用固定运费</p>
<p>i. 在<strong>排序</strong>(Sort Order)中输入数字，来决定包邮选项在送货方式列表中顺序（0表示第一个，1表示第二个，依次类推）</p>
</li>
<li><p>完成后，点击 Save Config</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>包邮</title>
    <url>/shipping-free/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-free.html">原文地址</a></p>
<p>免费送货是最有效的促销手段之一。可以在购买总额达到一定值后包邮，或者设置购物车价格规则，满足规则即可包邮。如果同一笔订单既满足了包邮的设置规则，又满足了购物车规则，那么设置规则优先。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：物流公司（UPS、 FedEx、DHL、USPS）的设置中也包含关于包邮的设置</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-free-shipping_thumb_0_0.png"></p>
<h2 id="第一步：设置包邮"><a href="#第一步：设置包邮" class="headerlink" title="第一步：设置包邮"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E8%AE%BE%E7%BD%AE%E5%8C%85%E9%82%AE"></a>第一步：设置包邮</h2><ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>送货方式</strong>(Shipping Methods)</p>
</li>
<li><p>展开 <strong>包邮</strong>(Free Shipping) 做如下操作:<br>a. 选择<strong>启用</strong>(Enabled)为是<br>b. <strong>标题</strong>(Title)字段输入结算时显示的标题<br>c. 输入一个 <strong>方式名称</strong>(Method Name)来描述该送货方式<br>d. 输入<strong>最小订单金额</strong>(Minimum Order Amount)，达到该值即可包邮。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">To use Free Shipping with Table Rates, make the Minimum Order Amount so high that it is never met. This prevents Free Shipping from going into effect, unless it is triggered by a price rule.</span><br></pre></td></tr></table></figure>

<p>e. 在<strong>出错提示信息</strong>(Displayed Error Message)中输入包邮方式出错时的提示信息。<br>f. 设置<strong>哪些国家可用</strong>(Ship to Applicable Countries)</p>
<p>name</p>
<p>description</p>
<p>所有允许的国家All Allowed Countries</p>
<p>Allow Country设置中允许的所有国家都允许</p>
<p>指定国家Specific Countries</p>
<p>选择本项后，下面的(Ship to Specific Countries)列表可以用了</p>
<p>g. <strong>不可用时是否显示</strong>(Show Method if Not Applicable)可选择如下选项：</p>
<p>name</p>
<p>description</p>
<p>Yes</p>
<p>就算不可以包邮也要显示这个送货方式</p>
<p>No</p>
<p>只有可以包邮时才有这个选项</p>
<p>h. 在<strong>排序</strong>(Sort Order)中输入数字，来决定包邮选项在送货方式列表中顺序（0表示第一个，1表示第二个，依次类推）</p>
</li>
<li><p>完成后，点击 Save Config</p>
</li>
</ol>
<h2 id="第二步：物流公司的设置中启用免邮"><a href="#第二步：物流公司的设置中启用免邮" class="headerlink" title="第二步：物流公司的设置中启用免邮"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E7%89%A9%E6%B5%81%E5%85%AC%E5%8F%B8%E7%9A%84%E8%AE%BE%E7%BD%AE%E4%B8%AD%E5%90%AF%E7%94%A8%E5%85%8D%E9%82%AE"></a>第二步：物流公司的设置中启用免邮</h2><p>如果你打算在某些物流中使用包邮的话，请确保配置好物流公司设置中关于包邮的部分。举例来说，您的UPS其他配置都完成了以后，您可以参考以下步骤来配置包邮。</p>
<ol>
<li>在<strong>送货方式</strong>(Shipping Methods)配置中展开<strong>UPS</strong>部分</li>
<li>设置<strong>Free Method</strong> 为“Ground”</li>
<li>要设置包邮的门槛，请设置<strong>包邮门槛</strong>(Free Shipping Amount Threshold)为“Enabled”</li>
<li>在<strong>包邮门槛</strong>(Free Shipping Amount Threshold)中输入至少要达到的金额。</li>
<li>完成后，点击Save Config</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Shipping Label Workflow</title>
    <url>/shipping-label-workflow/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-label-workflow.html">原文地址</a></em></p>
<p>Shipping labels 可以在发货的时候或者发货之后进行创建。Shipping Labels 以pdf 的形式保存，可以下载到您的电脑。</p>
<ol>
<li><strong>管理员提交 Shipping Label 请求</strong>。店铺管理员填写必要信息后提交请求。</li>
<li><strong>请求被发送给物流公司</strong>。Magento 联系物流公司，在物流公司的系统中创建一个订单。每个包裹都是一个单独的订单。</li>
<li><strong>物流公司返回Label和物流单号</strong><ul>
<li>一批货但多个包裹返回多个Shipping Labels</li>
<li>如果您对同一个shipping label 多次生成，物流单号并不会变化。</li>
<li>RMA 号码的退回物品，会使用新的单号代替原先的。</li>
</ul>
</li>
<li><strong>管理员下载并打印</strong>。shipping label 生成后，magento 系统会创建新的shipment，并且可以打印 shipping label 了。如果shipping label 由于连接或其他原因创建失败了，shipment 不会被创建。<br>根据您浏览器的设置，pdf 文件可以被浏览和打印。每个 Label 在 pdf 中单独的一页进行呈现。</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>基本的送货方式(Basic Shipping Methods)</title>
    <url>/shipping-methods/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-methods.html">原文地址</a></em></p>
<p>这里翻译成基本的运费算法可能更贴切。</p>
<p>Magento 2.1 社区版支持广泛的运费算法和物流公司。这一部分我们将演示如何配置一下运费算法。</p>
<p><a href="/shipping-free/">包邮(Free Shipping)</a><br><a href="/shipping-flat-rate/">固定运费(Flat Rate Shipping)</a><br><a href="/shipping-table-rate/">表费率(Table Rates)</a><br><a href="/weight-dimensional/">体积重量(Dimensional Weight)</a></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>多个地址(Multiple Addresses)</title>
    <url>/shipping-multiaddress/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-multiaddress.html">原文地址</a></em></p>
<p>多个发货地址选项允许客户在结账时将一个订单发给多个地址，以及一个订单最多可以被发给多少个地址。</p>
<h2 id="配置发货到多个地址"><a href="#配置发货到多个地址" class="headerlink" title="配置发货到多个地址"></a><a href="#%E9%85%8D%E7%BD%AE%E5%8F%91%E8%B4%A7%E5%88%B0%E5%A4%9A%E4%B8%AA%E5%9C%B0%E5%9D%80"></a>配置发货到多个地址</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>多送货地址设置</strong>(Multishipping Settings)</li>
<li>展开 <strong>选项</strong>(Options) 做如下操作:<br>a. 设置 <strong>允许发货到多个地址</strong>(Allow Shipping to Multiple Addresses )为 “Yes”<br>b.输入<strong>允许发货到多个地址的最大数量</strong>(Maximum Qty Allowed for Shipping to Multiple Addresses)</li>
<li>完成后，点击 Save Config</li>
</ol>
<p><img src="/wp-content/uploads/2016/10/config-sales-multishipping-settings-options.png" alt="Multiaddress Shipping Options"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>发货条款(Shipping Policy)</title>
    <url>/shipping-policy-parameters/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-policy-parameters.html">原文网址</a></em></p>
<p>要在结账时显示您的发货条款，请完成发货条款参数的配置。</p>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-settings-shipping-policy-parameters.png" alt="Shipping Policy Parameters"></p>
<h2 id="配置您的发货条款"><a href="#配置您的发货条款" class="headerlink" title="配置您的发货条款"></a><a href="#%E9%85%8D%E7%BD%AE%E6%82%A8%E7%9A%84%E5%8F%91%E8%B4%A7%E6%9D%A1%E6%AC%BE"></a>配置您的发货条款</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</li>
<li>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>发货设置</strong>(Shipping Methods)</li>
<li>展开 <strong>发货条款参数</strong>(Shipping Policy Parameters) 做如下操作:<br>a. 设置 自定义发货条款(Custom Shipping Policy)为“Yes”<br>b. 输入或粘贴您的发货条款(Shipping Policy)</li>
<li>完成后点击 Save Config</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>发货设置(Shipping Settings)</title>
    <url>/shipping-settings/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-settings.html">原文地址</a></em></p>
<p>发货设置包括建立发货的起点，发货条款，以及处理多个发货地址。</p>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-settings.png" alt="Shipping Settings"></p>
<p><a href="/point-of-origin/">起点(Point of Origin)</a><br><a href="/shipping-multiaddress/">多个地址(Multiple Addresses)</a><br><a href="/shipping-policy-parameters/">发货条款(Shipping Policy)</a></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Should you rebase or merge to update feature branches in git?</title>
    <url>/should-you-rebase-or-merge-to-update-feature-branches-in-git/</url>
    <content><![CDATA[<p><em>Try rebase. If that dissolves into conflict-resolution-hell then give up, merge master into your branch and move on.” ~ Tim Abell</em> <a href="https://timwise.co.uk/2019/10/14/merge-vs-rebase/">Should you rebase or merge to update feature branches in git?</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>表费率(Table Rates)</title>
    <url>/shipping-table-rate/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/shipping-table-rate.html">原文地址</a></em></p>
<p>费率表方式指的是根据一些条件，参考表的记录来计算运输费用，这些条件包括：</p>
<ul>
<li>Weight v. Destination</li>
<li>Price v. Destination</li>
<li># of Items v. Destination</li>
</ul>
<p>举例来说，假设你的仓库在洛杉矶，那么发货到圣地亚哥就比到佛蒙特州要便宜。您可以使用费率表的方式给离您近的客户更多好处。</p>
<p>用来计算费率的数据是以电子表格的形式准备好后，导入网站的，计算出的结果显示在购物车的运费估算部分。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">同一时刻费率表中只有某一项是被采用的</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2016/10/storefront-cart-table-rate.png" alt="Table Rate in Shopping Cart"></p>
<h2 id="第一步：完成默认设置"><a href="#第一步：完成默认设置" class="headerlink" title="第一步：完成默认设置"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E9%BB%98%E8%AE%A4%E8%AE%BE%E7%BD%AE"></a>第一步：完成默认设置</h2><p>第一步是完成费率表的默认设置，这一步不需要改变配置的作用域。</p>
<ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>送货方式</strong>(Shipping Methods)</p>
</li>
<li><p>展开 <strong>表费率</strong>(Table Rates) 做如下操作:<br>a. 设置 启用(Enabled)为“Yes”<br>有必要的话，取消<strong>Use System value</strong>(使用系统值)勾选，这样就可以进行修改了。<br>b. 输入<strong>标题</strong>(Title)，标题会显示在结算页面。（默认的标题是 Best Way）<br>c. 输入<strong>方法名</strong>(Method Name)，它会作为一个标签显示在购物车的计算费率旁边。<br>d. 设置<strong>条件</strong>(Condition)，有以下计算条件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* Weight v. Destination</span><br><span class="line">* Price v. Destination</span><br><span class="line">* # of Items v. Destination</span><br></pre></td></tr></table></figure>

<p>e. 包含虚拟商品的订单，如果您想让虚拟商品也参与计算，那么设置<strong>价格计算包括虚拟商品</strong>(Include Virtual Products in Price Calculation)为Yes.<br><em>因为虚拟商品比如服务，他没有重量，您不能根据重量算出结果来。不过，虚拟商品可以通过Price v. Destination 或者 # of Items vs Destination 来计算费用。</em><br>f. 如果收取手续费，设置<strong>计算手续费</strong>(Calculate Handling Fee )为固定的(Fixed)或者按百分比(Percent)<br>然后，在<strong>手续费</strong>(Handling Fee)中根据计算手续费的方法，输入相应的值。<br><em>如果手续费是根据百分比算的，请不要输入百分号</em><br>h. 设置<strong>哪些国家可用</strong>(Ship to Applicable Countries)</p>
<p>name</p>
<p>description</p>
<p>所有允许的国家All Allowed Countries</p>
<p>Allow Country设置中允许的所有国家都允许</p>
<p>指定国家Specific Countries</p>
<p>选择本项后，下面的(Ship to Specific Countries)列表可以用了，选择哪些国家的客户可以用固定运费</p>
<p>i. 在<strong>排序</strong>(Sort Order)中输入数字，来决定包邮选项在送货方式列表中顺序（0表示第一个，1表示第二个，依次类推。</p>
</li>
<li><p>完成后，点击 Save Config</p>
</li>
</ol>
<h2 id="第二步：准备费率表的数据"><a href="#第二步：准备费率表的数据" class="headerlink" title="第二步：准备费率表的数据"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%87%86%E5%A4%87%E8%B4%B9%E7%8E%87%E8%A1%A8%E7%9A%84%E6%95%B0%E6%8D%AE"></a>第二步：准备费率表的数据</h2><ol>
<li>在左上角，设置<strong>店铺视图</strong>(Store View) 为 “Main Website” 或者其他你要配置的其他站。弹出确定窗口后，点击OK。<br>导入导出选项现在出来了。现在每个选项右边都有使用默认值(Use Default)<br><em>要进行更改，您得先取消使用默认的勾选</em></li>
<li>修改<strong>条件</strong>(Condition)，取消使用默认值的勾选，然后选择其他选项。</li>
<li>点击<strong>导出 CSV</strong>(Export CSV)。然后将 tablerates.csv 文件保存下来。<br><img src="/wp-content/uploads/2016/10/shipping-table-rates-export.png" alt="Export CSV"></li>
<li>用编辑器打开。然后填入合适的值。<ul>
<li>使用星号(<code>*</code>)作为通配符，表示所有可能的值</li>
<li>Country 列必须是有效的代号</li>
<li>按照 Region&#x2F;State 进行排序，这样指定的地区在表格上方，通配符在下方。这样会先使用确定的规则，然后才考虑通配符代表的规则。<br><img src="/wp-content/uploads/2016/10/table-rates-weight-destination-csv.png" alt="Weight vs. Destination (Australia)"></li>
</ul>
</li>
<li>完成后，保存 tablerates.csv 文件</li>
</ol>
<h2 id="第三步：导入费率表数据"><a href="#第三步：导入费率表数据" class="headerlink" title="第三步：导入费率表数据"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AF%BC%E5%85%A5%E8%B4%B9%E7%8E%87%E8%A1%A8%E6%95%B0%E6%8D%AE"></a>第三步：导入费率表数据</h2><ol>
<li>回到配置页的费率表部分</li>
<li>在左上角，选择您的表费率要作用的店铺视图(Store View)</li>
<li>在<strong>Import</strong>(导入)字段旁，点击<strong>选择文件</strong>(Choose File)。选择您刚刚完成的tablerates.csv 文件，进行导入。<br><img src="/wp-content/uploads/2016/10/shipping-table-rates-import.png" alt="Import Table Rates"></li>
<li>完成后，点击 Save Config</li>
</ol>
<h2 id="第四步：校对费率"><a href="#第四步：校对费率" class="headerlink" title="第四步：校对费率"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E6%A0%A1%E5%AF%B9%E8%B4%B9%E7%8E%87"></a>第四步：校对费率</h2><p>为了却表表费率正确，请测试付款流程中，不同的地址的运费和手续费计算是否正确。</p>
<h2 id="例子-1：Price-v-Destination"><a href="#例子-1：Price-v-Destination" class="headerlink" title="例子 1：Price v. Destination"></a><a href="#%E4%BE%8B%E5%AD%90-1%EF%BC%9Aprice-v.-destination"></a>例子 1：Price v. Destination</h2><p>这个例子是关于如何使用 Price v. Destination 条件的。我们为美国大陆，Alaska, 和 Hawaii 基于订单总金额三个不同档位的的费率规则。星号（通配符）表示任何值。</p>
<p><img src="/wp-content/uploads/2016/10/price-v-destination.png"></p>
<h2 id="例子-2：Weight-v-Destination"><a href="#例子-2：Weight-v-Destination" class="headerlink" title="例子 2：Weight v. Destination"></a><a href="#%E4%BE%8B%E5%AD%90-2%EF%BC%9Aweight-v.-destination"></a>例子 2：Weight v. Destination</h2><p>根据订单的重量和目的地来计算费用的费率表</p>
<p><img src="/wp-content/uploads/2016/10/weight-v-destination.png"></p>
<h2 id="例子-3：仅对美国大陆某些州包邮"><a href="#例子-3：仅对美国大陆某些州包邮" class="headerlink" title="例子 3：仅对美国大陆某些州包邮"></a><a href="#%E4%BE%8B%E5%AD%90-3%EF%BC%9A%E4%BB%85%E5%AF%B9%E7%BE%8E%E5%9B%BD%E5%A4%A7%E9%99%86%E6%9F%90%E4%BA%9B%E5%B7%9E%E5%8C%85%E9%82%AE"></a>例子 3：仅对美国大陆某些州包邮</h2><ol>
<li><p>创建一个 tablerates.csv 文件，文件包含所有你想包邮的州的代码。</p>
</li>
<li><p>按照以下设置完成表费率的配置  </p>
<p>Setting</p>
<p>Value</p>
<p>Condition</p>
<p>Price v. Destination</p>
<p>Method Name</p>
<p>Free Shipping</p>
<p>Ship to Applicable Countries</p>
<p>Specific Countries</p>
<p>Ship to Specific Countries</p>
<p>Select only United States</p>
<p>Show method if not applicable</p>
<p>No</p>
</li>
<li><p>选择您的表费率要作用的店铺视图(Store View)。在<strong>Import</strong>(导入)字段旁，点击<strong>选择文件</strong>(Choose File)。选择您刚刚完成的tablerates.csv 文件，进行导入。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>source_model / backend_model / frontend_model</title>
    <url>/source-model-backend-model-frontend-model/</url>
    <content><![CDATA[<h2 id="Practice-Tests"><a href="#Practice-Tests" class="headerlink" title="Practice Tests"></a><a href="#practice-tests"></a>Practice Tests</h2><p>You are configuring a new entry in etc&#x2F;adminhtml&#x2F;system.xml that is a select &#x2F; dropdown type. What must the class for the source model extend or implement? A. \Magento\Framework\Data\OptionSourceInterface B. \Magento\Backend\Model\AbstractSource C. \Magento\Framework\Source\OptionInterface D. \Magento\Eav\Model\Entity\Attribute\Source\AbstractSource Answer A for example: vendor\magento\module-authorizenet-acceptjs\etc\adminhtml\system.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;field id=&quot;payment_action&quot; translate=&quot;label&quot; type=&quot;select&quot; sortOrder=&quot;20&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;1&quot; showInStore=&quot;0&quot; canRestore=&quot;1&quot;&gt;</span><br><span class="line">    &lt;label&gt;Payment Action&lt;/label&gt;</span><br><span class="line">    &lt;source_model&gt;Magento\AuthorizenetAcceptjs\Model\Adminhtml\Source\PaymentAction&lt;/source_model&gt;</span><br><span class="line">    &lt;config_path&gt;payment/authorizenet_acceptjs/payment_action&lt;/config_path&gt;</span><br><span class="line">&lt;/field&gt;</span><br></pre></td></tr></table></figure>

<p>class PaymentAction implements \Magento\Framework\Data\OptionSourceInterface</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">interface OptionSourceInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Return array of options as value-label pairs</span><br><span class="line">     *</span><br><span class="line">     * @return array Format: array(array(&#x27;value&#x27; =&gt; &#x27;&lt;value&gt;&#x27;, &#x27;label&#x27; =&gt; &#x27;&lt;label&gt;&#x27;), ...)</span><br><span class="line">     */</span><br><span class="line">    public function toOptionArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="References"><a href="#References" class="headerlink" title="References"></a><a href="#references"></a>References</h2><p>Shortly speaking, the Source Model is a model of data that we can use for configuration. <a href="https://magently.com/blog/magento-2-backend-configuration-source-model/">Magento 2 Backend Configuration: Source Model (part 1&#x2F;3)</a> Managing actions before and after saving <a href="https://magently.com/blog/magento-2-backend-configuration-backend-model-part-23/">Magento 2 Backend Configuration: Backend Model (part 2&#x2F;3)</a> The Frontend Model responsible for our fields view. We don’t mean changing the height&#x2F;width of the input, but a non-standard fields for our non-standard configuration. <a href="https://magently.com/blog/magento-2-backend-configuration-frontend-model-part-33/">Magento 2 Backend Configuration: Frontend Model (part 3&#x2F;3)</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>SOAP 缓存问题</title>
    <url>/soap-%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在修改了 wsdl.xml 文件后，需要刷新 magento 缓存， <code>http://yourdomain/index.php/api/v2_soap/?wsdl</code> 应该就会有变化。 如果有变化，但是实际没有效果，可以考虑删除 soap 的缓存文件。（尤其是在 wamp 、 xampp 等集成环境中） php.ini 中关于 SOAP 缓存的设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; Enables or disables WSDL caching feature.</span><br><span class="line">; http://php.net/soap.wsdl-cache-enabled</span><br><span class="line">soap.wsdl_cache_enabled=1</span><br><span class="line"></span><br><span class="line">; Sets the directory name where SOAP extension will put cache files.</span><br><span class="line">; http://php.net/soap.wsdl-cache-dir</span><br><span class="line">soap.wsdl_cache_dir=&quot;D:/wamp64/tmp&quot;</span><br></pre></td></tr></table></figure>

<p>Magento 1 中后台相关设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System -&gt; Configuration -&gt; Magento Core API -&gt; General Settings</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 1</category>
      </categories>
      <tags>
        <tag>Magento1 ，soap 缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Standard Page Layouts</title>
    <url>/standard-page-layouts/</url>
    <content><![CDATA[<p><a href="http://docs.magento.com/m2/ce/user_guide/design/page-layout-standard.html">原文网址</a></p>
<h2 id="1-Column"><a href="#1-Column" class="headerlink" title="1 Column"></a><a href="#1-column"></a>1 Column</h2><p><img src="/wp-content/uploads/2016/11/layout-1-col-th_212x241.png"></p>
<p>一列布局可以用来创建一个吸睛的首页或是 landing page，或者是其他图文混排的页面。</p>
<h2 id="2-Columns-with-Left-Bar"><a href="#2-Columns-with-Left-Bar" class="headerlink" title="2 Columns with Left Bar"></a><a href="#2-columns-with-left-bar"></a>2 Columns with Left Bar</h2><p><img src="/wp-content/uploads/2016/11/layout-2-col-lft-bar-th_212x241.png"></p>
<p>带左侧边连的两列。通常左侧边栏用来放置分层的导航目录或者搜索结果页面的导航。如果需要另外的导航或者支持内容，首页用这种布局也很不错。</p>
<h2 id="2-Columns-with-Right-Bar"><a href="#2-Columns-with-Right-Bar" class="headerlink" title="2 Columns with Right Bar"></a><a href="#2-columns-with-right-bar"></a>2 Columns with Right Bar</h2><p><img src="/wp-content/uploads/2016/11/layout-2-col-rt-bar-th_212x241.png"></p>
<p>带右侧边栏的两列，这种左侧空间大，适合放一些吸引眼球的图片或者是横幅广告，而右侧放一些辅助信息。这种布局经常用在产品详细页面。</p>
<h2 id="3-Columns"><a href="#3-Columns" class="headerlink" title="3 Columns"></a><a href="#3-columns"></a>3 Columns</h2><p><img src="/wp-content/uploads/2016/11/layout-3-col-th_212x241.png"></p>
<p>三栏布局的中间一栏比较宽，适合放主要内容，两边的侧边栏用来放次要内容。</p>
<h2 id="Empty"><a href="#Empty" class="headerlink" title="Empty"></a><a href="#empty"></a>Empty</h2><p><img src="/wp-content/uploads/2016/11/layout-blank-th_212x241.png"></p>
<p>Empth 布局可以被用来定义自定义的布局。了解更多，请参考 <a href="https://magento.com/help/documentation?_ga=1.157777203.805843861.1479171564">Magento Designer’s Guide.</a></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>行政区域选项</title>
    <url>/state-options/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/state-options.html">原文地址</a></em></p>
<p>在很多国家，省、市或者区、州是邮寄地址的必要组成部分。该信息用来计算运输、开票方面的税率等。在没有这样要求的国家，行政区域字段可以被省略或者作为可选项。</p>
<p>由于各国对地址的格式要求大不相同，您还可以编辑用于发票，装箱单和运输标签上的格式化地址模板。</p>
<p><img src="/wp-content/uploads/2016/08/config-general-general-state-options_thumb_0_0.png"></p>
<h2 id="设置行政区域选项"><a href="#设置行政区域选项" class="headerlink" title="设置行政区域选项"></a><a href="#%E8%AE%BE%E7%BD%AE%E8%A1%8C%E6%94%BF%E5%8C%BA%E5%9F%9F%E9%80%89%E9%A1%B9"></a>设置行政区域选项</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores)&gt; <strong>设置</strong>(Settings)&gt; <strong>配置</strong>(Configuration)</li>
<li>左侧面板 常规(General)&gt; 常规(General)</li>
<li>展开行政区域设置(State Options)，做以下操作：<br>a. 在<strong>哪些国家需要行政区域设置</strong>(State is required for)列表中选择需要的国家<br>b. 设置<strong>不强制要求的国家是否需要该字段</strong>(Allow to Choose State if It is Optional for Country)<br>Yes 表示不强制要求必须填行政区域的，将该字段作为可选字段<br>No 表示不强制要求必须填行政区域的国家，直接省略该字段</li>
<li>完成后，点击保存设置</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>店铺详情</title>
    <url>/store-details/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/store-details.html">原文地址</a></em><br>店铺的基本信息，包括商店名称和地址，联系信息，电子邮箱。这些基本信息会出现在和客户沟通的电子邮件、发票及其他联系方式中。</p>
<p><img src="/wp-content/uploads/2016/08/config-general-store-details_thumb_0_0.png" alt="General Configuration"></p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/store-information/">店铺信息</a></li>
<li><a href="/locale-options/">区域设置选项</a></li>
<li><a href="/state-options/">行政区域选项</a></li>
<li><a href="/country-options/">国家选项</a></li>
<li><a href="/merchant-location/">商户位置</a></li>
<li><a href="/currency-overview/">货币</a></li>
<li><a href="/store-email-addresses/">店铺邮箱</a></li>
<li><a href="/contact-us/">联系我们</a></li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>店铺邮箱</title>
    <url>/store-email-addresses/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/store-email-addresses.html">原文地址</a></em></p>
<p>每个店铺(Store)或店铺视图(View)最多可以有5个不同的邮箱来表示不同的功能或部门。除了下面三个预定义的邮箱标识，剩下两个您可以自己定义。</p>
<ul>
<li>一般联系人(General Contact)</li>
<li>销售代表(Sales Representative)</li>
<li>客户支持(Customer Support)</li>
</ul>
<p>每个标识和他对应得邮箱可以和特定的自动邮件消息联系起来，并显示为从您的店铺发送的电子邮件的发送者。</p>
<h2 id="第一步：设置您域名的邮箱地址"><a href="#第一步：设置您域名的邮箱地址" class="headerlink" title="第一步：设置您域名的邮箱地址"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E8%AE%BE%E7%BD%AE%E6%82%A8%E5%9F%9F%E5%90%8D%E7%9A%84%E9%82%AE%E7%AE%B1%E5%9C%B0%E5%9D%80"></a>第一步：设置您域名的邮箱地址</h2><p>在配置您的邮箱地址之前，每个邮箱地址都必须是您域名的有效地址。请您按照服务器管理员或电子邮件托管服务提供商提供的说明，创建需要的电子邮箱地址。</p>
<h2 id="第二步：为店铺配置邮箱"><a href="#第二步：为店铺配置邮箱" class="headerlink" title="第二步：为店铺配置邮箱"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E4%B8%BA%E5%BA%97%E9%93%BA%E9%85%8D%E7%BD%AE%E9%82%AE%E7%AE%B1"></a>第二步：为店铺配置邮箱</h2><ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>常规</strong>(General)&gt; <strong>店铺电子邮箱地址</strong>(Store Email Addresses)</p>
</li>
<li><p>展开 <strong>一般联系人</strong>(General Contact) 做如下操作:  </p>
<p><img src="/wp-content/uploads/2016/08/config-general-store-email-addresses-general-contact_thumb_0_0.png"></p>
<p>a. 在发件人姓名(Sender Name)字段填入发件人的姓名，它将作为一般联系人的姓名显示在发送的邮件中。<br>b. 发件邮箱(Sender Email)字段填入相关邮箱地址</p>
</li>
<li><p>重复上述过程给每个店铺设置好邮箱地址</p>
</li>
<li><p>完成后，点击保存设置。</p>
</li>
</ol>
<h2 id="第三步：更新销售电子邮箱的设置"><a href="#第三步：更新销售电子邮箱的设置" class="headerlink" title="第三步：更新销售电子邮箱的设置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E6%9B%B4%E6%96%B0%E9%94%80%E5%94%AE%E7%94%B5%E5%AD%90%E9%82%AE%E7%AE%B1%E7%9A%84%E8%AE%BE%E7%BD%AE"></a>第三步：更新销售电子邮箱的设置</h2><p>如果您使用自定义的电子邮件地址，请务必更新相关的邮件配置，以正确显示发件人。</p>
<ol>
<li><p>在左侧面板<strong>销售</strong>(Sales)下选择<strong>销售电子邮件</strong>(Sales Emails)页面有以下几个单独部分：<br>订单和订单评论 (Order and Order Comments)<br>发票和发票评论 (Invoice and Invoice Comments)<br>装运和装运评论 (Shipment and Shipment Comments)<br>贷项通知单和贷项通知单评论 (Credit Memo and Credit Memo Comments)</p>
</li>
<li><p>从 Order 开始，依次展开，选择合适的邮件发送者  </p>
<p><img src="/wp-content/uploads/2016/08/config-sales-sales-emails-order_thumb_0_0.png"></p>
</li>
<li><p>完成后，点击 保存设置</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>店铺信息</title>
    <url>/store-information/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/store-information.html">原文地址</a></em></p>
<p>店铺信息部分提供了用在销售文件和其他沟通中的基本信息</p>
<p><img src="/wp-content/uploads/2016/08/config-general-general-store-information_thumb_0_0.png"></p>
<h2 id="输入店铺信息"><a href="#输入店铺信息" class="headerlink" title="输入店铺信息"></a><a href="#%E8%BE%93%E5%85%A5%E5%BA%97%E9%93%BA%E4%BF%A1%E6%81%AF"></a>输入店铺信息</h2><ol>
<li>在后台侧标蓝选择<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>（Configuration）</li>
<li>左侧面板选择 <strong>常规</strong>(General) &gt; <strong>常规</strong>(General)</li>
<li>展开<strong>店铺信息</strong>(Store Information)部分，做下列操作<br>a. 输入各种沟通途径中使用的店铺名称<br>b. 输入店铺热线(Store Phone Number)，可以组织成您喜欢的格式<br>c. 输入营业时间(Store Hours of Operation)。例如：周一至周五，9-5<br>d. 选择您开展业务的国家(Country)<br>e. 选择地区 ( Region&#x2F;State)<br>f. 输入店铺地址，如果地址很长，填入第二个地址栏(Store Address Line 2)<br>g. 如果适用，输入<strong>VAT Number</strong>。要验证号码，点击<strong>Validate VAT Number</strong>按钮。</li>
<li>完成后，点击保存设置</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>单店模式</title>
    <url>/store-mode-single/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/store-mode-single.html">原文地址</a></em></p>
<p>如果您的 Magento 仅需要一个店铺一个视图，您可以关闭多店铺选项和范围提示做出简化。这份手册的大部分截图都是禁用单店模式情况下的，所以每个设置项下面都有范围提示。如果您后来添加了视图，那么单店模式就会被忽略。</p>
<p><img src="/wp-content/uploads/2016/08/config-general-general-single-store-mode_thumb_0_0.png"></p>
<h2 id="设置单店模式"><a href="#设置单店模式" class="headerlink" title="设置单店模式"></a><a href="#%E8%AE%BE%E7%BD%AE%E5%8D%95%E5%BA%97%E6%A8%A1%E5%BC%8F"></a>设置单店模式</h2><ol>
<li>后台侧边栏，点击<strong>店铺</strong>(Stores)&gt;<strong>设置</strong>(Settings)&gt;<strong>配置</strong>(Configuration)</li>
<li>在<strong>常规</strong>(General)下，下拉到页面底部，展开<strong>单店模式</strong>(Single-Store Mode)</li>
<li>设置<strong>启用单店模式</strong>(Enable Single-Store Mode)为是</li>
<li>点击<strong>保存设置</strong></li>
<li>刷新缓存</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>店面品牌</title>
    <url>/storefront-branding/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/storefront-branding.html">原文地址</a></em></p>
<p>首先要做的事情里有一件事就是替换店面头部的 logo，上传 favicon 图标（就是浏览器里每个网站标题前面的图标）您还将了解怎么修改页脚的版权声明，还有如何使用店铺的演示声明（告诉别人，店铺没正式开张呢。）这些都是您可以马上做到的简单设计任务。如果您的店铺在建设中，就打开演示提示，如果正式开张则移除他。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-home-page-branding_thumb_0_0.png"></p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/logo-upload/">上传您的 Logo</a></li>
<li><a href="/favicon/">上传 Favicon</a></li>
<li><a href="/welcome-message/">欢迎信息</a></li>
<li><a href="/copyright-notice/">版权声明</a></li>
<li><a href="/demo-notice/">店铺演示提示</a></li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Sublime Text phpfmt</title>
    <url>/sublime-text-phpfmt/</url>
    <content><![CDATA[<p>phpfmt 格式化支持 psr-1, psr-2 推荐标准。（<a href="/about-psr/">关于 psr</a>） phpfmt 支持 sublime-text, vim, phpstorm 三款编辑器,本文只讲 sublime-text 下的安装配置。 首先必须安装有 php 7.0 及以上版本 然后在 Sublime Text 按 <code>ctrl+shift+P</code> 选择 <code>Package Control: Install Package</code> 输入 <code>phpfmt</code> 安装完成后(windows 系统，其他请参看参考网址)，进入菜单 Preferences -&gt; Package Settings -&gt; phpfmt -&gt; Settings-Default 设置内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: 4,</span><br><span class="line">    &quot;php_bin&quot;:&quot;C:\\wamp64\\bin\\php\\php7.0.4\\php.exe&quot;, //php 版本必需为7以上</span><br><span class="line">    &quot;enable_auto_align&quot;:false, //自动调整对齐</span><br><span class="line">    &quot;indent_with_space&quot;: true, //缩进改为空格</span><br><span class="line">    &quot;psr1&quot;: true, //开启psr1格式化</span><br><span class="line">    &quot;psr1_naming&quot;: true, //自动将下滑线命名改为驼峰 aa_bb (aaBb)</span><br><span class="line">    &quot;psr2&quot;: true, //开启psr2格式化</span><br><span class="line">    &quot;format_on_save&quot;:true, //保存的时候自动格式化</span><br><span class="line">    &quot;option&quot;: &quot;value&quot;</span><br><span class="line">&#125;</span><br><span class="line">//注意如果 psr1, psr2,等不生效，请重启sublime,</span><br><span class="line">//如果重启后还是不生效，则 ctrl+shift+p 输入phpfmt 调整toggle选项</span><br></pre></td></tr></table></figure>

<p>然后，比如下面这样的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">for($i = 0; $i &lt; 10; $i++)</span><br><span class="line">&#123;</span><br><span class="line">if($i%2==0)</span><br><span class="line">echo &quot;Flipflop&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>保存后应该变成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">for ($i = 0; $i &lt; 10; $i++) &#123;</span><br><span class="line">  if ($i%2 == 0) &#123;</span><br><span class="line">    echo &quot;Flipflop&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p><a href="https://packagecontrol.io/packages/phpfmt">https://packagecontrol.io/packages/phpfmt</a> <a href="http://blog.itweshare.com/blog/sublime-text-php-format">http://blog.itweshare.com/blog/sublime-text-php-format</a></p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
  </entry>
  <entry>
    <title>本站文章主题归纳</title>
    <url>/summary/</url>
    <content><![CDATA[<h2 id="了解"><a href="#了解" class="headerlink" title="了解"></a><a href="#%E4%BA%86%E8%A7%A3"></a>了解</h2><p><a href="https://www.hellomagento2.com/learn-magento-before-use-archive/">了解 Magento</a></p>
<h2 id="中文化"><a href="#中文化" class="headerlink" title="中文化"></a><a href="#%E4%B8%AD%E6%96%87%E5%8C%96"></a>中文化</h2><p><a href="https://www.hellomagento2.com/magento-2-%E4%B8%AD%E6%96%87%E5%8C%96%E4%B8%8E-language-package%EF%BC%88%E5%8E%9F%E5%88%9B%EF%BC%89/">Magento 2 中文化与 language package（原创）</a></p>
<h2 id="使用手册"><a href="#使用手册" class="headerlink" title="使用手册"></a><a href="#%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C"></a>使用手册</h2><p><a href="https://www.hellomagento2.com/magento-2-user-guide-contents/">Magento 2 用户使用手册 目录索引</a></p>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a><a href="#%E5%AD%97%E4%BD%93"></a>字体</h2><p><a href="https://www.hellomagento2.com/web-fonts/">Web 字体</a> <a href="https://www.hellomagento2.com/web-fonts-chinese/">中文 Web 安全字体</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a href="#%E5%AE%89%E8%A3%85"></a>安装</h2><p><a href="https://www.hellomagento2.com/centos-7-%E6%90%AD%E5%BB%BA-lnmp-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-magento/">Centos 7 搭建 LNMP 环境安装 Magento</a> <a href="https://www.hellomagento2.com/centos-7-lamp-magento-2/">CentOS 7 搭建 LAMP 环境安装 Magento 2</a> <a href="https://www.hellomagento2.com/aliyun-ecs-install-magento-2/">阿里云 ECS (Ubuntu LAMP)安装 Magento 2 (原创)</a> <a href="https://www.hellomagento2.com/wampserver-install-magento-2/">Wampserver 本地搭建 Magento 2</a> 如果你是 windows 系统，推荐使用虚拟机，而不是集成包（wamp, xampp）来进行进一步的探索。</p>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a><a href="#%E8%99%9A%E6%8B%9F%E6%9C%BA"></a>虚拟机</h2><p><a href="https://www.hellomagento2.com/hyper-v-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA/">hyper-v 创建虚拟机</a> <a href="https://www.hellomagento2.com/virtualbox%E4%B8%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%86%85%E7%BD%91%E4%BA%92%E9%80%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D/">VirtualBox下虚拟机和主机内网互通+虚拟机静态IP的网络配置</a></p>
<h2 id="Alan-Storm-系列"><a href="#Alan-Storm-系列" class="headerlink" title="Alan Storm 系列"></a><a href="#alan-storm-%E7%B3%BB%E5%88%97"></a>Alan Storm 系列</h2><h3 id="Magento-2-Advanced-Javascript"><a href="#Magento-2-Advanced-Javascript" class="headerlink" title="Magento 2: Advanced Javascript"></a><a href="#magento-2:-advanced-javascript"></a>Magento 2: Advanced Javascript</h3><p>1.<a href="https://www.hellomagento2.com/alan-magento-2-javascript-init-scripts/">Magento 2 Javascript Init Scripts（翻译）</a> 2.<a href="https://www.hellomagento2.com/alan-knockoutjs-primer-for-magento-developers/">KnockoutJS Primer for Magento Developers （翻译）</a> 3.<a href="https://www.hellomagento2.com/alan_magento_2_knockoutjs_integration/">Magento 2 KnockoutJS 集成</a> 4.<a href="https://www.hellomagento2.com/alan_the-curious-case-of-magento-2-mixins/">The Curious Case of Magento 2 Mixins</a> 5.Knockout Observables for Javascript Programmers 6.Modifying a jQuery Widget in Magento 2 补充： 1.<a href="https://www.hellomagento2.com/magento-2-javascript-init-ways/"><code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code></a> 2.<a href="https://www.hellomagento2.com/magento-2-and-konockoutjs/">Magento 2 and konockoutjs</a> 3.<a href="https://www.hellomagento2.com/requirejs-modularity-async/">关于 RequireJS</a> 3.<a href="https://www.hellomagento2.com/magento-2-js-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/">Magento 2 JS 开发入门</a> 4.<a href="https://www.hellomagento2.com/jquery-plugin-and-widget/">jQuery Plugin and Widget</a> 5.<a href="https://www.hellomagento2.com/requirejs-%E7%9A%84-shim-%E7%94%A8%E6%B3%95/">RequireJS 的 shim 用法</a></p>
<h3 id="Magento-2-for-PHP-MVC-Developers"><a href="#Magento-2-for-PHP-MVC-Developers" class="headerlink" title="Magento 2 for PHP MVC Developers"></a><a href="#magento-2-for-php-mvc-developers"></a>Magento 2 for PHP MVC Developers</h3><p>1.<a href="https://www.hellomagento2.com/alan-magento-2-mvvm-mvc/">Magento 2 简介 —— 不再是 MVC （翻译）</a> 2.Magento 2: Serving Frontend Files 3.Magento 2: Adding Frontend Files to your Module 4.Magento 2: Code Generation with Pestle 5.Magento 2: Adding Frontend Assets via Layout XML 6.<a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/">Magento 2 and RequireJS (翻译)</a> 7.Magento 2 and the Less CSS Preprocessor 8.Magento 2: CRUD Models for Database Access 9.Magento 2: Understanding Object Repositories 10.Magento 2: Understanding Access Control List Rules 11.Magento 2: Admin Menu Items 12.Magento 2: Advanced Routing 13.Magento 2: Admin MVC&#x2F;MVVM Endpoints 补充: 1.<a href="https://www.hellomagento2.com/magento-2-request-flow/">Magento 2 的请求处理流程</a> 2.<a href="https://www.hellomagento2.com/magento-layout/">Magento Layout</a></p>
<h3 id="The-Magento-2-Object-System"><a href="#The-Magento-2-Object-System" class="headerlink" title="The Magento 2 Object System"></a><a href="#the-magento-2-object-system"></a>The Magento 2 Object System</h3><p>1.<a href="https://www.hellomagento2.com/alan_magento_2_object_manager/">Magento 2 Object Manager</a> 2.Magento 2’s Automatic Dependency Injection 3.Magento 2 Object Manager Preferences 4.Magento 2 Object Manager Argument Replacement 5.Magento 2 Object Manager Virtual Types 6.Magento 2 Object Manager: Proxy Objects 7.Magento 2 Object Manager: Instance Objects 8.Magento 2 Object Manager Plugin System Magento 2 and Composer 1.Magento 2: Composer, Marketplace, and Satis 2.Magento 2: Composer Plugins 3.Magento 2: Composer and Components</p>
<h3 id="Magento-2-UI-Components"><a href="#Magento-2-UI-Components" class="headerlink" title="Magento 2 UI Components"></a><a href="#magento-2-ui-components"></a>Magento 2 UI Components</h3><p>1.<a href="https://www.hellomagento2.com/alan_magento_2_introducing_ui_components/">Magento 2 的 UI Components 介绍（翻译）</a> 2.<a href="https://www.hellomagento2.com/alan_magento_simplest_ui_component/">Magento 2: Simplest UI Component</a> 3.<a href="https://www.hellomagento2.com/alan_magento_2_simplest_ui_knockout_component/">Magento 2: Simplest UI Knockout Component</a> 4.<a href="https://www.hellomagento2.com/alan_magento_2_simplest_xsd_valid_ui_component/">Magento 2: Simplest XSD Valid UI Component</a> 5.<a href="https://www.hellomagento2.com/alan_magento_2_ec6_template_literals/">Magento 2: ES6 Template Literals</a> 6.Magento 2: uiClass Data Features 7.Magento 2: UI Component Data Sources 8.Magento 2: UI Component Retrospective 9.Observables, uiElement Objects, and Variable Tracking 10.Magento 2: uiElement Features and Checkout Application 11.Magento 2: Remaining uiElement Defaults 12.Magento 2: Knockout.js Template Primer 13.Magento 2 UI Component Code Generation 补充： <a href="https://www.hellomagento2.com/category/developer-documentation/articles-for-professional-programmers/">UI components 完整案例</a> <a href="https://www.hellomagento2.com/alan_magento-2s-base-javascript-class/">Magento 2’s Base Javascript Class</a></p>
<h3 id="Magento-2-uiElement-Internals"><a href="#Magento-2-uiElement-Internals" class="headerlink" title="Magento 2: uiElement Internals"></a><a href="#magento-2:-uielement-internals"></a>Magento 2: uiElement Internals</h3><p>1.Magento 2: Defaults, uiElement, Observables, and the Fundamental Problem of Userland Object Systems 2.Magento 2: Javascript Primer for uiElement Internals 3.Tracing Javascript’s Prototype Chain 4.Magento 2: uiElement Standard Library Primer 5.Magento 2: Using the uiClass Object Constructor 6.Magento 2: uiClass Internals</p>
<h2 id="插件开发系列教程"><a href="#插件开发系列教程" class="headerlink" title="插件开发系列教程"></a><a href="#%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B"></a>插件开发系列教程</h2><p>1.<a href="https://www.hellomagento2.com/%E5%88%9B%E5%BB%BA-magento-2-hello-world-simple-module/">创建 Magento 2 Hello World Simple Module</a> 2.<a href="https://www.hellomagento2.com/magento-2-%E4%B8%AD%E7%9A%84-controller/">Magento 2 中的 Controller</a> 3.<a href="https://www.hellomagento2.com/crud-models-in-magento-2/">CRUD Models in Magento 2</a> 4.<a href="https://www.hellomagento2.com/magento-2-templates-use-block-or-this/">Magento 2 Templates: Use $block or $this</a> 5.<a href="https://www.hellomagento2.com/system-xml-configuration/">System.xml Configuration</a> 6.<a href="https://www.hellomagento2.com/magento-2-admin-acl-access-control-lists/">Magento 2 Admin ACL Access Control Lists</a> 7.<a href="https://www.hellomagento2.com/magento-2-create-admin-menu/">Magento 2 Create Admin Menu</a> 8.<a href="https://www.hellomagento2.com/layout-instruction-%E4%B9%8B-argument-%E5%92%8C-action/">Layout instruction 之 argument 和 action</a> 9.<a href="https://www.hellomagento2.com/magento-2-javascript-init-ways/"><code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code></a> 10.<a href="https://www.hellomagento2.com/magento-2-and-konockoutjs/">Magento 2 and konockoutjs</a> 11.<a href="https://www.hellomagento2.com/how-to-create-admin-grid-in-magento-2/">How to Create Admin Grid in Magento 2</a> 12.<a href="https://www.hellomagento2.com/magento-2-js-%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/">Magento 2 JS 开发入门</a> 13.<a href="https://www.hellomagento2.com/magento-2-helper/">magento 2 helper</a> 14.<a href="https://www.hellomagento2.com/ui-components-%E5%AE%8C%E6%95%B4%E6%A1%88%E4%BE%8B/">UI components 完整案例</a> 15.<a href="https://www.hellomagento2.com/magento-2-%E4%BD%BF%E7%94%A8-grunt-%E7%BC%96%E8%AF%91-less/">Magento 2 使用 Grunt 编译 Less</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Hello magento2</tag>
      </tags>
  </entry>
  <entry>
    <title>创建色板(Creating Swatches)</title>
    <url>/swatch-create/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/swatch-create.html">原文地址</a></em> 在下面的例子中，Sylvia Capris 可供选购的有特定的红色、绿色和蓝色。因为色板取自产品图像，所以每个色板都是颜色的真实表示。color 属性用来管理所有产品的颜色和色板信息。</p>
<h2 id="步骤一：创建色板"><a href="#步骤一：创建色板" class="headerlink" title="步骤一：创建色板"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%B8%80%EF%BC%9A%E5%88%9B%E5%BB%BA%E8%89%B2%E6%9D%BF"></a>步骤一：创建色板</h2><p>使用以下任一方法创建色板</p>
<h3 id="方法一：添加一个颜色色板"><a href="#方法一：添加一个颜色色板" class="headerlink" title="方法一：添加一个颜色色板"></a><a href="#%E6%96%B9%E6%B3%95%E4%B8%80%EF%BC%9A%E6%B7%BB%E5%8A%A0%E4%B8%80%E4%B8%AA%E9%A2%9C%E8%89%B2%E8%89%B2%E6%9D%BF"></a>方法一：添加一个颜色色板</h3><ol>
<li>使用你喜欢的图像编辑器打开产品图片，用拾色器拾取对应的颜色，记下颜色值。 <img src="/wp-content/uploads/2017/08/swatch-hex-values.png" alt="Hexadecimal Color Values"></li>
<li>后台侧边栏，点击 <strong>Stores</strong> &gt; <strong>Attributes</strong> &gt; <strong>Product</strong></li>
<li>在列表中，找到 <strong>color</strong> ，点击进行编辑</li>
<li>验证 <strong>Catalog Input Type for Store Owner</strong> 被设置为 Visual Swatch</li>
<li>在 <strong>Manage Swatch</strong> 下点击 <strong>Add Swatch</strong> ，然后做以下事情： <img src="/wp-content/uploads/2017/08/attribute-color-manage-swatch-values.png" alt="Manage Swatch Values"> a. 点击新色板，弹出菜单，选择 <strong>Choose a color</strong> <img src="/wp-content/uploads/2017/08/attribute-color-swatch-menu.png" alt="choose a color"> b. 在拾色器中输入之前取得的颜色值 <img src="/wp-content/uploads/2017/08/attribute-swatch-color-picker-hex-value.png"> c. 点击右下角的颜色图标(<img src="/wp-content/uploads/2017/08/btn-color-wheel.png">)，保存该颜色。 d. 在 Admin 这栏输入 label 用于后台查看的标签。如果合适，给每种语言设置对应的颜色的翻译。在下面的例子中，我们在 Admin label 中包含了产品的 SKU ，因为该颜色用于特定的产品。您可以在 label 中使用空格或者下划线，但不要使用连字符。 e. <strong>Is Default</strong> 栏中，选择作为默认值的色板 f. 要改变色板的顺序，只需要简单地拖动色板到特定位置。 <img src="/wp-content/uploads/2017/08/attribute-swatch-labels.png" alt="Swatch Labels"></li>
<li>完成后，点击 <strong>Save Attribute</strong>，然后提示刷新缓存</li>
<li>最后一步就是编辑产品，更新产品的 color 属性。要批量修改产品，请参考下面的步骤。</li>
</ol>
<h3 id="方法二：上传图像色板"><a href="#方法二：上传图像色板" class="headerlink" title="方法二：上传图像色板"></a><a href="#%E6%96%B9%E6%B3%95%E4%BA%8C%EF%BC%9A%E4%B8%8A%E4%BC%A0%E5%9B%BE%E5%83%8F%E8%89%B2%E6%9D%BF"></a>方法二：上传图像色板</h3><ol>
<li>使用图像编辑器打开产品图片，选取一小块能够代表颜色、图案、纹理的区域保存。尺寸取决于 theme 。一般来说，保存成正方形有利于保持纵横比。 <img src="/wp-content/uploads/2017/08/swatch-samples.png" alt="Swatch Images"></li>
<li>后台侧边栏，点击 <strong>Stores</strong> &gt; <strong>Attributes</strong> &gt; <strong>Product</strong></li>
<li>在列表中，找到 <strong>color</strong> ，点击进行编辑</li>
<li>验证 <strong>Catalog Input Type for Store Owner</strong> 被设置为 Visual Swatch</li>
<li>在 <strong>Manage Swatch</strong> 下点击 <strong>Add Swatch</strong> ，然后做以下事情： a. 点击新色板，弹出菜单，选择 <strong>Upload a file</strong> <img src="/wp-content/uploads/2017/08/attribute-swatch-add-upload-file.png" alt="Upload a File"> b. 选择准备好的图片，上传 c. 重复上述步骤，给所有色板都设置好图片 d. 在 Admin 这栏输入 label 用于后台查看的标签。如果合适，给每种语言设置对应的颜色的翻译。在下面的例子中，我们在 Admin label 中包含了产品的 SKU ，因为该颜色用于特定的产品。您可以在 label 中使用空格或者下划线，但不要使用连字符。 <img src="/wp-content/uploads/2017/08/swatch-upload.png" alt="Enter Labels"></li>
<li>完成后，点击 <strong>Save Attribute</strong>，然后提示刷新缓存</li>
<li>最后一步就是编辑产品，更新产品的 color 属性。要批量修改产品，请参考下面的步骤。</li>
</ol>
<h2 id="步骤二：更新产品"><a href="#步骤二：更新产品" class="headerlink" title="步骤二：更新产品"></a><a href="#%E6%AD%A5%E9%AA%A4%E4%BA%8C%EF%BC%9A%E6%9B%B4%E6%96%B0%E4%BA%A7%E5%93%81"></a>步骤二：更新产品</h2><ol>
<li>后台侧边栏，点击 <strong>Products</strong> &gt; <strong>Inventory</strong> &gt; <strong>Catalog</strong></li>
<li><strong>Filter</strong> 筛选出需要修改的产品，下面的例子根据部分产品名称进行筛选。 <img src="/wp-content/uploads/2017/08/swatch-apply-filter-product.png" alt="Filters"></li>
<li>在列表中，勾选出此次要更改的产品，在本例中，所有蓝色的紧身裤被选中，然后，在 <strong>Actions</strong> 中选择 Update Attributes <img src="/wp-content/uploads/2017/08/swatch-apply-update-attributes.png" alt="Update Attributes"></li>
<li>向下拉找到 color 属性，勾选 change 复选框 <img src="/wp-content/uploads/2017/08/swatch-update-attributes-choose-color.png" alt="change"></li>
<li>选择应用的色板，点击 <strong>Save</strong> 刷新缓存 <img src="/wp-content/uploads/2017/08/storefront-swatch-blue-schmear.png" alt="Swatch in Storefront"></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>色板 (Swatches)</title>
    <url>/swatches/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/catalog/swatches.html">原文地址</a></em> 客户对颜色比较敏感，产品描述要能够准确表现可供挑选的颜色、图案或者纹理，这很重要。例如，下面的示例中，女紧身裤可供选择的颜色不是简单的红色、绿色和蓝色，而是特定的蓝色、绿色、和红色，这可能是该产品的独特之处。 可配置产品，可以通过可视色板、文本色板或下拉输入控件来表示。色板可以用在产品详情页、产品列表页以及分层导航中。在产品详情页（译者注：产品列表页也可以），色板选中后，会立刻展示对应的产品图片。选中色板后，色板会被描边，表示该色板已经被选中，同时会显示对应的值（比如 Yellow） <img src="/wp-content/uploads/2017/08/storefront-color-swatches.png" alt="Swatches on Product Page"></p>
<h2 id="文本色板"><a href="#文本色板" class="headerlink" title="文本色板"></a><a href="#%E6%96%87%E6%9C%AC%E8%89%B2%E6%9D%BF"></a>文本色板</h2><p>如果不可用图像表示，则可以使用文本，它看起来就像是带文本标签的按钮，不过表现行为和图像色板没有差别。文本色板用来表示可选择的尺寸时，不可选购的将被划掉。 <img src="/wp-content/uploads/2017/08/storefront-swatch-size-out-of-stock.png"></p>
<h2 id="分层导航-Layered-Navigation-中的色板"><a href="#分层导航-Layered-Navigation-中的色板" class="headerlink" title="分层导航(Layered Navigation)中的色板"></a><a href="#%E5%88%86%E5%B1%82%E5%AF%BC%E8%88%AA(layered-navigation)%E4%B8%AD%E7%9A%84%E8%89%B2%E6%9D%BF"></a>分层导航(Layered Navigation)中的色板</h2><p><code>color</code> 这个 Attribute 的设置中，如果 <code>Use in Layered Navigation</code> 这个属性设置为 <code>Yes</code>，那么这个色板就可以被用在分层导航中。 注：<code>Use in Layered Navigation</code> 有三个可选项：No&#x2F;Filterable (with results)&#x2F;Filterable (no results) （后两个表示 Yes） visual swatches （图片或颜色色板）如下图： <img src="/wp-content/uploads/2017/08/storefront-swatches-layered-navigation.png"> 文本类型的色板 <img src="/wp-content/uploads/2017/08/text-based-swatches.png"></p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>magento 2 modes - 每种模式的特点及如何切换（翻译）</title>
    <url>/switch-magento-2-system-modes/</url>
    <content><![CDATA[<p><a href="http://rebeccatroth.co.uk/switch-magento-2-system-modes/">原文地址</a></p>
<p>在开始 Magento 2 使用之前，需要了解一些基本的东西，其中之一就是系统可用的模式。</p>
<ul>
<li>每种模式的主要特点</li>
<li>如何切换模式</li>
<li>如何显示当前的模式</li>
</ul>
<p>Magento 2 总共有三种主要模式：developer(开发者模式), production(生产模式), default(默认模式)</p>
<p>还有一个 maintenance （维护）模式，该模式运行方式很特别，他将完全阻止对系统的访问。</p>
<h2 id="Magento-2-系统模式的主要特点"><a href="#Magento-2-系统模式的主要特点" class="headerlink" title="Magento 2 系统模式的主要特点"></a><a href="#magento-2-%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9"></a>Magento 2 系统模式的主要特点</h2><p>Developer Mode</p>
<p>Production Mode</p>
<p>Default Mode</p>
<p>Static File Caching(缓存静态文件)</p>
<p>✓</p>
<p>Exceptions Displayed(显示异常)</p>
<p>✓</p>
<p>Exceptions Logged(异常记录日志)</p>
<p>✓</p>
<p>✓</p>
<p>Negative Performance Impact(负面的性能影响)</p>
<p>✓</p>
<p>✓</p>
<h3 id="Developer-Mode"><a href="#Developer-Mode" class="headerlink" title="Developer Mode"></a><a href="#developer-mode"></a>Developer Mode</h3><p>当你正在开发代码的时候，你应该选择开发者模式，为什么呢？</p>
<ul>
<li>可以看到错误信息</li>
<li>每次请求都会生成静态文件(static view files)</li>
<li>没有使用缓存</li>
<li>立刻可以看到变化</li>
<li>会在浏览器中显示未捕获的异常</li>
<li>在错误处理程序中抛出异常</li>
<li>Exceptions are thrown whenever an event subscriber cannot be invoked（每当事件订阅服务器不能调用时，则将引发异常）</li>
<li>该模式下 var&#x2F;report 中的系统日志非常详细</li>
<li>显示自定义的 X-Magento-* HTTP 请求和响应标头</li>
</ul>
<p>该模式会降低性能，所以在生产环境中不该使用它。</p>
<h3 id="Production-Mode"><a href="#Production-Mode" class="headerlink" title="Production Mode"></a><a href="#production-mode"></a>Production Mode</h3><p>部署到生产环境中后，你就应该使用生产模式，他是面向客户的，为什么呢？</p>
<ul>
<li>性能最好</li>
<li>错误会记录到文件系统中，绝对不向客户展示错误。</li>
<li>Static view file materialisation is disabled<ul>
<li>这意味着 static view file 不会在每次需要时重新生成，他们已经通过 CLI 命令部署到 pub&#x2F;static 文件夹下</li>
<li>对 view files 的任何更改都要通过 CLI deploy 才会有效果</li>
<li>view files 已经被部署到 pub&#x2F;static ，这个文件夹下只需要 read-only 权限，这样更安全</li>
</ul>
</li>
<li>Magento docroot 只有 read-only 权限</li>
</ul>
<p>developer 模式不应该用在生产环境中。 So, when you need to make changes, you should instead generate static content in development and then use the deployer.php tool to push changes to production</p>
<h3 id="Default-Mode"><a href="#Default-Mode" class="headerlink" title="Default Mode"></a><a href="#default-mode"></a>Default Mode</h3><p>这是一个 fallback 模式，如果没有指定其他模式，就会使用默认模式。</p>
<ul>
<li>错误被记录到 var&#x2F;reports 中，但不会展示给用户</li>
<li>Static view files are materialized and then cached<ul>
<li>view files 的变化不会有效直到原来生成的 static view files 被清除了</li>
</ul>
</li>
<li>隐藏自定义的 X-Magento-* HTTP 请求和响应标头</li>
<li>这种模式没有为生产做最好的优化</li>
</ul>
<h3 id="Maintenance-Mode"><a href="#Maintenance-Mode" class="headerlink" title="Maintenance Mode"></a><a href="#maintenance-mode"></a>Maintenance Mode</h3><p>这是 Magento 2 预置的一个功能。当你在给系统升级或做其他改变的时候，你不想让用户使用网站，这时候会返回给用户 503 提示。</p>
<p>Bootstrap::assertMaintenance() 方法控制该模式，你可以通过创建一个标识文件（var&#x2F;.maintenance.flag）来启用该模式。</p>
<p>You can specify a group of people to have access to the site while this mode is employed by placing the associated IPs in var&#x2F;.maintenance.ip.</p>
<h2 id="如何切换模式"><a href="#如何切换模式" class="headerlink" title="如何切换模式"></a><a href="#%E5%A6%82%E4%BD%95%E5%88%87%E6%8D%A2%E6%A8%A1%E5%BC%8F"></a>如何切换模式</h2><h3 id="CLI-命令"><a href="#CLI-命令" class="headerlink" title="CLI 命令"></a><a href="#cli-%E5%91%BD%E4%BB%A4"></a>CLI 命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magento deploy:mode:set [mode] [-s--skip-compilation]</span><br></pre></td></tr></table></figure>

<p>[mode] 不可少，可以是<code>developer</code> 或者 <code>production</code><br><code>--skip-compilation</code> 是可选的，如果你想在 <code>production</code> 模式的时候跳过 code compilation</p>
<h3 id="Web-Server-Environment"><a href="#Web-Server-Environment" class="headerlink" title="Web Server Environment"></a><a href="#web-server-environment"></a>Web Server Environment</h3><p>（这种方式博主没有试过，暂时不翻译，以后试验过理解了再补上）<br>Apache web servers with mod_php support this method. The environment variables can be set in the main apache configuration or in the .htaccess.</p>
<p>If you are using an Apache system you can do the following:</p>
<ul>
<li>Open Apache</li>
<li>Open the .htaccess file</li>
<li>Use the MAGE_MODE system environment variable to specify the mode as follows:</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SetEnv MAGE_MODE [mode]</span><br></pre></td></tr></table></figure>

<p>[mode] is required; it can be either default, developer or production</p>
<p>After setting the mode you will need to restart the web server for it to take effect.</p>
<h4 id="php-fpm-Environment"><a href="#php-fpm-Environment" class="headerlink" title="php-fpm Environment"></a><a href="#php-fpm-environment"></a>php-fpm Environment</h4><p>You can specify the mode in the php-fpm config or in the system environment in which the php-fpm is started.</p>
<p>In the php-fpm config file, the value can be set as follows:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">env[MAGE_MODE]=[mode]</span><br></pre></td></tr></table></figure>

<p>[mode] is required; it can be either default, developer or production</p>
<h2 id="显示当前模式"><a href="#显示当前模式" class="headerlink" title="显示当前模式"></a><a href="#%E6%98%BE%E7%A4%BA%E5%BD%93%E5%89%8D%E6%A8%A1%E5%BC%8F"></a>显示当前模式</h2><p>CLI 命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">magento deploy:mode:show</span><br></pre></td></tr></table></figure>

<p>然后你会看到如下信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Current application mode: [mode].</span><br></pre></td></tr></table></figure>

<h2 id="补充：Magento-的命令怎么用"><a href="#补充：Magento-的命令怎么用" class="headerlink" title="补充：Magento 的命令怎么用"></a><a href="#%E8%A1%A5%E5%85%85%EF%BC%9Amagento-%E7%9A%84%E5%91%BD%E4%BB%A4%E6%80%8E%E4%B9%88%E7%94%A8"></a>补充：Magento 的命令怎么用</h2><p>以 windows 下的 wamp 环境为例，请打开 CMD (命令提示符)<br>然后切换到 Magento 的根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e:</span><br><span class="line">cd www\hellomagento2</span><br></pre></td></tr></table></figure>

<p>这样我现在的位置在 <code>E:\www\hellomagento2</code> 下，这是我的 Magento 2 的根目录。这个目录下有 <code>app</code>,<code>bin</code> 等等文件。下面回到 CMD 输入如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin\magento list</span><br></pre></td></tr></table></figure>

<p>就像下面这样，<br><img src="/wp-content/uploads/2016/11/magento2-modes.png" alt="magento 2 cmd"><br>好了，上面的命令告诉你 Magento 系统中所有可用的命令。同理，上面要显示当前的模式，命令是 <code>php bin\magento deploy:mode:show</code></p>
<p>如果你出现错误提示<a href="/php-path/">php 不是内部或外部命令，也不是可运行的程序或批处理文件</a>，可以去这里看看。</p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
  </entry>
  <entry>
    <title>sync fields from sales_order to sales_order_grid</title>
    <url>/sync-fields-from-sales-order-to-sales-order-grid/</url>
    <content><![CDATA[<p>For example, I have a column named ‘delivery_comment’, and it has been added to these three tables(<code>quote</code>, <code>sales_order</code>, <code>sales_order_grid</code>). etc&#x2F;db_schema.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;schema xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Setup/Declaration/Schema/etc/schema.xsd&quot;&gt;</span><br><span class="line">    &lt;table name=&quot;quote&quot; resource=&quot;checkout&quot;&gt;</span><br><span class="line">        &lt;column xsi:type=&quot;varchar&quot;  name=&quot;delivery_comment&quot; length=&quot;255&quot; nullable=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;table name=&quot;sales_order_grid&quot; resource=&quot;sales&quot;&gt;</span><br><span class="line">        &lt;column xsi:type=&quot;varchar&quot;  name=&quot;delivery_comment&quot; length=&quot;255&quot; nullable=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">    &lt;table name=&quot;sales_order&quot; resource=&quot;sales&quot;&gt;</span><br><span class="line">        &lt;column xsi:type=&quot;varchar&quot;  name=&quot;delivery_comment&quot; length=&quot;255&quot; nullable=&quot;false&quot; /&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/schema&gt;</span><br></pre></td></tr></table></figure>

<p>I want to copy <code>delivery_comment</code> value from <code>quote</code> to <code>sales_order</code>. My solution is using <code>sales_model_service_quote_submit_before</code> event. etc&#x2F;events.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Event/etc/events.xsd&quot;&gt;</span><br><span class="line">    &lt;event name=&quot;sales_model_service_quote_submit_before&quot;&gt;</span><br><span class="line">        &lt;observer name=&quot;delivery_comment_save&quot; instance=&quot;VendorName\ModuleName\Observer\SaveDeliveryDateToOrderObserver&quot;/&gt;</span><br><span class="line">    &lt;/event&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace VendorName\ModuleName\Observer;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Event\Observer as EventObserver;</span><br><span class="line">use Magento\Framework\Event\ObserverInterface;</span><br><span class="line"></span><br><span class="line">class SaveDeliveryDateToOrderObserver implements ObserverInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function execute(EventObserver $observer)</span><br><span class="line">    &#123;</span><br><span class="line">        $order = $observer-&gt;getOrder();</span><br><span class="line">        $quote = $observer-&gt;getQuote();</span><br><span class="line">        $order-&gt;setDeliveryComment($quote-&gt;getDeliveryComment());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>I tried <code>fieldset.xml</code>, but no luck. Next, I want to copy <code>delivery_comment</code> value from <code>sales_order</code> to <code>sales_order_grid</code>. etc&#x2F;di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt; </span><br><span class="line">   &lt;virtualType name=&quot;Magento\Sales\Model\ResourceModel\Order\Grid&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;columns&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;delivery_comment&quot; xsi:type=&quot;string&quot;&gt;sales_order.delivery_comment&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/virtualType&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>All done!</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>System.xml Configuration</title>
    <url>/system-xml-configuration/</url>
    <content><![CDATA[<p>如果模块需要管理员设置某些选项，就需要通过 <code>system.xml</code> 配置文件来创建和保存配置字段。那么我们怎么创建和使用 <code>system.xml</code> 呢？</p>
<h2 id="第一步：创建-system-xml"><a href="#第一步：创建-system-xml" class="headerlink" title="第一步：创建 system.xml"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-system.xml"></a>第一步：创建 system.xml</h2><p>请在 Magento 2 后台进入 <code>Stores -&gt; Settings -&gt; Configuration</code> 。 Magento 2 的系统配置页面被分成了几个部分：Tabs, Sections, Groups, Fields 。 <img src="/wp-content/uploads/2017/09/tabs-sections-groups-fields.png" alt="Magento 2 system configuration page is divided logically in few parts: Tabs, Sections, Groups, Fields"> 以之前的 <code>ThankIT_HelloWorld</code> 模块为基础，下面我们创建一个配置页面，tab 是 ThankIT （for our vendor），section 是 Hello World （for our module），group 组包含一些简单的字段。 File: app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;etc&#x2F;adminhtml&#x2F;system.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Config:etc/system_file.xsd&quot;&gt;</span><br><span class="line">    &lt;system&gt;</span><br><span class="line">        &lt;tab id=&quot;mageplaza&quot; translate=&quot;label&quot; sortOrder=&quot;10&quot;&gt;</span><br><span class="line">            &lt;label&gt;Mageplaza&lt;/label&gt;</span><br><span class="line">        &lt;/tab&gt;</span><br><span class="line">        &lt;section id=&quot;helloworld&quot; translate=&quot;label&quot; sortOrder=&quot;130&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;1&quot; showInStore=&quot;1&quot;&gt;</span><br><span class="line">            &lt;class&gt;separator-top&lt;/class&gt;</span><br><span class="line">            &lt;label&gt;Hello World&lt;/label&gt;</span><br><span class="line">            &lt;tab&gt;mageplaza&lt;/tab&gt;</span><br><span class="line">            &lt;resource&gt;Mageplaza_HelloWorld::hello_configuration&lt;/resource&gt;</span><br><span class="line">            &lt;group id=&quot;general&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;10&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;0&quot; showInStore=&quot;0&quot;&gt;</span><br><span class="line">                &lt;label&gt;General Configuration&lt;/label&gt;</span><br><span class="line">                &lt;field id=&quot;enable&quot; translate=&quot;label&quot; type=&quot;select&quot; sortOrder=&quot;1&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;0&quot; showInStore=&quot;0&quot;&gt;</span><br><span class="line">                    &lt;label&gt;Module Enable&lt;/label&gt;</span><br><span class="line">                    &lt;source_model&gt;Magento\Config\Model\Config\Source\Yesno&lt;/source_model&gt;</span><br><span class="line">                &lt;/field&gt;</span><br><span class="line">                &lt;field id=&quot;display_text&quot; translate=&quot;label&quot; type=&quot;text&quot; sortOrder=&quot;1&quot; showInDefault=&quot;1&quot; showInWebsite=&quot;0&quot; showInStore=&quot;0&quot;&gt;</span><br><span class="line">                    &lt;label&gt;Display Text&lt;/label&gt;</span><br><span class="line">                    &lt;comment&gt;This text will display on the frontend.&lt;/comment&gt;</span><br><span class="line">                &lt;/field&gt;</span><br><span class="line">            &lt;/group&gt;</span><br><span class="line">        &lt;/section&gt;</span><br><span class="line">    &lt;/system&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>以下是关于 system.xml 中一些元素的介绍。</p>
<ul>
<li>The Tab element may have many sections and some main attributes and child:<ul>
<li>Id attribute is the identify for this tab</li>
<li>sortOrder attribute will define the position of this tab.</li>
<li>Translate attribute let Magento know which title need to translate</li>
<li>Label element child is the text which will show as tab title.</li>
</ul>
</li>
<li>The Section element will have id, sortOrder, translate attributes like the Tab element. Some other attributes (showInDefault, showInWebsite, showInStore) will decide this element will be show on each scope or not. You can change the scope here <img src="/wp-content/uploads/2017/09/configuration-scope.png" alt="change system configuration scope"></li>
</ul>
<p>The section may have many group and some other child elements:</p>
<ul>
<li>Class: this value will be added as class for this element. You should use it if you want to make-up this element.</li>
<li>Label: the text title of this element</li>
<li>Tab: this’s a tab id. This tab element will let Magento know the tab which this section is belong to. This section will be placed under that tab</li>
<li>Resource: defined the ACL rule which the admin user must have in order to access this configuration.</li>
<li>Group: This element may have many field and some attributes which is same as Sections.</li>
<li>Fields: is the main path of this page. It will save the data which we want to setting. In this element, we focus on the type attribute. It will define how the element is when display. It can be: text, select, file… In this example we create 2 fields with type select and text. With each type we will define the child element for the field to make it work as we want.</li>
</ul>
<h2 id="第二步：设置默认值"><a href="#第二步：设置默认值" class="headerlink" title="第二步：设置默认值"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC"></a>第二步：设置默认值</h2><p>我么可以通过 <code>config.xml</code> 来给 <code>system.xml</code> 中的字段设置默认值。 File: app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;etc&#x2F;config.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Store:etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;default&gt;</span><br><span class="line">        &lt;helloworld&gt;</span><br><span class="line">            &lt;general&gt;</span><br><span class="line">                &lt;enable&gt;1&lt;/enable&gt;</span><br><span class="line">                &lt;display_text&gt;Hello World&lt;/display_text&gt;</span><br><span class="line">            &lt;/general&gt;</span><br><span class="line">        &lt;/helloworld&gt;</span><br><span class="line">    &lt;/default&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;default&gt;</span><br><span class="line">    &lt;section_id&gt;</span><br><span class="line">        &lt;group_id&gt;</span><br><span class="line">            &lt;field_id&gt;&#123;value&#125;&lt;/field_id&gt;</span><br><span class="line">        &lt;/group_id&gt;</span><br><span class="line">    &lt;/section_id&gt;</span><br><span class="line">&lt;/default&gt;</span><br></pre></td></tr></table></figure>

<h2 id="第三步：刷新缓存"><a href="#第三步：刷新缓存" class="headerlink" title="第三步：刷新缓存"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%88%B7%E6%96%B0%E7%BC%93%E5%AD%98"></a>第三步：刷新缓存</h2><p>刷新缓存后，你就可以看到结果了： <img src="/wp-content/uploads/2017/09/thankit_helloworld_configuration_page.png" alt="ThankIT HelloWorld Configuration page"></p>
<h2 id="第四步：获得配置值"><a href="#第四步：获得配置值" class="headerlink" title="第四步：获得配置值"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E8%8E%B7%E5%BE%97%E9%85%8D%E7%BD%AE%E5%80%BC"></a>第四步：获得配置值</h2><p>在 <code>system.xml</code> 中，我们加了两个字段，他们的 path 是： <code>helloworld/general/enable</code> <code>helloworld/general/display_text</code> 然后，我们改一下配置，保存后，刷新缓存。我们查看 <code>core_config_data</code> 这张数据库表，就会看到我们保存的配置值了（只创建了 config.xml 并不会在该表插入记录，后台点击保存后才会在表中插入记录）。 <img src="/wp-content/uploads/2017/09/core_config_data_records.png" alt="core_config_data 中的记录值"> 万变不离其宗，获取配置值，是通过 <code>\Magento\Framework\App\Config\ScopeConfigInterface</code> 来实现的。 通过查 di.xml 可以发现 <code>&lt;preference for=&quot;Magento\Framework\App\Config\ScopeConfigInterface&quot; type=&quot;Magento\Framework\App\Config&quot; /&gt;</code> 所以实际注入的是 <code>Magento\Framework\App\Config</code></p>
<h3 id="标准用法"><a href="#标准用法" class="headerlink" title="标准用法"></a><a href="#%E6%A0%87%E5%87%86%E7%94%A8%E6%B3%95"></a>标准用法</h3><p>在构造函数中注入 <code>\Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig</code> 并设置 <code>$this-&gt;scopeConfig = $scopeConfig;</code> 我们就可以通过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;scopeConfig-&gt;getValue(&#x27;helloworld/general/enable&#x27;, \Magento\Store\Model\ScopeInterface::SCOPE_STORE);</span><br></pre></td></tr></table></figure>

<p>来取得 <code>helloworld/general/enable</code> 的设置值。</p>
<h3 id="通过-helper-来取得配置值"><a href="#通过-helper-来取得配置值" class="headerlink" title="通过 helper 来取得配置值"></a><a href="#%E9%80%9A%E8%BF%87-helper-%E6%9D%A5%E5%8F%96%E5%BE%97%E9%85%8D%E7%BD%AE%E5%80%BC"></a>通过 helper 来取得配置值</h3><p>File: ThankIT&#x2F;HelloWorld&#x2F;Helper&#x2F;Data.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Helper;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\App\Helper\AbstractHelper;</span><br><span class="line">use Magento\Framework\App\Helper\Context;</span><br><span class="line">use Magento\Store\Model\ScopeInterface;</span><br><span class="line"></span><br><span class="line">class Data extends AbstractHelper</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    const XML_PATH_HELLOWORLD = &#x27;helloworld/general/&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct(Context $context)</span><br><span class="line">    &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getConfigValue($field, $storeId = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;scopeConfig-&gt;getValue(</span><br><span class="line">            $field, ScopeInterface::SCOPE_STORE, $storeId</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getGeneralConfig($code, $storeId = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getConfigValue(self::XML_PATH_HELLOWORLD . $code, $storeId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>File: app\code\ThankIT\HelloWorld\view\frontend\templates\index\index.phtml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;h3&gt;get configuration value by helper file&lt;/h3&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">$helper = $this-&gt;helper(&#x27;ThankIT\HelloWorld\Helper\Data&#x27;);</span><br><span class="line">echo $helper-&gt;getConfigValue(&#x27;helloworld/general/display_text&#x27;);</span><br><span class="line">echo &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">echo $helper-&gt;getGeneralConfig(&#x27;display_text&#x27;);</span><br></pre></td></tr></table></figure>

<p>结果： <img src="/wp-content/uploads/2017/09/get-configuration-value-by-helper-file.png" alt="get-configuration-value-by-helper-file"> _ 关于 helper Helpers are classes that can be used anywhere we want,we can use them in controllers,views,modeles and even in other helpers. Helpers are usually created to provide methods for a common functionality. 它一般位于 &#x2F;Helper 目录下，常用的文件名是 Data.php 它继承自 <code>Magento\Framework\App\Helper\AbstractHelper</code> _ 因为他的父类已经注入了<code>\Magento\Framework\App\Config\ScopeConfigInterface</code> 所以我们可以在 helper 中使用 <code>$this-&gt;scopeConfig-&gt;getValue()</code> 来获得配置值。 在 block 中我们可以通过 <code>$this-&gt;helper(&#39;&#123;Vendor&#125;\&#123;Module&#125;\Helper\Data&#39;);</code> 来获得 helper 。注意，此处一定是右斜杠。path 是左斜杠。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/create-system-xml-configuration-magento-2.html">Magento 2 How to Create System.xml Configuration</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>helper</tag>
        <tag>config.xml</tag>
        <tag>Magneto 2 system.xml</tag>
      </tags>
  </entry>
  <entry>
    <title>telnet 登录 SMTP 发邮件</title>
    <url>/telnet-smtp-send-email/</url>
    <content><![CDATA[<p>这篇是有助于理解 SMTP 。</p>
<p>博主用腾讯的企业邮箱注册了一个 <a href="mailto:&#111;&#119;&#x6e;&#101;&#114;&#64;&#109;&#x61;&#x69;&#108;&#x2e;&#104;&#x65;&#x6c;&#x6c;&#x6f;&#109;&#97;&#x67;&#101;&#110;&#x74;&#111;&#50;&#46;&#99;&#x6f;&#x6d;">&#111;&#119;&#x6e;&#101;&#114;&#64;&#109;&#x61;&#x69;&#108;&#x2e;&#104;&#x65;&#x6c;&#x6c;&#x6f;&#109;&#97;&#x67;&#101;&#110;&#x74;&#111;&#50;&#46;&#99;&#x6f;&#x6d;</a> 的地址，下面就以登录该邮箱发送邮件为例。</p>
<p>首先我们准备好 <a href="mailto:&#111;&#119;&#x6e;&#101;&#x72;&#64;&#x6d;&#97;&#105;&#108;&#x2e;&#104;&#x65;&#x6c;&#108;&#111;&#x6d;&#97;&#103;&#101;&#110;&#116;&#x6f;&#50;&#46;&#99;&#x6f;&#x6d;">&#111;&#119;&#x6e;&#101;&#x72;&#64;&#x6d;&#97;&#105;&#108;&#x2e;&#104;&#x65;&#x6c;&#108;&#111;&#x6d;&#97;&#103;&#101;&#110;&#116;&#x6f;&#50;&#46;&#99;&#x6f;&#x6d;</a> 的用户名及密码的 base64 编码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名：b3duZXJAbWFpbC5oZWxsb21hZ2VudG8yLmNvbQ==</span><br><span class="line">密码（当然是假的）：MTIzNDU2</span><br></pre></td></tr></table></figure>

<p>以下是 CMD 的测试记录（加粗部分是输入）：</p>
<p><strong>telnet smtp.exmail.qq.com 25</strong><br>220 smtp.qq.com Esmtp QQ Mail Server<br><strong>EHLO smtp.qq.com</strong><br>250-smtp.qq.com<br>250-PIPELINING<br>250-SIZE 73400320<br>250-STARTTLS<br>250-AUTH LOGIN PLAIN<br>250-AUTH&#x3D;LOGIN<br>250-MAILCOMPRESS<br>250 8BITMIME<br><strong>AUTH LOGIN</strong><br>334 VXNlcm5hbWU6<br><strong>b3duZXJAbWFpbC5oZWxsb21hZ2VudG8yLmNvbQ&#x3D;&#x3D;</strong><br>334 UGFzc3dvcmQ6<br><strong>MTIzNDU2</strong><br>235 Authentication successful<br><strong>MAIL FROM: <a href="mailto:&#x6f;&#x77;&#x6e;&#101;&#x72;&#x40;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#109;&#97;&#x67;&#101;&#110;&#116;&#x6f;&#50;&#46;&#99;&#111;&#x6d;">&#x6f;&#x77;&#x6e;&#101;&#x72;&#x40;&#x6d;&#97;&#105;&#x6c;&#x2e;&#x68;&#x65;&#x6c;&#x6c;&#x6f;&#109;&#97;&#x67;&#101;&#110;&#116;&#x6f;&#50;&#46;&#99;&#111;&#x6d;</a></strong><br>250 Ok<br><strong>RCPT TO: <a href="mailto:&#49;&#53;&#49;&#56;&#53;&#50;&#53;&#x38;&#x36;&#50;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;">&#49;&#53;&#49;&#56;&#53;&#50;&#53;&#x38;&#x36;&#50;&#x40;&#113;&#x71;&#46;&#x63;&#111;&#109;</a></strong><br>250 Ok<br><strong>DATA</strong><br>354 End data with <CR><LF>.<CR><LF><br><strong>From: <a href="mailto:&#x6f;&#x77;&#x6e;&#x65;&#x72;&#64;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x68;&#101;&#108;&#108;&#x6f;&#x6d;&#x61;&#103;&#x65;&#110;&#116;&#x6f;&#50;&#x2e;&#x63;&#x6f;&#x6d;">&#x6f;&#x77;&#x6e;&#x65;&#x72;&#64;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x68;&#101;&#108;&#108;&#x6f;&#x6d;&#x61;&#103;&#x65;&#110;&#116;&#x6f;&#50;&#x2e;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Subject: test</strong></p>
<p><strong>body</strong><br><strong>.</strong><br>250 Ok: queued as</p>
<p>注意：邮件正文前空了一行。<br>然后查看邮件就知道已经收到啦！</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>SMTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Test or Style magento 2 order success page</title>
    <url>/test-or-style-magento-2-order-success-page/</url>
    <content><![CDATA[<p><code>checkout/onepage/success</code> 页面只会在下单成功后展现一次，然后 session 被清除，再访问该页面就会转向 cart 页面。如果要调试这个页面就会很麻烦。 对 Magento 2 来说，可以在开发时注释掉 <code>\vendor\magento\module-checkout\Controller\Onepage\Success.php</code> 的 19-22 行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (!$this-&gt;_objectManager-&gt;get(&#x27;Magento\Checkout\Model\Session\SuccessValidator&#x27;)-&gt;isValid()) &#123;</span><br><span class="line">   return $this-&gt;resultRedirectFactory-&gt;create()-&gt;setPath(&#x27;checkout/cart&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">$session-&gt;clearQuote();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 2 高级</category>
      </categories>
  </entry>
  <entry>
    <title>top.links 加入链接</title>
    <url>/top-links%E5%8A%A0%E5%85%A5%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceBlock name=&quot;top.links&quot;&gt;</span><br><span class="line">            &lt;block class=&quot;Magento\Customer\Block\Account\SortLink&quot; name=&quot;my-order&quot;&gt;</span><br><span class="line">                &lt;arguments&gt;</span><br><span class="line">                    &lt;argument name=&quot;path&quot; xsi:type=&quot;string&quot;&gt;sales/order/history&lt;/argument&gt;</span><br><span class="line">                    &lt;argument name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;My Orders&lt;/argument&gt;</span><br><span class="line">                    &lt;argument name=&quot;sortOrder&quot; xsi:type=&quot;number&quot;&gt;70&lt;/argument&gt;</span><br><span class="line">                &lt;/arguments&gt;</span><br><span class="line">            &lt;/block&gt;</span><br><span class="line">        &lt;/referenceBlock&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>排列顺序是按照 <code>sortOrder</code> 由大到小的。 比如 My Account 110 排在 My Wish Lists 60 之前。 <img src="/wp-content/uploads/2018/05/top.links_.sort_.order_.png" alt="default top links sort order"></p>
<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a><a href="#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5"></a>相关链接</h2><p><a href="https://github.com/magento/magento2/issues/11431#issuecomment-388271300">https://github.com/magento/magento2/issues/11431#issuecomment-388271300</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu 14.04 PHP Warning</title>
    <url>/ubuntu-14-04-php-warning/</url>
    <content><![CDATA[<p><code>apt-get update &amp; upgrade</code> 后出现了以下错误，Magento 2 的站点也出现 500 错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library &#x27;/usr/lib/php/20151012/dom.so&#x27; - /usr/lib/php/20151012/dom.so: undefined symbol: php_libxml_node_free_list in Unknown on line 0</span><br><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library &#x27;/usr/lib/php/20151012/xmlreader.so&#x27; - /usr/lib/php/20151012/xmlreader.so: undefined symbol: dom_node_class_entry in Unknown on line 0</span><br><span class="line">PHP Warning:  PHP Startup: Unable to load dynamic library &#x27;/usr/lib/php/20151012/xsl.so&#x27; - /usr/lib/php/20151012/xsl.so: undefined symbol: dom_node_class_entry in Unknown on line 0</span><br></pre></td></tr></table></figure>

<p>解决办法，重新安装了一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install -y php7.0 libapache2-mod-php7.0 php7.0 php7.0-common php7.0-gd php7.0-mysql php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl php7.0-mbstring php7.0-zip php7.0-bcmath php7.0-iconv</span><br></pre></td></tr></table></figure>

<p><code>servie apache2 restart</code> 后正常了。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 环境 polipo 把 shadowsocks 转为 http 代理</title>
    <url>/ubuntu-polipo-shadowsocks-http/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install python</span><br><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>

<p>新建一个配置文件，&#x2F;home&#x2F;ThankIT&#x2F;test&#x2F;ss.json ，然后配置相应的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;&#123;your-server&#125;&quot;,</span><br><span class="line">  &quot;server_port&quot;: 40002,</span><br><span class="line">  &quot;local_port&quot;: 1080,</span><br><span class="line">  &quot;password&quot;: &quot;&#123;your-password&#125;&quot;,</span><br><span class="line">  &quot;timeout&quot;: 600,</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后启动它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sslocal -c /home/ThankIT/test/ss.json</span><br></pre></td></tr></table></figure>

<p>不要关闭终端 重开一个终端</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get install polipo</span><br><span class="line">vi /etc/polipo/config</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</span><br><span class="line">socksProxyType = socks5</span><br></pre></td></tr></table></figure>

<p>重启 polipo 服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service polipo restart</span><br></pre></td></tr></table></figure>

<p>为终端配置 http 代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export http_proxy=&quot;http://127.0.0.1:8123/&quot;</span><br></pre></td></tr></table></figure>

<p>测试一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure>

<p>如果想撤销当前会话的 http_proxy 代理，使用 unset http_proxy 即可。 查看当前 ip</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl ip.gs</span><br><span class="line">当前 IP：125.39.112.14 来自：中国天津天津 联通</span><br></pre></td></tr></table></figure>

<h2 id="参考网址"><a href="#参考网址" class="headerlink" title="参考网址"></a><a href="#%E5%8F%82%E8%80%83%E7%BD%91%E5%9D%80"></a>参考网址</h2><p><a href="https://jingsam.github.io/2016/05/08/setup-shadowsocks-http-proxy-on-ubuntu-server.html">https://jingsam.github.io/2016/05/08/setup-shadowsocks-http-proxy-on-ubuntu-server.html</a> <a href="http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/index.html">http://droidyue.com/blog/2016/04/04/set-shadowsocks-proxy-for-terminal/index.html</a> <a href="https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html">https://aitanlu.com/ubuntu-shadowsocks-ke-hu-duan-pei-zhi.html</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>UPS</title>
    <url>/ups/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/ups.html">原文地址</a></em></p>
<p>United Parcel Service 提供美国国内及多于220个国家的包裹运送服务。</p>
<p><em>UPS 现在采用体积重量决定某些运输费用</em></p>
<h2 id="第一步：创建一个UPS账户"><a href="#第一步：创建一个UPS账户" class="headerlink" title="第一步：创建一个UPS账户"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAups%E8%B4%A6%E6%88%B7"></a>第一步：创建一个UPS账户</h2><p>要给您的客户提供UPS快递方法，您必须首先创建一个UPS账户。</p>
<h2 id="第二步：启用-UPS"><a href="#第二步：启用-UPS" class="headerlink" title="第二步：启用 UPS"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%90%AF%E7%94%A8-ups"></a>第二步：启用 UPS</h2><ol>
<li><p>后台侧边栏，点击<strong>店铺</strong>(Stores) &gt; <strong>设置</strong>(Settings) &gt; <strong>配置</strong>(Configuration)</p>
</li>
<li><p>在左侧面板选择<strong>销售</strong>(Sales)&gt; <strong>送货方式</strong>(Shipping Methods)</p>
</li>
<li><p>展开 <strong>UPS</strong>(UPS) 做如下操作:</p>
</li>
<li><p>设置 启用(Enabled)为“Yes”</p>
</li>
<li><p>如果是UPS 标准账户，设置 <strong>UPS Type</strong> 为 “United Parcel Service”，做如下事情：<br>a. 设置 <strong>Live Account</strong> 为以下值：</p>
<p>value</p>
<p>description</p>
<p>Yes</p>
<p>以生产模式使用UPS，对客户提供UPS快递方式</p>
<p>No</p>
<p>以测试模式使用UPS</p>
<p>b. 在 <strong>Gateway URL</strong> 字段中填入用来计算UPS运费的URL。一般已经填好，不需要修改的。<br><em>要生成 shipping labels，UPS Type 必须被设置为 United Parcel XML</em></p>
</li>
<li><p>如果是 UPS XML 账户，做如下操作：<br>a. 设置 <strong>UPS Type</strong> 为 United Parcel Service XML<br>b. 输入如下认证信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* User ID</span><br><span class="line">* Access License Number</span><br><span class="line">* Password</span><br></pre></td></tr></table></figure>

<p>c. 设置 <strong>Mode</strong> 为 Live，这样会以安全的连接连接到 UPS 系统。Development 模式不会通过安全的连接发送数据。<br>d. 验证 Gateway XML URL<br>e. 设置 <strong>Origin of the Shipment</strong> 为发货的起始位置。<br>f. 如果您与UPS 达成了其他费用协议，请设置 <strong>Enable Negotiated Rates</strong> 为 Yes，然后在 <strong>Shipper Number</strong> 中输入UPS分配给你的六位数字码。</p>
</li>
<li><p>在 <strong>标题</strong>(Title)字段中，输入结算时显示的名称。默认情况下，标题是 United Parcel Service</p>
</li>
</ol>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups1.png" alt="Enable UPS"></p>
<h2 id="第三步：完成集装箱描述"><a href="#第三步：完成集装箱描述" class="headerlink" title="第三步：完成集装箱描述"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E9%9B%86%E8%A3%85%E7%AE%B1%E6%8F%8F%E8%BF%B0"></a>第三步：完成集装箱描述</h2><ol>
<li><p>设置<strong>请求包装类型</strong>(Packages Request Type)</p>
<ul>
<li>Use origin weight (few requests)</li>
<li>Divide to equal weight (one request)</li>
</ul>
</li>
<li><p>在 Container 字段中，指定用于装运的典型包装类型</p>
</li>
<li><p>设置<strong>重量单位</strong>(Weight Unit)。UPS 支持的重量单位因不同国家而不同。如果你不是很清楚，请询问UPS。支持的重量单位有：</p>
<ul>
<li>LBS</li>
<li>KGS</li>
</ul>
</li>
<li><p>设置 <strong>目的地址类型</strong>(Destination Type) 为以下值：  </p>
<p>value</p>
<p>description</p>
<p>Residential 住宅类</p>
<p>大多数运输是B2C</p>
<p>Commercial 商业型</p>
<p>B2B类型</p>
<p>Define Automatically 自动判断</p>
<p>UPS 自行判断类型，并使用相应的费率</p>
</li>
<li><p>输入允许的 <strong>最大包裹重量</strong> (Maximum Package Weight)</p>
</li>
<li><p>设置 <strong>Pickup Method</strong></p>
<ul>
<li>Regular Daily Pickup</li>
<li>On Call Air</li>
<li>One Time Pickup</li>
<li>Letter Center</li>
<li>Customer Counter</li>
</ul>
</li>
<li><p>设置物流公司接受的<strong>最小包裹重量</strong></p>
</li>
</ol>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups2.png" alt="Container Description"></p>
<h2 id="第四步：设置手续费"><a href="#第四步：设置手续费" class="headerlink" title="第四步：设置手续费"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E8%AE%BE%E7%BD%AE%E6%89%8B%E7%BB%AD%E8%B4%B9"></a>第四步：设置手续费</h2><ol>
<li>设置<strong>计算手续费</strong>(Calculate Handling Fee )为固定的(Fixed)或者按百分比(Percent)</li>
<li>设置<strong>Handling Applied</strong>(Handling Applied) 为按单收取(Per Order)或者按包裹收取(Per Package)</li>
<li>设置收取的手续费(Handling Fee)，输入百分数请以小数的形式。比如输入0.25来表示25%</li>
</ol>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups3.png" alt="Handling Fee"></p>
<h2 id="第五步：指定允许的方法和可用的国家"><a href="#第五步：指定允许的方法和可用的国家" class="headerlink" title="第五步：指定允许的方法和可用的国家"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E6%8C%87%E5%AE%9A%E5%85%81%E8%AE%B8%E7%9A%84%E6%96%B9%E6%B3%95%E5%92%8C%E5%8F%AF%E7%94%A8%E7%9A%84%E5%9B%BD%E5%AE%B6"></a>第五步：指定允许的方法和可用的国家</h2><ol>
<li><p>在<strong>Allowed Methods</strong>列表选中您提供的UPS方法。该方法会出现在接结算时UPS 项下。（多选按住Ctrl键）</p>
</li>
<li><p>设置 <strong>Free Method</strong>，然后做如下操作：</p>
<ul>
<li>设置Free Shipping with Minimum Order Amount为 Enabled，然后输入 Minimum Order Amount for Free Shipping</li>
<li>设置Free Shipping with Minimum Order Amount 为 Disabled</li>
</ul>
</li>
<li><p>在 <strong>Displayed Error Message box</strong>中输入UPS 不可用时的错误提示信息。<br><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups4.png" alt="Allowed Methods"></p>
</li>
<li><p>设置<strong>哪些国家可用</strong>(Ship to Applicable Countries)  </p>
<p>name</p>
<p>description</p>
<p>所有允许的国家All Allowed Countries</p>
<p>Allow Country设置中允许的所有国家都允许</p>
<p>指定国家Specific Countries</p>
<p>选择本项后，下面的(Ship to Specific Countries)列表可以用了</p>
</li>
<li><p><strong>不可用时是否显示</strong>(Show Method if Not Applicable)可选择如下选项：  </p>
<p>name</p>
<p>description</p>
<p>Yes</p>
<p>显示所有UPS的方法，不管可不可用</p>
<p>No</p>
<p>只显示可用的方法</p>
<p><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups5.png" alt="Applicable Countries"></p>
</li>
<li><p>要创建日志来记录UPS的详情，请设置 <strong>Debug</strong> 为 Yes</p>
</li>
<li><p>在 <strong>Sort Order</strong>中输入数字来指定 UPS 在运输方式列表中的排序。0表示列表第一个。<br><img src="/wp-content/uploads/2016/10/config-sales-shipping-methods-ups6.png" alt="Debug and Sort Order"></p>
</li>
<li><p>完成后，点击 Save Config</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>免费域名邮箱 —— 使用腾讯企业邮箱</title>
    <url>/use-exmail-qq/</url>
    <content><![CDATA[<p>博主已经有 hellomagento2.com 的域名了，现在想要一个自己域名的邮箱，就像 <a href="mailto:&#116;&#104;&#x61;&#x6e;&#107;&#x69;&#116;&#64;&#104;&#101;&#108;&#108;&#x6f;&#x6d;&#x61;&#x67;&#101;&#110;&#x74;&#111;&#x32;&#x2e;&#x63;&#x6f;&#x6d;">&#116;&#104;&#x61;&#x6e;&#107;&#x69;&#116;&#64;&#104;&#101;&#108;&#108;&#x6f;&#x6d;&#x61;&#x67;&#101;&#110;&#x74;&#111;&#x32;&#x2e;&#x63;&#x6f;&#x6d;</a> 这样的，还得是免费的。该怎么做呢？本篇就将介绍如何使用腾讯的企业邮箱服务来配置自己的域名邮箱。</p>
<p>首先去<a href="http://exmail.qq.com/onlinesell/intro">腾讯企业邮箱的官网</a>开通一个免费版的。</p>
<p>按照提示一步步操作即可，如果不太清楚，可以参考<a href="http://service.exmail.qq.com/cgi-bin/help?subtype=1&&no=1001214&&id=20012">官方帮助文档</a>。</p>
<p>注册管理员账号，添加域名，添加成员等步骤省略不讲。</p>
<p>下面我们配图如何设置 MX 记录，参照上面的官方文档应该很容易理解的。</p>
<p><img src="/wp-content/uploads/2016/10/aliyun-mx.png"></p>
<p>博主这个配置的是 <a href="mailto:&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#x65;&#x40;&#109;&#97;&#105;&#x6c;&#46;&#x68;&#x65;&#108;&#108;&#111;&#x6d;&#x61;&#103;&#x65;&#110;&#x74;&#x6f;&#50;&#46;&#99;&#x6f;&#109;">&#115;&#x6f;&#x6d;&#101;&#x6f;&#x6e;&#x65;&#x40;&#109;&#97;&#105;&#x6c;&#46;&#x68;&#x65;&#108;&#108;&#111;&#x6d;&#x61;&#103;&#x65;&#110;&#x74;&#x6f;&#50;&#46;&#99;&#x6f;&#109;</a> 这种哈。现在登录腾讯企业邮箱给自己发邮件，别人收到的就是自己域名的邮件啦！</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>域名邮箱</tag>
      </tags>
  </entry>
  <entry>
    <title>use Zend_Cache</title>
    <url>/use-zend-cache/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="line">$backend = &#x27;Cm_Cache_Backend_File&#x27;;</span><br><span class="line">$frontend = &#x27;Magento\Framework\Cache\Core&#x27;;</span><br><span class="line">$frontendOptions = [</span><br><span class="line">        &#x27;cache_id_prefix&#x27; =&gt; &#x27;7f1_&#x27;,</span><br><span class="line">        &#x27;caching&#x27;=&gt;true,</span><br><span class="line">        &#x27;lifetime&#x27; =&gt; 7200,</span><br><span class="line">        &#x27;automatic_cleaning_factor&#x27; =&gt; 0,</span><br><span class="line">        &#x27;type&#x27; =&gt; &#x27;Magento\Framework\Cache\Core&#x27;</span><br><span class="line">];</span><br><span class="line">$backendOptions = [</span><br><span class="line">    &#x27;cache_dir&#x27; =&gt; &#x27;/var/www/html/m230/var/page_cache_test&#x27;,</span><br><span class="line">    &#x27;hashed_directory_level&#x27; =&gt; 1,</span><br><span class="line">    &#x27;file_name_prefix&#x27; =&gt; &#x27;magetest&#x27;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">$cache = \Zend_Cache::factory(</span><br><span class="line">    $frontend,</span><br><span class="line">    $backend,</span><br><span class="line">    $frontendOptions,</span><br><span class="line">    $backendOptions,</span><br><span class="line">    true,</span><br><span class="line">    true,</span><br><span class="line">    true</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">var_dump(get_class($cache));</span><br><span class="line"></span><br><span class="line">$cache-&gt;save(&#x27;wanttosavedata&#x27;, &#x27;dataid&#x27;, [&#x27;datatag&#x27;, &#x27;datatag2&#x27;]);</span><br><span class="line">echo $cache-&gt;load(&#x27;first&#x27;);</span><br></pre></td></tr></table></figure>

<p>Ok, we will get these files.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var/page_cache_test</span><br><span class="line">    -- magetest-tags</span><br><span class="line">        -- magetest---7f1_datatag</span><br><span class="line">        -- magetest---7f1_datatag2</span><br><span class="line">    -- magetest--0</span><br><span class="line">        -- magetest---7f1_dataid</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>使用第三方支付集成有何风险？</title>
    <url>/using-payment-integration-risk/</url>
    <content><![CDATA[<p><em><a href="http://www.zhihu.com/question/31237376">原文地址</a></em></p>
<p><em>说明：本文是原文阅读后，博主个人的概括和思考</em></p>
<h2 id="第三方支付集成是什么"><a href="#第三方支付集成是什么" class="headerlink" title="第三方支付集成是什么"></a><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E9%9B%86%E6%88%90%E6%98%AF%E4%BB%80%E4%B9%88"></a>第三方支付集成是什么</h2><p>第三方支付集成就是帮助你接入各种支付的，比如 Ping++、BeeCloud、MobPex 等。原来你要接入支付宝、微信、银联什么的，那么你得自己去研究第三方支付公司提供的API，然后开发符合业务逻辑的支付模块。如果用第三方支付集成呢，你主要跟支付集成的公司对接就好了，速度会更快些。不过呢，你该申请该签约该交给第三方支付的钱一样不能少，他们可以说就是代理啦。</p>
<h2 id="第三方支付集成的风险"><a href="#第三方支付集成的风险" class="headerlink" title="第三方支付集成的风险"></a><a href="#%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98%E9%9B%86%E6%88%90%E7%9A%84%E9%A3%8E%E9%99%A9"></a>第三方支付集成的风险</h2><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a><a href="#%E5%AE%89%E5%85%A8%E6%80%A7"></a>安全性</h3><p>您需要将支付渠道参数交给支付集成公司，才能进行支付。所以理论上来讲，这些支付渠道参数如果泄露，被不良分子利用，那么会给您造成损失。<br>支付集成公司如不能保证交易数据和客户数据的安全，那么也可能对您的业务带来不良影响。</p>
<h3 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a><a href="#%E7%A8%B3%E5%AE%9A%E6%80%A7"></a>稳定性</h3><p>因为必须依赖支付集成公司的服务器，转交第三方支付，所以如果支付集成公司的服务器不小心挂了，那么您就没法支付了，这是大大的影响。</p>
<h3 id="跟不上业务发展需要"><a href="#跟不上业务发展需要" class="headerlink" title="跟不上业务发展需要"></a><a href="#%E8%B7%9F%E4%B8%8D%E4%B8%8A%E4%B8%9A%E5%8A%A1%E5%8F%91%E5%B1%95%E9%9C%80%E8%A6%81"></a>跟不上业务发展需要</h3><p>由于依赖支付集成公司的API，您不能够随便改支付流程，一些个性化的定制嘛，就没办法了。还有，加入第三方支付升级了，或者发现安全漏洞什么的，您必须等待支付集成公司升级什么的，有一定的延迟。</p>
<p>当然，这些风险，第三方支付公司都会努力去避免的。您需要根据自身的情况做决定。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>支付</tag>
      </tags>
  </entry>
  <entry>
    <title>var_dump() 输出所有</title>
    <url>/var-dump-%E8%BE%93%E5%87%BA%E6%89%80%E6%9C%89/</url>
    <content><![CDATA[<p>解决 <code>var_dump()</code> 输出不完整，带省略号。</p>
<p>在 php.ini 中修改或添加以下设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xdebug.var_display_max_depth = -1</span><br><span class="line">xdebug.var_display_max_children = -1</span><br><span class="line">xdebug.var_display_max_data = -1</span><br></pre></td></tr></table></figure>

<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="https://stackoverflow.com/questions/9998490/how-to-get-xdebug-var-dump-to-show-full-object-array">https://stackoverflow.com/questions/9998490/how-to-get-xdebug-var-dump-to-show-full-object-array</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>添加自定义变量(Adding Custom Variables)</title>
    <url>/variables-custom/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/variables-custom.html">原文地址</a></em></p>
<p>如果你懂一点 HTML 的话，你可以用 markup tag 把自定义的变量嵌入到页面，blocks,banners 和电子邮件模板中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;#123;&amp;#123;CustomVar code= &quot;my_custom_variable&quot;&amp;#125;&amp;#125;</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2016/11/variables-custom.png" alt="Custom Variables"></p>
<h2 id="创建自定义的变量"><a href="#创建自定义的变量" class="headerlink" title="创建自定义的变量"></a><a href="#%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%98%E9%87%8F"></a>创建自定义的变量</h2><ol>
<li>后台侧边栏，点击<strong>System</strong>，在<strong>Other Settings</strong>下，选择<strong>Custom Variables</strong></li>
<li>点击<strong>Add New Varible</strong></li>
<li>在<strong>Variable Code</strong>中输入一个唯一识别代号（identifier），全部用小写字母，不要用空格。</li>
<li>输入一个<strong>Variable Name</strong>，变量名用来内部引用。然后，做下面的任意一件事：<ul>
<li>在<strong>Variable HTML Value</strong>中，输入你想包含的任意内容，可以用基本的 HTML 标签。</li>
<li>在<strong>Variable Plain Value</strong>中，输入单纯的变量值。<br><em>你可以拖动文本框的右下角来让他变大</em></li>
</ul>
</li>
<li>完成后，点击<strong>Save</strong>保存。</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>添加预定义的变量(Adding Predefined Variables)</title>
    <url>/variables-predefined/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/variables-predefined.html">原文地址</a></em></p>
<p>预定义的变量很容易被添加到 email 模板和内容页中，来个性化通信。可用变量的选择取决于模板。</p>
<p><img src="/wp-content/uploads/2016/11/variable-insert-contact-email.png" alt="Variables for Contact Form Template"></p>
<h2 id="向电子邮件模板中添加变量"><a href="#向电子邮件模板中添加变量" class="headerlink" title="向电子邮件模板中添加变量"></a><a href="#%E5%90%91%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E6%A8%A1%E6%9D%BF%E4%B8%AD%E6%B7%BB%E5%8A%A0%E5%8F%98%E9%87%8F"></a>向电子邮件模板中添加变量</h2><ol>
<li>在后台侧边栏，点击 <strong>Marketing</strong>，然后在 <strong>Communications</strong> 下选择 <strong>Email Templates</strong></li>
<li>做以下事情中的任意一件：<ul>
<li>载入一个已经存在的模板</li>
<li>添加新的模板</li>
</ul>
</li>
<li>在 <strong>Template Content</strong>中，在你要插入变量的地方，点击<strong>Insert Variable</strong></li>
<li>在可用的变量列表中，选择你想要插入的变量。</li>
<li>点击<strong>Preview Template</strong> 可以进行预览。</li>
<li>完成后，点击<strong>Save Template</strong></li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>变量参考列表(Variable Reference)</title>
    <url>/variables-reference/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/variables-reference.html">原文地址</a></em><br>Most email templates have a section of additional variables that are specific to the template. The following are examples of some frequently used templates</p>
<h2 id="Email-Template-Variables"><a href="#Email-Template-Variables" class="headerlink" title="Email Template Variables"></a><a href="#email-template-variables"></a>Email Template Variables</h2><p>Variable</p>
<p>Markup Tag</p>
<p>Email Footer Template</p>
<p>&amp;#123;&amp;#123;template config_path&#x3D;”design&#x2F;email&#x2F;footer_template”&amp;#125;&amp;#125;</p>
<p>Email Header Template</p>
<p>&amp;#123;&amp;#123;template config_path&#x3D;”design&#x2F;email&#x2F;header_template”&amp;#125;&amp;#125;</p>
<p>Email Logo Image Alt</p>
<p>&amp;#123;&amp;#123;var logo_alt&amp;#125;&amp;#125;</p>
<p>Email Logo Image URL</p>
<p>&amp;#123;&amp;#123;var logo_url&amp;#125;&amp;#125;</p>
<p>Email Logo Image Height</p>
<p>&amp;#123;&amp;#123;var logo_height&amp;#125;&amp;#125;</p>
<p>Email Logo Image Width</p>
<p>&amp;#123;&amp;#123;var logo_width&amp;#125;&amp;#125;</p>
<p>Template CSS</p>
<p>&amp;#123;&amp;#123;var template_stylesraw&amp;#125;&amp;#125;</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><a href="#store-contact-information-variables"></a></h2><p>Store Contact Information Variables</p>
<p>Variable</p>
<p>Markup Tag</p>
<p>Base Unsecure URL</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”web&#x2F;unsecure&#x2F;base_url”&amp;#125;&amp;#125;</p>
<p>Base Secure URL</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”web&#x2F;secure&#x2F;base_url”&amp;#125;&amp;#125;</p>
<p>General Contact Name</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_general&#x2F;name”&amp;#125;&amp;#125;</p>
<p>General Contact Email</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_general&#x2F;email”&amp;#125;&amp;#125;</p>
<p>Sales Representative Contact Name</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_sales&#x2F;name”&amp;#125;&amp;#125;</p>
<p>Sales Representative Contact Email</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_sales&#x2F;email”&amp;#125;&amp;#125;</p>
<p>Custom1 Contact Name</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_custom1&#x2F;name”&amp;#125;&amp;#125;</p>
<p>Custom1 Contact Email</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_custom1&#x2F;email”&amp;#125;&amp;#125;</p>
<p>Custom2 Contact Name</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_custom2&#x2F;name”&amp;#125;&amp;#125;</p>
<p>Custom2 Contact Email</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”trans_email&#x2F;ident_custom2&#x2F;email”&amp;#125;&amp;#125;</p>
<p>Store Name</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;name”&amp;#125;&amp;#125;</p>
<p>Store Phone Telephone</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;phone”&amp;#125;&amp;#125;</p>
<p>Store Hours</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;hours”&amp;#125;&amp;#125;</p>
<p>Country</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;country_id”&amp;#125;&amp;#125;</p>
<p>Region&#x2F;State</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;region_id”&amp;#125;&amp;#125;</p>
<p>Zip&#x2F;Postal Code</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;postcode”&amp;#125;&amp;#125;</p>
<p>City</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;city”&amp;#125;&amp;#125;</p>
<p>Street Address 1</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;street_line1”&amp;#125;&amp;#125;</p>
<p>Street Address 2</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;street_line2”&amp;#125;&amp;#125;</p>
<p>Store Contact Address</p>
<p>&amp;#123;&amp;#123;config path&#x3D;”general&#x2F;store_information&#x2F;address”&amp;#125;&amp;#125;</p>
<h2 id="New-Account-Template-Variables"><a href="#New-Account-Template-Variables" class="headerlink" title="New Account Template Variables"></a><a href="#new-account-template-variables"></a>New Account Template Variables</h2><p>Variable</p>
<p>Markup Tag</p>
<p>Customer Account URL</p>
<p>&amp;#123;&amp;#123;var this.getUrl($store, ‘customer&#x2F;account&#x2F;‘)&amp;#125;&amp;#125;</p>
<p>Customer Email</p>
<p>&amp;#123;&amp;#123;var customer.email&amp;#125;&amp;#125;</p>
<p>Customer Name</p>
<p>&amp;#123;&amp;#123;var customer.name&amp;#125;&amp;#125;</p>
<h2 id="New-Order-Template-Variables"><a href="#New-Order-Template-Variables" class="headerlink" title="New Order Template Variables"></a><a href="#new-order-template-variables"></a>New Order Template Variables</h2><p>Variable</p>
<p>Markup Tag</p>
<p>Billing Address</p>
<p>&amp;#123;&amp;#123;var formattedBillingAddressraw&amp;#125;&amp;#125;</p>
<p>Email Order Note</p>
<p>&amp;#123;&amp;#123;var order.getEmailCustomerNote()&amp;#125;&amp;#125;</p>
<p>Order ID</p>
<p>&amp;#123;&amp;#123;var order.increment_id&amp;#125;&amp;#125;</p>
<p>Order Items Grid</p>
<p>&amp;#123;&amp;#123;layout handle&#x3D;”sales_email_order_items” order&#x3D;$order area&#x3D;”frontend”&amp;#125;&amp;#125;</p>
<p>Payment Details</p>
<p>&amp;#123;&amp;#123;var payment_htmlraw&amp;#125;&amp;#125;</p>
<p>Shipping Address</p>
<p>&amp;#123;&amp;#123;var formattedShippingAddressraw&amp;#125;&amp;#125;</p>
<p>Shipping Description</p>
<p>&amp;#123;&amp;#123;var order.getShippingDescription()&amp;#125;&amp;#125;</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>使用变量(Using Variables)</title>
    <url>/variables/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/marketing/variables.html">原文地址</a></em></p>
<p>变量是一些信息片段，他们可以一次创建，多处使用，比如用在电子邮件模板，blocks 和 content pages 中。Magento 店铺预先包含了许多变量，他们可以用来个性化沟通。另外，你还可以创建自己的自定义变量。</p>
<h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0"></a>相关文章</h2><ul>
<li><a href="/variables-predefined/">添加预定义的变量(Adding Predefined Variables)</a></li>
<li><a href="/variables-custom/">添加自定义变量(Adding Custom Variables)</a></li>
<li><a href="/markup-tags/">Markup Tags</a><ul>
<li><a href="/markup-tags-links/">在链接中使用 Markup Tags(Using Markup Tags in Links)</a></li>
</ul>
</li>
<li><a href="/catalog-urls-dynamic-media/">动态媒体网址(Dynamic Media URLs)</a></li>
<li><a href="/variables-reference/">变量参考列表(Variable Reference)</a></li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>查看 Apache 日志</title>
    <url>/view-apache-log/</url>
    <content><![CDATA[<p>本站是一个新站，已经整整一个月了，百度还没有收录内页，博主都开始怀疑百度蜘蛛到底有没有来过了。于是决定查看 Apache 日志分析一下，看百度蜘蛛到底来没来过。</p>
<p>博主的日志在 <code>/var/log/apache2/</code></p>
<p>日志文件下载到本机后用 baretail （日志分析工具）高亮 <code>baidu.com/search</code></p>
<p><img src="/wp-content/uploads/2016/09/apache_log.png" alt="apache log"></p>
<p>这说明百度蜘蛛来过。可是，等等，上面的记录是什么鬼？请求中为什么有别人家的网站地址呢？</p>
<p>有人说可能是有人在测试服务器有没有支持正向代理，看了一会儿也没有搞清楚是什么情况，更没有在本地模拟出类似情况来，所以暂时先放一放，若有知道的，望不吝告知，感谢！</p>
<p>既然有人测试，不得不防，想起来我的服务器错误页会返回web 服务器版本信息什么，我得关闭这个功能。</p>
<p>Ubuntu 系统下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure>

<p>设置如下，如果没有，自己添加一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ServerSignature Off</span><br><span class="line">ServerTokens Prod</span><br></pre></td></tr></table></figure>

<p>记得reload 一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service apache2 reload</span><br></pre></td></tr></table></figure>

<p>这样错误页面就由之前这样（本地演示哈^_^ ）</p>
<p><img src="/wp-content/uploads/2016/09/apache_log_pre.png"></p>
<p>变成这样了</p>
<p><img src="/wp-content/uploads/2016/09/apache_log_after.png"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>Virtual Type</title>
    <url>/virtual-type/</url>
    <content><![CDATA[<p>A virtual type allows the developer to create an instance of an existing class that has custom constructor arguments. This is useful in cases where you need a “new” class only because the constructor arguments need to be changed. This is used frequently in Magento to reduce redundant PHP classes.</p>
<h2 id="Practices-Tests"><a href="#Practices-Tests" class="headerlink" title="Practices Tests"></a><a href="#practices-tests"></a>Practices Tests</h2><p>You are making some major adjustments to a core Magento class (ClassA). These adjustments are only necessary when utilized from a specific Magento class (ClassB). You have created MyClass that contains the needed customizations. Keeping upgradeability in mind, how do you configure di.xml to make the substitution happen? A. Ensure that MyClass extends ModuleA and set the <code>&lt;argument/&gt;</code>, for ModuleB to point to your new class in di.xml. B. Set a <code>&lt;preference/&gt;</code> for ModuleA to be replaced by MyClass C. Create a virtual type that extends ModuleB, specifying an <code>&lt;argument/&gt;</code> for MyClass. D. Create a rewrite node that injects MyClass into ClassB. Answer A</p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>VirtualBox下虚拟机和主机内网互通+虚拟机静态IP的网络配置</title>
    <url>/virtualbox%E4%B8%8B%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E4%B8%BB%E6%9C%BA%E5%86%85%E7%BD%91%E4%BA%92%E9%80%9A%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%9D%99%E6%80%81ip%E7%9A%84%E7%BD%91%E7%BB%9C%E9%85%8D/</url>
    <content><![CDATA[<h2 id="配置主机的内网静态-IP"><a href="#配置主机的内网静态-IP" class="headerlink" title="配置主机的内网静态 IP"></a><a href="#%E9%85%8D%E7%BD%AE%E4%B8%BB%E6%9C%BA%E7%9A%84%E5%86%85%E7%BD%91%E9%9D%99%E6%80%81-ip"></a>配置主机的内网静态 IP</h2><p>打开 Orcale VM VirtualBox 管理器，从菜单中选择 <strong>管理</strong> &gt; <strong>主机网络管理器</strong>，双击 VirtualBox Host-Only Ethernet Adapter ，修改他的 IP 地址为 192.168.1.1 <img src="/wp-content/uploads/2018/01/host-only.png"> 关闭 DHCP 服务器 <img src="/wp-content/uploads/2018/01/host-only-colse-dhcp.png"></p>
<h2 id="配置虚拟机的网卡"><a href="#配置虚拟机的网卡" class="headerlink" title="配置虚拟机的网卡"></a><a href="#%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%9A%84%E7%BD%91%E5%8D%A1"></a>配置虚拟机的网卡</h2><p>加入第一块网卡，配置如下： <img src="/wp-content/uploads/2018/01/eth0.png"> 加入第二块网卡，配置如下： <img src="/wp-content/uploads/2018/01/eth1.png"> 注意：虚拟机之间的内网名字可以随便起，这里叫做 neta。如果在配置在第二个虚拟机的时候，也要记得选择 netca 这个内网名字，这样虚拟机之间才可以互相通信。 加入第三块网卡，配置如下： <img src="/wp-content/uploads/2018/01/eth2.png"> 装系统的步骤就跳过了，博主使用的是 ubuntu 16 进入系统后，输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig -a</span><br></pre></td></tr></table></figure>

<p>查看所有的网卡信息，根据 mac 地址确定三块网卡对应的名称。</p>
<h2 id="在虚拟机内部配置网卡"><a href="#在虚拟机内部配置网卡" class="headerlink" title="在虚拟机内部配置网卡"></a><a href="#%E5%9C%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E9%83%A8%E9%85%8D%E7%BD%AE%E7%BD%91%E5%8D%A1"></a>在虚拟机内部配置网卡</h2><p>sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># This file describes the network interfaces available on your system</span><br><span class="line"># and how to activate them. For more information, see interfaces(5).</span><br><span class="line"></span><br><span class="line">source /etc/network/interfaces.d/*</span><br><span class="line"></span><br><span class="line"># The loopback network interface</span><br><span class="line">auto lo</span><br><span class="line">iface lo inet loopback</span><br><span class="line"></span><br><span class="line"># The primary network interface</span><br><span class="line">auto enp0s3</span><br><span class="line">iface enp0s3 inet static</span><br><span class="line">address 192.168.1.2</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line">auto enp0s8</span><br><span class="line">iface enp0s8 inet static</span><br><span class="line">address 192.168.0.2</span><br><span class="line">netmask 255.255.255.0</span><br><span class="line"></span><br><span class="line">auto enp0s9</span><br><span class="line">iface enp0s9 inet dhcp</span><br></pre></td></tr></table></figure>

<p>重启 networking 服务使其生效：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure>

<h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a><a href="#%E9%AA%8C%E8%AF%81"></a>验证</h2><p>通过主机 ping 虚拟机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 192.168.1.2</span><br></pre></td></tr></table></figure>

<p>在虚拟机中 ping 主机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 192.168.1.1</span><br></pre></td></tr></table></figure>

<p>ping 不通，尝试关闭主机的防火墙，这次就通了。 虚拟机之间互 ping</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 192.168.0.2</span><br></pre></td></tr></table></figure>

<p>虚拟机上网</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping baidu.com</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a><a href="#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99"></a>参考资料</h2><p><a href="http://xintq.net/2014/09/05/virtualbox/">VirtualBox下虚拟机和主机内网互通+虚拟机静态IP的网络配置</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>virtualbox</tag>
        <tag>虚拟机静态 ip</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS 添加 swap 交换分区</title>
    <url>/vps-%E6%B7%BB%E5%8A%A0-swap-%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/</url>
    <content><![CDATA[<p>前段时间发现服务器老是挂，内存占用率特别高，MySQL 更是占到了 80%。做了一些优化后，内存还是不够用。配置 Swap 后，终于稳定下来了，MySQL 一般只占 20% 了。 参考<a href="https://www.vpser.net/opt/vps-add-swap.html">VPS优化之Linux添加swap交换分区(虚拟内存)</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>wamp 安装 Magento 2 卡住</title>
    <url>/wamp-%E5%AE%89%E8%A3%85-magento-2-%E5%8D%A1%E4%BD%8F/</url>
    <content><![CDATA[<p>问题一：安装卡在 sample data 部分，没有错误提示 <img src="/wp-content/uploads/2018/01/error.png" alt="wamp 安装 Magento 2 卡住"> 解决方法： increasing the MySQL max_allowed_packet Wamp 有设置。可以通过 sql 语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show VARIABLES like &#x27;%max_allowed_packet%&#x27;;</span><br></pre></td></tr></table></figure>

<p>查看设置值。 问题二：安装到 91% 卡住，但是看不出有问题 解决方法： 可能已经安装好了，可以尝试直接访问。 十有八九访问发现样式丢失，则执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento  setup:static-content:deploy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>magento2</tag>
        <tag>Wampserver</tag>
      </tags>
  </entry>
  <entry>
    <title>Wampserver 本地搭建 Magento 2</title>
    <url>/wampserver-install-magento-2/</url>
    <content><![CDATA[<h2 id="Wampserver-简介"><a href="#Wampserver-简介" class="headerlink" title="Wampserver 简介"></a><a href="#wampserver-%E7%AE%80%E4%BB%8B"></a>Wampserver 简介</h2><p>Wampserver 是 window 下的 apache、 php 和 mysql 的集成包。他可以帮助你快速搭建PHP环境。对于初学者来说，非常适合。不过要进入生产环境，这样的集成包有一些奇怪的问题，还是用标准的配置方法更好。对于 Magento 2 来说，官方的系统要求是 Linux，所以强烈建议深入学习和生产环境时使用Linux 环境进行服务器配置。可以参考本站的另一篇文章 <a href="/aliyun-ecs-install-magento-2/">阿里云 ECS 安装 Magento 2 (原创)</a></p>
<h3 id="准备需要的软件"><a href="#准备需要的软件" class="headerlink" title="准备需要的软件"></a><a href="#%E5%87%86%E5%A4%87%E9%9C%80%E8%A6%81%E7%9A%84%E8%BD%AF%E4%BB%B6"></a>准备需要的软件</h3><ol>
<li><p>Wampserver<br>Wampserver 可以去<a href="https://sourceforge.net/projects/wampserver/">该网站下载</a>，官方发布，可以获得最新版，缺点就是下载速度慢地很。<br>可以去我的百度云下载：<a href="http://pan.baidu.com/s/1skJVqiD">http://pan.baidu.com/s/1skJVqiD</a></p>
</li>
<li><p>Magento 安装包<br>这个官方给出了三种：</p>
<ul>
<li><a href="https://www.magentocommerce.com/download">官方下载地址</a></li>
<li>Composer 的方式</li>
<li>GitHub 的方式<br>这里，我推荐官方下载地址，也可以去我的百度云下载（<a href="http://pan.baidu.com/s/1skJVqiD%EF%BC%89">http://pan.baidu.com/s/1skJVqiD）</a></li>
</ul>
</li>
</ol>
<p>该教程准备的Wampserver 是 wampserver3.0.4_x64_apache2.4.18_mysql5.7.11_php5.6.19-7.0.4.exe ，我是64位的系统，云盘里放的也是这个版本，还放了一个32位的。</p>
<p>Magento 是 Magento-CE-2.1.0_sample_data-2016-06-23-02-32-34.zip ，这个是Magento 2.1 版本带演示数据的。（云盘里有2.1版本带演示数据和不带演示数据的）</p>
<h2 id="安装-Wampserver"><a href="#安装-Wampserver" class="headerlink" title="安装 Wampserver"></a><a href="#%E5%AE%89%E8%A3%85-wampserver"></a>安装 Wampserver</h2><p>这个很简单啦，下一步下一步就行。<br>安装好后启动它。</p>
<h2 id="配置-Wampserver-虚拟目录"><a href="#配置-Wampserver-虚拟目录" class="headerlink" title="配置 Wampserver 虚拟目录"></a><a href="#%E9%85%8D%E7%BD%AE-wampserver-%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95"></a>配置 Wampserver 虚拟目录</h2><p>我们的开发环境要能够放多个网站，当然用子目录也是可以的，子目录就是比如<code>http://127.0.0.1/a</code> 放一个站，<code>http://127.0.0.1/b</code> 又放一个站。不过这样很容易混乱，所以我们来配置一下虚拟目录。</p>
<h3 id="配置虚拟目录"><a href="#配置虚拟目录" class="headerlink" title="配置虚拟目录"></a><a href="#%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95"></a>配置虚拟目录</h3><p>我的在wamp 安装在<code>D:\wamp64</code> 目录下。<br>打开<code>D:\wamp64\bin\apache\apache2.4.17\conf\extra\httpd-vhosts.conf</code> 我们可以看到如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># Virtual Hosts</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    DocumentRoot d:/wamp64/www</span><br><span class="line">    &lt;Directory  &quot;d:/wamp64/www/&quot;&gt;</span><br><span class="line">        Options +Indexes +FollowSymLinks +MultiViews</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require local</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>我将他改为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"># Virtual Hosts</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    DocumentRoot e:/www/hellomagento2</span><br><span class="line">    &lt;Directory  &quot;e:/www/hellomagento2&quot;&gt;</span><br><span class="line">        Options +Indexes +FollowSymLinks +MultiViews</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require local</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost *:81&gt;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    DocumentRoot e:/www/wp</span><br><span class="line">    &lt;Directory  &quot;e:/www/wp&quot;&gt;</span><br><span class="line">        Options +Indexes +FollowSymLinks +MultiViews</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require local</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>然后修改<code>D:\wamp64\bin\apache\apache2.4.17\conf\httpd.conf</code>找到这一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Listen 0.0.0.0:80</span><br><span class="line">Listen [::0]:80</span><br></pre></td></tr></table></figure>

<p>在后面添加监听81端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Listen 0.0.0.0:80</span><br><span class="line">Listen [::0]:80</span><br><span class="line">Listen 0.0.0.0:81</span><br><span class="line">Listen [::0]:81</span><br></pre></td></tr></table></figure>

<p>这时候我们在任务栏里找到 wamp 的图标，单击一下，点击<strong>Restart All services</strong> 等到 wamp 由再次变成绿色以后，在浏览器输入<code>127.0.0.1</code>就会访问<code>e:/www/hellomagento2</code>下的网站，而如果输入<code>127.0.0.1:81</code>则会访问<code>e:/www/wp</code><br>上面两个<code>127.0.0.1</code>都可以用<code>localhost</code>替代。我们来看下为什么可以用<code>localhost</code>替代。<br>以管理员身份打开记事本，在记事本中打开<code>C:\Windows\System32\drivers\etc\hosts</code>，我们可以看到这样的记录<code>127.0.0.1 localhost</code><br>hosts 是一个记录主机名和ip地址映射的文件，相当于本地的 DNS，当我在浏览器中输入某个域名的时候，本机会先查看 hosts 中是否有记录，如果有直接转到该 ip，不需要再访问DNS服务器了。所以我们现在给他加一条<code>127.0.0.1 thankit.cn</code> 加完后我们在浏览器中输入<code>thankit.cn</code>照样可以访问<code>e:/www/hellomagento2</code>下的网站了对吧。</p>
<p>上面我们给不同的端口分配了不同的虚拟目录，现在我要同一个端口也可以有不同的网站呢？<br>我们已经给hosts 增加了一条记录，让<code>thankit.cn</code>也可以访问到<code>127.0.0.1</code>了，现在我要让<code>thankit.cn</code>对应<code>e:/www/thankit</code>应该怎么做呢？<br>打开<code>D:\wamp64\bin\apache\apache2.4.17\conf\extra\httpd-vhosts.conf</code> 在上面的基础上添加如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName thankit.cn</span><br><span class="line">    DocumentRoot e:/www/thankit</span><br><span class="line">    &lt;Directory  &quot;e:/www/thankit&quot;&gt;</span><br><span class="line">        Options +Indexes +FollowSymLinks +MultiViews</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require local</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>注意 ServerName 现在是 <code>thankit.cn</code>让 wamp <strong>Restart All services</strong>，之后浏览器中输入<code>thankit.cn</code>是不是可以访问到<code>e:/www/thankit</code></p>
<p>根据你的需求配置好自己的虚拟目录吧。</p>
<h2 id="安装-Magento-2-1"><a href="#安装-Magento-2-1" class="headerlink" title="安装 Magento 2.1"></a><a href="#%E5%AE%89%E8%A3%85-magento-2.1"></a>安装 Magento 2.1</h2><p>我们用<code>localhost</code> 对应的<code>e:/www/hellomagento2</code>来安装 Magento 2。<br>先将2.1的zip 解压后放到<code>e:/www/hellomagento2</code>下。<br>我们来创建一个数据库。在任务栏找到 wamp ，单击出现的面板中再点击 phpMyAdmin，默认用户名为root，密码为空。登录后创建一个数据库hellomagento2。<br>在浏览器中打开<code>localhost</code>这时候就是 Magento 安装界面了。第一步的检测，PHP Settings Check 发生错误。<br><img src="/wp-content/uploads/2016/08/wampserver-install-magento2-error.png"><br>上面说让我们打开php.ini 修改 <code>always_populate_raw_post_data</code> 为 -1</p>
<p><em>wampserver 是有两个 php.ini 的，我的在wamp 安装在<code>D:\wamp64</code> 目录下，以我的安装目录为例，php 下的<code>D:\wamp64\bin\php\php5.6.19\php.ini</code>是cli 命令行使用时的配置文件，而apache 下的<code>D:\wamp64\bin\apache\apache2.4.18\bin\php.ini</code>是web 访问时的配置文件。此处先注意一下，以后会需要改命令行下的 php.ini，现在不需要</em></p>
<p>现在我们改<code>D:\wamp64\bin\apache\apache2.4.18\bin\php.ini</code>，找到<code>always_populate_raw_post_data</code> 发现他是<code>;always_populate_raw_post_data = -1</code>，去掉前面的分号保存，wamp <strong>Restart All services</strong>，回到浏览器 Magento 安装页面，重新检测一下(Try again)，这次没有错误啦。<br>下一步，填入数据库名称<code>hellomagento2</code>再下一步，下面很简单，根据提示下一步下一步就安装成功啦。</p>
<h2 id="简单调优"><a href="#简单调优" class="headerlink" title="简单调优"></a><a href="#%E7%AE%80%E5%8D%95%E8%B0%83%E4%BC%98"></a>简单调优</h2><p>我们可以通过增加 PHP 的 memory_limit 来让 Magento 跑快一点。<br>官方推荐的memory_limit 是这样的：</p>
<ul>
<li>Compiling code, 768M</li>
<li>Deploying static asses, 768M</li>
<li>Installing and updating Magento components from Magento Marketplace, 1G</li>
<li>Testing, 2G<br>所以我们起码给个 768M 吧，这次我们修改 <code>D:\wamp64\bin\apache\apache2.4.18\bin\php.ini</code> 和 <code>D:\wamp64\bin\php\php5.6.19\php.ini</code>，找到 <code>memory_limit</code>，发现默认才给了128M，速度当然慢了。强烈建议你两个都修改，因为 Magento 是要用命令行的，而博主就遇到过一直报内存不够的错误，当时我还不知道 Wamp 是有两个 php.ini 的…<br>记得改完<strong>Restart All services</strong></li>
</ul>
<h2 id="相关文章列表"><a href="#相关文章列表" class="headerlink" title="相关文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关文章列表</h2><p><a href="/wampserver-lan-magento">局域网访问本地 Magento</a><br><a href="/php-path/">php 不是内部或外部命令，也不是可运行的程序或批处理文件</a></p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>Wampserver</tag>
        <tag>install Magento 2</tag>
        <tag>虚拟目录</tag>
      </tags>
  </entry>
  <entry>
    <title>局域网访问本地 Magento</title>
    <url>/wampserver-lan-magento/</url>
    <content><![CDATA[<p>上一篇<a href="/wampserver-install-magento-2/">Wampserver 本地搭建 Magento 2</a>完成了本地安装，这一篇我们来说说如何通过局域网访问站点。<br>为什么要通过局域网访问呢？假如我还不想买服务器，但是我又要测试站点在真实的手机上的效果，这时候通过局域网访问就很有用了。</p>
<h2 id="找出可以被其他设备访问的ip地址"><a href="#找出可以被其他设备访问的ip地址" class="headerlink" title="找出可以被其他设备访问的ip地址"></a><a href="#%E6%89%BE%E5%87%BA%E5%8F%AF%E4%BB%A5%E8%A2%AB%E5%85%B6%E4%BB%96%E8%AE%BE%E5%A4%87%E8%AE%BF%E9%97%AE%E7%9A%84ip%E5%9C%B0%E5%9D%80"></a>找出可以被其他设备访问的ip地址</h2><p>一般情况下，CMD(开始-&gt;运行-&gt;输入”cmd”-&gt;回车)中，输入 “ipconfig”，查看IPv4字样后面的xx.xx.xx.xx就是你的网卡ip了。我的是<code>192.168.0.107</code>。<br>一般IP地址是动态分配的，建议把IP地址改成固定的，不然下次再开机可能就打不开站点了。</p>
<h3 id="设备互相访问原理"><a href="#设备互相访问原理" class="headerlink" title="设备互相访问原理"></a><a href="#%E8%AE%BE%E5%A4%87%E4%BA%92%E7%9B%B8%E8%AE%BF%E9%97%AE%E5%8E%9F%E7%90%86"></a>设备互相访问原理</h3><p>大多数情况下，我们的电脑只有一块网卡，典型的网络拓扑(即网络逻辑结构)中，我们通过将这块网卡连接到(通过有线或者无线)路由器(或者交换机，其上层仍然会经过路由，但是不必理会)来使得本机上网(此时这块网卡将可以获得一个IP地址)，如果此时有另一个设备也连接在这个路由器上(同样也会获得一个ip地址)，那么这两个设备通过使用对方的ip地址就可以相互访问。</p>
<h3 id="找-ip-地址的详细描述"><a href="#找-ip-地址的详细描述" class="headerlink" title="找 ip 地址的详细描述"></a><a href="#%E6%89%BE-ip-%E5%9C%B0%E5%9D%80%E7%9A%84%E8%AF%A6%E7%BB%86%E6%8F%8F%E8%BF%B0"></a>找 ip 地址的详细描述</h3><p>如果你只有一块网卡，那么在CMD(开始-&gt;运行-&gt;输入”cmd”-&gt;回车)中，输入 “ipconfig”，查看IPv4字样后面的xx.xx.xx.xx就是你的网卡ip了。<br>如果你有多块网卡(笔记本通常有一个有线网卡和一个无线网卡，安装过虚拟机软件也会造成系统多出一些虚拟网卡)，那么你会看到与你的网卡数量同样多的ipv4值，此时需要判断哪一个网卡(有线或者无线，物理或者虚拟)与你的设备与同一个路由器建立了物理连接。<br>可以采用排除法，如果是vmware的虚拟网卡，则网卡名字上会带有vmware字样，如果是virtualbox虚拟网卡，也会带有virtualbox字样。排除掉虚拟网卡之后，如果你的本机正在使用有线网卡，那么带有以太网或者ethernt 字样的ip可以被访问，如果你本机使用的是无线网卡，那么就到带有 wireless或者 无线适配器 字样的网卡信息里去找IP。</p>
<h3 id="最后你可能需要先关闭防火墙再进行测试。"><a href="#最后你可能需要先关闭防火墙再进行测试。" class="headerlink" title="最后你可能需要先关闭防火墙再进行测试。"></a><a href="#%E6%9C%80%E5%90%8E%E4%BD%A0%E5%8F%AF%E8%83%BD%E9%9C%80%E8%A6%81%E5%85%88%E5%85%B3%E9%97%AD%E9%98%B2%E7%81%AB%E5%A2%99%E5%86%8D%E8%BF%9B%E8%A1%8C%E6%B5%8B%E8%AF%95%E3%80%82"></a>最后你可能需要先关闭防火墙再进行测试。</h3><h2 id="修改-Magento-的-Base-URLs"><a href="#修改-Magento-的-Base-URLs" class="headerlink" title="修改 Magento 的 Base URLs"></a><a href="#%E4%BF%AE%E6%94%B9-magento-%E7%9A%84-base-urls"></a>修改 Magento 的 Base URLs</h2><p>登录Magento的后台，<strong>Stores</strong> &gt; <strong>Configuration</strong> &gt; <strong>General</strong> &gt; <strong>Web</strong>，展开<strong>Base URLs</strong>，我们可以看到现在 Base URL 是<code>http://localhost/</code>我们将他改为<code>http://192.168.0.107/</code>保存设置。</p>
<p>这时候本机依然可以通过<code>127.0.0.1</code>来访问站点，不过地址栏会跳转到<code>192.168.0.107</code></p>
<p>掏出手机，浏览器中输入<code>192.168.0.107</code>这时候会出现403 错误。这是因为上一篇中虚拟目录配置中设置的是<code>Require local</code><br>打开<code>D:\wamp64\bin\apache\apache2.4.17\conf\extra\httpd-vhosts.conf</code><br>我们将下面这一段修改一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">    ServerName localhost</span><br><span class="line">    DocumentRoot e:/www/hellomagento2</span><br><span class="line">    &lt;Directory  &quot;e:/www/hellomagento2&quot;&gt;</span><br><span class="line">        Options +Indexes +FollowSymLinks +MultiViews</span><br><span class="line">        AllowOverride All</span><br><span class="line">        Require local</span><br><span class="line">    &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>将<code>Require local</code>改成<code>Require all granted</code>，然后让wamp 重启所有服务。<br>掏出手机，浏览器中输入<code>192.168.0.107</code> 这次OK 了吧。</p>
]]></content>
      <categories>
        <category>Magento 2 入门</category>
      </categories>
      <tags>
        <tag>Wampserver</tag>
        <tag>局域网</tag>
      </tags>
  </entry>
  <entry>
    <title>中文 Web 安全字体</title>
    <url>/web-fonts-chinese/</url>
    <content><![CDATA[<p>上一篇 <a href="/web-fonts/">Web 字体</a> 讲了 css 的 font-family 规则以及西文的 Web 安全字体。这篇我们来讲中文安全字体。</p>
<h2 id="操作系统预装字体有哪些"><a href="#操作系统预装字体有哪些" class="headerlink" title="操作系统预装字体有哪些"></a><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%A2%84%E8%A3%85%E5%AD%97%E4%BD%93%E6%9C%89%E5%93%AA%E4%BA%9B"></a>操作系统预装字体有哪些</h2><p>首先我们需要知道操作系统的预装字体有哪些。</p>
<p>Windows</p>
<p>OS X</p>
<p>黑体：SimHei</p>
<p>冬青黑体: Hiragino Sans GB （SNOW LEOPARD 10.6 开始提供）</p>
<p>宋体：SimSun</p>
<p>华文细黑：STHeiti Light （又名STXihei）</p>
<p>新宋体：NSimSun</p>
<p>华文黑体：STHeiti</p>
<p>仿宋：FangSong</p>
<p>华文楷体：STKaiti</p>
<p>楷体：KaiTi</p>
<p>华文宋体：STSong</p>
<p>仿宋_GB2312：FangSong_GB2312</p>
<p>华文仿宋：STFangsong</p>
<p>楷体_GB2312：KaiTi_GB2312</p>
<p>微软雅黑：Microsoft YaHei （Windows 7开始提供）</p>
<p><em>注：在XP系统中，没有仿宋、楷体，只有仿宋_GB2312和楷体_GB2312这两种字体。但是到了Win7系统，却只有仿宋和楷体，没有了仿宋_GB2312和楷体_GB2312这两种字体。所以在XP系统下制作的公文在Win7系统中打开，全部转换成系统默认的微软雅黑字体。而在Win7系统下制作的公文在XP系统中打开，全部转换成系统默认的宋体。</em></p>
<h2 id="font-family-使用注意"><a href="#font-family-使用注意" class="headerlink" title="font-family 使用注意"></a><a href="#font-family-%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F"></a>font-family 使用注意</h2><p>使用 css font-family 需要注意以下几点：</p>
<ol>
<li><p>中文字体有英文名称的，建议把中英文名称都写上，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Tahoma, Helvetica, Arial, &quot;Microsoft Yahei&quot;,&quot;微软雅黑&quot;, STXihei, &quot;华文细黑&quot;, sans-serif;</span><br></pre></td></tr></table></figure>

<p>“Microsoft YaHei” 是 “微软雅黑” 的英文名</p>
</li>
<li><p>在声明中文字体前声明英文字体 原因是 font-family 会优先使用前面的字体，这样如果中文字体包含了英文字母，那么就会用中文字体库来渲染，这样往往不好看。</p>
</li>
<li><p>字体名如果由多个单词组成，那么需要使用引号</p>
</li>
</ol>
<h2 id="衬线体和无衬线体"><a href="#衬线体和无衬线体" class="headerlink" title="衬线体和无衬线体"></a><a href="#%E8%A1%AC%E7%BA%BF%E4%BD%93%E5%92%8C%E6%97%A0%E8%A1%AC%E7%BA%BF%E4%BD%93"></a>衬线体和无衬线体</h2><p>衬线体(Serif)是比划末端带有衬线的字体，衬线体装饰性强，易于辨认，常用于正文。 无衬线体当然就是不带衬线的字体，常用于标题，用于强调和突出。</p>
<h2 id="常见的中文字体"><a href="#常见的中文字体" class="headerlink" title="常见的中文字体"></a><a href="#%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%AD%E6%96%87%E5%AD%97%E4%BD%93"></a>常见的中文字体</h2><h3 id="宋体-SimSun"><a href="#宋体-SimSun" class="headerlink" title="宋体 (SimSun)"></a><a href="#%E5%AE%8B%E4%BD%93-(simsun)"></a>宋体 (SimSun)</h3><p><img src="/wp-content/uploads/2017/01/chinese-web-fonts-simsun.jpg"> 宋体是最常用的字体。很多人不喜欢宋体，就像很多设计师不喜欢 Arial 一样（windows 的错…）。 如果没有指定字体，windows 系统往往会选择宋体来渲染。 声明就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Arial, Helvetica, tahoma, verdana, SimSun,宋体,STXihei,华文细黑, sans-serif;</span><br></pre></td></tr></table></figure>

<h3 id="微软雅黑-Microsoft-YaHei"><a href="#微软雅黑-Microsoft-YaHei" class="headerlink" title="微软雅黑 (Microsoft YaHei)"></a><a href="#%E5%BE%AE%E8%BD%AF%E9%9B%85%E9%BB%91-(microsoft-yahei)"></a>微软雅黑 (Microsoft YaHei)</h3><p><img src="/wp-content/uploads/2017/01/chinese-web-fonts-Microsoft-yahei.jpg"> 微软雅黑应该说是 windows 平台上最主要的字体了。不过这个字体表现良好主要归功于 ClearType feature，但是 Windows XP 默认关闭了这个功能，所以在 XP 上看起来就惨不忍睹了。 <img src="/wp-content/uploads/2017/01/chinese-web-fonts-clear-type.jpg"> 当然 XP 并没有预装这种字体，可以给微软雅黑设置一个 fallback 宋体或者黑体。不过黑体比较粗，不适合用于字号较小的文字。 OS X 对应的字体是华文细黑 (STXihei) 声明就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Tahoma, Arial, Helvetica, &quot;Microsoft YaHei New&quot;, &quot;Microsoft Yahei&quot;, &quot;微软雅黑&quot;, 宋体, SimSun, STXihei, &quot;华文细黑&quot;, sans-serif;</span><br></pre></td></tr></table></figure>

<h3 id="仿宋-FangSong"><a href="#仿宋-FangSong" class="headerlink" title="仿宋 (FangSong)"></a><a href="#%E4%BB%BF%E5%AE%8B-(fangsong)"></a>仿宋 (FangSong)</h3><p>仿宋是一种更具装饰性的字体，是衬线体。只有 14 px 以上才比较好，不然太模糊了。(仿宋体是国家规定的机械制图标准字体。)</p>
<h3 id="楷体-KaiTi"><a href="#楷体-KaiTi" class="headerlink" title="楷体 (KaiTi)"></a><a href="#%E6%A5%B7%E4%BD%93-(kaiti)"></a>楷体 (KaiTi)</h3><p>楷体的装饰性也很强，字面比仿宋体还宽一点，笔画更清楚些，模仿手写体，但是也不宜用在 14 px 以下。</p>
<h3 id="冬青黑体简体中文-Hiragino-Sans-GB"><a href="#冬青黑体简体中文-Hiragino-Sans-GB" class="headerlink" title="冬青黑体简体中文 (Hiragino Sans GB)"></a><a href="#%E5%86%AC%E9%9D%92%E9%BB%91%E4%BD%93%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-(hiragino-sans-gb)"></a>冬青黑体简体中文 (Hiragino Sans GB)</h3><p>这是 OS X 系统的字体，从 10.6 开始提供，苹果系统使用了很长世间的华文黑体 STHeiti 。从 OS X 10.6 开始 STHeiti 被彻底修订了(combining 华文黑体STHeiti and 华文细黑STXihei)，重命名为(汉黑) HanHei SC ，并且作为系统的默认字体。但是，冬青黑被认为是最好的 web 中文字体，但冬青黑不是 Mac 系统的默认字体。</p>
<h3 id="兰亭黑-pro"><a href="#兰亭黑-pro" class="headerlink" title="兰亭黑 pro"></a><a href="#%E5%85%B0%E4%BA%AD%E9%BB%91-pro"></a>兰亭黑 pro</h3><p>兰亭黑 pro 是兰亭黑的改造版，很适合演示。不过不在安全字体的讨论范围内。因为系统是没有预装兰亭黑 pro 的</p>
<h2 id="字体的排位"><a href="#字体的排位" class="headerlink" title="字体的排位"></a><a href="#%E5%AD%97%E4%BD%93%E7%9A%84%E6%8E%92%E4%BD%8D"></a>字体的排位</h2><p>很多时候我们会将 Windows 的字体放在 OS X 系统之前，按照道理是没问题的，反正 OS X 系统里又没有 Windows 的字体。但是由于各种因素 (比如 Office for Mac 软件帮你安装了 Win 下常用的中文字体)，所以这个时候对 OS X 的用户来说，体验就不好了。相反，Windows 的用户较少安装 OS X 的字体，所以我们应该将针对 OS X 的字体放在 Win 的前面。</p>
<h2 id="不一定是最佳实践的-Tip"><a href="#不一定是最佳实践的-Tip" class="headerlink" title="不一定是最佳实践的 Tip"></a><a href="#%E4%B8%8D%E4%B8%80%E5%AE%9A%E6%98%AF%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E7%9A%84-tip"></a>不一定是最佳实践的 Tip</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Helvetica, Tahoma, Arial, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;,&quot;WenQuanYi Micro Hei&quot;, sans-serif;</span><br></pre></td></tr></table></figure>

<p>“WenQuanYi Micro Hei” 用于 Linux 用户。 其他的就让他自己 fallback 吧。 然后博主又去找了 Apple 网站的字体设置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: &#x27;HanHei SC&#x27;, &#x27;PingFang SC&#x27;, &#x27;Helvetica Neue&#x27;, &#x27;Helvetica&#x27;, &#x27;STHeitiSC-Light&#x27;, &#x27;Arial&#x27;, sans-serif;</span><br></pre></td></tr></table></figure>

<p>看起来没有考虑 Windows 用户呢 … 就让系统自己选吧 然后是微软商城的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: &quot;SegoeUI&quot;, &quot;Microsoft YaHei&quot;, &quot;Hiragino Sans GB&quot;;</span><br></pre></td></tr></table></figure>

<p>好像位置不正确呢？… 也许可以参考小米、简书的。</p>
<h2 id="常见字体效果比较"><a href="#常见字体效果比较" class="headerlink" title="常见字体效果比较"></a><a href="#%E5%B8%B8%E8%A7%81%E5%AD%97%E4%BD%93%E6%95%88%E6%9E%9C%E6%AF%94%E8%BE%83"></a>常见字体效果比较</h2><p>windows 平台，安装了冬青黑体简体中文和汉黑，<a href="https://pan.baidu.com/s/1skJVqiD#list/path=%2Fwww.hellomagento2.com%2F%E5%AD%97%E4%BD%93">下载地址</a> 下图是 chrome 下的效果 <img src="/wp-content/uploads/2017/01/web-fonts-chineses-compare.png"> chrome 上没有指定字体使用的是宋体，但是博主在 firefox 上测试发现未指定字体使用的是微软雅黑，而且浏览器中可以设置字体。 最后附上这段效果的 html 代码，有兴趣的可以自行测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html lang=&quot;zh&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        margin-top: 50px;</span><br><span class="line">        background-color: #efe1d6;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">    &#125;</span><br><span class="line">      .songti &#123;</span><br><span class="line">        font-family: &#x27;SimSun&#x27;,宋体;</span><br><span class="line">      &#125;</span><br><span class="line">      .fsong &#123;</span><br><span class="line">        font-family: &#x27;FangSong&#x27;,仿宋;</span><br><span class="line">      &#125;</span><br><span class="line">      .kai &#123;</span><br><span class="line">        font-family: &#x27;KaiTi&#x27;,楷体;</span><br><span class="line">      &#125;</span><br><span class="line">      .yh &#123;</span><br><span class="line">        font-family: &#x27;Microsoft YaHei&#x27;,微软雅黑;</span><br><span class="line">      &#125;</span><br><span class="line">      .dqh &#123;</span><br><span class="line">        font-family: &#x27;Hiragino Sans GB&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">      .hh &#123;</span><br><span class="line">        font-family: &#x27;HanHeiSC&#x27;;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;p&gt;没有没有指定字体这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;songti&quot;&gt;宋体宋体宋体宋体这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;fsong&quot;&gt;仿宋体仿宋体仿宋这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;kai&quot;&gt;楷体楷体楷体楷体这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;yh&quot;&gt;微软雅黑微软雅黑这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;dqh&quot;&gt;冬青黑体简体中文这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;hh&quot;&gt;汉黑汉黑汉黑汉黑这里是可以比较的文本内容&lt;/p&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a><a href="#%E5%8F%82%E8%80%83%E5%9C%B0%E5%9D%80"></a>参考地址</h2><p><a href="http://www.kendraschaefer.com/2012/06/chinese-standard-web-fonts-the-ultimate-guide-to-css-font-family-declarations-for-web-design-in-simplified-chinese/">Chinese Standard Web Fonts: A Guide to CSS Font Family Declarations for Web Design in Simplified Chinese</a> <a href="http://daoinsights.com/chinese-web-fonts-part-1/">Chinese Web Fonts – Part 1</a> <a href="https://ruby-china.org/topics/14005">Web 中文字体应用指南</a> <a href="http://www.imooc.com/article/11261">如何优雅的选择默认字体(font-family)</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Web 字体</title>
    <url>/web-fonts/</url>
    <content><![CDATA[<h2 id="Web-安全字体"><a href="#Web-安全字体" class="headerlink" title="Web 安全字体"></a><a href="#web-%E5%AE%89%E5%85%A8%E5%AD%97%E4%BD%93"></a>Web 安全字体</h2><p>默认情形下，浏览器是以系统中已经安装的字体来进行渲染的。</p>
<p>css 的 font-family 命令，指定了网页元素所使用的字体。下面是一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Georgia, &quot;Times New Roman&quot;,</span><br><span class="line">             &quot;Microsoft YaHei&quot;, &quot;微软雅黑&quot;,</span><br><span class="line">             STXihei, &quot;华文细黑&quot;,</span><br><span class="line">             serif;</span><br></pre></td></tr></table></figure>

<p>它的规则有三条：</p>
<ol>
<li>优先使用排在前面的字体。</li>
<li>如果找不到该种字体，或者该种字体不包括所要渲染的文字，则使用下一种字体。</li>
<li>如果所列出的字体，都无法满足需要，则让操作系统自行决定使用哪种字体。</li>
</ol>
<p>但是世界上有那么多的系统，那么多版本，预装的字体也大不相同，如果让操作系统自行决定，可能结果不是很好看。所以，人们对主流个人计算机操作系统中的系统字体做了统计，选出最小公分母，也就是大家都有的字体，称之为 Web 安全字体。</p>
<p>要了解 Web 安全字体，可以参阅 <a href="http://www.w3schools.com/cssref/css_websafe_fonts.asp">CSS Web Safe Font Combinations</a></p>
<p>下面举一个例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: Arial, Helvetica, sans-serif;</span><br></pre></td></tr></table></figure>

<p>我们选择 Arial 作为首选字体（注：Arial 字体是最常用的 sans serif 字体，也是 Windows 的默认字体，当字体很小是不容易阅读），但是，苹果系统中没有这个字体，所以我们选择 Helvetica（和 Arial 很相似）作为第二备选字体，最后我们选择 sans-serif 作为第三备选字体，如果在一个既没有 Arial 也没有 Helvetica 的系统里，那么浏览器会使用默认的 sans-serif 字体来渲染文字。这样，我们很大程度上保证了使用不同操作系统的访问者都能看到相同（至少是类似）的页面文字。</p>
<p>除了 Arial，常见的安全字体还有：</p>
<ul>
<li>Verdana 字体，它是微软公司的核心字体之一，专门为屏幕显示而开发的。它的应用广泛，宽度大而易于阅读，是显示器中最清晰的字体。CSS 写法：<code>font-family: Verdana, Geneva, sans-serif;</code></li>
<li>Times New Roman 字体，它是最常用的 serif 字体，是浏览器默认的字体。小号字的易读性也很差。CSS 写法：<code>font-family: &#39;Times New Roman&#39;, Times, serif;</code></li>
</ul>
<p>以上说的这些其实是西文字体，对于中文字体，当然涉及到各类系统中中文字体的安装情况的一个统计，博主会另写一篇。</p>
<p>安全字体显然是不够用的，所以也出现了一些通过图像，Adobe Flash或其他基于非文本的技术的解决办法。这里不做展开，但是这种方式的缺点很明显，就是它不是文本，不可以选择、这样就不能很好地被识别，翻译，供残疾人使用的设备访问。所以这种技术越来越被淘汰了。</p>
<h2 id="font-face"><a href="#font-face" class="headerlink" title="@font-face"></a><a href="#@font-face"></a>@font-face</h2><p>他是 CSS3 的一项新特性，也不是什么新鲜技术，它最早出现在 CSS2 的规范定义中，但在 CSS2.1 中又被删除，现在正式列入 CSS3。目前主流的浏览器（IE 4+&#x2F;Firefox 3.5+&#x2F;Chrome 1+&#x2F;Safari 3.1+&#x2F;Opera 10+）都能够支持这个属性，所以不用担心会有浏览器兼容性问题。</p>
<p>@font-face 允许您在网页中使用电脑中没有安装的字体，完全摆脱安全字体的限制。只需将字体包安装在服务器上，当用户加载网页时，字体包会自动下载到用户机器上，保证字体能够正确渲染。</p>
<p>随着 @font-face 的不断流行，产生了许多新的字体格式图标集，称为网络字体。Google Fonts API 就是基于@font-face 的特性开发的一套优秀的网络字体库。</p>
<p>网络字体的优点有很多：</p>
<ul>
<li>使用的是真正的文本，而不是图片，放大和缩小都不会影响渲染效果，用户体验好；</li>
<li>可以被搜索引擎辨认；</li>
<li>不像图片每次需要重新生成，添加删除更方便。</li>
</ul>
<p>这里先讲原理，首先，使用<code>@font-face</code>声明一个字体集，使用<code>font-family</code>描述符为它提供一个名称，然后使用<code>src</code>指向包含字体本身的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;Awesome Font&#x27;;</span><br><span class="line">  src: url(&#x27;awesome-font.ttf&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，通过链接到一个名为 <code>wesome-font.ttf</code> 的字体文件，定义了一个名为Awesome Font 的字体集。</p>
<p>然后，在您的CSS中，使用 <code>font-family</code> 属性将该字体应用到一个 HTML 元素：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">h1 &#123;</span><br><span class="line">  font-family: &#x27;Awesome Font&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，Web 字体具有许多不同的格式，并且各种 Web 浏览器支持这些格式的不同子集。</p>
<p><img src="/wp-content/uploads/2016/11/web-fonts.jpg"></p>
<p>也就是说，为了支持所有的主流 Web 浏览器，一个 <code>@font-face</code> CSS 声明实际上无法像前面提到的那样那么简单：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;Awesome Font&#x27;;</span><br><span class="line">  src: url(&#x27;awesome-font.ttf&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它应该是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;Awesome Font&#x27;;</span><br><span class="line">  src: url(&#x27;awesome-font.eot&#x27;); /* IE9 Compat Modes */</span><br><span class="line">  src: url(&#x27;awesome-font.eot?#iefix&#x27;) format(&#x27;embedded-opentype&#x27;), /* IE6-IE8 */</span><br><span class="line">       url(&#x27;awesome-font.woff&#x27;) format(&#x27;woff&#x27;), /* Modern Browsers */</span><br><span class="line">       url(&#x27;awesome-font.ttf&#x27;)  format(&#x27;truetype&#x27;), /* Safari, Android, iOS */</span><br><span class="line">       url(&#x27;awesome-font.svg#svgFontName&#x27;) format(&#x27;svg&#x27;); /* Legacy iOS */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>总结起来要点就是：</p>
<ul>
<li>将 WOFF 2.0 变体提供给支持它的浏览器</li>
<li>将 WOFF 变体提供给大多数浏览器</li>
<li>将 TTF 变体提供给旧 Android（4.4 版以下）浏览器</li>
<li>将 EOT 变体提供给旧 IE（IE9 之下）浏览器</li>
</ul>
<p>从技术上讲，还有 SVG 字体容器，但 IE 和 Firefox 从不支持它，并且现在 Chrome 也不再支持它。因此，其用途就很有限。</p>
<p>看到这里，感觉脑袋都要炸了。Google Fonts 提供了便利。Google Fonts 会根据浏览器的类型，来加载不同的 CSS 以加载不同格式的字体。</p>
<h2 id="如何使用-Google-Fonts"><a href="#如何使用-Google-Fonts" class="headerlink" title="如何使用 Google Fonts"></a><a href="#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-google-fonts"></a>如何使用 Google Fonts</h2><ol>
<li><p>标准方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">link rel=&#x27;stylesheet&#x27; type=&#x27;text/css&#x27; href=&#x27;http://fonts.googleapis.com/css?family=Condiment&#x27;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>@import</code> 方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@import url(http://fonts.googleapis.com/css?family=Condiment);</span><br></pre></td></tr></table></figure>
</li>
<li><p>JavaScript 方式（代码省略）</p>
</li>
</ol>
<h2 id="国内环境使用-Google-Fonts"><a href="#国内环境使用-Google-Fonts" class="headerlink" title="国内环境使用 Google Fonts"></a><a href="#%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E4%BD%BF%E7%94%A8-google-fonts"></a>国内环境使用 Google Fonts</h2><p>有知乎大神，通过 Best Trace 追踪路由器，发现 Google 字体库的国内服务器在北京和上海，另外通过站长工具 ping 测试<code>http://fonts.googleapis.com</code>，速度是杠杆的。<a href="https://www.zhihu.com/question/24955477">参考地址</a>。</p>
<p>博主在本地也测试了引用 google fonts 的某个字体，速度是 74ms。所以看起来本阶段可以直接用 Google Fonts 了。之前的观念可以改改了。。</p>
<p>如果速度依然有问题，可以参考参考文档的最后一条，结合前面的原理，应该是很好理解的。</p>
<h2 id="字体图标原理"><a href="#字体图标原理" class="headerlink" title="字体图标原理"></a><a href="#%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E5%8E%9F%E7%90%86"></a>字体图标原理</h2><p><code>@font-face</code>引入一个字体集，这个字体集对应着字符的显示信息，那么浏览器读取到 <code>A</code> 的时候，就会使用 <code>A</code> 对应的 Unicode 编码去查找字体集中对应的显示描述信息。</p>
<p>字体图标只是让某些 unicode 码（可以自己创建）对应我们自定义的字体库，而我们的字体库文件中有关于该 unicode 码的显示描述信息而已。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">font-family: &#x27;Glyphicons Halflings&#x27;;</span><br><span class="line">content: &quot;\e131&quot;;</span><br><span class="line">padding-right: 8px;</span><br><span class="line">color: #b1b1b1;</span><br><span class="line">float: left;</span><br></pre></td></tr></table></figure>

<p>这里 unicode 码就是 <code>\e131</code>。查看网站的加载信息，可以发现我们引用了 Glyphicons Halflings 字体。他的格式和字体的格式也是相同的。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="http://www.adobe.com/cn/devnet/html5/articles/web-typography-and-css-font-face.html">Web版式和@font-face简介</a><br><a href="https://www.ibm.com/developerworks/cn/web/1505_zhangyan_googlefont/#icomments">使用 Google Fonts 为网页添加美观字体</a><br><a href="https://developers.google.com/fonts/docs/technical_considerations">Google Fonts Technical Considerations</a><br><a href="https://uhy.github.io/2014/06/22/google-fonts-api/">如何优雅的使用Google Fonts API</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>网站(Websites), 店铺(Stores) 和 视图(Views)</title>
    <url>/websites-stores-views/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/stores/websites-stores-views.html">原文网址</a></em></p>
<p>Magento 可以包括归一个 Admin 管理的多个网站，多个店铺，以及不同语言的视图。</p>
<h2 id="网站-Websites"><a href="#网站-Websites" class="headerlink" title="网站(Websites)"></a><a href="#%5B%E7%BD%91%E7%AB%99(websites)%5D()"></a>网站(Websites)</h2><p>Magento 2 安装后初始只有一个网站叫“主站”(Main Website)，您可以设置多个网站，每个网站拥有自己的域名。</p>
<h2 id="店铺-Stores"><a href="#店铺-Stores" class="headerlink" title="店铺(Stores)"></a><a href="#%5B%E5%BA%97%E9%93%BA(stores)%5D()"></a>店铺(Stores)</h2><p>一个网站可以有多个店铺，每个店铺分别有自己的主菜单(main menu)。每个店铺可以有不同的商品和店面外观，不过都由同一个管理员管理。</p>
<h2 id="视图-Views"><a href="#视图-Views" class="headerlink" title="视图(Views)"></a><a href="#%5B%E8%A7%86%E5%9B%BE(views)%5D()"></a>视图(Views)</h2><p>通常视图用来让一个店铺在不同的语言下展示。客户可以通过前台头部的语言选择器来选择不同的视图</p>
<h2 id="相关的文章列表"><a href="#相关的文章列表" class="headerlink" title="相关的文章列表"></a><a href="#%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%87%E7%AB%A0%E5%88%97%E8%A1%A8"></a>相关的文章列表</h2><ul>
<li><a href="/configuration-scope/">配置范围</a></li>
<li><a href="/store-mode-single/">单店模式</a></li>
</ul>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>体积重量(Dimensional Weight)</title>
    <url>/weight-dimensional/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/shipping/weight-dimensional.html">原文地址</a></em></p>
<p>体积重量指的是按照重量和体积计算运输费用，也是很常见的计算方法。特别是包裹比较轻但是比较占空间。</p>
<p>主流的物流公司现在都会采用按体积重量计算运费的。不过，体积重量的计算方法，物流公司之间不统一。因公司而异。</p>
<ul>
<li>DHL</li>
<li>FedEx</li>
<li>UPS</li>
<li>USPS</li>
</ul>
<p>我们建议您熟悉每家物流公司体积重量的算法。如果贵公司发货挺多的，那么算法的一个小小差别一年就可能差几千美元。Magento 本身的配置不包含对体积重量计算方式的支持。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>欢迎信息</title>
    <url>/welcome-message/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/design/welcome-message.html">原文地址</a></em></p>
<p>头部的欢迎信息扩展到包含登录客户的名称。在店铺开张前，请务必修改每个店铺视图的默认欢迎信息。</p>
<p><img src="/wp-content/uploads/2016/08/storefront-welcome-message_thumb_0_0.png"></p>
<h2 id="修改欢迎信息"><a href="#修改欢迎信息" class="headerlink" title="修改欢迎信息"></a><a href="#%E4%BF%AE%E6%94%B9%E6%AC%A2%E8%BF%8E%E4%BF%A1%E6%81%AF"></a>修改欢迎信息</h2><ol>
<li><p>后台侧边栏，点击<strong>内容</strong>(Content) &gt; <strong>设计</strong>(Design) &gt; <strong>配置</strong> (Configuration)</p>
</li>
<li><p>在表格中找到您要修改的 Store view ，在 Action 列，点击编辑(Edit)，做如下操作：<br><img src="/wp-content/uploads/2016/08/design-configuration_thumb_0_0.png" alt="Design Configuration"><br>a. 在<strong>其他设置</strong>(Other Setttings)下展开<strong>头部</strong>(Header)部分<br>b. 输入<strong>欢迎文本</strong>(Welcome Text)</p>
<p><img src="/wp-content/uploads/2016/08/design-configuration-header_thumb_0_0.png"></p>
</li>
<li><p>完成后点击，保存设置(Save Configuration)</p>
</li>
<li><p>提示您刷新缓存时，您就点击消息中的 <strong>缓存管理</strong>(Cache Management )链接。根据提示刷新缓存。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2.0 性能优化配置建议及 benchmark 测试结果(官方白皮书翻译)</title>
    <url>/white-paper-magento-2-0-performance-and-scalability/</url>
    <content><![CDATA[<p><em>这是 Magento 官方的白皮书，不代表博主个人观点。翻译也是劳动，谢绝转载！</em></p>
<p><a href="/wp-content/uploads/2016/12/White-Paper-Magento-2.0-Performance-and-Scalability-03.31.16.pdf">原文下载</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><a href="#%E4%BB%8B%E7%BB%8D"></a>介绍</h2><p>Magento 2.0 是为下一代电子商务而设计的 —— 让他比以往更快速、更容易、更低成本地创建完美适应您的业务需求的购物体验。</p>
<p>（一大段的介绍非常安利，博主估计，翻译出来也没有多少人会看，所以就概括一下了，有兴趣的请参阅原文。）</p>
<p>Magento 2 希望比以往更快速，更容易，更低成本，这一切都建立在 Magento 2 在流行的框架上搭建了一个更现代的架构。（也就是说 Magento 2 团队相信用更先进的技术来实现更快的速度，更低的成本，让他更容易。）他的模块化设计是自定义和灵活性的关键；内置的自动测试框架可以加快开发的速度；他的 API 可以很方便地与第三方系统集成；简化的结账流程以及响应式的设计；重新设计的后台控制面板提高管理效率；系统更容易升级；</p>
<p>Magento 2.0 ：</p>
<ul>
<li>相同的硬件可以每小时可以处理更多订单</li>
<li>目录浏览可以立马响应</li>
<li>购物车和结账响应时间下降了两位数</li>
<li>更好地处理高峰时的订单，超大的目录和庞大的客户名单</li>
<li>后台支持更多管理用户同时操作</li>
</ul>
<p>该白皮书深入探讨了 Magento 2.0 的性能和可扩展性，可以帮助您了解该平台将如何支持您业务的长期发展。本书同时提供了 Magento 2.0 站点优化的配置建议以及基准测试结果。</p>
<h2 id="建议使用的-Magento-配置"><a href="#建议使用的-Magento-配置" class="headerlink" title="建议使用的 Magento 配置"></a><a href="#%E5%BB%BA%E8%AE%AE%E4%BD%BF%E7%94%A8%E7%9A%84-magento-%E9%85%8D%E7%BD%AE"></a>建议使用的 Magento 配置</h2><p>Magneto 为不同的使用情形提供了相当多的部署和配置选项。要充分发挥 Magento 本身的性能和超强的扩展性优势，需要正确设置好 Magento 。此外，关于环境配置的建议，不在本篇范围之内。</p>
<p><em>重要说明：文中涉及到的测试都是基于建议和支持的配置。配置的偏差可能导致不同的测试结果，不能准确反映出产品设计和构建的自然情况</em></p>
<h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a><a href="#%E6%A0%B8%E5%BF%83%E9%85%8D%E7%BD%AE"></a>核心配置</h3><p>Magento 2.0 为使用 PHP7 和 Varnish 而优化，虽然也可以在 PHP5.6 和没有 Varnish 的情况下运行，不过不建议这样用。建议同时使用 PHP7 和 Varnish 来支持站点的业务处理，获得最佳的性能。</p>
<h3 id="静态资源设置"><a href="#静态资源设置" class="headerlink" title="静态资源设置"></a><a href="#%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E8%AE%BE%E7%BD%AE"></a>静态资源设置</h3><p>静态资源的设置决定着 CSS,JavaScript,HTML 和图像等资源，如何准备好供站点使用。</p>
<ul>
<li>Stores -&gt; Configuration -&gt; Advanced -&gt; Developer:<ul>
<li>Grid Settings: Asynchronous indexing: Enable<ul>
<li>CSS Settings: Minify CSS Files: Yes</li>
</ul>
</li>
<li>JS Settings: Minify JS Files: Yes</li>
<li>Merge JavaScript Files: No</li>
<li>Template Settings: Minify HTML: Yes</li>
<li>JavaScript Settings: Enable JavaScript Bundling: Yes</li>
</ul>
</li>
</ul>
<h3 id="页面缓存"><a href="#页面缓存" class="headerlink" title="页面缓存"></a><a href="#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98"></a>页面缓存</h3><p>页面缓存设置决定着使用页面缓存的哪个文件版本，为了获得最佳性能，强烈建议开启 Varnish 的缓存。注意，这需要部署和配置 Varnish</p>
<ul>
<li>Stores -&gt; Configuration -&gt; Advanced -&gt; System -&gt; Full page cache<ul>
<li>Caching Application-&gt;Varnish Caching</li>
</ul>
</li>
</ul>
<h3 id="Email-设置"><a href="#Email-设置" class="headerlink" title="Email 设置"></a><a href="#email-%E8%AE%BE%E7%BD%AE"></a>Email 设置</h3><p>Email 设置控制着邮件何时发送，它和邮件何时生成相关。</p>
<ul>
<li>Stores-&gt;Configuration-&gt;Sales-&gt;Sales Emails:<ul>
<li>General settings: Asynchronous sending: Enable</li>
</ul>
</li>
</ul>
<h3 id="索引设置"><a href="#索引设置" class="headerlink" title="索引设置"></a><a href="#%E7%B4%A2%E5%BC%95%E8%AE%BE%E7%BD%AE"></a>索引设置</h3><ul>
<li>System-&gt;Index Management:<ul>
<li>All indexers should be in “Update on schedule” mode</li>
</ul>
</li>
</ul>
<h3 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a><a href="#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98"></a>应用缓存</h3><ul>
<li>Configure the platform to use Redis in env.php<ul>
<li>Requires deployment and configuration of Redis</li>
</ul>
</li>
</ul>
<h3 id="Production-Mode-（生产模式）"><a href="#Production-Mode-（生产模式）" class="headerlink" title="Production Mode （生产模式）"></a><a href="#production-mode-%EF%BC%88%E7%94%9F%E4%BA%A7%E6%A8%A1%E5%BC%8F%EF%BC%89"></a>Production Mode （生产模式）</h3><p>可以通过如下命令，启用生产模式：<br><code>php bin/magento deploy:mode:set production</code></p>
<p>如果要让开发者控制其中的过程，可以拆成几个步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento setup:di:compile</span><br><span class="line">php bin/magento setup:static-content:deploy</span><br><span class="line">set MODE production manually in web server config</span><br></pre></td></tr></table></figure>

<h2 id="分层架构"><a href="#分层架构" class="headerlink" title="分层架构"></a><a href="#%E5%88%86%E5%B1%82%E6%9E%B6%E6%9E%84"></a>分层架构</h2><p>Magento 2.0 平台是分层的架构，公有四层，分别为性能和可扩展性进行了优化。他们是：the client, the page cache, the application, and the database tiers</p>
<p>此种标准的 web 应用结构，允许架构的不同组件独立地扩展，以应对不同的业务需求和不同的负载情况。</p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-layered-architecture.png"></p>
<p>接下来的章节将描述 Magento 2.0 对每层做的性能和扩展性的改进</p>
<h2 id="性能和扩展性的改进"><a href="#性能和扩展性的改进" class="headerlink" title="性能和扩展性的改进"></a><a href="#%E6%80%A7%E8%83%BD%E5%92%8C%E6%89%A9%E5%B1%95%E6%80%A7%E7%9A%84%E6%94%B9%E8%BF%9B"></a>性能和扩展性的改进</h2><p>Magento 2.0 改进了应用如何与浏览器进行交互，以及减少了服务器必须传输给浏览器进行渲染的数据量。这些改进可以显著地提高页面响应时间和加载时间，给建立更快的站点提供一个良好的起点。</p>
<h3 id="客户端的改进"><a href="#客户端的改进" class="headerlink" title="客户端的改进"></a><a href="#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E6%94%B9%E8%BF%9B"></a>客户端的改进</h3><p>页面加载时间很重要，Magneto 通过减少页面渲染必须的数据量来降低加载时间。主要有以下方式：</p>
<ul>
<li>使用了压缩 （即删掉不必要的字符）。使用了 jShrink 和 cssmin，以及针对 HTML 的内部开发的压缩引擎。图片使用 PHP 的 gd2 库进行压缩。</li>
<li>最大限度利用浏览器缓存。初次访问会缓存所有 Js 和 css，这样可以减少下个页面的请求。</li>
<li>在结账和购物车操作中使用异步操作。</li>
</ul>
<h3 id="页面缓存-1"><a href="#页面缓存-1" class="headerlink" title="页面缓存"></a><a href="#%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98"></a>页面缓存</h3><p>通过 Varnish page caching 来提供更快的服务器响应。<br>（原文内容比较多，还提到了Edge Side Includes，博主的水平有限，还是不翻译为妙，需要研究的请参阅原文）</p>
<h3 id="应用层的增强"><a href="#应用层的增强" class="headerlink" title="应用层的增强"></a><a href="#%E5%BA%94%E7%94%A8%E5%B1%82%E7%9A%84%E5%A2%9E%E5%BC%BA"></a>应用层的增强</h3><p>Magento 2.0 架构设计旨在满足大型的、发展中的企业的扩展性和稳定性需求。下面的改进旨在消除后端业务操作过程中的阻塞或表锁定。</p>
<ul>
<li>异步的订单和产品更新<br>大企业订单产品都很多，通常同时有很多管理用户同时作业。Magento 2.0 引入了可选的订单和产品异步更新，这样可以消除表锁定和阻塞，提高效率。</li>
<li>工作队列机制<br>看起来这是 EE 版本特有的功能。有兴趣的请参阅原文。</li>
<li>PHP Interpreters<br>PHP7 采用了新的解释器，提高了性能，所以 Magento 2 建议使用 PHP7</li>
</ul>
<h3 id="数据库提升"><a href="#数据库提升" class="headerlink" title="数据库提升"></a><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E5%8D%87"></a>数据库提升</h3><ul>
<li>多个主数据库，每个主数据库可以拥有多个从数据库</li>
</ul>
<p><img src="/wp-content/uploads/2016/12/magento-database-tier-with-multiple-master-db.png"></p>
<ul>
<li>MySQL Cluster Support</li>
</ul>
<h3 id="性能测试工具-（Performance-Toolkit）"><a href="#性能测试工具-（Performance-Toolkit）" class="headerlink" title="性能测试工具 （Performance Toolkit）"></a><a href="#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7-%EF%BC%88performance-toolkit%EF%BC%89"></a>性能测试工具 （Performance Toolkit）</h3><p>The Magento Performance Toolkit is a script and a set of JMeter tests that allow for consistent and<br>repeatable performance testing for Magento applications. The script allows the generation of four distinct<br>customer profiles that are intended to represent diﬀerent eCommerce business sizes. The data from the<br>script populates a Magento instance. The Performance Toolkit is bundled with the Magento distribution<br>(in the setup&#x2F;performance-toolkit directory).</p>
<h2 id="性能测试结果"><a href="#性能测试结果" class="headerlink" title="性能测试结果"></a><a href="#%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C"></a>性能测试结果</h2><p>为了表现，Magento 2.0 灵活架构带来的性能提升，我们对 Magento EE 2.0 和 Magneto EE 1.14.2 基于建议的设置进行了 benchmark （基准）测试。<strong>这些测试表明 Magneto 2.0 (Varnish+PHP7.0)可以为小型和大型商业部署都提供更高的吞吐量（每小时订单数）和更快的响应时间</strong></p>
<h3 id="测试配置"><a href="#测试配置" class="headerlink" title="测试配置"></a><a href="#%E6%B5%8B%E8%AF%95%E9%85%8D%E7%BD%AE"></a>测试配置</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a><a href="#%E8%BD%AF%E4%BB%B6"></a>软件</h4><p>我们给下面的软件都使用了推荐设置和本身自带的支持设置（比如 Varnish 就是 Magento 2.0 自带支持的）</p>
<ul>
<li>Magento Enterprise Edition 2.0 with PHP7 and Varnish caching</li>
<li>Magento Enterprise Edition 1.14.2 with PHP5.6 and Full-Page Caching</li>
</ul>
<p>其他测试是无效的，因为他们不能提供推荐的或是支持的设置数据。附录中可查看软件的其他的额外细节说明。</p>
<h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a><a href="#%E6%96%B9%E6%A1%88"></a>方案</h4><p>研究了如下两种情况：</p>
<ul>
<li><strong>小型</strong> $100万-$500万 在线销售额，部署在一台的4核 web 服务器上和一台单独的数据库节点上。使用了 25 个同时的 JMeter 线程（模拟25个并发请求）来测试某个时间段的峰值流量。(with $1-$5M in online sales deployed on a single 4-core web node and a single database node. 25 simultaneous JMeter threads (representing 25 concurrent requests) were used to show site performance during a period of peak traffic, such as a sale)</li>
<li><strong>大型</strong> $5千万-$1亿 在线销售额，部署在5台4核的 web 节点和一太单独的数据库节点上。使用了 25-100 个 JMeter 线程（模拟25到100个并发请求）来测试不断增加负载的情况下的性能。(with $50-$100M in online sales deployed on five 4-core web nodes and a single database node. 25 to 100 simultaneous JMeter threads (representing 25 to 100 concurrent requests) were used to show site performance under increasing traffic loads.)</li>
</ul>
<p>附录部分有交代测试的配置情况。博主觉得这个信息很重要，所以把他搬到这里来。</p>
<p>小型的 Small Merchant Deployment (4 web node cores)</p>
<ul>
<li>Software<ul>
<li>PhP 5.6.13 with Zend Opcache v7.0.6-dev (for Magento Enterprise Edition 1.14.2)</li>
<li>PhP 7.0.3-1 with Opcache (for Magento Enterprise Edition 2.0)</li>
<li>Nginx 1.6.2</li>
<li>MySQL 5.6.28</li>
<li>Varnish 4.0.2 (for Magento Enterprise Edition 2.0)</li>
<li>Redis 3.0.5</li>
<li>CentOS 6.4, CentOS 7.0 and Debian (on core 3.16.7)</li>
</ul>
</li>
<li>1 Web Node<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
<li>Running Software</li>
<li>Nginx</li>
<li>Varnish (for Magento Enterprise Edition 2.0)</li>
<li>php-fpm</li>
</ul>
</li>
<li>1 Database Node<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
<li>Running Software</li>
<li>MySQL</li>
<li>Redis (FPC Cache for Magento Enterprise Edition 1.14.2, Session Storage)</li>
</ul>
</li>
<li>1 JMeter node (to drive the tests)<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
</ul>
</li>
<li>All performance tests leverage real cores. Virtual can bring unexpectedly high deviation</li>
</ul>
<p>大型的 Larger Merchant Deployment (20 web node cores)</p>
<ul>
<li>Software<ul>
<li>PhP 5.6.13 with Zend Opcache v7.0.6-dev (for Magento Enterprise Edition 1.14.2)</li>
<li>PhP 7.0.3-1 with Opcache (for Magento Enterprise Edition 2.0)</li>
<li>Nginx 1.6.2</li>
<li>MySQL 5.6.28</li>
<li>Varnish 4.0.2 (for Magento Enterprise Edition 2.0)</li>
<li>Redis 3.0.5</li>
<li>Memcache 1.4.21</li>
<li>CentOS 6.4, CentOS 7.0 and Debian (on core 3.16.7)</li>
</ul>
</li>
<li>5 Web Nodes<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
<li>Running Software<ul>
<li>Web Node #1:<ul>
<li>Nginx</li>
<li>Varnish (for Magento Enterprise Edition 2.0)</li>
<li>php-fpm</li>
</ul>
</li>
<li>Web Node #2 – #5:<ul>
<li>php-fpm</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>1 Database Node<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
<li>Running Software<ul>
<li>MySQL</li>
<li>Redis (Session Storage, FPC storage for Magento Enterprise Edition 1.14.2)</li>
</ul>
</li>
</ul>
</li>
<li>JMeter node (to drive the tests)<ul>
<li>4 CPUs Core i7 with hyper threading</li>
<li>8GB of memory</li>
<li>500 GB 7200 RPM SSHD and RAID 1, 5, or 10 disks</li>
</ul>
</li>
<li>All performance tests leverage real cores. Virtual can bring unexpectedly high deviation.</li>
</ul>
<p>两种情况都假设商店是如下情况：</p>
<p>Websites &#x2F;Store Views</p>
<p>SKUs (Simple&#x2F;Configurable)</p>
<p>Categories &#x2F;Nesting</p>
<p>Catalog &#x2F; Cart Rules</p>
<p>Customers (in Database)</p>
<p>Orders(in Database)</p>
<p>2 &#x2F; 2</p>
<p>16,000 &#x2F; 1,000</p>
<p>300 &#x2F; 3</p>
<p>20 &#x2F; 20</p>
<p>200</p>
<p>1600</p>
<p>请查看附录了解更多详情</p>
<h4 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a><a href="#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95"></a>测试方法</h4><p>测试模拟了典型的电子商务网站使用场景，例如：</p>
<ul>
<li>目录浏览，包括访问首页，目录页，可配置产品详细页面和简单产品详细页面</li>
<li>将简单商品和可配置商品都加入购物车</li>
<li>以访客身份或已注册用户身份完成结账的所有步骤</li>
</ul>
<p>我们假设了如下的用户会话的流量模式：</p>
<ul>
<li>62% 只浏览</li>
<li>30% 浏览并将产品添加到购物车，但没有结账</li>
<li>4% 以访客身份结账</li>
<li>4% 以注册用户身份结账</li>
</ul>
<p>所有的测试使用的 Magento Performance Toolkit，JMeter 用来测量和报告服务器响应时间（以毫秒为单位）</p>
<h3 id="Small-Merchant-Deployment-（小型部署）"><a href="#Small-Merchant-Deployment-（小型部署）" class="headerlink" title="Small Merchant Deployment （小型部署）"></a><a href="#small-merchant-deployment-%EF%BC%88%E5%B0%8F%E5%9E%8B%E9%83%A8%E7%BD%B2%EF%BC%89"></a>Small Merchant Deployment （小型部署）</h3><p>小型部署的测试表明，Magento EE 2.0 在处理25个并发时可以成功应对。Magento EE 2.0 表现比 Magento EE 1.14.2 好。</p>
<ul>
<li>Magento EE 2.0 比 Magneto EE 1.14.2 每小时多处理 28% 订单，达到597个订单每小时。</li>
<li>目录浏览的响应时间非常小，几乎是立马响应（响应时间和浏览器中客户感受到的时间不一样）</li>
<li>添加到购物车的响应速度相比较快了 66%</li>
<li>所有结账步骤合在一起，访客结账响应时间快 48% ， 已注册客户结账响应时间快 36%</li>
</ul>
<h4 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a><a href="#%E5%90%9E%E5%90%90%E9%87%8F"></a>吞吐量</h4><p><img src="/wp-content/uploads/2016/12/white-paper-magento-throught-results.png" alt="吞吐量"></p>
<h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a><a href="#%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4"></a>响应时间</h4><p><img src="/wp-content/uploads/2016/12/white-paper-magento-catalog-browsing.png" alt="目录浏览"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-add-to-cart.png" alt="添加到购物车"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-checkout.png" alt="结账"></p>
<h3 id="Large-Merchant-Deployment-大型部署"><a href="#Large-Merchant-Deployment-大型部署" class="headerlink" title="Large Merchant Deployment (大型部署)"></a><a href="#large-merchant-deployment-(%E5%A4%A7%E5%9E%8B%E9%83%A8%E7%BD%B2)"></a>Large Merchant Deployment (大型部署)</h3><p>测试表明 Magento EE 2.0 的表现比 Magneto EE 1.14.2 好</p>
<ul>
<li>多处理 39% 的订单，达到 2558 个订单每小时</li>
<li>目录页面的响应时间几乎是立刻马上</li>
<li>加入购物车的服务器响应时间在 500 毫秒以下，速度相比较快了 66%</li>
<li>所有结账步骤加载一起，访客结账的响应时间快了 51%，已注册用户结账的响应时间快了 36%</li>
</ul>
<h4 id="吞吐量-1"><a href="#吞吐量-1" class="headerlink" title="吞吐量"></a><a href="#%E5%90%9E%E5%90%90%E9%87%8F"></a>吞吐量</h4><p><img src="/wp-content/uploads/2016/12/white-paper-magento-throught-results-big.png"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-orders-per-hour-big.png"></p>
<h4 id="服务器响应时间"><a href="#服务器响应时间" class="headerlink" title="服务器响应时间"></a><a href="#%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4"></a>服务器响应时间</h4><p><img src="/wp-content/uploads/2016/12/white-paper-magento-home-page-big.png"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-category-page-big.png"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-product-big.png"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-add-to-cart-big.png"></p>
<p><img src="/wp-content/uploads/2016/12/white-paper-magento-checkout-big.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>Magento 2.0 性能更好，吞吐量更大，响应时间更短。</p>
<p>三大段英文，博主实在不想翻译了，感兴趣的童鞋请查看原文。原文总结部分的测试数据表格呈现，博主也省略了，因为博主觉得上面的树状图表现力更好。</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>推荐</tag>
        <tag>性能优化</tag>
        <tag>配置建议</tag>
      </tags>
  </entry>
  <entry>
    <title>white-space</title>
    <url>/white-space/</url>
    <content><![CDATA[<p>处理元素内的空白</p>
<p>换行符</p>
<p>空白和 Tab</p>
<p>文本超出容器宽度</p>
<p>nomal</p>
<p>忽略</p>
<p>折叠</p>
<p>换行</p>
<p>nowrap</p>
<p>忽略</p>
<p>折叠</p>
<p>不换行</p>
<p>pre</p>
<p>换行</p>
<p>保持原样</p>
<p>不换行</p>
<p>pre-wrap</p>
<p>换行</p>
<p>保持原样</p>
<p>换行</p>
<p>pre-line</p>
<p>换行</p>
<p>折叠</p>
<p>换行</p>
<p><img src="/wp-content/uploads/2017/08/white-space.png"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/white-space">white-space</a> <a href="http://www.jianshu.com/p/1f451fc21b37">不简单的 white-space 属性</a></p>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>white-space</tag>
      </tags>
  </entry>
  <entry>
    <title>创建小部件 (Creating a Widget)</title>
    <url>/widget-create/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/widget-create.html">原文地址</a></em></p>
<p>每种类型的小部件的创建过程都是差不多的。</p>
<p><img src="/wp-content/uploads/2016/11/widgets.png" alt="widgets"></p>
<h2 id="第一步：选择类型"><a href="#第一步：选择类型" class="headerlink" title="第一步：选择类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E7%B1%BB%E5%9E%8B"></a>第一步：选择类型</h2><ol>
<li>后台侧边栏，选择 <strong>Content</strong>，在 <strong>Elements</strong> 下选择 <strong>Widgets</strong></li>
<li>右上角点击 <strong>Add Widget</strong>，然后做如下事情：<br>a. 在 Settings 部分，设置 <strong>Type</strong> ，然后点击 <strong>Contine</strong><br>b. 检查下 <strong>Design Theme</strong> 设置为当前的主题。<br>c. 点击 <strong>Contine</strong><br><img src="/wp-content/uploads/2016/11/widget-settings.png" alt="Settings"></li>
<li>在 Storefront Properties 中，做如下事情：<br>a. 在 <strong>Widget Title</strong> 中输入描述性的标题。<br>b. 设置 <strong>Assign to Store Views</strong> 为 All Store Views 或者是你想要他可用的 view。多选的话，请按住 Ctrl 键。<br>c. 在 <strong>Sort Order</strong> 中输入数字。这个数字决定着如果相同位置有其他元素，他的位置。最上面的位置对应着 0。<br><img src="/wp-content/uploads/2016/11/widget-storefront-properties.png" alt="Storefront Properties"></li>
</ol>
<h2 id="第二步：指定放在哪里"><a href="#第二步：指定放在哪里" class="headerlink" title="第二步：指定放在哪里"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E6%8C%87%E5%AE%9A%E6%94%BE%E5%9C%A8%E5%93%AA%E9%87%8C"></a>第二步：指定放在哪里</h2><ol>
<li>在 Layout Updates 部分，点击 <strong>Add Layout Update</strong></li>
<li>设置 <strong>Display On to</strong> 为你想要该 block 呈现的 category, product 或 page。</li>
<li>在 <strong>Block Reference</strong> 列表中，就是下图的 container，选择页面布局的位置<br><img src="/wp-content/uploads/2016/11/widget-layout-update-home-page.png" alt="Layout Updates"></li>
<li>如果小部件是一个链接，那么设置 <strong>Template</strong> 为下列值中的任意一个：<br>Block Template: 他将作为独立的块显示<br>Inline Template: 可以作为行内元素显示，比如在一段文本中</li>
</ol>
<h2 id="第三步：完成选项"><a href="#第三步：完成选项" class="headerlink" title="第三步：完成选项"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90%E9%80%89%E9%A1%B9"></a>第三步：完成选项</h2><p>每种类型的小部件的选项差别很小，过程本质上是一样的。下面的例子展示了如何显示特定目录的产品列表，并且带有分页控件。</p>
<ol>
<li><ol>
<li>左侧的小面板中，选择 <strong>Widget Options</strong></li>
</ol>
</li>
<li>点击 <strong>Select Block</strong>，在列表中选择你想要的 block</li>
<li>分页控件，设置 <strong>Display Page Control</strong> 为 Yes，然后做下面的事情：<br>a. 输入 <strong>Number of Products per Page</strong>（每页的产品数目）<br>b. 输入 <strong>Number of Products to Display</strong> （总共展示的产品数目）<br>c. Set <strong>Condition</strong> to the category of products to be featured. The process is the same as setting a condition for a price rule.(有点奇怪没有找到对应的功能)<br><img src="/wp-content/uploads/2016/11/widget-options-new-product-list.png" alt="Widget Options"></li>
<li>完成后，点击 <strong>Save</strong></li>
<li>系统会提示你清理缓存，照做。</li>
</ol>
<h2 id="第四步：检查一下"><a href="#第四步：检查一下" class="headerlink" title="第四步：检查一下"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E6%A3%80%E6%9F%A5%E4%B8%80%E4%B8%8B"></a>第四步：检查一下</h2><p>去前台检查一下是否正确，如果要修改，重新编辑即可。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>新产品列表 (New Products List)</title>
    <url>/widget-new-products-list/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/widget-new-products-list.html">原文地址</a></em></p>
<p>新产品列表是说明动态内容的好例子，他是从产品库中取出的实时的数据。默认情况下，新产品列表包含的是最新添加的八个产品。但是，也可以通过配置让他只包含某个时间段内的产品。</p>
<p><img src="/wp-content/uploads/2016/11/storefront-home-page-new-products.png" alt="New Products List on Home Page"></p>
<h2 id="第一步：设置每个产品的日期范围"><a href="#第一步：设置每个产品的日期范围" class="headerlink" title="第一步：设置每个产品的日期范围"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E8%AE%BE%E7%BD%AE%E6%AF%8F%E4%B8%AA%E4%BA%A7%E5%93%81%E7%9A%84%E6%97%A5%E6%9C%9F%E8%8C%83%E5%9B%B4"></a>第一步：设置每个产品的日期范围</h2><p>要让产品按照时间范围出现在新产品列表中，您必须给产品填入 “New From” 日期。</p>
<ol>
<li>后台侧边栏，点击 <strong>Products</strong>，在 <strong>Inventory</strong> 下，选择 <strong>Catalog</strong></li>
<li>选择你要更改的产品进行编辑：<br>a. 在 <strong>Set Product as New From Date</strong> 字段中，点击日历小空间，然后选择开始时间<br>b. 在 <strong>Set Product as New To Date</strong> 字段中，点击日历小空间，然后选择结束时间<br><img src="/wp-content/uploads/2016/11/product-set-as-new.png" alt="&quot;Set Product As New &quot; Date Range"></li>
<li>完成后，点击 <strong>Save</strong></li>
<li>系统提示你清理缓存，照做。<br>现在新产品列表中就会出现在时间范围内的产品了。</li>
</ol>
<h2 id="第二步：创建小部件"><a href="#第二步：创建小部件" class="headerlink" title="第二步：创建小部件"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%B0%8F%E9%83%A8%E4%BB%B6"></a>第二步：创建小部件</h2><p>决定新产品列表位置的代码由 Widget 工具生成。</p>
<ol>
<li><p>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Elements</strong> 下，选择 <strong>Widgets</strong></p>
</li>
<li><p>右上角点击 <strong>Add New Widget</strong></p>
</li>
<li><p>在设置部分，做如下事情：<br>a. 设置 <strong>Type</strong> 为 Catalog New Products List<br>b. 选择 <strong>Design Theme</strong> 为当前主题</p>
</li>
<li><p>点击 <strong>Continue</strong><br><img src="/wp-content/uploads/2016/11/widget-settings-new-products-list.png" alt="Widget Type"></p>
</li>
<li><p>在 <strong>Storefront Properties</strong> 部分，完成下列字段：  </p>
<p>Widget Title</p>
<p>输入描述标题，这个标题只在后台可见</p>
<p>Assign to Store Views</p>
<p>选择 widget 可用的 store view</p>
<p>Sort Order</p>
<p>（可选）输入数字决定次序（0 &#x3D; 第一个，以此类推）</p>
<p><img src="/wp-content/uploads/2016/11/widget-storefront-properties-new-products-list.png"></p>
</li>
</ol>
<h2 id="第三步：选择位置"><a href="#第三步：选择位置" class="headerlink" title="第三步：选择位置"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E4%BD%8D%E7%BD%AE"></a>第三步：选择位置</h2><ol>
<li><p>在 Layout Updates 部分，点击 <strong>Add Layout Update</strong>，然后做如下事情：<br>a. 设置 <strong>Display On</strong> 为 Specified Page<br>b. 设置 Page 为 CMS Home Page<br>c. 设置 <strong>Block Reference</strong> 为 Main Content Area<br>d. 设置 <strong>Template</strong> 为下列之一：</p>
<ul>
<li>New Products List Template</li>
<li>New Products Grid Template<br><img src="/wp-content/uploads/2016/11/widget-layout-update-new-products-list.png" alt="Layout Updates"></li>
</ul>
</li>
<li><p>点击 <strong>Save and Contine Edit</strong></p>
</li>
</ol>
<h2 id="第四步：配置列表"><a href="#第四步：配置列表" class="headerlink" title="第四步：配置列表"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9A%E9%85%8D%E7%BD%AE%E5%88%97%E8%A1%A8"></a>第四步：配置列表</h2><ol>
<li><p>在左边的面板中选择 <strong>Widget Options</strong></p>
</li>
<li><p>设置 <strong>Display Products</strong> 为下值之一：  </p>
<p>All Products</p>
<p>列表中显示最近添加的产品</p>
<p>New Products</p>
<p>只显示标记为新的的产品，当前时间在产品是否是新的的时间范围内的才显示，所以如果这样设置，可能列表是空的</p>
</li>
<li><p>完成剩下的信息：<br>a. 要给多页的情况提供导航，设置 <strong>Display Page Control</strong> 为 Yes<br>b. 设置 <strong>Number of Products to Display</strong> 为新产品的数量，默认是 10 个<br>c. 在 <strong>Cache Lifetime (Seconds)</strong> 中输入你希望多久刷讯一次列表，默认是 86400 秒，也就是 24 小时<br><img src="/wp-content/uploads/2016/11/widget-options-new-product-list.png" alt="Widget Options"></p>
</li>
<li><p>完成后，点击 <strong>Save</strong></p>
</li>
<li><p>按照提示刷新缓存。</p>
</li>
</ol>
<h2 id="第五步：预览"><a href="#第五步：预览" class="headerlink" title="第五步：预览"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E9%A2%84%E8%A7%88"></a>第五步：预览</h2><ol>
<li>后台侧边栏，点击 <strong>Content</strong>，在 <strong>Elements</strong> 下，选择 <strong>Pages</strong></li>
<li>找到新产品列表显示的页面，进行预览。</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>使用 widget (Using a Widget)</title>
    <url>/widget-static-block/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/widget-static-block.html">原文地址</a></em></p>
<p>CMS static block widget 可以让您把某个 content block 放置在您网站的几乎任何地方。</p>
<p><img src="/wp-content/uploads/2016/11/widgets.png"></p>
<h2 id="第一步：选择类型"><a href="#第一步：选择类型" class="headerlink" title="第一步：选择类型"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E9%80%89%E6%8B%A9%E7%B1%BB%E5%9E%8B"></a>第一步：选择类型</h2><ol>
<li>后台侧边栏，选择 <strong>Content</strong>，在 <strong>Elements</strong> 下选择 <strong>Widgets</strong></li>
<li>右上角点击 <strong>Add Widget</strong>，然后做如下事情：<br>a. 在 Settings 部分，设置 <strong>Type</strong> 为 <strong>CMS Static Block</strong>，然后，点击 <strong>Contine</strong><br>b. 检查下 <strong>Design Theme</strong> 设置为当前的主题。<br>c. 点击 <strong>Contine</strong><br><img src="/wp-content/uploads/2016/11/widget-settings.png" alt="Settings"></li>
<li>在 Storefront Properties 中，做如下事情：<br>a. 在 <strong>Widget Title</strong> 中输入描述性的标题。<br>b. 设置 <strong>Assign to Store Views</strong> 为 All Store Views 或者是你想要他可用的 view。多选的话，请按住 Ctrl 键。<br>c. 在 <strong>Sort Order</strong> 中输入数字。这个数字决定着如果相同位置有其他元素，他的位置。最上面的位置对应着 0。<br><img src="/wp-content/uploads/2016/11/widget-storefront-properties.png" alt="Storefront Properties"></li>
</ol>
<h2 id="第二步：完成-Layout-Updates"><a href="#第二步：完成-Layout-Updates" class="headerlink" title="第二步：完成 Layout Updates"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%AE%8C%E6%88%90-layout-updates"></a>第二步：完成 Layout Updates</h2><ol>
<li>在 Layout Updates 部分，点击 <strong>Add Layout Update</strong></li>
<li>设置 <strong>Display On to</strong> 为你想要该 block 呈现的 category, product 或 page。要让特定的页面呈现该 block ，这样操作：<br>a. 选择你要作用的 page<br>b. 选择 <strong>Block Reference</strong>，就是下图的 container，他代表着 block 将被放置的位置<br>c. 默认的模板是 CMS Static Block Default Template<br><img src="/wp-content/uploads/2016/11/widget-layout-update-home-page.png" alt="Layout Updates"></li>
</ol>
<h2 id="第三步：放置-Block"><a href="#第三步：放置-Block" class="headerlink" title="第三步：放置 Block"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E6%94%BE%E7%BD%AE-block"></a>第三步：放置 Block</h2><ol>
<li>左侧的小面板中，选择 <strong>Widget Options</strong></li>
<li>点击 <strong>Select Block</strong>，在列表中选择你想要的 block</li>
<li>完成后，点击 <strong>Save</strong></li>
<li>系统会提示你清理缓存，照做</li>
<li>可以去前台检查一下是否生效了。</li>
</ol>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>小部件类型 (Widgets Types)</title>
    <url>/widget-types/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/widget-types.html">原文地址</a></em></p>
<p>TYPE</p>
<p>DESCRIPTION</p>
<p>CMS Page Link</p>
<p>Displays a link to a selected page. Allows you to specify custom text and title. When the link is complete, it can be used in content pages and blocks.（展示一个链接到特定页面的链接）</p>
<p>CMS Static Block</p>
<p>Displays a block of content at a specific location on a page.（在页面的特定位置展示内容块）</p>
<p>Catalog Category Link</p>
<p>Displays either an inline or block-style link to a selected catalog category. When the link is complete, it can be used in content pages and blocks.（展示到某个产品分类的链接）</p>
<p>Catalog New Products List</p>
<p>Displays a block of products which have been designated as new, for the duration of time specified in the product record.（展示被指定为新产品的产品列表）</p>
<p>Catalog Product Link</p>
<p>Displays either an inline or block-style link to a selected catalog product. When the link is complete, it can be used in content pages and blocks.（展示某产品的链接）</p>
<p>Catalog Products List</p>
<p>Displays a list of products from the catalog.（展示产品列表）</p>
<p>Orders and Returns</p>
<p>Gives customers the ability to submit their own requests for returned merchandise authorization.（让客户可以提交请求退货）</p>
<p>Recently Compared Products</p>
<p>Displays the block of recently compared products. You can specify the number of products included, and format them as a list or product grid.（展示客户最近比较过的产品）</p>
<p>Recently Viewed Products</p>
<p>Displays the block of recently viewed products. You can specify the number of products included, and format them as a list or product grid.（展示客户最近浏览的商品）</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Widgets</title>
    <url>/widgets/</url>
    <content><![CDATA[<p><em><a href="http://docs.magento.com/m2/ce/user_guide/cms/widgets.html">原文地址</a></em></p>
<p>wiget 是一小段代码，可以将他放在特定的 block 引用中，它可以展示许多类型的内容。许多 widget 展示实时的、动态的数据，它创造机会让您的客户可以与您的店铺进行互动。通过 widget 工具，很容易将现有的内容（比如带有图片文本的 block）以及互动元素呈现在您店铺的任何位置。</p>
<p>你可以使用 widget 来创建营销活动的 landing 页面，或者在特定的地方显示促销内容。widget 还可以用来添加互动元素，以及 action blocks (外部 review 系统，视频聊天，投票，订阅表单)，或者是云标签的导航，图片轮播。</p>
]]></content>
      <categories>
        <category>Magento 2 用户使用手册</category>
      </categories>
  </entry>
  <entry>
    <title>Windows 下配置用 mail()发送邮件</title>
    <url>/windows-php-mail-sendmail/</url>
    <content><![CDATA[<p><em>前言：本篇是探索如何配置 Magento 2 的邮件服务器的分支</em></p>
<p>我的本地环境是 win10 + wamp，我想用 php 的 mail()函数通过腾讯企业邮箱发送邮件。<br>使用腾讯企业邮箱请参考<a href="/use-exmail-qq/">免费域名邮箱 —— 使用腾讯企业邮箱</a></p>
<h2 id="下载-sendmail"><a href="#下载-sendmail" class="headerlink" title="下载 sendmail"></a><a href="#%E4%B8%8B%E8%BD%BD-sendmail"></a>下载 sendmail</h2><p>Wamp 本身并没有带邮件服务器，所以我们要先去下载一个，windows 环境下，请去<a href="http://glob.com.au/sendmail/">fake sendmail for windows</a>下载。然后解压后将<code>sendmail.exe</code>和<code>sendmail.ini</code>拷贝到 wamp 的安装目录下，比如我的安装目录是:<code>D:\wamp64</code>，所以我将它们两个放在<code>D:\wamp64\sendmail</code>目录下。</p>
<h2 id="企业邮箱服务器地址"><a href="#企业邮箱服务器地址" class="headerlink" title="企业邮箱服务器地址"></a><a href="#%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80"></a>企业邮箱服务器地址</h2><p>登录你的腾讯企业邮箱，在设置 &gt; 客户端设置 中，可以看到：<br><img src="/wp-content/uploads/2016/10/exmail-qq-SMTP-service.png"><br>服务默认是开启的，服务器地址也给你了。</p>
<h2 id="配置-php-ini"><a href="#配置-php-ini" class="headerlink" title="配置 php.ini"></a><a href="#%E9%85%8D%E7%BD%AE-php.ini"></a>配置 php.ini</h2><p>现在我们来设置 php.ini，通过设置 php.ini 配置文件，mail()函数就可以使用邮件服务器了。注意，php.ini 是有两个的，一个配置命令行，一个配置服务器。两个都要修改。<br>修改的内容如下（以博主自己的为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SMTP = smtp.exmail.qq.com</span><br><span class="line">smtp_port = 25</span><br><span class="line">sendmail_from = &quot;owner@mail.hellomagento2.com&quot;</span><br><span class="line">sendmail_path = &quot;D:\wamp64\sendmail\sendmail.exe -t&quot;</span><br></pre></td></tr></table></figure>

<h2 id="配置-sendmail-ini"><a href="#配置-sendmail-ini" class="headerlink" title="配置 sendmail.ini"></a><a href="#%E9%85%8D%E7%BD%AE-sendmail.ini"></a>配置 sendmail.ini</h2><p>然后打开刚刚复制到 wamp 安装目录下的 sendmail.ini， 做如下修改（以博主自己的为例）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smtp_server = smtp.exmail.qq.com</span><br><span class="line">smtp_port = 25</span><br><span class="line">auth_username = &quot;owner@mail.hellomagento2.com&quot;</span><br><span class="line">auth_password = &quot;yourpassword&quot;</span><br><span class="line">force_sender = &quot;owner@mail.hellomagento2.com&quot;</span><br></pre></td></tr></table></figure>

<h2 id="使用-mail-发邮件"><a href="#使用-mail-发邮件" class="headerlink" title="使用 mail() 发邮件"></a><a href="#%E4%BD%BF%E7%94%A8-mail()-%E5%8F%91%E9%82%AE%E4%BB%B6"></a>使用 mail() 发邮件</h2><p>好了重新启动一下 wamp，然后我们来创建一个 php 文件测试下是否可以发邮件了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt = &quot;First line of text\nSecond line of text&quot;;</span><br><span class="line">// 如果一行大于 70 个字符，请使用 wordwrap()。</span><br><span class="line">$txt = wordwrap($txt,70);</span><br><span class="line">// 发送邮件</span><br><span class="line">if(mail(&quot;1518525862@qq.com&quot;,&quot;My subject&quot;, $txt)) &#123;</span><br><span class="line">    echo &#x27;success&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;fail&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在浏览器中请求下该文件，应该就会显示”success” 了，表明邮件发送成功了。</p>
<p><img src="/wp-content/uploads/2016/10/mail-result.png"></p>
<p>美中不足的是，会显示是由XXX代发的，这样感觉不好，以后我们再想办法去掉它。</p>
<hr>
<p>更新：显示由XX代发是因为没有设置发送者，或者发送者和 php.ini 中不一致导致的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$txt = &quot;First line of text\nSecond line of text&quot;;</span><br><span class="line">// 如果一行大于 70 个字符，请使用 wordwrap()。</span><br><span class="line">$txt = wordwrap($txt,70);</span><br><span class="line">$headers = &#x27;From: sales@mail.hellomagento2.com&#x27;;</span><br><span class="line">// 发送邮件</span><br><span class="line">// mail(&quot;1518525862@qq.com&quot;,&quot;My subject&quot;, $txt)</span><br><span class="line">if(mail(&quot;1518525862@qq.com&quot;,&quot;My subject&quot;, $txt, $headers)) &#123;</span><br><span class="line">    echo &#x27;success&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    echo &quot;fail&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这一段设置发送者为<code>sales@mail.hellomagento2.com</code> 和 php.ini 中的<code>owner@mail.hellomagento2.com</code> 不一致，所以会如下显示：<br><img src="/wp-content/uploads/2016/10/mail-result-daifa.png"></p>
<p>如果我们将<code>$headers = &#39;From: sales@mail.hellomagento2.com&#39;;</code>改成<code>$headers = &#39;From: owner@mail.hellomagento2.com&#39;;</code> 就不会有代发字样了，如下：<br><img src="/wp-content/uploads/2016/10/mail-result-nodaifa.png"></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Wordpress 4.7.2 安全更新</title>
    <url>/wordpress-4-7-2-security-release/</url>
    <content><![CDATA[<p>本站使用的是 Wordpress ，就在昨天，博主突然发现所有文章都被加上了尾巴。明显被注入了。之前阿里云一直有发短信提醒我存在 SQL 注入漏洞，博主忙于其他事，所以一直忽略忽略，想不到还是中招了。安全问题不是小问题。所以以后博主会多关注安全方面的知识，有机会的话就分享给大家。 我们来看下 wordpress 官方的消息，发布于 2017 年 1 月 26 日。 详情内容请参阅 <a href="https://wordpress.org/news/">wordpress blog</a> Wordpress 4.7.1 及更早的版本存在如下安全隐患：</p>
<ol>
<li>WordPress 后台的快速发布工具中，设置类别的用户界面会显示给没有权限的用户。</li>
<li>WP_Query 中存在传递不安全数据的 SQLi （数据库注入）漏洞。这个漏洞对 WordPress 核心程序没有任何影响，但第三方的插件和主题有可能会受到影响。</li>
<li>在文章列表的表格中发现跨站脚本（XSS）漏洞。</li>
<li>在 REST API endpoint 中发现一个未经身份验证的权限提升行为。</li>
</ol>
<p>此次本站受影响就是第二个漏洞造成的。建议大家尽快升级到最新版本。</p>
]]></content>
      <categories>
        <category>Wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>wordpress 手动添加文章目录（原创）</title>
    <url>/wordpress-content-index/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><a href="#%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0"></a>问题描述</h2><p>wordpress 添加文章目录已经有很成熟的方案，无论是通过插件还是通过手动添加代码的方式，但是这些方式都是在文章内容中插入文章目录，而我希望将文章目录单独列到原本属于 widget 的侧边栏中。所以我打算通过借鉴上面两种方式，来实现自己的文章目录。</p>
<h2 id="借鉴手动方式"><a href="#借鉴手动方式" class="headerlink" title="借鉴手动方式"></a><a href="#%E5%80%9F%E9%89%B4%E6%89%8B%E5%8A%A8%E6%96%B9%E5%BC%8F"></a>借鉴手动方式</h2><p>手动方式重点是向 theme 的<code>functions.php</code> 中添加 <code>add_filter( &quot;the_content&quot;, &quot;article_index&quot; );</code><br>他将使用函数<code>article_index</code>给文章内容进行过滤。在<code>functions.php</code>中再定义一个<code>function article_index($content)</code>接受文章内容作为参数，返回被过滤后的文章内容（添加了文章目录的内容），文章目录就被插入了。<br>以下是网络上找到的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function article_index($content) &#123;</span><br><span class="line">    $matches = array();</span><br><span class="line">    $ul_li = &#x27;&#x27;;</span><br><span class="line">    $r = &quot;/&lt;h3&gt;([^&lt;]+)&lt;/h3&gt;/im&quot;;</span><br><span class="line">    if(preg_match_all($r, $content, $matches)) &#123;</span><br><span class="line">        foreach($matches[1] as $num =&gt; $title) &#123;</span><br><span class="line">            $content = str_replace($matches[0][$num], &#x27;&lt;h3 id=&quot;title-&#x27;.$num.&#x27;&quot;&gt;&#x27;.$title.&#x27;&lt;/h3&gt;&#x27;, $content);</span><br><span class="line">            $ul_li .= &#x27;&lt;li&gt;&lt;a href=&quot;#title-&#x27;.$num.&#x27;&quot; title=&quot;&#x27;.$title.&#x27;&quot;&gt;&#x27;.$title.&quot;&lt;/a&gt;&lt;/li&gt;n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $content = &quot;n&lt;div id=&quot;article-index&quot;&gt;</span><br><span class="line">                &lt;strong&gt;文章目录&lt;/strong&gt;</span><br><span class="line">                &lt;ul id=&quot;index-ul&quot;&gt;n&quot; . $ul_li . &quot;&lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;n&quot; . $content;</span><br><span class="line">    &#125;</span><br><span class="line">    return $content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点是正则匹配太局限，不支持多级目录。</p>
<h2 id="借鉴插件方式"><a href="#借鉴插件方式" class="headerlink" title="借鉴插件方式"></a><a href="#%E5%80%9F%E9%89%B4%E6%8F%92%E4%BB%B6%E6%96%B9%E5%BC%8F"></a>借鉴插件方式</h2><p>选择的插件是：Content Index for wordpress<br>安装后发现功能是我想要的，有多级目录。实现功能的代码是 <code>wp-content/plugins/wp-content-index.php</code><br>关键的函数是<code>content_index_analysis</code>但是研究了老半天依然没有理清楚他的逻辑。不过里面找到一个正则<code>$r = &quot;/&lt;h(\d)([^&gt;]*)&gt;(.*)&lt;\/h\d&gt;/isU&quot;;</code>他可以匹配所有的<code>&lt;h&gt;</code>标签。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a><a href="#%E6%80%9D%E8%B7%AF"></a>思路</h2><p>要让 single.php 侧边栏输出文章目录，只要在 single.php 中调用一个定义在 functions.php 中的函数，而该函数负责输出一串包含文章目录的html代码片段就好了。难点是如何输出这些片段。<br>问题抽象一下后，会发现是这样的，如何让下面这样一组数据组织成树状结构。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0] h1</span><br><span class="line">[1] h2</span><br><span class="line">[2] h2</span><br><span class="line">[3] h3</span><br><span class="line">[4] h4</span><br><span class="line">[5] h2</span><br></pre></td></tr></table></figure>

<p>他应该被组织成这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[0] h1</span><br><span class="line">   [1] h2</span><br><span class="line">   [2] h2</span><br><span class="line">      [3] h3</span><br><span class="line">         [4] h4</span><br><span class="line">   [5] h2</span><br></pre></td></tr></table></figure>

<p>在做这个练习的时候，我发现我依靠了 h 本身的位置和层级</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a><a href="#%E4%BB%A3%E7%A0%81"></a>代码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function article_index($content) &#123;</span><br><span class="line">    $matches = array();</span><br><span class="line">    $r = &quot;/&lt;h(\d)([^&gt;]*)&gt;(.*)&lt;\/h\d&gt;/isU&quot;;</span><br><span class="line">    if (is_single() &amp;&amp; preg_match_all($r, $content, $matches, PREG_SET_ORDER)) &#123;</span><br><span class="line">        $arr = article_index_create($matches);</span><br><span class="line">        $ul_li = article_index_ul($arr);</span><br><span class="line">        $side = &#x27;&lt;div class=&quot;col-md-4&quot;&gt;&lt;div id=&quot;secondary&quot; class=&quot;widget-area content-index&quot; role=&quot;complementary&quot;&gt;&#x27;</span><br><span class="line">                .&#x27;&lt;nav class=&quot;bs-docs-sidebar hidden-print hidden-xs hidden-sm affix&quot;&gt;&#x27;.$ul_li.&#x27;&lt;/nav&gt;&lt;/div&gt;&lt;/div&gt;&#x27;;</span><br><span class="line">        echo $side;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function article_index_create($arr) &#123;</span><br><span class="line">    $arr_wash = array();</span><br><span class="line">    $min_level = $arr[0][1];</span><br><span class="line">    $max_level = $min_level;</span><br><span class="line">    foreach ($arr as $key =&gt; $value) &#123;</span><br><span class="line">        preg_match(&quot;/id=\&quot;(.*)\&quot;/&quot;, $value[2], $href);</span><br><span class="line">        $title = trim(strip_tags($value[0]));</span><br><span class="line">        $arr_wash[] = [&#x27;href&#x27;=&gt; $href[1] , &#x27;title&#x27; =&gt; $title, &#x27;level&#x27;=&gt; $value[1]];</span><br><span class="line">        if ($min_level &gt; $value[1]) &#123;</span><br><span class="line">            $min_level =  $value[1];</span><br><span class="line">        &#125;</span><br><span class="line">        if ($max_level &lt; $value[1]) &#123;</span><br><span class="line">            $max_level = $value[1];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">    foreach ($arr_wash as $key =&gt; $value) &#123;</span><br><span class="line">        if ($value[&#x27;level&#x27;] == $min_level) &#123;</span><br><span class="line">            $arr_wash[$key][&#x27;father&#x27;] = $key;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $father = null;</span><br><span class="line">            for ($i = ($key - 1); $i &gt;= 0; $i-- ) &#123;</span><br><span class="line">                if ($arr_wash[$i][&#x27;level&#x27;] &lt; $value[&#x27;level&#x27;]) &#123;</span><br><span class="line">                    $father = $i;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            if (is_null($father)) &#123;</span><br><span class="line">                unset($arr_wash[$key]);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                $arr_wash[$key][&#x27;father&#x27;] = $father;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for ($i = $max_level; $i &gt; $min_level; $i--) &#123;</span><br><span class="line">        foreach ($arr_wash as $key =&gt; $value) &#123;</span><br><span class="line">            if ($value[&#x27;level&#x27;] == $i) &#123;</span><br><span class="line">                $arr_wash[$value[&#x27;father&#x27;]][&#x27;child&#x27;][$key] = $value;</span><br><span class="line">                unset($arr_wash[$key]);    </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $arr_wash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function article_index_ul($arr_wash) &#123;</span><br><span class="line">    $ul_li = &#x27;&lt;ul&gt;&#x27;;</span><br><span class="line">    foreach ($arr_wash as $key =&gt; $val) &#123;</span><br><span class="line">        $ul_li .= ul_recursion($val);</span><br><span class="line">    &#125;</span><br><span class="line">    $ul_li .= &#x27;&lt;/ul&gt;&#x27;;</span><br><span class="line">    return $ul_li;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ul_recursion($val)</span><br><span class="line">&#123;</span><br><span class="line">    if (! $val[&#x27;child&#x27;]) &#123;</span><br><span class="line">        return &#x27;&lt;li&gt;&lt;a href=&quot;#&#x27;.$val[&#x27;href&#x27;].&#x27;&quot;&gt;&#x27;.$val[&#x27;title&#x27;].&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $ul_li .= &#x27;&lt;li&gt;&lt;a href=&quot;#&#x27;.$val[&#x27;href&#x27;].&#x27;&quot;&gt;&#x27;.$val[&#x27;title&#x27;].&#x27;&lt;/a&gt;&lt;ul&gt;&#x27;;</span><br><span class="line">        foreach ($val[&#x27;child&#x27;] as $k =&gt; $v) &#123;</span><br><span class="line">            $ul_li .= ul_recursion($v);</span><br><span class="line">        &#125;</span><br><span class="line">        $ul_li .= &#x27;&lt;/ul&gt;&lt;/li&gt;&#x27;;</span><br><span class="line">        return $ul_li;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="稍作解释"><a href="#稍作解释" class="headerlink" title="稍作解释"></a><a href="#%E7%A8%8D%E4%BD%9C%E8%A7%A3%E9%87%8A"></a>稍作解释</h2><p><code>article_index_create</code>是最主要的，他将调用其它函数来完成生成文章目录的功能。<br><code>article_index_create</code>他将接受匹配到的标题，返回包含层级关系的数组。<br><code>article_index_ul</code> 负责将包含层级关系的数组转换成<code>ul</code>字符串。<br><code>ul_recursion</code>用到了递归来处理子级。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>算法比具体的实现要费脑子 &gt;”&lt;</p>
<p>欢迎点评！</p>
]]></content>
      <categories>
        <category>其他</category>
        <category>Wordpress</category>
      </categories>
      <tags>
        <tag>wordpress</tag>
      </tags>
  </entry>
  <entry>
    <title>wordprss首页不显示某些分类</title>
    <url>/wordpress-hide-categories-in-homepage/</url>
    <content><![CDATA[<p>博客中“Magento 2 用户使用手册”分类目录是 Magento 官方文档的翻译，目前翻译地比较零碎，展现在首页中并没有太多的参考价值，所以决定在首页中把该分类给筛掉。</p>
<p>关于用户手册，请参考首页上的文章：Magneto 2用户使用手册目录索引，进行概览或选择性地阅读。目录索引会不定期批量更新。</p>
<p>下面是如何修改wordpress 主题，实现首页不显示某些分类的记录。</p>
<p>找到wp的主题文件index.php<br>在<code>&lt;?php while ( have_posts() ) : the_post(); ?&gt;</code>前添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 不显示某个分类的文章</span><br><span class="line">// 其中array(15)中的15就是你分类的id，如果你有多个分类不想显示，可以添加更多的分类id,array(1,2,3)…</span><br><span class="line">if (is_home()) &#123;</span><br><span class="line">    $paged = (get_query_var(&#x27;paged&#x27;)) ? get_query_var(&#x27;paged&#x27;) : 1;</span><br><span class="line">    $args = array(&#x27;category__not_in&#x27;   =&gt;  array(15), &#x27;paged&#x27; =&gt;  $paged);</span><br><span class="line">    query_posts($args);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>实现该功能主要参考的<a href="https://liuzhichao.com/p/1534.html">文章地址</a></p>
]]></content>
      <categories>
        <category>Wordpress</category>
      </categories>
  </entry>
  <entry>
    <title>z-index 父子层级关系</title>
    <url>/z-index-%E7%88%B6%E5%AD%90%E5%B1%82%E7%BA%A7%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p>需求是通过 z-index 改变层级，使父元素高于子元素。 首先，z-index 作用于已经定位的元素（position 属性值是非 static 的元素） 其次，如果想要父级覆盖子级，那么父级不需要设置 z-index，子级设置 z-index 为负就可以了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;parent&quot;&gt;parent</span><br><span class="line">        &lt;div class=&quot;child&quot;&gt;child&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">    .parent &#123;</span><br><span class="line">        background-color: yellow;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    .child &#123;</span><br><span class="line">        background-color: green;</span><br><span class="line">        position: relative;</span><br><span class="line">        z-index: -2;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>专业网络知识要让小白兔看得懂</title>
    <url>/%E4%B8%93%E4%B8%9A%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E8%A6%81%E8%AE%A9%E5%B0%8F%E7%99%BD%E5%85%94%E7%9C%8B%E5%BE%97%E6%87%82/</url>
    <content><![CDATA[<p>当有两台以上网络设备需要通信，我们需要组建网络，从物理上来讲，只要做一件事情，一根网线将两者相连。此时在物理上两台机器已经可以通信。你问我你这样做了但是为什么不能联机打游戏，这是因为目前两台设备的网络参数没有被正确的设置，所以互相不理睬对方发来的数据包，所以你游戏玩不起来，但是网络在物理上已经联通了，不信你看下你的网卡上的灯(如果有的话)是不是在闪烁。至于要如何才能达到设备之间的程序可以正常通信(可以联机打游戏)，需要了解OSI七层模型(虽然你看的似懂非懂，但是你先看一下，混个脸熟)： 1、物理层： 主要定义物理设备标准，如网线的接口类型、光纤的接口类型、各种传输介质的传输速率等。它的主要作用是传输比特流（就是由1、0转化为电流强弱来进行传输,到达目的地后在转化为1、0，也就是我们常说的数模转换与模数转换）。这一层的数据叫做比特。 　　 2、数据链路层： 定义了如何让格式化数据以进行传输，以及如何让控制对物理介质的访问。这一层通常还提供错误检测和纠正，以确保数据的可靠传输。 　　 3、网络层： 在位于不同地理位置的网络中的两个主机系统之间提供连接和路径选择。Internet的发展使得从世界各站点访问信息的用户数大大增加，而网络层正是管理这种连接的层。 　　 4、运输层： 定义了一些传输数据的协议和端口号（WWW端口80等），如： TCP（transmission control protocol –传输控制协议，传输效率低，可靠性强，用于传输可靠性要求高，数据量大的数据） UDP（user datagram protocol–用户数据报协议，与TCP特性恰恰相反，用于传输可靠性要求不高，数据量小的数据，如QQ聊天数据就是通过这种方式传输的）。 主要是将从下层接收的数据进行分段和传输，到达目的地址后再进行重组。常常把这一层数据叫做段。 　　 5、会话层： 通过运输层（端口号：传输端口与接收端口）建立数据传输的通路。主要在你的系统之间发起会话或者接受会话请求（设备之间需要互相认识可以是IP也可以是MAC或者是主机名） 　　 6、表示层： 可确保一个系统的应用层所发送的信息可以被另一个系统的应用层读取。例如，PC程序与另一台计算机进行通信，其中一台计算机使用扩展二一十进制交换码（EBCDIC），而另一台则使用美国信息交换标准码（ASCII）来表示相同的字符。如有必要，表示层会通过使用一种通格式来实现多种数据格式之间的转换。 　　 7、应用层： 是最靠近用户的OSI层。这一层为用户的应用程序（例如电子邮件、文件传输和终端仿真）提供网络服务。 解释一下： 协议：即语法，规范，约定，表示对于现象或者变化遵守协议的双方都对其做相同的理解，并将自己的意愿用公认的方式表达出来，以便于相互之间能够理解和协作。 在两台设备进行程序通讯的时候，我们实实在在看到的是那根不动的网线以及网卡上闪烁的灯，这是你看到的物理设备。在物理设备上，我们开始想象，里面是电信号。是代表1和0的高电压低电压不断的通过。这里每一个高电压与一个低电压就是一个bit，我们看到的这一个个bit就是通讯数据的最基本单位，至于多少的电压理解为1，多少的电压理解为0，这个就是物理层协议规定的问题，也就是说，如果通信设备共同遵循物理层协议，那么双方就能够理解或者发送对方理解的bit流。 数据链路层，是第二层，这一层基于前一层，将bit流打包，形成第二层数据帧，这个你这么理解，我监听对方的数据传输，我们约定我每次监听对方几个bit，将几个bit作为一个组合来理解，这个组合被称为数据帧，因为我们现在看的是按照第二层协议来组合的bit流，因此称为二层数据帧，二层数据帧里面打包了数据的来源设备和目标设备的物理标识(MAC地址)用于区分数据从哪里来要到哪里去。 往后的每一层，都是再前一层的基础上按照各自的目的继续组合数据帧，形成隔层的数据帧，最终这个打包了若干次的数据包被送到对端，对端依次从高到低对数据包进行拆帧，然后理解这个包的意图并做出反应，这个时候你们就可以联机打游戏了(前提游戏支持联机玩哦。。扫雷好像不能联机打)。 现在我们考虑网络的搭建： 将设备相连肯定是要用网线的，两个设备一个网线就够了，三个设备(三个网口)你要几个网线呢？嘿嘿，你的线没法插了。 讲个新设备，集线器(HUB)。 你这样想象集线器：它上面有很多接口。他把任何一个口上收到的数据在所有的接口上发送一遍，这个过程我们广播。也就是说，一个机器发送的数据包，其他设备都是能收到的(这也就是为什么网络可以被监听)，只是这些设备选择性的丢弃掉跟自己不相关的数据包(目的地址(目标MAC)跟我的地址不一样)。 ok，HUB能够解决数据互联的问题，但是这个傻瓜啥事都广播，导致线路里面有大量的包都是没有意义的，需要被丢弃的，所以我们对这个设备进行了升级，我们搞出来一个高级的玩意，叫做交换机。交换机的改进在于交换机会学习各端口所接设备的mac地址，如果没学会就广播数据包，广播后就学到了，学到后就不需要广播了，根据目标mac地址，就可以选择对应的端口发送数据，这样网络性能就有了提高。 然而有了交换机减少了广播报，但是当交换机的设备越来越多，还是会出现许多包需要通过广播来传输，这个时候我们需要控制网络的规模，其实就是为了控制广播量，将广播包的数量控制在交换机性能范围之内。方法简单，拆分，拆成多个小网络，每个网络连接一个独立的交换机，这样每个交换机只在各自的小网络内广播。此时有需要互联，怎么办，直接接在一起，这是不行的，因为你接在一起后一个交换机的数据包会发送到另一台，另一台收到包后还是会有广播的可能，这样还是会有很多数据包在所有交换机上都广播一遍，很明显，这违背了我们隔离小网络的初衷。 我们添加一个新设备，路由器。 路由器工作在第三层，你理解为他在上一层的基础上又添加了ip地址信息，当然数据包除了有了来源mac地址与目标mac地址，又有了来源ip地址和目标ip地址。路由器理解第三层的数据包，我们将独立的交换机接在路由器的各个端口上，当某一个交换机将数据包广播发送到路由器后，路由器接到数据后不会立刻广播，他会看下目标ip地址，然后根据ip地址后选择相应的端口发送，这保证了广播不会出现在不相关的交换机上。这样路由就很好的隔离了各个小网络，同时又让各个小网络能够有序通信。 好了，网络的基础建设就是建设交换机和路由器，用交换机组件小网络，用路由器连接小网络，就这么简单，按照这个方法能够构建高性能且稳定的网络，但是成本可能比较高。 因为每当分隔新的小网络，你就需要添加新的交换机，将新的交换机接到路由器上，然而买新的交换机需要钱，而且路由端口也会有用完的时候，你需要购买更多的路由，总之，你可能忙于布线，忙于添加新设备，忙于连接新设备。 给你一个新技术VLAN(虚拟局域网) 我们设计了一种全新的交换机，他比我们上面说的交换机更加智能，他能够在交换机上设定若干个逻辑区域，然后将端口划分到这些独立区域里面去，这样属于同一个独立区域的端口会参与广播，属于不同独立区域的端口之间不可以广播，这样就可以在交换机上灵活的更改局域网的数量和每个局域网的大小。由于这些网络设备在物理上属于同一个设备，在逻辑上又属于不同的网络，所以我们称这种网络为虚拟局域网，虚拟局域网用一个id来标识,这个id称为VLANID，其范围为1-4096(由相关的协议数据结构决定)。不同的id代表不同的虚拟局域网，不同的局域网内部广播，之间隔离，需要通信可以将不同的局域网内部端口接到路由器上，这样就实现了局域网之间的联通。 再来一个更加智能的设备，三层交换机。这个交换机在上面的基础上，集成了路由模块，你通过这个交换机就可以实现局域网的隔离和通信。 上面你理解的没问题的话，我们再考虑更加靠近实际的问题。 假设公司有两层楼，一层又销售部和生产部，二楼也有销售部和生产部。我们通常会在每一层使用楼道交换机，然后将该层所有端口接入楼道交换机，同时我们可能会希望做这样的隔离，让一楼销售部和二楼销售部在一个局域网中，一楼生产部和二楼生产部在一个局域网中，那你按照之前的知识，你在一楼的交换机上划分两个局域网 vlan1 vlan2，在二楼也划分vlan1 vlan2 然后 一楼交换机的vlan1 和二楼交换机的vlan1用一个跳线接起来，一楼vlan2和二楼vlan2用一个跳线接起来，这样数据就在各自的局域网内部广播了。但是这样做有点麻烦，就是你需要两根条线连接两个交换机。除了多使用一根线，你还需要多消耗端口。当你的部门变多，你需要消耗更多的跳线和端口。 给你一个新技术，trunk。 我们之前所讲的vlan里面的连接口都是access口，在支持vlan的交换机内部，所有的数据帧都是带标签(tag)的(在原始数据帧上添加vlanid表示该数据在属于哪一个vlan，有两种添加标签的方式dot1Q和ISL)，access口的特点是，在数据包发送到对端设备的时候剥离标签，这样普通的网卡就能接收到，因此我们之前一直都是使用access口来达成我们的目标。但是如果两个交换机互联，并且我们希望两个交换机上的多个vlan之间能够广播数据，那么可以使用trunk口，trunk口的作用就是可以配置数据帧在发送的时候不剥离vlan标识，这样另外一个交换机turnk口收到这个包的时候就能知道这个包在原先交换机是属于哪个vlan，这下要转发到哪些端口当中去。这样两端trunk口连接的一根跳线就可以使得不同交换机上的多个vlan能够实现广播通信。 然后讲个稍微烧脑袋的，但是你理解了的话对于你了解trunk口特别有作用： 1、支持vlan的交换机内部转发数据，都是带tag的。 2、交换机端口是untag或者tag是针对不同vlan而言的。可以在vlan1上带tag，在vlan2上不带tag 3、交换机端口需要设定pvid，默认vlanid，其只有一个作用，即使在收到不带tag的包(普通电脑发送的数据包)的时候，打上默认vlanid的标签。 4、端口在某vlan上是tag，那么接受到untag数据帧，就会按照pvid添加tag后交给内部转发，接收到是tag数据帧，则会原样转交内部转发。在发送数据帧的时候，会将转发过来的数据帧进行转发要么本来带数据帧，要么带pvid数据帧。 5、如果端口在某vlan上是untag，那么接收到tag包会直接丢弃，接收到untag后会按照pvid添加tag后转交内部转发，在发送数据帧的时候，会剥离tag信息后进行转发。 6、一个端口只能拥有一个PVID，当一个物理端口拥有了一个PVID的时候，必定会拥有和PVID的TAG等同的VlanID，而且在这个VlanID上，这个物理端口必定是Untagged Port access口与trunk的定义是厂商自己定的，通常如下： 所谓access口，他表示这个端口在某一个vlan上是untagged，因此他不能从对端设备接受tagged包，发送包的时候，会剥离tag信息。它受到的一般都是untagged报文，发送的也是untagged报文 所谓trunk口，表示这个端口在pvid的vlan上是untagged，在其他端口是tagged，这个端口通常只与交换机的turnk连接，收到的都是tagged报文，发送的也是tagged报文。 以上信息了解了你就可以搭建合理的二层网络了，就这样吧。</p>
]]></content>
      <categories>
        <category>网络通信</category>
      </categories>
  </entry>
  <entry>
    <title>使用 docker 安装 mysql</title>
    <url>/%E4%BD%BF%E7%94%A8-docker-%E5%AE%89%E8%A3%85-mysql/</url>
    <content><![CDATA[<h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a><a href="#%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8"></a>创建容器</h2><p>从 docker hub 的仓库中拉 mysql 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql</span><br></pre></td></tr></table></figure>

<p>查看镜像：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<p>运行一个 mysql 容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3306:3306 --name mysql5.7-t1 -v /var/www/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>上述命令中各参数的含义：</p>
<ul>
<li>run 运行一个 docker 容器</li>
<li>—name 生成的容器的名字</li>
<li>-p 3306:3306 代表这个容器中使用3306（第二个）映射到宿主主机的 3306 （第一个）端口</li>
<li>-e 设置环境变量，设置 mysql root 的密码</li>
<li>-d 守护进程</li>
<li>-v 把容器中数据 &#x2F;var&#x2F;lib&#x2F;mysql 映射到宿主主机的目录 &#x2F;var&#x2F;www&#x2F;mysql ，这样即使容器删除了，数据还是在的。如果指定的宿主目录下是有之前的数据，那么容器启动后还是可以访问这些数据的，此时MYSQL_ROOT_PASSWORD 是无效的。</li>
<li>最后的 mysql:5.7 代表要使用的镜像版本，如果不指定则会使用最新版本的</li>
</ul>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a><a href="#%E5%91%BD%E4%BB%A4"></a>命令</h2><p>查看运行中的容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>进入容器中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it containername bash</span><br></pre></td></tr></table></figure>

<p>退出容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<p>停止容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop mysql5.7-t1</span><br></pre></td></tr></table></figure>

<p>启动容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start mysql5.7-t1</span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker rm containername</span><br></pre></td></tr></table></figure>

<h2 id="自定义-mysql-设置"><a href="#自定义-mysql-设置" class="headerlink" title="自定义 mysql 设置"></a><a href="#%E8%87%AA%E5%AE%9A%E4%B9%89-mysql-%E8%AE%BE%E7%BD%AE"></a>自定义 mysql 设置</h2><p>container 启动后，默认情况下我们是可以在外部访问的，下面我们通过 mysql 设置只允许本地访问。</p>
<p>重新开一个 container</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql5.7-t2 -v /var/www/mysql:/var/lib/mysql -v /var/www/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=admin -d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>然后在宿主机 &#x2F;var&#x2F;www&#x2F;conf&#x2F; 下创建 my.cnf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address = 127.0.0.1</span><br></pre></td></tr></table></figure>

<p>重启后，就会发现这时候外部不能访问了。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="https://docs.docker.com/engine/reference/commandline/run/">docker run</a><br><a href="https://www.jianshu.com/p/d9b6bbc7fd77">使用Docker安装、运行mysql</a><br><a href="https://hub.docker.com/_/mysql/">Official Repository mysql</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>修改 Magento 2 increment_id</title>
    <url>/%E4%BF%AE%E6%94%B9-magento-2-increment-id/</url>
    <content><![CDATA[<p>increment_id &#x3D; <code>prefix</code> + ((<code>sequence_value</code> – <code>start_value</code>) * <code>step</code> + <code>start_value</code>) {padded to <code>X</code> digits} + <code>suffix</code> <code>prefix</code>,<code>suffix</code>,<code>start-value</code>,<code>step</code> are stored in <code>sales_sequence_profile</code> <img src="/wp-content/uploads/2019/06/sales_sequence_profile.png"> <code>sequence_value</code> is stored in <code>sequence_order_&#123;store id&#125;</code> <img src="/wp-content/uploads/2019/06/sequence_order.png"> {padded to <code>X</code> digits} is set in: &#x2F;vendor&#x2F;magento&#x2F;module-sales-sequence&#x2F;Model&#x2F;Sequence.php <code>const DEFAULT_PATTERN = &quot;%s%&#39;.09d%s&quot;;</code></p>
<h2 id="原文连接"><a href="#原文连接" class="headerlink" title="原文连接"></a><a href="#%E5%8E%9F%E6%96%87%E8%BF%9E%E6%8E%A5"></a>原文连接</h2><p><a href="https://www.classyllama.com/blog/m2-incrementid">How to Change Magento 2 Increment ID for Orders, Invoices, Credit Memos and Shipments</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>创建 Magento 2 Hello World Simple Module</title>
    <url>/%E5%88%9B%E5%BB%BA-magento-2-hello-world-simple-module/</url>
    <content><![CDATA[<p>本篇文章将介绍如何创建一个输出 <code>hello world</code> 的简单模块。 在 Magento 2 中，模块存在于 <code>app/code</code> 目录下，格式如下 <code>app/code/&lt;Vendor&gt;/&lt;ModuleName&gt;</code>。</p>
<h2 id="第一步：创建模块所需的目录"><a href="#第一步：创建模块所需的目录" class="headerlink" title="第一步：创建模块所需的目录"></a><a href="#%E7%AC%AC%E4%B8%80%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9D%97%E6%89%80%E9%9C%80%E7%9A%84%E7%9B%AE%E5%BD%95"></a>第一步：创建模块所需的目录</h2><p>我们将使用 <code>ThankIT</code> 作为 Vendor name ，<code>HelloWorld</code> 作为 ModuleName ，所以我们现在创建文件目录 <code>app/code/ThankIT/HelloWorld</code></p>
<h2 id="第二步：创建-module-xml-声明该模块"><a href="#第二步：创建-module-xml-声明该模块" class="headerlink" title="第二步：创建 module.xml 声明该模块"></a><a href="#%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-module.xml-%E5%A3%B0%E6%98%8E%E8%AF%A5%E6%A8%A1%E5%9D%97"></a>第二步：创建 module.xml 声明该模块</h2><p>在上面创建的目录下，创建 <code>etc</code> 目录，在 <code>etc</code> 下创建 <code>module.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/ThankIT/HelloWorld/etc/module.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Module/etc/module.xsd&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;ThankIT_HelloWorld&quot; setup_version=&quot;1.0.0&quot; /&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>在该配置文件中，我们注册了一个模块名称为 <code>ThankIT_HelloWorld</code> 的模块，它的版本是 <code>1.0.0</code></p>
<h2 id="第三步：创建-registration-php-注册模块"><a href="#第三步：创建-registration-php-注册模块" class="headerlink" title="第三步：创建 registration.php 注册模块"></a><a href="#%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-registration.php-%E6%B3%A8%E5%86%8C%E6%A8%A1%E5%9D%97"></a>第三步：创建 registration.php 注册模块</h2><p>Magento 2 中的所有模块都必须通过 magento 的 ComponentRegistrar 类进行注册。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/ThankIT/HelloWorld/registration.php</span><br><span class="line">&lt;?php</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::MODULE,</span><br><span class="line">    &#x27;ThankIT_HelloWorld&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h2 id="第四步：Enable-该模块"><a href="#第四步：Enable-该模块" class="headerlink" title="第四步：Enable 该模块"></a><a href="#%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%9Aenable-%E8%AF%A5%E6%A8%A1%E5%9D%97"></a>第四步：Enable 该模块</h2><p>上面步骤做完后，我们就已经创建好了一个空模块，下面输入以下命令行，看看我们的模块是否已经注册好了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento module:status</span><br></pre></td></tr></table></figure>

<p>你会看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List of disabled modules:</span><br><span class="line">ThankIT_HelloWorld</span><br></pre></td></tr></table></figure>

<p>这代表，模块已经被检测到，但 disabled 状态，下面启用它</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento module:enable ThankIT_HelloWorld</span><br></pre></td></tr></table></figure>

<p>如果看到以下信息，表明模块已经成功启用了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">The following modules has been enabled:</span><br><span class="line">- ThankIT_HelloWorld</span><br></pre></td></tr></table></figure>

<p>这是你第一次启用该模块，magento 需要检查和升级模块的数据库记录，运行以下命令行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>现在我们进入后台，在 <code>Stores -&gt; Configuration -&gt; Advanced -&gt; Advanced</code> 下我们可以看到该模块了</p>
<h2 id="第五步：为模块创建路由"><a href="#第五步：为模块创建路由" class="headerlink" title="第五步：为模块创建路由"></a><a href="#%E7%AC%AC%E4%BA%94%E6%AD%A5%EF%BC%9A%E4%B8%BA%E6%A8%A1%E5%9D%97%E5%88%9B%E5%BB%BA%E8%B7%AF%E7%94%B1"></a>第五步：为模块创建路由</h2><p>Magento 系统中，请求 URL 是如下格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/&lt;router_name&gt;/&lt;controller_name&gt;/&lt;action_name&gt;</span><br></pre></td></tr></table></figure>

<p>路由用来分配 URL 给对应的 controller （控制器）和 action 。在该模块中，我们给前端创建一个路由，所以创建下面的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/ThankIT/HelloWorld/etc/frontend/routes.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;standard&quot;&gt;</span><br><span class="line">        &lt;route id=&quot;helloworld&quot; frontName=&quot;helloworld&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;ThankIT_HelloWorld&quot; /&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>定义好路由后，我们的模块 URL 路径变成 <code>http://example.com/helloworld/*</code></p>
<h2 id="第六步：创建-controller-和-action"><a href="#第六步：创建-controller-和-action" class="headerlink" title="第六步：创建 controller 和 action"></a><a href="#%E7%AC%AC%E5%85%AD%E6%AD%A5%EF%BC%9A%E5%88%9B%E5%BB%BA-controller-%E5%92%8C-action"></a>第六步：创建 controller 和 action</h2><p>在该步骤中，我们将创建 controller 和 action 来输出 <code>Hello World</code> 。假设我们的 URL 是 <code>http://example.com/helloworld/index/display</code> 所以我们将创建如下文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Mageplaza/HelloWorld/Controller/Index/Display.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Index;</span><br><span class="line"></span><br><span class="line">class Display extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\App\Action\Context $context</span><br><span class="line">    )&#123;</span><br><span class="line">    return parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;Hello World&#x27;;</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果打开 <code>http://example.com/helloworld/index/display</code> 就会看到输出 <code>Hello World</code> 字符串。 如果出现 404 请清空缓存 <code>php bin/magento cache:clean</code></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/">Magento 2 Module Development - Magento 2 Hello World Simple Module</a></p>
<h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a><a href="#%E4%BB%A3%E7%A0%81%E4%B8%8B%E8%BD%BD"></a>代码下载</h2><p><a href="https://github.com/PiscesThankIT/ThankIT_HelloWorld/">ThankIT_HelloWorld 模块代码下载</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>Hello World</tag>
        <tag>Magento 2 插件开发</tag>
      </tags>
  </entry>
  <entry>
    <title>后台产品的数量是如何加到 column 中的</title>
    <url>/%E5%90%8E%E5%8F%B0%E4%BA%A7%E5%93%81%E7%9A%84%E6%95%B0%E9%87%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%8A%A0%E5%88%B0-column-%E4%B8%AD%E7%9A%84/</url>
    <content><![CDATA[<p><img src="/wp-content/uploads/2019/06/catalog-qty.png" alt="product catalog qty"> 这一列是特别的。 首先我们知道产品列表的 url 是 <code>.../admin/catalog/product/index/...</code> 那么顺着找到对应的 layout 文件 <code>vendor\magento\module-catalog\view\adminhtml\layout\catalog_product_index.xml</code>。在该 layout 文件中可以看到列表的主体部分是由 ui component 实现的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;uiComponent name=&quot;product_listing&quot;/&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><code>product_listing.xml</code> 有两处，主体位于 <code>vendor\magento\module-catalog\view\adminhtml\ui_component\product_listing.xml</code> ，另一处在 <code>vendor\magento\module-catalog-inventory\view\adminhtml\ui_component\product_listing.xml</code> 而位于 <code>catalog inventory</code> 模块中的 <code>product_listing.xml</code> 正是产品的 quantity 列。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;columns name=&quot;product_columns&quot; class=&quot;Magento\Catalog\Ui\Component\Listing\Columns&quot;&gt;</span><br><span class="line">        &lt;column name=&quot;qty&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;textRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;add_field&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Quantity&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;sortOrder&quot; xsi:type=&quot;number&quot;&gt;75&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">    &lt;/columns&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>但是如果你深扒的话，一定会发现 那么 collection 中的 qty 是从哪里来的？ 在 catalog-inventory 的 etc&#x2F;adminhtml&#x2F;di.xml 中可以找到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type name=&quot;Magento\Catalog\Ui\DataProvider\Product\ProductDataProvider&quot;&gt;</span><br><span class="line">    &lt;arguments&gt;</span><br><span class="line">        &lt;argument name=&quot;addFieldStrategies&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;qty&quot; xsi:type=&quot;object&quot;&gt;Magento\CatalogInventory\Ui\DataProvider\Product\AddQuantityFieldToCollection&lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;addFilterStrategies&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;qty&quot; xsi:type=&quot;object&quot;&gt;Magento\CatalogInventory\Ui\DataProvider\Product\AddQuantityFilterToCollection&lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/arguments&gt;</span><br><span class="line">&lt;/type&gt;</span><br></pre></td></tr></table></figure>

<p>深入的查看下 AddQuantityFieldToCollection 这个类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function addField(Collection $collection, $field, $alias = null)</span><br><span class="line">    &#123;</span><br><span class="line">        $collection-&gt;joinField(</span><br><span class="line">            &#x27;qty&#x27;,</span><br><span class="line">            &#x27;cataloginventory_stock_item&#x27;,</span><br><span class="line">            &#x27;qty&#x27;,</span><br><span class="line">            &#x27;product_id=entity_id&#x27;,</span><br><span class="line">            &#x27;&amp;#123;&amp;#123;table&amp;#125;&amp;#125;.stock_id=1&#x27;,</span><br><span class="line">            &#x27;left&#x27;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>每个 vendor\magento\module-ui\Component\Listing\Columns\Column.php 对象会调用 <code>prepare()</code> &gt; 调用 <code>addFieldToSelect（）</code> $this-&gt;getContext()-&gt;getDataProvider()-&gt;addField($this-&gt;getName()); ProductDataProvider 调用他的 addField() 就加入了 qty</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
  <entry>
    <title>启用 VendorName_*  的所有模块</title>
    <url>/%E5%90%AF%E7%94%A8-vendorname-%E7%9A%84%E6%89%80%E6%9C%89%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<p><code>php bin/magento module:status grep &#123;VendorName&#125; grep -v List grep -v None grep -v -e &#39;^$&#39; xargs php bin/magento module:enable</code></p>
]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>如何用 PHP 的反射类实现依赖注入</title>
    <url>/%E5%A6%82%E4%BD%95%E7%94%A8-php-%E7%9A%84%E5%8F%8D%E5%B0%84%E7%B1%BB%E5%AE%9E%E7%8E%B0%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<p><strong>ReflectionClass</strong> 提供关于类的信息，它有什么属性、哪些方法、方法有哪些参数，类文件的路径是什么等等。 我们先定义两个类，然后熟悉下 ReflectionClass 的一些用法。最后我们写一个简单的函数来实现依赖注入。</p>
<h2 id="ReflectionClass-的一些方法"><a href="#ReflectionClass-的一些方法" class="headerlink" title="ReflectionClass 的一些方法"></a><a href="#reflectionclass-%E7%9A%84%E4%B8%80%E4%BA%9B%E6%96%B9%E6%B3%95"></a>ReflectionClass 的一些方法</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// Class Point</span><br><span class="line">Class Point</span><br><span class="line">&#123;</span><br><span class="line">    public $x;</span><br><span class="line">    public $y;</span><br><span class="line"></span><br><span class="line">    public function __construct($x=0, $y=0)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;x = $x;</span><br><span class="line">        $this-&gt;y = $y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Circle</span><br><span class="line">&#123;</span><br><span class="line">    // 半径</span><br><span class="line">    public $radius;</span><br><span class="line"></span><br><span class="line">    // 圆心点</span><br><span class="line">    public $center;</span><br><span class="line"></span><br><span class="line">    const PI = 3.14;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        Point $point,</span><br><span class="line">        $radius = 1</span><br><span class="line">    )&#123;</span><br><span class="line">        $this-&gt;center = $point;</span><br><span class="line">        $this-&gt;radius = $radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function printCenter()</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&#x27;center coordinate is (%d, %d)&#x27;, $this-&gt;center-&gt;x, $this-&gt;center-&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function area()</span><br><span class="line">    &#123;</span><br><span class="line">        return self::PI * pow($this-&gt;radius, 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// examples</span><br><span class="line">$reflectionClass = new reflectionClass(Circle::class);</span><br><span class="line">var_dump($reflectionClass);</span><br><span class="line"></span><br><span class="line">// 反射出类的常量</span><br><span class="line">var_dump($reflectionClass-&gt;getConstants());</span><br><span class="line">// 通过反射获取属性</span><br><span class="line">var_dump($reflectionClass-&gt;getProperties());</span><br><span class="line">// 反射出类中定义的方法</span><br><span class="line">var_dump($reflectionClass-&gt;getMethods());</span><br><span class="line">// 文件路径</span><br><span class="line">var_dump($reflectionClass-&gt;getFileName());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$constructor = $reflectionClass-&gt;getConstructor();</span><br><span class="line">var_dump($constructor);</span><br><span class="line"></span><br><span class="line">$parameters = $constructor-&gt;getParameters();</span><br><span class="line">var_dump($parameters);</span><br></pre></td></tr></table></figure>

<p>（结果就忽略掉了）</p>
<h2 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a><a href="#%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5"></a>依赖注入</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// Class Point</span><br><span class="line">Class Point</span><br><span class="line">&#123;</span><br><span class="line">    public $x;</span><br><span class="line">    public $y;</span><br><span class="line"></span><br><span class="line">    public function __construct($x=0, $y=0)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;x = $x;</span><br><span class="line">        $this-&gt;y = $y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Class Circle</span><br><span class="line">&#123;</span><br><span class="line">    // 半径</span><br><span class="line">    public $radius;</span><br><span class="line"></span><br><span class="line">    // 圆心点</span><br><span class="line">    public $center;</span><br><span class="line"></span><br><span class="line">    const PI = 3.14;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        Point $point,</span><br><span class="line">        $radius = 1</span><br><span class="line">    )&#123;</span><br><span class="line">        $this-&gt;center = $point;</span><br><span class="line">        $this-&gt;radius = $radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function printCenter()</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&#x27;center coordinate is (%d, %d)&#x27;, $this-&gt;center-&gt;x, $this-&gt;center-&gt;y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function area()</span><br><span class="line">    &#123;</span><br><span class="line">        return self::PI * pow($this-&gt;radius, 2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建类的常规方法</span><br><span class="line">// $p1 = new Point(2,2);</span><br><span class="line">// $c1 = new Circle($p1, 2);</span><br><span class="line"></span><br><span class="line">// $c1-&gt;printCenter();</span><br><span class="line">// echo $c1-&gt;area();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// dependency injection</span><br><span class="line">function make($className)</span><br><span class="line">&#123;</span><br><span class="line">    $reflectionClass = new reflectionClass($className);</span><br><span class="line">    $constructor = $reflectionClass-&gt;getConstructor();</span><br><span class="line">    $parameters = $constructor-&gt;getParameters();</span><br><span class="line">    $dependencies = getDependencies($parameters);</span><br><span class="line"></span><br><span class="line">    return $reflectionClass-&gt;newInstanceArgs($dependencies);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 依赖解析</span><br><span class="line">function getDependencies($parameters)</span><br><span class="line">&#123;</span><br><span class="line">    $dependencies = [];</span><br><span class="line">    foreach ($parameters as $parameter) &#123;</span><br><span class="line">        $dependency = $parameter-&gt;getClass();</span><br><span class="line"></span><br><span class="line">        // var_dump($dependency);</span><br><span class="line">        // 第二个参数 radius 就没有类</span><br><span class="line">        if (is_null ($dependency)) &#123;</span><br><span class="line"></span><br><span class="line">            if ($parameter-&gt;isDefaultValueAvailable()) &#123;</span><br><span class="line">                $dependencies[] = $parameter-&gt;getDefaultValue();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                // 简化的处理</span><br><span class="line">                $dependencies[] = &#x27;0&#x27;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // 递归解析出依赖类的对象</span><br><span class="line">            $dependencies[] = make($parameter-&gt;getClass()-&gt;name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return $dependencies;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$c2 = make(&#x27;Circle&#x27;);</span><br><span class="line">$area = $c2-&gt;area();</span><br><span class="line">var_dump($c2, $area);</span><br></pre></td></tr></table></figure>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#%E5%8F%82%E8%80%83"></a>参考</h2><p><a href="http://php.net/manual/en/class.reflectionclass.php">ReflectionClass php mannual</a> <a href="https://wenku.baidu.com/view/5e9c86686fdb6f1aff00bed5b9f3f90f77c64d79.html">参考链接</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>ReflectionClass</tag>
      </tags>
  </entry>
  <entry>
    <title>微信的 UA</title>
    <url>/%E5%BE%AE%E4%BF%A1%E7%9A%84-ua/</url>
    <content><![CDATA[<p>以下是抓取的 UA 安卓</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Linux; Android 6.0; M5 Note Build/MRA58K; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/53.0.2785.49 Mobile MQQBrowser/6.2 TBS/043313 Safari/537.36 MicroMessenger/6.5.10.1080 NetType/WIFI Language/zh_CN</span><br></pre></td></tr></table></figure>

<p>IOS 平板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (iPad; CPU OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12F69 MicroMessenger/6.5.12 NetType/WIFI Language/zh_CN</span><br></pre></td></tr></table></figure>

<p>通过 <code>MicroMessenger</code> 关键词来判断是否是微信 JS 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixin()&#123;</span><br><span class="line">    var ua = navigator.userAgent.toLowerCase();</span><br><span class="line">    if(ua.match(/MicroMessenger/i)==&quot;micromessenger&quot;) &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>PHP 方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function is_weixin()&#123; </span><br><span class="line">    if ( strpos($_SERVER[&#x27;HTTP_USER_AGENT&#x27;], &#x27;MicroMessenger&#x27;) !== false ) &#123;</span><br><span class="line">            return true;</span><br><span class="line">    &#125;   </span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Winodows 微信客户端的 UA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 MicroMessenger/6.5.2.501 NetType/WIFI WindowsWechat QBCore/3.43.556.400 QQBrowser/9.0.2524.400</span><br></pre></td></tr></table></figure>

<p>多出 <code>WindowsWechat</code> 关键词 IOS 微信客户端使用系统的浏览器，没有单独的浏览器。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>整理省市区数据</title>
    <url>/%E6%95%B4%E7%90%86%E7%9C%81%E5%B8%82%E5%8C%BA%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>本文主要是为了记录备查。 为了开发 Magento 2 checkout 页面省市区三级联动，需要整理出我国的省市区数据。 数据以国家统计局公布的 <a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/201703/t20170310_1471429.html">最新县及县以上行政区划代码（截止2016年7月31日）</a> 为参考。 其他年份的参考<a href="http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/">国家统计局行政区划代码</a> 总计：一级 34 条记录，二级 365 条，三级 2822 条。 刚开始的思路不对，白浪费了许多时间。 附上转化和校正代码。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 更好的方法</span><br><span class="line">// 从网站上拷贝后整理成 csv 用 file differ</span><br><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-type: text/html; charset=utf-8&quot;);</span><br><span class="line"></span><br><span class="line">// 转化</span><br><span class="line">$ofile = fopen(&#x27;old.csv&#x27;, &#x27;r&#x27;);</span><br><span class="line"></span><br><span class="line">while (!feof($ofile)) &#123;</span><br><span class="line">    echo json_encode(fgetcsv($ofile), JSON_UNESCAPED_UNICODE);</span><br><span class="line">    echo &#x27;,&lt;br/&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 以公布数据为本，看整理数据中有哪些缺少或不同</span><br><span class="line">// $res = [</span><br><span class="line">//     [&#x27;110000&#x27;, &#x27;北京&#x27;],</span><br><span class="line">//     [&#x27;120000&#x27;, &#x27;天津&#x27;],</span><br><span class="line">//     [&#x27;130000&#x27;, &#x27;河北省&#x27;],</span><br><span class="line">//     // ... 省略</span><br><span class="line">//     [&#x27;654326&#x27;, &#x27;吉木乃县&#x27;],</span><br><span class="line">// ];</span><br><span class="line"></span><br><span class="line">// $ofile   = fopen(&#x27;old.csv&#x27;, &#x27;r&#x27;);</span><br><span class="line">// $zhaodao = false;</span><br><span class="line"></span><br><span class="line">// while ($data = fgetcsv($ofile)) &#123;</span><br><span class="line"></span><br><span class="line">//     foreach ($res as $key) &#123;</span><br><span class="line">//         if ($data[1] == &#x27;市辖区&#x27;  $data[1] == &#x27;省直辖县级行政区划&#x27;  $data[1] == &#x27;自治区直辖县级行政区划&#x27;) &#123;</span><br><span class="line">//             $zhaodao = true;</span><br><span class="line">//             break;</span><br><span class="line">//         &#125;</span><br><span class="line">//         if ($key[0] == $data[0]) &#123;</span><br><span class="line">//             $zhaodao = true;</span><br><span class="line">//             break;</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;</span><br><span class="line">//     if (!$zhaodao) &#123;</span><br><span class="line">//         echo $data[0] . $data[1] . &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">//     &#125;</span><br><span class="line">//     $zhaodao = false;</span><br><span class="line">// &#125;</span><br><span class="line">// fclose($ofile);</span><br><span class="line"></span><br><span class="line">// echo &#x27;------------------&#x27;;</span><br><span class="line"></span><br><span class="line">// 以整理数据为本，对比统计数据，是否多余</span><br><span class="line">// $ofile   = fopen(&#x27;old.csv&#x27;, &#x27;r&#x27;);</span><br><span class="line">// $zhaodao = false;</span><br><span class="line"></span><br><span class="line">// foreach ($res as $key) &#123;</span><br><span class="line"></span><br><span class="line">//     while ($data = fgetcsv($ofile)) &#123;</span><br><span class="line">//         if (($key[0] == $data[0]) &amp;&amp; ($key[1] == $data[1])) &#123;</span><br><span class="line">//             $zhaodao = true;</span><br><span class="line">//             break;</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;</span><br><span class="line">//     if (!$zhaodao) &#123;</span><br><span class="line">//         echo $key[0] . $key[1] . &#x27;&lt;br/&gt;&#x27;;</span><br><span class="line">//     &#125;</span><br><span class="line">//     $zhaodao = false;</span><br><span class="line">//     fseek($ofile, 0);</span><br><span class="line">// &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>省市区三级联动</tag>
      </tags>
  </entry>
  <entry>
    <title>构建高性能 web 站点笔记（一）</title>
    <url>/%E6%9E%84%E5%BB%BA%E9%AB%98%E6%80%A7%E8%83%BD-web-%E7%AB%99%E7%82%B9%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h2 id="用户等待时间的构成"><a href="#用户等待时间的构成" class="headerlink" title="用户等待时间的构成"></a><a href="#%E7%94%A8%E6%88%B7%E7%AD%89%E5%BE%85%E6%97%B6%E9%97%B4%E7%9A%84%E6%9E%84%E6%88%90"></a>用户等待时间的构成</h2><p>用户等待时间 &#x3D; 请求传输时间 + 服务器处理时间（吞吐率，每秒处理请求数，处理时间的倒数） + 数据在网路上的传输时间（响应时间） + 浏览器解析时间</p>
<p>响应时间的决定因素主要包括数据量和网络带宽</p>
<p>吞吐率的影响因素有很多，比如服务器的并发策略、 I&#x2F;O 模型、I&#x2F;O 性能、CPU 核数等。也包括应用程序本身的逻辑复杂度等。</p>
<p>浏览器解析时间影响因素有浏览器采用的并发策略、样式渲染方式、脚本解释器的性能、页面大小、组件的数量、页面组件缓存状况、页面组件域名分布以及域名 DNS 解析等，并且一些因素随着各厂商浏览器版本的不同略有变化。</p>
<h2 id="带宽与响应时间"><a href="#带宽与响应时间" class="headerlink" title="带宽与响应时间"></a><a href="#%E5%B8%A6%E5%AE%BD%E4%B8%8E%E5%93%8D%E5%BA%94%E6%97%B6%E9%97%B4"></a>带宽与响应时间</h2><p>带宽的单位是 bits&#x2F;s 单位时间的比特数<br>带宽可以解释为数据在线路中的移动速度，带宽的高低表示线路能力的强弱，100M 带宽全称是 100 Mbits&#x2F;s</p>
<p>响应时间 &#x3D; 发送时间 + 传播时间 + 处理时间（排队时间）<br>响应时间 &#x3D; （数据量比特数 &#x2F; 带宽）+ （传播距离 &#x2F; 传播速度）+ 处理时间</p>
<p>下载速度 &#x3D; 数据量字节数 &#x2F; 响应时间</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
      <tags>
        <tag>响应时间</tag>
        <tag>带宽</tag>
        <tag>用户等待时间的构成</tag>
      </tags>
  </entry>
  <entry>
    <title>移除 wordpress 版本号</title>
    <url>/%E7%A7%BB%E9%99%A4-wordpress-%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
    <content><![CDATA[<p>彻底移除 wordpress 版本号 在 <code>functions.php</code> 文件中添加以下 代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//去除window._wpemojiSettings</span><br><span class="line">remove_action(&#x27;admin_print_scripts&#x27;, &#x27;print_emoji_detection_script&#x27;);</span><br><span class="line">remove_action(&#x27;admin_print_styles&#x27;, &#x27;print_emoji_styles&#x27;);</span><br><span class="line">remove_action(&#x27;wp_head&#x27;, &#x27;print_emoji_detection_script&#x27;, 7);</span><br><span class="line">remove_action(&#x27;wp_print_styles&#x27;, &#x27;print_emoji_styles&#x27;);</span><br><span class="line">remove_filter(&#x27;the_content_feed&#x27;, &#x27;wp_staticize_emoji&#x27;);</span><br><span class="line">remove_filter(&#x27;comment_text_rss&#x27;, &#x27;wp_staticize_emoji&#x27;);</span><br><span class="line">remove_filter(&#x27;wp_mail&#x27;, &#x27;wp_staticize_emoji_for_email&#x27;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 去掉 wp 版本信息</span><br><span class="line">remove_action(&#x27;wp_head&#x27;, &#x27;wp_generator&#x27;);</span><br><span class="line"></span><br><span class="line">function remove_wp_version_strings($src)</span><br><span class="line">&#123;</span><br><span class="line">    if (strpos($src, &#x27;ver=&#x27;)) &#123;</span><br><span class="line">        $src = remove_query_arg(&#x27;ver&#x27;, $src);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $src;</span><br><span class="line">&#125;</span><br><span class="line">add_filter(&#x27;script_loader_src&#x27;, &#x27;remove_wp_version_strings&#x27;);</span><br><span class="line">add_filter(&#x27;style_loader_src&#x27;, &#x27;remove_wp_version_strings&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Wordpress</category>
      </categories>
      <tags>
        <tag>移除 wordpress 版本号</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 ssh 连接经常断掉的问题</title>
    <url>/%E8%A7%A3%E5%86%B3-ssh-%E8%BF%9E%E6%8E%A5%E7%BB%8F%E5%B8%B8%E6%96%AD%E6%8E%89%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>记录下其中一种方法。 打开 <code>/etc/ssh/sshd_config</code> 找到下面的两行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#ClientAliveInterval 0</span><br><span class="line">#ClientAliveCountMax 3</span><br></pre></td></tr></table></figure>

<p>增加两行（或者修改为）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ClientAliveInterval 540</span><br><span class="line">ClientAliveCountMax 3</span><br></pre></td></tr></table></figure>

<p>ClientAliveInterval 表示服务器隔多长时间向客户端发送请求消息， 默认是 0 不发送。单位是秒。540 就是 9 分钟。 如果发现客户端没有响应，则判断一次超时。ClientAliveCountMax 表示允许超时的次数。 这样就是 9*3 &#x3D; 27 分钟无响应后自动断开。 设置完成后重启 sshd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
      <tags>
        <tag>ssh 掉线</tag>
      </tags>
  </entry>
  <entry>
    <title>防火墙设置</title>
    <url>/%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p><strong>问题：</strong>虚拟机 ping 不通主机，主机可 ping 通虚拟机。关闭主机的防火墙，发现虚拟机可以 ping 通主机。 <strong>解决方法：</strong> 1.打开 windows 防火墙 2.选择高级设置 3.入站规则 4.找到配置文件类型为“公用”的“文件和打印共享（回显请求 – ICMPv4-In）”规则，设置为允许。 <img src="/wp-content/uploads/2018/02/windows%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="防火墙设置：虚拟机ping不通主机，但是主机可以ping通虚拟机"> <strong>参考：</strong> <a href="http://www.linuxdiyf.com/linux/26502.html">防火墙设置：虚拟机ping不通主机，但是主机可以ping通虚拟机</a></p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云跨地域共享镜像与 rds 数据库迁移</title>
    <url>/%E9%98%BF%E9%87%8C%E4%BA%91%E8%B7%A8%E5%9C%B0%E5%9F%9F%E5%85%B1%E4%BA%AB%E9%95%9C%E5%83%8F%E4%B8%8E-rds-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p><em>这是一篇工作总结性的文章</em></p>
<p>测试环境和正式的生产环境都在 <a href="https://s.click.taobao.com/t?e=m=2&s=ZLet3zzmTmQcQipKwQzePCperVdZeJviEViQ0P1Vf2kguMN8XjClArdSxPlT44jLmf8osd37L+e76oIJDt2lqK4gxhN4u746yZnvxiWdZT2znNtfj0B10+dn1BbglxZYxUhy8exlzcpAFEHVckI7b93srg/L/eD3keUEnoKELDlWYetMiZZgV+Sx6OrKqagyklzFeKMz7Cd4Qek9OyREeQ+dciYQJaT7LNmFwzcjFAU=">阿里云 ECS</a>  上，但由不同的账户持有（就是移交给客户）。他们在不同的地域。而且原先的数据库使用的是 ECS 上自建的 MySQL 数据库，现在要迁移到 <a href="https://s.click.taobao.com/t?e=m=2&s=3ACopjQ2jqscQipKwQzePCperVdZeJviEViQ0P1Vf2kguMN8XjClArdSxPlT44jLOBBmly7IL4676oIJDt2lqK4gxhN4u746yZnvxiWdZT2znNtfj0B10+dn1BbglxZYxUhy8exlzcq9AmARIwX9K+nbtOD3UdznPV1H2z0iQv9NkKVMHClW0R0UfDzlkg+9vjQXzzpXdTHGJe8N/wNpGw==">阿里云的 RDS</a> 。</p>
<p>所以就用到了阿里云跨地域共享镜像。这个对部署来说还是挺方便的。</p>
<p>首先要创建自定义镜像，在实例的操作中可以找到对应的操作。</p>
<p><img src="/wp-content/uploads/2017/01/aliyun-cross-region-share-image.png"></p>
<p>由于阿里云的自定义镜像不能跨地域使用，所以我们需要复制镜像到目标地域。截止到本文发表时间，复制镜像功能出于公测状态，需要提交工单申请，参考这里 <a href="https://help.aliyun.com/document_detail/25462.html">复制镜像</a>。以后应该就不用申请可以直接用了吧。工单陆续交流了接近 2 小时，终于开通了，可能中午吃饭时间吧。还是有点慢的。</p>
<p>复制到目标地域后，就可以分享镜像给指定的用户了。<a href="https://help.aliyun.com/document_detail/25463.html?spm=5176.doc25462.6.662.kkJrEx">共享镜像</a> 参考这里。<br>操作很容易，不过要最好看下注意事项。</p>
<p>然后可以登录收到共享的账户，更换系统盘，使用共享的镜像来创建实例了。</p>
<p>阿里云不同地域间的产品内网不互通，订购后不支持换地域。所以 <strong>rds 要和云服务器买在一个地域内</strong>。不同的可用区容灾能力更高，相同的可用区网络延时更低。<a href="https://help.aliyun.com/knowledge_detail/40654.html">参考这里</a></p>
<p>在阿里云的后台控制面板中，先在数据库连接中，调整网络类型和云服务器一致（都是专有网络或者都是经典网络）</p>
<p>然后要设置白名单，不然无法连接。</p>
<p>创建数据库账户，授权等。</p>
<p>最后在备份恢复中，找到迁移数据库。按照提示一步步走。原来我使用的数据库版本是 MySQL 5.7 ，阿里云的 RDS 为 5.6 ，还是成功迁移了。目前没发现问题。</p>
<p>最后我们更改<code>&lt;magento root&gt;/etc/env.php</code> 中关于数据库连接的部分。</p>
<p>然后重新测试下站点（域名解析什么的就略过了），这下就成了。</p>
<p>但是当我们使用命令行 <code>php bin/magento setup:upgrade</code> 的时候，会提示权限不足。</p>
<p>看起来阿里云 rds 默认的账户权限不够。于是我们创建了高权限账户，然后登陆数据库，通过 SQL 语句来授权。就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GRANT ALL ON `dbname`.* TO `dbuser`@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure>

<p>这下大功告成了！</p>
]]></content>
      <categories>
        <category>系统管理员</category>
      </categories>
  </entry>
  <entry>
    <title>隐藏 Magento 2 管理后台的 middle name</title>
    <url>/%E9%9A%90%E8%97%8F-magento-2-%E7%AE%A1%E7%90%86%E5%90%8E%E5%8F%B0%E7%9A%84-middle-name/</url>
    <content><![CDATA[<p>管理后台的数据是通过 UI component 加载的。<br>隐藏 customer 和 customer address 的 middlename</p>
<p>File: app\code\Vendor\ModuleName\view\base\ui_component\customer_form.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;form xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;fieldset name=&quot;customer&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;middlename&quot; formElement=&quot;input&quot;&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;visible&gt;false&lt;/visible&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">    &lt;fieldset name=&quot;address&quot;&gt;</span><br><span class="line">        &lt;field name=&quot;middlename&quot; formElement=&quot;input&quot;&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;visible&gt;false&lt;/visible&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Magento 开发教程</category>
      </categories>
  </entry>
  <entry>
    <title>KnockoutJS Primer for Magento Developers （翻译）</title>
    <url>/alan-knockoutjs-primer-for-magento-developers/</url>
    <content><![CDATA[<p><em><a href="http://alanstorm.com/knockoutjs_primer_for_magento_developers/">原文地址</a></em></p>
<p>在我们可以继续探索 Magento 的 js 高级特性之前，我们得先补习 <a href="http://knockoutjs.com/">KnockoutJS</a>KnockoutJS 是一个 javaScript MVVM 系统，他是 Magento 2 中的主要 DOM 操作框架。</p>
<p>本篇教程旨在帮助 Magento 开发者熟悉 KnockoutJS 的基本概念，重点介绍 Magento 使用的一些 KnockoutJS 功能。如果你打算用 KnockoutJS 创建东西的话，强烈建议你参阅<a href="http://learn.knockoutjs.com/">KnockoutJS 官方 tutorials</a></p>
<h2 id="Hello-Model-View-View-Model"><a href="#Hello-Model-View-View-Model" class="headerlink" title="Hello Model,View,View Model"></a><a href="#hello-model,view,view-model"></a>Hello Model,View,View Model</h2><p>首先，让我们来创建下面的 HTML 页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery-3.0.0.min.js&quot; integrity=&quot;sha256-JmvOoLtYsmqlsWxa7mDSLMwa6dZ9rrIdtrrVYRnDRH0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>这个页面：</p>
<ol>
<li>从 CDN 加载 KnockoutJS 库</li>
<li>从 CDN 加载 JQuery 库</li>
<li>设置了一个空的 DOM 结构</li>
</ol>
<p>你不需要从 CDN 加载 jQuery 和 KnockoutJS，不过这样做比较容易。</p>
<p>如果你用浏览器打开这个页面，你会看到一个空白页。因为你得：</p>
<ol>
<li>Add the javascript code that creates a view model and applies the KnockoutJS bindings</li>
<li>Add the view code to the HTML page that reads from the view model</li>
</ol>
<p>我们先来做第一个，创建一个名为<code>ko-init.js</code>的文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    viewModel = &#123;</span><br><span class="line">        title:&quot;Hello World&quot;,</span><br><span class="line">        content:&quot;So many years of hello world&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在我们的页面中引入这个js 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/knockout/3.4.0/knockout-min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://code.jquery.com/jquery-3.0.0.min.js&quot; integrity=&quot;sha256-JmvOoLtYsmqlsWxa7mDSLMwa6dZ9rrIdtrrVYRnDRH0=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;ko-init.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>最后，修改<code>h1</code>和<code>p</code>标签，给他们添加如下的<code>data-bind</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:content&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>现在刷新页面，你应该会看到：<br><img src="/wp-content/uploads/2016/11/alan-knockoutjs-first.png"><br>恭喜你！你成功创建了第一 KnockoutJS view model 和 view</p>
<h2 id="What-Just-Happened"><a href="#What-Just-Happened" class="headerlink" title="What Just Happened"></a><a href="#what-just-happened"></a>What Just Happened</h2><p>KnockoutJS 本身是 <strong>MVVM</strong>系统，MVVM 代表着 Model，View,View Model。Really though, KnockoutJS is better billed as a VVM system, since its agnostic about what sort of model code you use to fetch data. view 是指 HTML 页面，view model 是指带数据的 js 对象。</p>
<p>让我们来看看js 代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    viewModel = &#123;</span><br><span class="line">        title:&quot;Hello World&quot;,</span><br><span class="line">        content:&quot;So many years of hello world&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>jQuery 并非必要的，只不过 KnockoutJS 不能在 DOM 还没有完成加载前进行渲染，jQuery 的 document ready 函数正可以帮助我们达到目的。<code>jQuery();</code>相当于<code>$(document).ready();</code></p>
<p>这里我们创建了一个带键值对的 view model</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">viewModel = &#123;</span><br><span class="line">    title:&quot;Hello World&quot;,</span><br><span class="line">    content:&quot;So many years of hello world&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后我们应用了 KnockoutJS 的绑定。换一种说法是我们让 KnockoutJS 用 view model 去渲染 view。再说一遍，view 是整个 HTML 页面。</p>
<p>我们来看看 view 部分，注意<code>data-bind</code>属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:content&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>当你调用<code>applyBindings</code>时，KnockoutJS 会扫描整个 HTML 页面寻找<code>data-bind</code>属性。it parses the attribute for the binding name and value, and then invokes a set of rules based on the name of the binding.</p>
<p>举例来说，上面我们调用的绑定是<code>text</code>，我们传递给<code>text</code>绑定的是<code>title</code>。text 绑定应用的规则是：“从 view model 对象中使用传递过来的值作为键取出对应的值，然后将该值插入到 DOM 中，作为一个 text 节点。”如果用纯 js 来表示的话，就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value = viewModel[&#x27;title&#x27;];</span><br><span class="line">textNode = document.createTextNode(value);</span><br><span class="line">h1.appendChild(textNode);</span><br></pre></td></tr></table></figure>

<p>KnockoutJS 的第一个招数是他使开发者免于自己使用 js 创建和更新 DOM 节点。开发者通关过书写带有<code>data-bind</code>属性的 HTML 标签来给他赋值。你不仅可以使用键值对，看下面这个更复杂的 view model。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.getTitle = function()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;Hello Method World&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">       this.content = &quot;So many years of hello world&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们使用了 js 构造函数创建了一个简单的对象。这个对象有一个<code>getTitle</code>方法。如果我们修改下<code>page.html</code>来调用<code>getTitle</code>方法，你会发现效果和预期的一样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:getTitle()&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:content&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>Another way of thinking about binding parameters is they’re a temporary, limited javascript scope to access your view model’s values and methods.</p>
<h2 id="Other-Bindings"><a href="#Other-Bindings" class="headerlink" title="Other Bindings"></a><a href="#other-bindings"></a>Other Bindings</h2><p>虽然这个例子比较简单，但是从中可以开始了解到，这种简单的构建 block 是如何实现更为复杂的视图逻辑的。（While this example is simple, you can start to see how this basic building block could implement far more complicated view logic）更新DOM的事交给数据绑定来做，更新模型的事情交给non-DOM js 代码来完成。</p>
<p>再举个例子了解下其他的绑定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.getTitle = function()</span><br><span class="line">        &#123;</span><br><span class="line">            return &quot;Hello World&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">       this.content = &quot;So many years of hello world&quot;;</span><br><span class="line">       this.theValue = &quot;2&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:getTitle()&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:content&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; data-bind=&quot;value:theValue&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>刷新页面，你会看到：</p>
<p><img src="/wp-content/uploads/2016/11/alan-knockoutjs-second.png"></p>
<p>这里我们使用了一个新的 KnockoutJS 绑定</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data-bind=&quot;value:theValue&quot;</span><br></pre></td></tr></table></figure>

<p>我们使用<code>value</code>绑定将值赋给表单字段。下面让我们把 input 换成 select 看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:getTitle()&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:content&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;select data-bind=&quot;value:theValue&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;&quot;&gt;-- Choose --&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;First&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot;&gt;Second&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;3&quot;&gt;Third&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>刷新页面后，你会看到已经设置 select 的值为2了。<br><img src="/wp-content/uploads/2016/11/alan-knockoutjs-third.png"></p>
<p>虽然这个例子很简单，背后的概念可不简单。不需要修改任何 js 程序代码，value binding 就可以让我们更改 UI</p>
<h2 id="Observables"><a href="#Observables" class="headerlink" title="Observables"></a><a href="#observables"></a>Observables</h2><p>到目前为止，我们看到还只是小招数，已经很强大了。Neat, maybe useful, but it only sets the stage for KnockoutJS’s real “knockout” feature — observables.</p>
<p>下面，我们还是以例子开始。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:theValue&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;select data-bind=&quot;value:theValue&quot;&gt;</span><br><span class="line">        &lt;option value=&quot;&quot;&gt;-- Choose --&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;1&quot;&gt;First&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;2&quot;&gt;Second&lt;/option&gt;</span><br><span class="line">        &lt;option value=&quot;3&quot;&gt;Third&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; data-bind=&quot;value:theValue&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;br/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;button id=&quot;button&quot;&gt;Do It&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">       this.theValue = ko.observable(&quot;1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.viewModel = new viewModelConstructor;</span><br><span class="line">    ko.applyBindings(window.viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>重新载入页面，你会发现我们给<code>&lt;input/&gt;</code>和<code>&lt;p/&gt;</code>标签绑定了值<code>1</code>。到目前为止我们的页面没什么新变化——这和我们之前做的绑定一样。但是，你注意到在我们的 view model 中，我写了一点不一样的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">this.theValue = ko.observable(&quot;1&quot;);</span><br></pre></td></tr></table></figure>

<p>我们没有给<code>theValue</code>硬编一个值或者是一个custom function，我们给他的是一个 KnockoutJS <code>observable</code><strong>An observable is a special sort of getter and setter.</strong></p>
<p>打开浏览器 console ，输入<code>viewModel.theValue()</code>，你会发现我们可以像调用函数一样取得 observable 的值。（因为我们定义viewModel为全局对象window 的属性，所以我们可以通过 console 访问到他）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; viewModel.theValue()</span><br><span class="line">&gt; &quot;1&quot;</span><br></pre></td></tr></table></figure>

<p>我们可以给 observable 传递参数来设置他的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; viewModel.theValue(&quot;3&quot;)</span><br><span class="line">//...</span><br><span class="line">&gt; viewModel.theValue()</span><br><span class="line">&gt; &quot;3&quot;</span><br></pre></td></tr></table></figure>

<p>However, the real power of an observable is in what happens to the DOM nodes we’ve bound that observable to。试着在console 中改变 observer 的值，注意页面的变化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; viewModel.theValue(&quot;3&quot;);</span><br><span class="line">&gt; viewModel.theValue(&quot;2&quot;);</span><br><span class="line">&gt; viewModel.theValue(&quot;1&quot;);</span><br><span class="line">&gt; viewModel.theValue(&quot;10&quot;);</span><br></pre></td></tr></table></figure>

<p>一旦你修改了 observable 的值，被绑定的 DOM 也立刻有了变化。作为开发者，我们再也不用关心怎么更新 DOM nodes 了。一旦我们给 model 中的值做了改变，他的值会立刻自动反应到用户界面上。</p>
<p>看下面一个view model 带方法的例子。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.theValue = ko.observable(&quot;1&quot;);</span><br><span class="line">        var that = this;</span><br><span class="line">        this.pickRandomValue = function()&#123;</span><br><span class="line">            var val = Math.floor(Math.random() * (3));</span><br><span class="line">            that.theValue(val);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    window.viewModel = new viewModelConstructor;</span><br><span class="line">    ko.applyBindings(window.viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>使用 KnockoutJS 的事件绑定（比如<code>click</code>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;button data-bind=&quot;click:pickRandomValue&quot;&gt;Do It&lt;/button&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Template-Binding"><a href="#Template-Binding" class="headerlink" title="Template Binding"></a><a href="#template-binding"></a>Template Binding</h2><p>另一个要重点理解的是 KnockoutJS 的模板绑定。考虑下面的 view model</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.first = &#123;</span><br><span class="line">            theTitle:ko.observable(&quot;Hello World&quot;),</span><br><span class="line">            theContent:ko.observable(&quot;Back to Hello World&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">        this.second = &#123;</span><br><span class="line">            theTitle:ko.observable(&quot;Goodbye World&quot;),</span><br><span class="line">            theContent:ko.observable(&quot;We&#x27;re sailing west now&quot;)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    viewModel = new viewModelConstructor;</span><br><span class="line">    ko.applyBindings(viewModel);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们创建了一个标准的view model 但是 data 对象是嵌套的。然后我么修改view</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;main&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;one&quot; data-bind=&quot;template:&#123;&#x27;name&#x27;:&#x27;hello-world&#x27;,&#x27;data&#x27;:first&#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;two&quot; data-bind=&quot;template:&#123;&#x27;name&#x27;:&#x27;hello-world&#x27;,&#x27;data&#x27;:second&#125;&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=&quot;text/html&quot; id=&quot;hello-world&quot;&gt;</span><br><span class="line">        &lt;h1 data-bind=&quot;text:theTitle&quot;&gt;&lt;/h1&gt;</span><br><span class="line">        &lt;p data-bind=&quot;text:theContent&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>你将会看到：</p>
<p><img src="/wp-content/uploads/2016/11/alan-knockoutjs-fourth.png"></p>
<p>template 绑定接受一个 js 对象作为参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div id=&quot;one&quot; data-bind=&quot;template:&#123;&#x27;name&#x27;:&#x27;hello-world&#x27;,&#x27;data&#x27;:first&#125;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>data 参数是我们要渲染的 view model 的属性。name 是要查找和渲染的模板名称。</p>
<p>添加模板最基本的做法是添加<code>&lt;script type=&quot;text/html&quot;&gt;</code>并且给他命名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;script type=&quot;text/html&quot; id=&quot;hello-world&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:theTitle&quot;&gt;&lt;/h1&gt;</span><br><span class="line">    &lt;p data-bind=&quot;text:theContent&quot;&gt;&lt;/p&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>If you’ve never seen this before it may seem weird&#x2F;foreign, but many modern javascript frameworks use non-<code>text/javascript</code> <code>&lt;script/&gt;</code> tags as a way to add non-rendered (but DOM accessible) content to a page.模板是一些带有 KnockoutJS 绑定的 HTML 片段</p>
<h2 id="Components"><a href="#Components" class="headerlink" title="Components"></a><a href="#components"></a>Components</h2><p>下面是组件绑定。 Components are a way to package together a KnockoutJS template, and a KnockoutJS view file. This means you can have a relatively simple view。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div data-bind=&quot;component:&#x27;component-hello-world&#x27;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>隐藏了注册了的组件的复杂性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.message = &quot;Hello World&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var theTemplate = &quot;&lt;h1 data-bind=\&quot;text:message\&quot;&gt;&lt;/h1&gt;&quot;;</span><br><span class="line"></span><br><span class="line">    ko.components.register(&#x27;component-hello-world&#x27;, &#123;</span><br><span class="line">        viewModel:viewModelConstructor,</span><br><span class="line">        template:theTemplate</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ko.applyBindings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>component 对象的<code>register</code>方法第一个参数接受组件的名称，第二个参数接受一个 KnockoutJS component 对象。component 对象是一个有两个属性的 js 对象。<code>viewModel</code>属性接受一个 view model 构造函数，<code>template</code>属性是 KnockoutJS 模板字符串。一旦完成组件注册，你就可以通过传递组件的名称来使用它了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div data-bind=&quot;component:&#x27;component-hello-world&#x27;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如果你不想用<code>data-bind</code>这样的语法，KnockoutJS 提供了另一种基于组件名称的自定义标签，试试看下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;component-hello-world&gt;&lt;/component-hello-world&gt;</span><br></pre></td></tr></table></figure>

<p>这依然仅仅触及 KnockoutJS 的表面，官方文档对<a href="http://knockoutjs.com/documentation/component-overview.html">组件绑定</a>讲得不错，可以参阅以下。</p>
<h2 id="Custom-Binding"><a href="#Custom-Binding" class="headerlink" title="Custom Binding"></a><a href="#custom-binding"></a>Custom Binding</h2><p>KnockoutJS 允许开发者创建自定义绑定。举例来说，下面我们调用了名为<code>pulseStormHelloWorld</code>的绑定，并且将viewModel中的<code>message</code>属性的值传递给他。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: page.html --&gt;</span><br><span class="line">&lt;div data-bind=&quot;pulseStormHelloWorld:message&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>我们还没有实现<code>pulseStormHelloWorld</code>绑定，所以现在刷新页面是空白页。因为 KnockoutJS 忽略了它。下面修改<code>ko-init.js</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: ko-init.js</span><br><span class="line">jQuery(function()&#123;</span><br><span class="line">    var viewModelConstructor = function()</span><br><span class="line">    &#123;</span><br><span class="line">        this.message = &quot;Hello World&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ko.bindingHandlers.pulseStormHelloWorld = &#123;</span><br><span class="line">        update: function(element, valueAccessor)&#123;</span><br><span class="line">            jQuery(element).html(&#x27;&lt;h1&gt;&#x27; + valueAccessor() + &#x27;&lt;/h1&gt;&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    ko.applyBindings(new viewModelConstructor);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>创建自定义的KnockoutJS绑定，我只需要给 <code>ko.bindingHandlers</code>对象添加一个属性。这个属性的名称就是我们自定义绑定的名称。The <code>handler</code> is a JS object with an <code>update</code> method.当绑定被唤起时，KnockoutJS 就会调用<code>update</code>方法—— 不管是<code>applyBindings</code>或是通过 observable</p>
<p>刷新页面，你会看到自定义绑定起作用了。当然，这只是个普通的例子，但是通过自定义绑定你可以让 KnockoutJS 做任何你想得到的事。</p>
<p>如果想了解更多关于KnockoutJS自定义绑定的，请移步<a href="http://learn.knockoutjs.com/#/?tutorial=custombindings">官方custom binding tutorial</a></p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a><a href="#wrap-up"></a>Wrap up</h2><p>KnockoutJS 是一个强大现代的js框架。Its semantics, and disregard for traditional HTML concepts, may make some developers shy away at first, but as a tool of organizing and taming DOM complexity in a modern javascript application KnockoutJS has few peers.我们的教程是不完整的，但是希望足以引发你对KnockoutJS的兴趣，自己探索它的文档和教程。</p>
<p>KncokoutJS 本身不足以构成一个完整的 JS 应用程序。下周我们会探索 Magento 中与 KnockoutJS 密切相关的框架。这样会让你更了解 Magento 核心系统是如何工作的，还有怎样在你自己的模块和应用中应用 KnockoutJS。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="#%E4%B8%8B%E8%BD%BD"></a>下载</h2><p><a href="https://github.com/PiscesThankIT/KnockoutJS-Primer-for-Magento-Developers">文中使用的源代码</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 and RequireJS (翻译)</title>
    <url>/alan-magento-2-and-requirejs/</url>
    <content><![CDATA[<p><em><a href="http://alanstorm.com/magento_2_and_requirejs/">原文地址</a></em></p>
<p>既然我们已经探讨过向 Magento 2 中引入 javaScript 和 CSS 的基本知识了，现在我们要开始探索 Magento 引入的现代前端工具和库了。</p>
<p>Magento 引入现代前端科技处于有点 tricky 的位置。Magento 是一个软件平台，其次才是在该平台上的电子商务系统。有些机构的市场营销项目在启用6个月后就会被抛弃，有些原型工作在产品发布一年后就会贬值，Magento 和他们不同，作为电商平台需要专注于稳定、成熟的技术，要接受时间的考验。</p>
<p>今天，我们将探讨<a href="http://requirejs.org/">RequireJS</a>—— 他是 Magento 2 系统中几乎所有 javaScript 的基础。</p>
<p>在我们说到 Magento 2 的 RequireJS 实现之前，我们先要快速地了解下 RequireJS 是做什么的。</p>
<h2 id="RequireJS"><a href="#RequireJS" class="headerlink" title="RequireJS"></a><a href="#requirejs"></a>RequireJS</h2><p>RequireJS 是一个 javaScript 模块系统。他实现的是 AMD 标准（<a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition">Asynchronous module definition</a>）（相关的另一个标准叫 CMD）</p>
<p>AMD 标准中，javaScript 模块提供做以下事情的方法：</p>
<ol>
<li>运行 javaScript 程序默认不会用全局命名空间。</li>
<li>模块间共享代码和数据（Share javascript code and data between named modules and programs）</li>
</ol>
<p>这就是 RequireJS 的全部职责。你可能会使用 RequireJS 的模块实现某个功能，但是这个功能不是 RequireJS 本身提供的。 RequireJS 只是确保你获得那个功能的工具。</p>
<p><a href="http://requirejs.org/docs/start.html">RequireJS 的 start page</a>就有不错的例子解释 RequireJS 是怎么工作的。我们直接扣过来，再加点说明。</p>
<p>首先，下载 <a href="http://requirejs.org/docs/download.html#requirejs">RequireJS 的源文件</a>把它保存到一个名为<code>scripts</code>的文件夹下。</p>
<p>然后，创建如下文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: require-example.html --&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;My Sample Project&lt;/title&gt;</span><br><span class="line">        &lt;!-- data-main attribute tells require.js to load</span><br><span class="line">             scripts/main.js after require.js loads. --&gt;</span><br><span class="line">        &lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h1&gt;My Sample Project&lt;/h1&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>下面的代码让这个页面加载 RequireJS</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: require-example.html --&gt;</span><br><span class="line">&lt;script data-main=&quot;scripts/main&quot; src=&quot;scripts/require.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>src</code>用法我们是熟悉的，除了它，还有另一个custom <code>data-main</code>属性。这个属性告诉 RequireJS 使用<code>scripts/main</code>模块作为程序的入口。这个<code>scripts/main</code>对应文件<code>scripts/main.js</code></p>
<p>创建这么个文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: scripts/main.js</span><br><span class="line">requirejs([], function() &#123;</span><br><span class="line">    alert(&quot;Hello World&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个文件创建好后，重新载入你的页面，这时候你应该看到弹出框弹出“Hello World”。恭喜你，你已经创建了第一个 RequireJS 程序。</p>
<p>用jQuery 的<code>document ready</code>也可以做到，RequireJS 没有比它多做什么。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jQuery(function()&#123;</span><br><span class="line">    alert(&quot;Hello World&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>RequireJS 特别在他的模块化。举个例子，假设我们想要用一个叫<code>helper/world</code>的模块，那么修改我们的<code>main.js</code>文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;helper/world&#x27;], function(helper_world) &#123;</span><br><span class="line">    var message = helper_world.getMessage();</span><br><span class="line">    alert(message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里，我们将要载入的模块组织成一个数组，并将该数组作为第一个参数传递给<code>requirejs</code>方法。然后，RequireJS 将<code>helper/world</code>的输出作为<code>helper_world</code>参数传递给 function。</p>
<p>当然，如果你现在运行的话会得到一个 javascript 错误。这是因为我们还没有定义<code>helper/world</code>模块。要定义这个模块，将模块的名字转化为文件的路径，并创建如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: scripts/helper/world.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    var o = &#123;&#125;;</span><br><span class="line">    o.getMessage = function()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;Hello Module World&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    return o;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>模块定义和我们之前的主程序定义差不多，差别在于这里使用的是<code>define</code>而不是<code>requirejs</code>。<code>define</code>的第一个参数是你模块需要使用的 RequireJS 模块数组。（我们的例子里，这里是空的）第二个参数是javaScript 的函数&#x2F;闭包，定义你模块的返回值。</p>
<p>RequireJS 不规定模块应该返回或者输出什么。模块可以返回字符串，可以返回仅有一个方法的 javaScrinpt 对象（上面这个例子就是）。他还可以载入一个 javaScript 库（比如PrototypeJS）然后返回一个PrototypeJS 对象。RequireJS 只提供通过模块共享代码的系统，剩下的取决于项目开发者。</p>
<p>在我们开始 Magento 的 RequireJS 实现之前，有两个主题需要先谈谈：Require JS file loading 和 RequireJS module naming</p>
<h2 id="RequireJS-File-Loading"><a href="#RequireJS-File-Loading" class="headerlink" title="RequireJS File Loading"></a><a href="#requirejs-file-loading"></a>RequireJS File Loading</h2><p>默认情况下，RequireJS 会将模块名转换成 HTTP(S)路径。比如<code>helper/world</code>转化成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/scripts/helper/world.js</span><br><span class="line">https://example.com/scripts/helper/world.js</span><br><span class="line">//example.com/helper/scripts/world.js</span><br></pre></td></tr></table></figure>

<p>模块名被转化为以<code>.js</code>结尾的文件路径。默认情况下，RequireJS 会使用<code>require.js</code>脚本所在的文件夹作为基础路径。（上面的例子中就是<code>/script</code>）</p>
<p>但是，RequireJS 允许你设置不同的基础路径。在 RequireJS 程序开始前，添加以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">    baseUrl: &#x27;/my-javascript-code&#x27;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>添加这段代码后，RequireJS 要加载<code>helper/world</code>模块的时候，就会从下面的路径去找：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://example.com/my-javascript-code/helper/world.js</span><br><span class="line">https://example.com/my-javascript-code/helper/world.js</span><br><span class="line">//example.com/my-javascript-code/helper/world.js</span><br></pre></td></tr></table></figure>

<p>这个功能让你爱把 js 脚本放哪里就放哪里。</p>
<h2 id="RequireJS-Module-Naming"><a href="#RequireJS-Module-Naming" class="headerlink" title="RequireJS:Module Naming"></a><a href="module-naming"></a>RequireJS:Module Naming</h2><p>到目前为止，我们的例子中，RequireJS 模块名和他的物理路径是绑定的。换句话说，<code>helper/world</code>模块始终对应路径<code>helper/world.js</code></p>
<p>RequireJS 允许你通过配置来做点变化。例如，假如你希望你的<code>helper/world</code>模块被称为<code>hello</code>，只要在程序开始前添加如下配置代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        &quot;hello&quot;: &quot;helper/world&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>path</code>给你的模块重命名或者说是给他一个别名。<code>paths</code>对象的键代表着你想要的别名（hello），键对应的值表示模块的实际名称(helper&#x2F;world)</p>
<p>上面的代码放好后，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;hello&#x27;], function(hello) &#123;</span><br><span class="line">    alert(&quot;Hello World&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这段代码就会从<code>helper/world.js</code>路径来加载<code>hello</code>模块。</p>
<p>还有很多其他的配置指令来控制 RequireJS 从哪里加载模块，不过这超出本篇的范围了，了解更多，请参考<a href="http://requirejs.org/docs/api.html#jsfiles">“Load Javascript Files”</a></p>
<p>对日常的 javaScript 开发来说，你本不需要关注模块是如何通过 HTPP 加载的。你只需要在用到某模块时，就能得到那个模块，这就够了。当你需要添加新模块，添加某些不兼容的代码，或者查找某个模块的源代码（为了弄清他做什么的）时，就要关注 RequireJS 是怎么加载文件的了。</p>
<h2 id="Magento-2-and-RequireJS"><a href="#Magento-2-and-RequireJS" class="headerlink" title="Magento 2 and RequireJS"></a><a href="#magento-2-and-requirejs"></a>Magento 2 and RequireJS</h2><p>Magento 自带了 RequireJS 库，引入了一些配置，并且提供了让你添加自己的配置的机制。</p>
<p>Magento 2 使用了上面提到的 <code>baseUrl</code>。如果你查看 Magento 的页面源文件，你会看到如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    require.config(</span><br><span class="line">        &#123;&quot;baseUrl&quot;:&quot;http://magento.example.com/static/adminhtml/Magento/backend/en_US&quot;&#125;</span><br><span class="line">    );</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这意味着，遇到<code>helper/world</code>模块的时候，他将会从类似下面的URL找文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/static/adminhtml/Magento/backend/en_US/helper/world.js</span><br></pre></td></tr></table></figure>

<p>如果你阅读过 Alan 这个系列的前几篇文章，你可能认出这个URL是从模块加载前端静态的文件的URL了。这意味着你可以在你的模块中放一个RequireJS模块定义文件，例如在下面这个位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/code/Package/Module/view/base/web/my_module.js</span><br></pre></td></tr></table></figure>

<p>这样你就有了一个名为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Package_Module/my_module</span><br></pre></td></tr></table></figure>

<p>的RequireJS 模块。<br>可以从以下URL加载他：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/static/adminhtml/Magento/backend/en_US/Package_Module/my_module.js</span><br></pre></td></tr></table></figure>

<p>这意味着你可以立刻开始在<code>phtml</code>模板中使用该模块了，就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    requirejs(&#x27;Package_Module/my_module&#x27;, function(my_module)&#123;</span><br><span class="line">        //...program here...</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>或者使用单独的javaScript 文件来使用它。</p>
<h2 id="Congiguring-RequireJS-via-Modules"><a href="#Congiguring-RequireJS-via-Modules" class="headerlink" title="Congiguring RequireJS via Modules"></a><a href="#congiguring-requirejs-via-modules"></a>Congiguring RequireJS via Modules</h2><p>前面，我们说过RequireJS 的两个配置指令——<code>baseUrl</code>和<code>path</code>。随着你步入高级开发阶段，你将接触并使用到许多 RequireJS 的其他配置指令。</p>
<p>每个 Magento 模块都可以通过一个名为<code>requirejs-config.js</code>的文件来添加 RequireJS 配置指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/code/Package/Module/view/base/requirejs-config.js</span><br><span class="line">app/code/Package/Module/view/frontend/requirejs-config.js</span><br><span class="line">app/code/Package/Module/view/adminhtml/requirejs-config.js</span><br></pre></td></tr></table></figure>

<p>This is a special javascript file that Magento will automatically load on every page load using the area hierarchy. 让我们来试试看。首先我们要创建一个名为<code>Pulsestorm_RequireJsTutorial</code>的Magento 模块。<br>创建好后启用该模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:enable Pulsestorm_RequireJsTutorial</span><br><span class="line">$ php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>如果你不会创建Magento 模块的话，请参考<a href="/alan-magento-2-mvvm-mvc/">Magento 2 简介 —— 不再是 MVC</a></p>
<p>模块创建好后，请增加如下文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/RequireJsTutorial/view/base/requirejs-config.js</span><br><span class="line">alert(&quot;Hello&quot;);</span><br></pre></td></tr></table></figure>

<p>清空缓存，载入 Magento 系统的任意页面（包括后台），你应该会看到<code>alert</code>被调用的弹出框了。恭喜你，你已经成功得给模块增加了一个<code>requirejs-config.js</code>文件。</p>
<h2 id="The-Purpose-of-requirejs-config-js"><a href="#The-Purpose-of-requirejs-config-js" class="headerlink" title="The Purpose of requirejs-config.js"></a><a href="#the-purpose-of-requirejs-config.js"></a>The Purpose of requirejs-config.js</h2><p>虽然你可以使用<code>requirejs-config.js</code>运行任意的js，但是他的主要任务是：</p>
<ol>
<li>让 end-user-programmers 向 Magento 的 RequireJS 系统中增加<code>require.config</code>选项。</li>
<li>让 end-user-programmers 对自己的 js 代码进行配置或初始化。</li>
</ol>
<p>要了解 RequireJS 是怎么做的，我们需要看看 Magento 实际上是怎么处理这些<code>requirejs-config.js</code>文件的。如果你查看 Magento 的任意页面的源代码，你会看到类似下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script  type=&quot;text/javascript&quot;  src=&quot;http://magento.example.com/static/_requirejs/adminhtml/Magento/backend/en_US/requirejs-config.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这是在<code>setup:di:compile</code>（production 模式）过程中，或者运行时（developer 和 default模式）生成的一个特殊的 javaScript 文件。如果你不太了解 Magento 的模式对前端文件加载的影响，你可以查看 Alan 的文章<a href="http://alanstorm.com/magento-2-frontend-files-serving/">Magento 2: Serving Frontend Files</a>。在接下来的文章中，我们都假设你是<code>developer</code>模式的。</p>
<p>如果你在浏览器中查看下<code>requirejs-config.js</code>文件，你会看到你的<code>alert</code>表达式出现在像下面的代码中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    alert(&quot;Hello World&quot;);</span><br><span class="line">    require.config(config);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>虽然它不是100%明显，Magento 2 通过从<code>requirejs-config.js</code>生成上述代码块来让我们给系统添加额外的 RequireJS 初始化。</p>
<p>我们通过一个具体的例子来进一步了解上面的意思。让我们修改<code>requirejs-config.js</code>变成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;my_module&quot;:&quot;Package_Module/my_module&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(&quot;Done&quot;);</span><br></pre></td></tr></table></figure>

<p>这里我们定义了一个<code>config</code>变量，并且修改了<code>alert</code>的值。现在你再一次载入页面，看看<code>requirejs-config.js</code>文件，你应该就知道 Magento 到底干了什么。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;my_module&quot;:&quot;Package_Module/my_module&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(&quot;Done&quot;);</span><br><span class="line">require.config(config);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p>对每个<code>requirejs-config.js</code>文件，Magento 都创建了一个类似下面的代码块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function() &#123;</span><br><span class="line">    //CONTENTS HERE</span><br><span class="line">    require.config(config);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p><code>requirejs-config.js</code>的内容替换了<code>//CONTENTS HERE</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;my_module&quot;:&quot;Package_Module/my_module&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">alert(&quot;Done&quot;);</span><br></pre></td></tr></table></figure>

<p>这意味着，如果我们在<code>requirejs-config.js</code>文件中定义一个<code>config</code>变量，Magento 最终会将该变量传递给<code>require.config</code>。这将使得 Magento 的模块开发者可以使用 <code>RequireJS</code>的一些特性，比如：<code>shim</code>,<code>paths</code>,<code>baseUrl</code>,<code>map</code>以及其他<a href="http://requirejs.org/docs/api.html#config">RequireJS’s configuration directives</a></p>
<h2 id="Understanding-Lazy-Loading"><a href="#Understanding-Lazy-Loading" class="headerlink" title="Understanding Lazy Loading"></a><a href="#understanding-lazy-loading"></a>Understanding Lazy Loading</h2><p>另一个要理解的重点是RequireJS 的模块是延迟加载的（lazy load）。</p>
<p>换句话说，加入我们使用了下面的配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;my_module&quot;:&quot;Package_Module/my_module&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>默认情况下，Magento 是不会加载<code>Package_Module/my_module.js</code>文件的。Magento 只会在你要用它的时候加载他。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;my_module&#x27;], function(my_module)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">requirejs([&#x27;Package_Module/my_module&#x27;], function(my_module)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">define([&#x27;Package_Module/my_module&#x27;], function(my_module)&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>记住，RequireJS 的日常开发时是不需要考虑如何请求源文件的细节的。延迟加载帮助用户节约了带宽，有时候某些页面用不着某些js 文件，这样就不用下载他们了。</p>
<p>但是，在不那么理想的情况下，延迟加载的行为可能和一些比较早的 js 框架或是库配合不好。下面我们在讲到一些<code>jQuery gotchas</code>时，我们会探讨一个例子。</p>
<h2 id="Global-jQuery-Object"><a href="#Global-jQuery-Object" class="headerlink" title="Global jQuery Object"></a><a href="#global-jquery-object"></a>Global jQuery Object</h2><p>即使你决定不用 RequireJS，你坚持用 plain old jQuery。你还是需要知道 RequireJS 是怎样与 AMD 标准前的 js 库交互的。</p>
<p>在 Magento 2 中，jQuery 以 RequireJS 模块的方式被加载进来。这意味着，如果你尝试使用如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    jQuery(function()&#123;</span><br><span class="line">        //your code here</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>你的浏览器会报错说<code>jQuery</code> is undefined。这是因为jQuery 全局对象并不存在，你得以 RequireJS 模块的方式使用jQuery。如果你习惯写上面这种类型的代码，你得这样做：</p>
<ol>
<li>Replace it with code that kicks off execution of a RequireJS program</li>
<li>Configure that program to use the jquery module as a dependency</li>
</ol>
<p>换句话说，像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;jquery&#x27;], function(jQuery)&#123;</span><br><span class="line">    jQuery(function()&#123;</span><br><span class="line">        //your code here</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>通过<code>requirejs</code>函数调用开始，传递给他所依赖的模块的数组，并且以匿名函数作为程序的main entry point。</p>
<p><code>requirejs</code>的第一个参数是他所依赖的模块的数组列表。举例来说，下面的代码相当于告诉 RequireJS “我的程序是依赖jQuery模块的”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;jquery&#x27;],</span><br></pre></td></tr></table></figure>

<p><code>requirejs</code>的第二个参数是一个匿名函数，RequireJS 会加载你声明的依赖模块，并将他的返回值传递给匿名函数并调用它。</p>
<p>jQuery 的新版本会检测自己是否被包含在 RequireJS&#x2F;AMD 的环境中，如果是就会定义一个模块，并且返回全局的 jQuery 对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ File: http://code.jquery.com/jquery-1.12.0.js</span><br><span class="line">// Register as a named AMD module, since jQuery can be concatenated with other</span><br><span class="line">// files that may use define, but not via a proper concatenation script that</span><br><span class="line">// understands anonymous AMD modules. A named AMD is safest and most robust</span><br><span class="line">// way to register. Lowercase jquery is used because AMD module names are</span><br><span class="line">// derived from file names, and jQuery is normally delivered in a lowercase</span><br><span class="line">// file name. Do this after creating the global so that if an AMD module wants</span><br><span class="line">// to call noConflict to hide this version of jQuery, it will work.</span><br><span class="line"></span><br><span class="line">// Note that for maximum portability, libraries that are not jQuery should</span><br><span class="line">// declare themselves as anonymous modules, and avoid setting a global if an</span><br><span class="line">// AMD loader is present. jQuery is a special case. For more information, see</span><br><span class="line">// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon</span><br><span class="line"></span><br><span class="line">if ( typeof define === &quot;function&quot; &amp;&amp; define.amd ) &#123;</span><br><span class="line">    define( &quot;jquery&quot;, [], function() &#123;</span><br><span class="line">        return jQuery;</span><br><span class="line">    &#125; );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RequireJS-and-jQuery-Plugins"><a href="#RequireJS-and-jQuery-Plugins" class="headerlink" title="RequireJS and jQuery Plugins"></a><a href="#requirejs-and-jquery-plugins"></a>RequireJS and jQuery Plugins</h2><p>There’s another gotcha to using jQuery and RequireJS together. jQuery 库早于 RequireJS 和 AMD 标准好多年，他形成了自己的庞大的插件系统。那时候还没有模块化，js 默认用的全局变量，这个插件系统也配合得蛮好的，插件开发者通过修改全局的 jQuery 对象来创建他们的插件。</p>
<p>对 RequireJS 来说这样就带来一个问题 —— 就像之前我们提到的，全局的 <code>jQuery</code> 对象是不存在的，你得在<code>requirejs</code>匿名函数中使用<code>jQuery</code>模块。这意味着以前下面这种引入 jQuery 插件的方式会在用到<code>jQuery</code>或者<code>$</code>别名时会出错。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;http://magento.example.com/js/path/to/jquery/plugin/jquery.cookie.js&quot;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: http://magento.example.com/js/path/to/jquery/plugin/jquery.cookie.js</span><br><span class="line">var config = $.cookie = function (key, value, options) &#123;</span><br></pre></td></tr></table></figure>

<p>如果你想在 Magento 2 的系统中使用 jQuery 插件，你得通过 RequrieJS。幸运的是，过程还是相对直接的。</p>
<p>首先，你得通过<code>path</code>给该插件一个别名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;jquery.cookie&quot;:&quot;Package_Module/path/to/jquery.cookie.min&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的代码创建了一个名为<code>jquery.cookie</code>的模块，该模块的位于<code>Package_Module</code>模块，是一个jQuery cookie 插件。</p>
<p>现在，你可能认为我们可以用下面的代码来使用它了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;jquery&#x27;,&#x27;jquery.cookie&#x27;], function(jQuery, jQueryCookie)&#123;</span><br><span class="line">    //my code here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>毕竟，我们列出的依赖模块有<code>jQuery</code>和<code>jquery.cookie</code>，这应该会触发对他们的加载。</p>
<p>你是对的——<strong>但只是有时候</strong>。RequireJS 是异步加载模块源文件的，但它可不保证加载的顺序。这意味着它可能会先加载jQuery 库，但是，有时候页面上的其他脚本或者网络情况可能会导致jQuery cookie 插件反而先被加载了。如果jQuery cookie 先被加载了，他就会因为找不到 jQuery 对象而出错。</p>
<p>这样看来，RequireJS 的设计可不太好。但是你得知道 RequireJS 和 AMD 标准是用来避免全局变量的污染的。RequireJS 和 jQuery 这样的库不能无缝对接，这一点都不奇怪。 Even though jQuery is responsible about its use of global state (one global jQuery object), it still uses global state, and RequireJS isn’t going to get in the business of deciding who does and doesn’t use global state responsibly.</p>
<p>关于加载顺序，RequireJS 提供了<code>shim</code>配置指令来让我们指定依赖模块的加载顺序。<br>你可以告诉 RequireJS :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hey RequireJS，当你加载jquery.cookie的时候，请你确保jquery 模块已经完全加载了。</span><br></pre></td></tr></table></figure>

<p>配置就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var config = &#123;</span><br><span class="line">    paths:&#123;</span><br><span class="line">        &quot;jquery.cookie&quot;:&quot;Package_Module/path/to/jquery.cookie.min&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    shim:&#123;</span><br><span class="line">        &#x27;jquery.cookie&#x27;:&#123;</span><br><span class="line">            &#x27;deps&#x27;:[&#x27;jquery&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>我们定义了一个名为<code>shim</code>的配置属性，这个属性是一个键值对js对象。键表示模块的名字，值是js另一个对象，他定义该模块的<code>shim</code>配置。</p>
<p><code>shim</code>还有很多其他配置选项。上面我们用的<code>deps</code>确保 RequireJS 在加载jquery.cookie 前先加载数组中的模块([jquery])。</p>
<p><code>dep</code>配置选项只显示了<code>shim</code>能够做的一小部分，想了解更多细节，请参阅<a href="http://requirejs.org/docs/api.html#config-shim">the shim documentation</a></p>
<p>有了上面的配置，你现在可以安全地创建依赖 jquery cookie 插件的 RequireJS 程序了。</p>
<h2 id="Require-vs-RequireJS"><a href="#Require-vs-RequireJS" class="headerlink" title="Require vs RequireJS"></a><a href="#require-vs-requirejs"></a>Require vs RequireJS</h2><p>在总结前还有一件事要注意。整个 RequireJS 的文档，你可以看到两个函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">require()</span><br><span class="line">requirejs();</span><br></pre></td></tr></table></figure>

<p>这两个函数有什么不同吗？哦，他们没有什么不同，他们是同一个函数。</p>
<p>AMD 标准命名为 require，但是，RequireJS 意识到一些在用的代码已经定义了 require 函数，为了保证 RequirejS 可以同那些定义了 require 函数的代码一起使用，所以提供了一个 别名叫 requirejs</p>
<h2 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a><a href="#wrap-up"></a>Wrap Up</h2><p>本篇已经带你初步了解了 Magento 对 javaScript 以及现代前端库的使用。但是，所有这些都有赖于 RequireJS 。If you start there, you should be able to track back any javascript based feature to its inclusion via RequireJS, and through that figure out what’s going on. As always, knowing what a specific library does is always useful — but knowing how the framework your code lives in works is the key to becoming a more productive and rational programmer.</p>
<h2 id="相关源文件下载"><a href="#相关源文件下载" class="headerlink" title="相关源文件下载"></a><a href="#%E7%9B%B8%E5%85%B3%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD"></a>相关源文件下载</h2><p><a href="https://github.com/PiscesThankIT/RequireJS-tutorial">https://github.com/PiscesThankIT/RequireJS-tutorial</a></p>
<p><a href="https://github.com/PiscesThankIT/RequireJsTutorial">https://github.com/PiscesThankIT/RequireJsTutorial</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 的 UI Components 介绍（翻译）</title>
    <url>/alan-magento-2-introducing-ui-components/</url>
    <content><![CDATA[<p><em><a href="http://alanstorm.com/magento_2_introducing_ui_components/">原文地址</a></em> 原作发布于 2016年7月10日 UI 组件是 Magento 2 中构建用户界面元素的新方法，管理后台很多地方都是基于它的。 今天我们的教程将带领大家，站在比较高的角度理解 UI 组件的目标是什么，并在尽可能高的层面介绍他的实现细节。最后我们创建一个 网格&#x2F;列表 UI 组件做总结。</p>
<h2 id="The-Positive-Spin-（积极的一面）"><a href="#The-Positive-Spin-（积极的一面）" class="headerlink" title="The Positive Spin （积极的一面）"></a><a href="#the-positive-spin-%EF%BC%88%E7%A7%AF%E6%9E%81%E7%9A%84%E4%B8%80%E9%9D%A2%EF%BC%89"></a>The Positive Spin （积极的一面）</h2><p>要了解 UI 组件的目标，最简单的方法的是从 Magento 1 的生成后台用户界面的代码说起。下面是 Magento 1 layout update XML 一部分代码，我们以他为例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- #File: app/design/adminhtml/default/default/layout/catalog.xml --&gt;</span><br><span class="line">&lt;adminhtml_catalog_product_new&gt;</span><br><span class="line">&lt;update handle=&quot;editor&quot;/&gt;</span><br><span class="line">&lt;reference name=&quot;content&quot;&gt;</span><br><span class="line">&lt;block type=&quot;adminhtml/catalog_product_edit&quot; name=&quot;product_edit&quot;&gt;&lt;/block&gt;</span><br><span class="line">&lt;/reference&gt;</span><br><span class="line">&lt;reference name=&quot;left&quot;&gt;</span><br><span class="line">&lt;block type=&quot;adminhtml/catalog_product_edit_tabs&quot; name=&quot;product_tabs&quot;&gt;&lt;/block&gt;</span><br><span class="line">&lt;/reference&gt;</span><br><span class="line">&lt;reference name=&quot;js&quot;&gt;</span><br><span class="line">&lt;block type=&quot;adminhtml/catalog_product_edit_js&quot; template=&quot;catalog/product/js.phtml&quot; name=&quot;catalog_product_js&quot;&gt;&lt;/block&gt;</span><br><span class="line">&lt;block type=&quot;core/template&quot; template=&quot;catalog/wysiwyg/js.phtml&quot;/&gt;</span><br><span class="line">&lt;/reference&gt;</span><br><span class="line">&lt;/adminhtml_catalog_product_new&gt;</span><br></pre></td></tr></table></figure>

<p>这四个 layout 添加了一个产品编辑表， 考虑到 <code>&lt;update handle=&quot;editor&quot;/&gt;</code> 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- #File: app/design/adminhtml/default/default/layout/main.xml --&gt;</span><br><span class="line">&lt;editor&gt;</span><br><span class="line">&lt;reference name=&quot;head&quot;&gt;</span><br><span class="line">&lt;action method=&quot;setCanLoadExtJs&quot;&gt;&lt;flag&gt;1&lt;/flag&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;mage/adminhtml/variables.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;mage/adminhtml/wysiwyg/widget.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;lib/flex.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;lib/FABridge.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;mage/adminhtml/flexuploader.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;mage/adminhtml/browser.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addJs&quot;&gt;&lt;script&gt;prototype/window.js&lt;/script&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addItem&quot;&gt;&lt;type&gt;js_css&lt;/type&gt;&lt;name&gt;prototype/windows/themes/default.css&lt;/name&gt;&lt;/action&gt;</span><br><span class="line">&lt;action method=&quot;addCss&quot;&gt;&lt;name&gt;lib/prototype/windows/themes/magento.css&lt;/name&gt;&lt;/action&gt;</span><br><span class="line">&lt;/reference&gt;</span><br><span class="line">&lt;/editor&gt;</span><br></pre></td></tr></table></figure>

<p>你会发现给页面添加一个编辑表单是很复杂的事情。 UI 组件的意图是隐藏这种复杂性。Magento 在 layout handle xml 文件中引入了新的<code>&lt;uiComponent/&gt;</code>标签。(Magento 2 handle XML files 类似 Magento 1 的 layout update XML files)在 Magento 2 中，你可以通过下面的代码给页面添加一个产品编辑表单。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;uiComponent name=&quot;product_form&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>通过引入<code>&lt;uiComponent/&gt;</code>，Magento 2 让开发者更容易在不同位置重用不同的组件。While It was possible to drop different Magento 1 UI forms and grids in different areas, you needed to know which blocks and javascript files made up a particular component. Magento 1’s approach made it easy to accidentally setup a grid listing or a form so the component almost worked. Magento 2 的 UI 组件正是用来解决这一问题的，它也极大地简化了每个人的 layout handle xml 文件。</p>
<h2 id="The-Actual-Spin-（实际情况）"><a href="#The-Actual-Spin-（实际情况）" class="headerlink" title="The Actual Spin （实际情况）"></a><a href="#the-actual-spin-%EF%BC%88%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5%EF%BC%89"></a>The Actual Spin （实际情况）</h2><p>我们刚刚所说的的确是真的，不过 UI 组件系统比美丽的构想更模糊。这是因为 UI 组件还有很多其他目标，这些目标带来了相当的复杂性。 就我所知，UI 组件系统：</p>
<ul>
<li>简化了 Layout Handle XML 文件</li>
<li>使得后台用户界面元素的构建从 HTML+Javascript 变成了纯 js 的自定义小部件系统。</li>
<li>可以由较小的组件构造出更复杂的 UI 组件。</li>
<li>Pre-renders data for UI components as JSON, binding closely to Magento backend data objects</li>
<li>使用 ajax 来更新组件的数据</li>
<li>Introduce a new DSL for creating all of the above</li>
</ul>
<p>UI 组件系统是雄心勃勃的一个系统，和 Magento 2中的许多东西一样，它还没有完全出炉（没有稳定）。一方面你可能想要远离还不太完美的系统，另一方面大多数的网格和表单使用 UI 组件系统来构建界面，还有一些使用传统的 block 渲染加 js 文件。如果你想构建一个全功能的模块，你需要使用 UI 组件系统。 下文代表着我（Alan）对当前的（Magento 2.1）UI组件的理解.其中的细节将来很可能会有变化，但是希望核心的概念保持不变。 没有为想要开发后台 UI 界面的开发人员准备的标准实践课程——像往常一样，最好的做法是看看核心团队对他们自己的组件做了什么，模仿他们，并且在 Magento 版本更新的时候，密切注意自己的模块&#x2F;扩展代码。 如果你对复杂的实现细节没有兴趣，你可以跳到文章末尾，使用 Pestle 创建 UI 组件部分。</p>
<h2 id="Pure-Javascript-（纯-JS）"><a href="#Pure-Javascript-（纯-JS）" class="headerlink" title="Pure Javascript （纯 JS）"></a><a href="#pure-javascript-%EF%BC%88%E7%BA%AF-js%EF%BC%89js"></a>Pure Javascript （纯 JS）</h2><p>如果你后台进入 <strong>Content -&gt; Block</strong>，你会看到你 Magento 系统中的所有 CMS Blocks 列在一张表格中。如果你对 Blocks 不是很了解，他们是创建可重用的 HTML 代码块的一种方式。Block information is stored in Magento’s backend using <a href="http://alanstorm.com/magento_2_crud_models_for_database_access/">CRUD Models</a>。 你看到的列表就是一个 UI 组件，是通过以下 layout handle xml 配置的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: vendor/magento/module-cms/view/adminhtml/layout/cms_block_index.xml --&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">&lt;uiComponent name=&quot;cms_block_listing&quot;/&gt;</span><br><span class="line">&lt;/referenceContainer&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>

<p>如果你对 layout xml 完全陌生，上面的代码解释一下就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获得名为 content 的 container 的引用，把 cms_block_listing UI 组件加进去。</span><br></pre></td></tr></table></figure>

<p>如果你查看 HTML 源代码，你会发现<code>&lt;uiComponent/&gt;</code>标签渲染出了如下 HTML 代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;admin__data-grid-outer-wrap&quot; data-bind=&quot;scope: &#x27;cms_block_listing.cms_block_listing&#x27;&quot;&gt;</span><br><span class="line">&lt;div data-role=&quot;spinner&quot; data-component=&quot;cms_block_listing.cms_block_listing.cms_block_columns&quot; class=&quot;admin__data-grid-loading-mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;spinner&quot;&gt;</span><br><span class="line">&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">&#123;&quot;*&quot;: &#123;&quot;Magento_Ui/js/core/app&quot;: &#123;...very large js object...&amp;#125;&amp;#125;&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>如果你阅读过 Magento 2 高级 js 系列的文章，尤其是<a href="/alan-magento-2-javascript-init-scripts/">Magento 2 Javascript Init Scripts</a>，你就知道 <code>x-magento-init</code> 标签将会调用 <code>Magento_Ui/js/core/app</code> RequireJS 模块，并将<code>large js object</code>作为参数传递给他。 不涉及更深入的实现细节（实现细节 some of which you can read about in <a href="http://magento.stackexchange.com/questions/120447/how-does-magento-2-apply-knockoutjs-bindings/120730#120730">these</a> Stack Exchange <a href="http://magento.stackexchange.com/questions/120221/magento-2-how-where-is-the-gettemplate-knockout-function-bound/120508#120508">answers</a>），this javascript code ends up creating a series of javascript constructor objects that Magento will use as KnockoutJS view models（创建了一个用于 view model 的对象） 浏览器中界面元素的实际呈现由 KnockoutJS 处理。外面的 div 框架使用了<a href="http://magento.stackexchange.com/questions/120447/how-does-magento-2-apply-knockoutjs-bindings/120730">Magento’s custom KnockoutJS scope binding</a>，绑定由<code>text/x-magento-init</code>创建的view model。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div ... data-bind=&quot;scope: &#x27;cms_block_listing.cms_block_listing&#x27;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>然后渲染 UI 组件通过 KnockoutJS 的 “tag-less” template binding 完成。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br></pre></td></tr></table></figure>

<p>对<code>getTemplate</code>的调用实际上启动了一系列嵌套的模板渲染——从一个名为<code>collection.html</code>的文件开始。你可以通过浏览器的 XHR 调试窗口查找所有<code>.html</code>的模板文件。如果你这里有较多疑惑，你可以参阅<a href="/alan_magento_2_knockoutjs_integration/">Magento 2 KnockoutJS 集成</a>。另外，记住Magento 的核心团队<a href="http://magento-quickies.alanstorm.com/post/147052601955/magentos-knockoutjs-templates-arent-knockoutjs">使用了一些自定义的标签和属性来增强KnockoutJS的模板</a>，这可能会带给你一些迷惑。 总的来说，Magento 1 用 HTML 来渲染，用 js 增强用户界面的功能。Magento 2 依然会使用一些 HTML 搭建结构，但是用户界面元素的大部分渲染工作转由 RequireJS 模块和 KnockoutJS 模板来做。</p>
<h2 id="Sub-Components-（子组件）"><a href="#Sub-Components-（子组件）" class="headerlink" title="Sub Components （子组件）"></a><a href="#sub-components-%EF%BC%88%E5%AD%90%E7%BB%84%E4%BB%B6%EF%BC%89"></a>Sub Components （子组件）</h2><p>如果仔细审视一下<code>x-magento-init</code>的 JSON 对象，你会发现他有很多嵌套的子对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;*&quot;: &#123;</span><br><span class="line">&quot;Magento_Ui/js/core/app&quot;: &#123;</span><br><span class="line">&quot;types&quot;: /*...*/</span><br><span class="line">&quot;components&quot;: &#123;</span><br><span class="line">&quot;cms_block_listing&quot;: &#123;</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;cms_block_listing&quot;: &#123;</span><br><span class="line">/*...*/</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;listing_top&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;container&quot;,</span><br><span class="line">&quot;name&quot;: &quot;listing_top&quot;,</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;bookmarks&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;columns_controls&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;fulltext&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_filters&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_massaction&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_paging&quot;: &#123;/*...*/&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>Older developers will be bemused to note the return of nodes named <code>children</code> — a practice we thought was left behind in Magento 1. These child element are each, themselves, fully featured UI Components. <code>cms_block_listing</code> 是由 <code>listing_top</code>, <code>bookmarks</code>, 等组件构成的。 前文我们提到，<code>getTemplate</code>的调用以渲染许多子组件告终。<code>collection.html</code>作为第一个 KnockoutJS 模板，他的命名也体现了这是由许多 UI 组件构成的<code>collection</code>。很遗憾，今天的教程没有时间完整梳理这个渲染流程。 今天我们要讲的是 PHP 开发者如何控制渲染的 js tree。我们回到<code>&lt;uiComponent/&gt;</code>标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- #File: vendor/magento/module-cms/view/adminhtml/layout/cms_block_index.xml --&gt;</span><br><span class="line">&lt;uiComponent name=&quot;cms_block_listing&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>Magento 使用<code>uiComponent</code>的<code>name</code>查找名为<code>cms_block_listing.xml</code>的 XML 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-cms/view/adminhtml/ui_component/cms_block_listing.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line">* Copyright © 2016 Magento. All rights reserved.</span><br><span class="line">* See COPYING.txt for license details.</span><br><span class="line">*/</span><br><span class="line">--&gt;</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;spinner&quot; xsi:type=&quot;string&quot;&gt;cms_block_columns&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Block&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;*/*/new&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;!-- ... we&#x27;ll get to this in a second ... --&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>These UI Component XML files are a new <a href="https://en.wikipedia.org/wiki/Domain-specific_language">domain specific language (DSL)</a>。上面的指令告诉 Magento</p>
<ol>
<li>Look up a PHP class name and default arguments for the root level <code>listing</code> node</li>
<li>Instantiate that class, using the <code>argument</code> node as constructor arguments.</li>
</ol>
<p>Magento 将会从下面的文件中查找 PHP 类名和默认的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;listing sorting=&quot;true&quot; class=&quot;Magento\Ui\Component\Listing&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/listing/default&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;save_parameters_in_session&quot; xsi:type=&quot;string&quot;&gt;1&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;client_root&quot; xsi:type=&quot;string&quot;&gt;mui/index/render&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;uiComponent&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;/listing&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>所以，当 Magento 渲染 时，他就像下面这样开始运行（简化后的样子），</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$uiComponent = new Magento\Ui\Component\Listing(</span><br><span class="line">$context, $components, [</span><br><span class="line">&#x27;template&#x27;=&gt;&#x27;templates/listing/default&#x27;,</span><br><span class="line">&#x27;save_parameters_in_session&#x27;=&gt;&#x27;1&#x27;,</span><br><span class="line">&#x27;client_root&#x27;=&gt;&#x27;mui/index/render&#x27;,</span><br><span class="line">&#x27;config&#x27;=&gt;[</span><br><span class="line">&#x27;component&#x27;=&gt;&#x27;uiComponent&#x27;</span><br><span class="line">],</span><br><span class="line">&#x27;js_config&#x27;=&gt;[</span><br><span class="line">&#x27;provider&#x27;=&gt;&#x27;&#x27;,</span><br><span class="line">&#x27;deps&#x27;=&gt;&#x27;&#x27;</span><br><span class="line">],</span><br><span class="line">&#x27;spinner&#x27;=&gt;&#x27;cms_block_columns&#x27;,</span><br><span class="line">&#x27;buttons&#x27;=&gt;[</span><br><span class="line">&#x27;add&#x27;=&gt;[</span><br><span class="line">&#x27;name&#x27;=&gt;&#x27;add&#x27;,</span><br><span class="line">&#x27;label&#x27;=&gt;&#x27;Add New Block&#x27;,</span><br><span class="line">&#x27;class&#x27;=&gt;&#x27;primary&#x27;,</span><br><span class="line">&#x27;url&#x27;=&gt;&#x27;*/*/new&#x27;</span><br><span class="line">]</span><br><span class="line">],</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>参数的数据来自于<code>&lt;argument/&gt;</code>节点的合并。每个参数都有不同的作用——不过我们感兴趣的是<code>templates/listing/default</code>参数。他指定了该组件渲染的 <strong>XHTML template</strong>。<code>templates/listing/default</code>字符串对应下面的模板。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-ui/view/base/ui_component/templates/listing/default.xhtml</span><br><span class="line">&lt;div</span><br><span class="line">class=&quot;admin__data-grid-outer-wrap&quot;</span><br><span class="line">data-bind=&quot;scope: &#x27;&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;&#x27;&quot;</span><br><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:noNamespaceSchemaLocation=&quot;../../../../../../Ui/etc/ui_template.xsd&quot;&gt;</span><br><span class="line">&lt;div data-role=&quot;spinner&quot; data-component=&quot;&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;spinner&amp;#125;&amp;#125;&quot; class=&quot;admin__data-grid-loading-mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;spinner&quot;&gt;</span><br><span class="line">&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;&lt;span/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这个 XHTML 模版是由完全不同于 Magento 中标准的 phtml 模版渲染引擎所渲染。 Magento 通过调用 UI 组件对象中方法（<code>getName()</code>）替换<code>&amp;#123;&amp;#123;...&amp;#125;&amp;#125;</code>文本，或者 directly accessing a data property of the same object (<code>&amp;#123;&amp;#123;spinner&amp;#125;&amp;#125;</code>). 可能有人已经注意到模板中没有<code>x-magento-init</code>。加入<code>x-magento-init</code>部分也是由 XHTML rendering engine 完成的——更确切的说，在<code>appendLayoutConfiguration</code>方法中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/TemplateEngine/Xhtml/Result.php</span><br><span class="line">public function __toString()</span><br><span class="line">&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//...</span><br><span class="line">$this-&gt;appendLayoutConfiguration();</span><br><span class="line">$result = $this-&gt;compiler-&gt;postprocessing($this-&gt;template-&gt;__toString());</span><br><span class="line">&#125; catch (\Exception $e) &#123;</span><br><span class="line">$this-&gt;logger-&gt;critical($e-&gt;getMessage());</span><br><span class="line">$result = $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line">return $result;</span><br><span class="line">&#125;</span><br><span class="line">//...</span><br><span class="line">public function appendLayoutConfiguration()</span><br><span class="line">&#123;</span><br><span class="line">$layoutConfiguration = $this-&gt;wrapContent(</span><br><span class="line">json_encode(</span><br><span class="line">$this-&gt;structure-&gt;generate($this-&gt;component)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">$this-&gt;template-&gt;append($layoutConfiguration);</span><br><span class="line">&#125;</span><br><span class="line">//...</span><br><span class="line">protected function wrapContent($content)</span><br><span class="line">&#123;</span><br><span class="line">return &#x27;&lt;script type=&quot;text/x-magento-init&quot;&gt;&lt;![CDATA[&#x27;</span><br><span class="line">. &#x27;&#123;&quot;*&quot;: &#123;&quot;Magento_Ui/js/core/app&quot;: &#x27; . str_replace([&#x27;&lt;![CDATA[&#x27;, &#x27;]]&gt;&#x27;], &#x27;&#x27;, $content) . &#x27;&amp;#125;&amp;#125;&#x27;</span><br><span class="line">. &#x27;]]&gt;&lt;/script&gt;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Magento 将会以 JSON 字符串的方式渲染 UI 组件对象的结构，然后将字符串添加到模版中。 你问 UI 组件的结构是什么？ Remember the we’ll get to the rest in a second hand waving we did here?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-cms/view/adminhtml/ui_component/cms_block_listing.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line">* Copyright © 2016 Magento. All rights reserved.</span><br><span class="line">* See COPYING.txt for license details.</span><br><span class="line">*/</span><br><span class="line">--&gt;</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;spinner&quot; xsi:type=&quot;string&quot;&gt;cms_block_columns&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Block&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;*/*/new&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;!-- ... we&#x27;ll get to this in a second ... --&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>如果我们看一看上面的节点内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-cms/view/adminhtml/ui_component/cms_block_listing.xml</span><br><span class="line"></span><br><span class="line">&lt;listingToolbar name=&quot;listing_top&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;/listingToolbar&gt;</span><br><span class="line">&lt;columns name=&quot;cms_block_columns&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;/columns&gt;</span><br></pre></td></tr></table></figure>

<p>我们会发现更多配置的 UI 组件。所有名称不是 <code>argument</code> 的 UI 组件的子节点，都是父对象的子节点。Magneto 渲染 <code>listing</code> 对象的时候，它还会在 <code>definitions.xml</code> 中查找 <code>listingToolbar</code>, <code>columns</code> 等组件的类和参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">&lt;listingToolbar class=&quot;Magento\Ui\Component\Container&quot;&gt;&lt;!--...--&gt;&lt;/listingToolbar&gt;</span><br><span class="line">&lt;columns class=&quot;Magento\Ui\Component\Listing\Columns&quot;&gt;&lt;!--...--&gt;&lt;/columns&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>之前我们用的伪代码实际上更像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$uiComponent = new Magento\Ui\Component\Listing(...);</span><br><span class="line"></span><br><span class="line">$listingToolbar = new Magento\Ui\Component\Container(...);</span><br><span class="line">$columns = new Magento\Ui\Component\Listing\Columns(...);</span><br><span class="line"></span><br><span class="line">$uiComponent-&gt;addComponent($listingToolbar);</span><br><span class="line">$uiComponent-&gt;addComponent($columns);</span><br></pre></td></tr></table></figure>

<p>注意，这些子组件是通过 RequireJS 模块名称来进行配置的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;columns class=&quot;Magento\Ui\Component\Listing\Columns&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/listing&lt;/item&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;/columns&gt;</span><br></pre></td></tr></table></figure>

<p>这些就是 Magento 转化为 KnockoutJS view model 的 RequireJS 模块。如果你查看 KnockoutJS view models 的代码，你将发现通常 view model constructor 中配置了其 template 模版。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-ui/view/base/web/js/grid/listing.js</span><br><span class="line">define([</span><br><span class="line">&#x27;ko&#x27;,</span><br><span class="line">&#x27;underscore&#x27;,</span><br><span class="line">&#x27;Magento_Ui/js/lib/spinner&#x27;,</span><br><span class="line">&#x27;uiLayout&#x27;,</span><br><span class="line">&#x27;uiCollection&#x27;</span><br><span class="line">], function (ko, _, loader, layout, Collection) &#123;</span><br><span class="line">&#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">return Collection.extend(&#123;</span><br><span class="line">defaults: &#123;</span><br><span class="line">template: &#x27;ui/grid/listing&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">//...</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Data-Source-Nodes-（数据源节点）"><a href="#Data-Source-Nodes-（数据源节点）" class="headerlink" title="Data Source Nodes （数据源节点）"></a><a href="#data-source-nodes-%EF%BC%88%E6%95%B0%E6%8D%AE%E6%BA%90%E8%8A%82%E7%82%B9%EF%BC%89"></a>Data Source Nodes （数据源节点）</h2><p>最后，有一个特别的 UI 组件子节点，就是<code>&lt;dataSource/&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento//module-cms/view/adminhtml/ui_component/cms_block_listing.xml</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;cms_block_listing.cms_block_listing_data_source&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;spinner&quot; xsi:type=&quot;string&quot;&gt;cms_block_columns&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">&lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Block&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">&lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;*/*/new&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;dataSource name=&quot;cms_block_listing_data_source&quot;&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>名为 <code>dataSource</code> 的节点仍然是 UI 组件，不过他们有“特殊待遇”。当 Magento 从 UI 组件中渲染 JSON 的时候，dataSource 节点被从 <code>children</code> 结构中拉出来，Magento 在主要的顶层组件之后就渲染他们（在组件名后加 <code>_data_source</code> 作为对象的键值） （译者注，还记得上面的子组件 <code>listing_top</code> 吧，他的层级和 <code>dataSource</code> 节点是一样的，按照道理他应该在 <code>children</code> 下和 <code>listing_top</code> 并列在一个层级，但是现在上升了一个层级，和 <code>cms_block_listing</code> 并列了。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;*&quot;: &#123;</span><br><span class="line">&quot;Magento_Ui/js/core/app&quot;: &#123;</span><br><span class="line">&quot;types&quot;: /*...*/</span><br><span class="line">&quot;components&quot;: &#123;</span><br><span class="line">&quot;cms_block_listing&quot;: &#123;</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;cms_block_listing&quot;: &#123;</span><br><span class="line">/*...*/</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;listing_top&quot;: &#123;</span><br><span class="line">&quot;type&quot;: &quot;container&quot;,</span><br><span class="line">&quot;name&quot;: &quot;listing_top&quot;,</span><br><span class="line">&quot;children&quot;: &#123;</span><br><span class="line">&quot;bookmarks&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;columns_controls&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;fulltext&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_filters&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_massaction&quot;: &#123;/*...*/&#125;,</span><br><span class="line">&quot;listing_paging&quot;: &#123;/*...*/&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><code>dataSource</code> 组件就是 Magento 寻找 UI 组件真实数据的地方。UI 组件中的数据由 <code>dataSource</code> 组件提供。</p>
<h2 id="Summary-of-the-UI-Component-Rendering-DSL-（总结）"><a href="#Summary-of-the-UI-Component-Rendering-DSL-（总结）" class="headerlink" title="Summary of the UI Component Rendering DSL （总结）"></a><a href="#summary-of-the-ui-component-rendering-dsl-%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89"></a>Summary of the UI Component Rendering DSL （总结）</h2><p>OK — that was a bananas-pants amount of information. I just finished writing it and I’m not sure even I followed all of it, so don’t worry if your head is spinning. 下面是比较高层面的总结。</p>
<ol>
<li>UI 组件通过 <code>x-magento-init</code> 脚本注入全局注册的 KnockoutJS view models （原文：UI Components render an x-magento-init script that populates a global registry of KnockoutJS view models）</li>
<li>UI 组件也加载 HTML 骨架，然后使用 KnockoutJS 和自定义的 <code>scope</code> 绑定来渲染 DOM 节点租成组件。</li>
<li><code>ui_component</code> XML 文件是一种领域特定语言（domain specific language），用来示例嵌套的层级 UI 组件对象。Magento 会使用它来为 <code>x-magento-init</code> 脚本加载 JSON</li>
<li><code>ui_component</code> XML 节点的名称用来查找 php 类进行实例化</li>
<li>Magento 使用子节点 <code>&lt;argument/&gt;</code> 作为该类的构造参数</li>
<li>Magento 使用 <code>&lt;dataSource /&gt;</code> 中的数据作为 UI 组件的数据源。（例如表格列表中的信息）</li>
<li>子节点将会作为子组件进行渲染——这些子组件遵循和父组件一样的规则</li>
<li>最顶层的 UI 组件配置的 XHTML 模版，Magento 通过 PHP 进行渲染</li>
<li>UI 组件节点配置 RequireJS 模块，而 Magento 使用他们作为 KnockoutJS view model constructors</li>
</ol>
<p>正如你所看到的，一方面 uiComponent 极大地简化了 Magento 2 中 layout handle XML 文件，隐藏了包括前后台在内的更为复杂的 UI 渲染系统，另一方面这对开发者来说，也要求你理解 Magento 对 RequireJS 和 KnockoutJS 做出的自定义。</p>
<h2 id="Creating-a-Grid-Listing-with-Pestle-（创建一个列表）"><a href="#Creating-a-Grid-Listing-with-Pestle-（创建一个列表）" class="headerlink" title="Creating a Grid Listing with Pestle （创建一个列表）"></a><a href="#creating-a-grid-listing-with-pestle-%EF%BC%88%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%88%97%E8%A1%A8%EF%BC%89"></a>Creating a Grid Listing with Pestle （创建一个列表）</h2><p>从上文可以了解到，UI 组件系统，为了降低 Magento 1 的 layout update XML 系统的复杂度，提供更明确的使用指导。换句话说，对 Magento 2 开发者来说，这正是代码生成工具（例如 <a href="https://github.com/astorm/pestle">pestle</a> ，这是 Alan Storm 的一个项目）的用武之地。</p>
<p><em>译者注：由于这一段操作有较多的前提条件，而且使用代码自动生成工具，对我们理解如何创建一个列表的帮助可能不太大，所以此处不再继续翻译，有兴趣的请阅读原文。而关于如何用 uiComponent 创建列表，下次再补上其他的文章。</em></p>
<p>参考 <a href="/how-to-create-admin-grid-in-magento-2">How to Create Admin Grid in Magento 2</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 KnockoutJS 集成</title>
    <url>/alan-magento-2-knockoutjs-integration/</url>
    <content><![CDATA[<p><em><a href="http://alanstorm.com/magento_2_knockoutjs_integration/">原文地址</a></em></p>
<p>虽然 KnockoutJS 作为 MVVM 框架（model,view,view model），但是PHP开发人员会发现model部分有点瘦。KnockoutJS 本身没有 data storage 的概念，像许多现代js框架一样，it was designed to work best with a service only backend（设计为和 service only 的后端一起工作）. i.e. <a href="http://knockoutjs.com/documentation/json-data.html">KnockoutJS’s “Model” is some other framework making AJAX requests</a> to populate view model values.</p>
<p>另外一件可能会让你意外的事情是，KnockoutJS 并不是一个“full stack”框架（and to its credit, doesn’t bill itself as such）</p>
<p>KnockoutJS 没有规定你如何在项目中使用它，也没有规定你怎么组织代码。（虽然从文档可以看出KnockoutJS的团队成员是RequireJS的粉丝）。</p>
<p>这对类似Magento这样的服务器端PHP框架提出了一个有趣的挑战。要使用KnockoutJS,不仅得围绕着它搭建一定程度的js“脚手架”，而且 Magento 2本身可不是一个service only的框架。Magento 2 的全新API在解决后一个问题上取得了进展，但是后端开发人员还是需要建立将业务数据对象注入 KnockoutJS 的脚手架。</p>
<p>今天我们来深入Magento 2 的 KnockoutJS 集成问题。通过本教程，你将明白 Magento 2 是如何应用 KnockoutJS 绑定的，以及Magento 2 是如何初始化他的自定义绑定的。你还将明白 Magento 是如何修改核心 KnockoutJS 的某些行为的，为什么要这样做，以及这些修改带给你的模块和应用的可能性。</p>
<p>本篇教程是 Alan 的 Magento 2 高级js概念系列文章中的一篇，如果你在下文遇到不理解的概念，可以翻看一下该文章的前几篇。</p>
<h2 id="Creating-a-Magento-Module"><a href="#Creating-a-Magento-Module" class="headerlink" title="Creating a Magento Module"></a><a href="#creating-a-magento-module"></a>Creating a Magento Module</h2><p>我们得创建一个<code>Pulsestorm KnockoutTutorial</code>模块，并且可以通过<code>http://magento.example.com/pulsestorm_knockouttutorial/</code>链接看到<code>app/code/Pulsestorm/KnockoutTutorial/view/frontend/templates/content.phtml</code>模板的渲染效果。</p>
<p>Alan 没有提供示例代码，你可以自己创建，也可以去博主的 github 仓库下载。<a href="https://github.com/PiscesThankIT/Magento-2-KnockoutJS-Integration">示例代码下载地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:enable Pulsestorm_KnockoutTutorial</span><br><span class="line">$ php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<h2 id="RequireJS-Initialization"><a href="#RequireJS-Initialization" class="headerlink" title="RequireJS Initialization"></a><a href="#requirejs-initialization"></a>RequireJS Initialization</h2><p>在我们之前的文章以及KnockoutJS官方教程中，KnockoutJS的初始化时很简单的事情。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">object = SomeViewModelConstructor();</span><br><span class="line">ko.applyBindings(object);</span><br></pre></td></tr></table></figure>

<p>上面的做法只是为了教程讲解。然而，如果你将所有的 view model 逻辑，自定义绑定，组件都放在一个代码块中的话，KnockoutJS 将很快变得不好管理了。</p>
<p>Magento 的核心团队创建了一个<code>Magento_Ui/js/lib/ko/initialize</code> RequireJS 模块。只要将它作为依赖模块，就会执行KnockoutJS的初始化。你可以像下面这样使用它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">requirejs([&#x27;Magento_Ui/js/lib/ko/initialize&#x27;], function()&#123;</span><br><span class="line">    //your program here</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>要注意的是这个 RequireJS 模块没有返回值，将他作为依赖模块唯一的目的就是进行 KnockoutJS 的初始化。你在实际环境中见到他，可能会感到困惑。举例来说，看下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/app.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;./renderer/types&#x27;,</span><br><span class="line">    &#x27;./renderer/layout&#x27;,</span><br><span class="line">    &#x27;Magento_Ui/js/lib/ko/initialize&#x27;</span><br><span class="line">], function (types, layout) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return function (data) &#123;</span><br><span class="line">        types.set(data.types);</span><br><span class="line">        layout(data.components);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>声明了三个 RequireJS 依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/app.js</span><br><span class="line">[</span><br><span class="line">&#x27;./renderer/types&#x27;,</span><br><span class="line">&#x27;./renderer/layout&#x27;,</span><br><span class="line">&#x27;Magento_Ui/js/lib/ko/initialize&#x27;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>但是回调函数中却只有两个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/app.js</span><br><span class="line">function (types, layout) &#123;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我还不清楚这种做法是否明智，或者是否违反了RequireJS的精神。也许都有。</p>
<p>不管怎么说，你用这个模块，Magento 就会初始化 KnockoutJS 了。RequireJS 会在第一次加载模块时就缓存他们，所以之后加载的模块不会被重复载入。</p>
<h2 id="KnockoutJS-Initialization"><a href="#KnockoutJS-Initialization" class="headerlink" title="KnockoutJS Initialization"></a><a href="#knockoutjs-initialization"></a>KnockoutJS Initialization</h2><p>我们来看看<code>Magento_Ui/js/lib/ko/initialize</code>模块的源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/initialize.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;./template/engine&#x27;,</span><br><span class="line">    &#x27;knockoutjs/knockout-repeat&#x27;,</span><br><span class="line">    &#x27;knockoutjs/knockout-fast-foreach&#x27;,</span><br><span class="line">    &#x27;knockoutjs/knockout-es5&#x27;,</span><br><span class="line">    &#x27;./bind/scope&#x27;,</span><br><span class="line">    &#x27;./bind/staticChecked&#x27;,</span><br><span class="line">    &#x27;./bind/datepicker&#x27;,</span><br><span class="line">    &#x27;./bind/outer_click&#x27;,</span><br><span class="line">    &#x27;./bind/keyboard&#x27;,</span><br><span class="line">    &#x27;./bind/optgroup&#x27;,</span><br><span class="line">    &#x27;./bind/fadeVisible&#x27;,</span><br><span class="line">    &#x27;./bind/mage-init&#x27;,</span><br><span class="line">    &#x27;./bind/after-render&#x27;,</span><br><span class="line">    &#x27;./bind/i18n&#x27;,</span><br><span class="line">    &#x27;./bind/collapsible&#x27;,</span><br><span class="line">    &#x27;./bind/autoselect&#x27;,</span><br><span class="line">    &#x27;./extender/observable_array&#x27;,</span><br><span class="line">    &#x27;./extender/bound-nodes&#x27;</span><br><span class="line">], function (ko, templateEngine) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    ko.setTemplateEngine(templateEngine);</span><br><span class="line">    ko.applyBindings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>我们看到这个模块相对简单，但还是包含了19个其他模块。要说清每个模块做什么，已经超出本篇的范围了。只讲重要的。</p>
<p><code>ko</code>模块实际上是<code>knockoutjs/knockout</code>模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/magento/module-theme/view/base/requirejs-config.js</span><br><span class="line">11:            &quot;ko&quot;: &quot;knockoutjs/knockout&quot;,</span><br><span class="line">12:            &quot;knockout&quot;: &quot;knockoutjs/knockout&quot;</span><br></pre></td></tr></table></figure>

<p><code>knockoutjs/knockout</code>模块实际上就是 KnockoutJS 库。<code>knockoutjs/knockout-repeat</code>,<code>knockoutjs/knockout-fast-foreach</code>, and<br><code>knockoutjs/knockout-es5</code> 是 KnockoutJS community extras（社区插件）这些都不是正规的 RequireJS 模块。</p>
<p>从<code>./bind/*</code>开始的模块是 Magento 的 KnockoutJS 自定义绑定。他们是正经的 RequireJS 模块，不过他们实际上没有返回。这些脚本给全局的<code>ko</code>对象添加绑定。我们下面会讨论<code>scope</code> 绑定。如果你对绑定实现的细节感兴趣，可以去<a href="https://github.com/magento/devdocs/issues/718">这里看看</a>，期待官方文档快点出来。</p>
<p>这两个<code>extender</code>模块是Magento 对 KnockoutJS 功能扩展的核心模块。</p>
<p><code>./template/engine</code>模块返回了一个自定义版本的 KnockoutJS 模板引擎。这是我们下面第一个要讨论的。</p>
<h2 id="Magento-KnockoutJS-Templates"><a href="#Magento-KnockoutJS-Templates" class="headerlink" title="Magento KnockoutJS Templates"></a><a href="#magento-knockoutjs-templates"></a>Magento KnockoutJS Templates</h2><p>KnockoutJS 系统中，模板是一些事先写好的 DOM&#x2F;KnockoutJS 代码，可以通过<code>id</code>来引用他们。这些代码块以下面的形式添加到页面中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/html&quot; id=&quot;my_template&quot;&gt;</span><br><span class="line">    &lt;h1 data-bind=&quot;text:title&quot;&gt;&lt;/h1&gt;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这是个很强大的功能，但是提出了一个问题——对于服务器端的框架来说，如何获取正确的模板并渲染到页面上呢？如何确保不用重复创建模板呢？KnockoutJS 的解决方案是使用组件绑定配合RequireJS，但是这意味着你的模板绑定在特定的view model 对象上。</p>
<p>Magento 的核心工程师需要一种更好的办法来加载 KnockoutJS 模板。—— 他们使用<code>Magento_Ui/js/lib/ko/template/engine</code>模块的引擎替换掉了 KnockoutJS 原先的模板引擎。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/initialize.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;./template/engine&#x27;,</span><br><span class="line">    //...</span><br><span class="line">], function (ko, templateEngine) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line">    //...</span><br><span class="line">    ko.setTemplateEngine(templateEngine);</span><br><span class="line">    //...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果我们看一看<code>Magento_Ui/js/lib/ko/template/engine</code>这个模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/template/engine.js</span><br><span class="line">/**</span><br><span class="line"> * Copyright © 2016 Magento. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;./observable_source&#x27;,</span><br><span class="line">    &#x27;./renderer&#x27;</span><br><span class="line">], function (ko, Source, Renderer) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    var RemoteTemplateEngine,</span><br><span class="line">        NativeTemplateEngine = ko.nativeTemplateEngine,</span><br><span class="line">        sources = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">    RemoteTemplateEngine.prototype = new NativeTemplateEngine;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">    RemoteTemplateEngine.prototype.makeTemplateSource = function (template)</span><br><span class="line">    &#123;</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">    return new RemoteTemplateEngine;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Magento 创建了一个新的对象，该对象用原型法继承了 KnockoutJS 的引擎，然后修改了一些方法增加自定的行为。If you’re not up on your javascript internals, this means Magento copies the stock KnockoutJS template system, changes it a bit, and then swaps its new template engine in for the stock one.</p>
<p>实现的细节超过了本篇的范围，不过最终的结果是KnockoutJS 引擎可以通过 URL 链接从Magento模板中获取模板。</p>
<p>如果这样说没有让你搞懂，那么来个例子。向<code>content.phtml</code>文件中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/KnockoutTutorial/view/frontend/templates/content.phtml</span><br><span class="line">&lt;div data-bind=&quot;template:&#x27;Pulsestorm_KnockoutTutorial/hello&#x27;&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们用了模板绑定，并且把<code>Pulsestorm_KnockoutTutorial/hello</code>字符串传递给他。现在如果你刷新页面的话(记得清空缓存)，你将会在浏览器 console 中看到如下错误信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;Get http://127.0.0.1/pub/static/frontend/Magento/luma/en_US/Pulsestorm_KnockoutTutorial/template/hello.html 404 (Not Found)</span><br></pre></td></tr></table></figure>

<p>Magento 用我们传递给他的字符串（<code>Pulsestorm_KnockoutTutorial/hello</code>）构造一个 URL ，注意看这个构造出的URL和字符串各部分的联系。</p>
<p>让我们添加如下文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/KnockoutTutorial/view/frontend/web/template/hello.html</span><br><span class="line">&lt;p data-bind=&quot;style:&#123;fontSize:&#x27;24px&#x27;&#125;&quot;&gt;Hello World&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<p>重新载入页面，你会看到 Magento 已经加载了该模板并且应用了KnockoutJS绑定。</p>
<p>这项功能使我们不再需要使用<code>&lt;script type=&quot;text/html&quot;&gt;</code>，有助于模板复用。（This feature allows us to avoid littering our HTML page with <code>&lt;script type=&quot;text/html&quot;&gt;</code> tags whenever we need a new template, and encourages template reuse between UI and UX features.）</p>
<h2 id="No-View-Model"><a href="#No-View-Model" class="headerlink" title="No View Model"></a><a href="#no-view-model"></a>No View Model</h2><p>回到<code>initialize.js</code>模块，Magento 设置好模板引擎之后，调用了 KnockoutJS 的applyBindings 方法。这个调用开始了当前页面的渲染。看下代码，立马发现一件事情。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/initialize.js</span><br><span class="line">ko.setTemplateEngine(templateEngine);</span><br><span class="line">ko.applyBindings();</span><br></pre></td></tr></table></figure>

<p>Magento 调用<code>applyBindings</code>没有传递任何 view model。虽然这是一个有效的 KnockoutJS 调用——让 KnockoutJS 应用绑定，但没有数据或view model 逻辑，这么做看起来一点意义也没有。What is a view without data going to be good for?</p>
<p>在标准的 KnockoutJS 系统中，这样做确实一点意义也没有。要理解这一步Magento在做什么，我就得回到 KnockoutJS 的初始化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/initialize.js</span><br><span class="line">define([</span><br><span class="line">    //...</span><br><span class="line">    &#x27;./bind/scope&#x27;,</span><br><span class="line">    //...</span><br><span class="line">],</span><br></pre></td></tr></table></figure>

<p>Magento 的 KnockoutJS 团队创建了一个名为<code>scope</code>的自定义绑定。下面是一<code>scope</code>绑定应用的例子，代码是 Magento 2 主页中用到的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li class=&quot;greet welcome&quot; data-bind=&quot;scope: &#x27;customer&#x27;&quot;&gt;</span><br><span class="line">    &lt;span data-bind=&quot;text: customer().fullname ? $t(&#x27;Welcome, %1!&#x27;).replace(&#x27;%1&#x27;, customer().fullname) : &#x27;Default welcome msg!&#x27;&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>当你向下面这样调用<code>scope</code>的时候，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data-bind=&quot;scope: &#x27;customer&#x27;&quot;</span><br></pre></td></tr></table></figure>

<p>Magento 将会对该节点及其子节点应用<strong>customer</strong> view model</p>
<p>你可能会想——见鬼，<strong>customer</strong> view model 是什么玩意儿？</p>
<p>如果你查看主页的源代码，再往下看一点(源代码在105行)，你应该会看到如下标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;*&quot;: &#123;</span><br><span class="line">        &quot;Magento_Ui/js/core/app&quot;: &#123;</span><br><span class="line">            &quot;components&quot;: &#123;</span><br><span class="line">                &quot;customer&quot;: &#123;</span><br><span class="line">                    &quot;component&quot;: &quot;Magento_Customer/js/view/customer&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>我们本系列的第一篇文章讲过，Magento 遇到<code>text/x-magento-init</code>script 标签，属性为<code>*</code>，它将：</p>
<ol>
<li>初始化<code>Magento_Ui/js/core/app</code>RequireJS 模块。</li>
<li>调用<code>Magento_Ui/js/core/app</code>模块的返回方法，并将后面的数据对象传递给他。</li>
</ol>
<p><code>Magento_Ui/js/core/app</code>模块 <strong>instantiates KnockoutJS view models</strong> to use with the scope attribute.（实例化 scope 自定义绑定要用的view model）。这是怎么实现的超出本篇文章的范围了，不过总的来说，Magento will instantiate a new javascript object for each individual RequireJS module configured as a <code>component</code>, and that new object becomes the view model.</p>
<p>下面我们用<code>x-magento-init</code>举个例子，Magento查找<code>components</code>键，该键对应的是一个键值对。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;customer&quot;: &#123;</span><br><span class="line">    &quot;component&quot;: &quot;Magento_Customer/js/view/customer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对<code>customer</code>键，Magneto 会执行类似下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//gross over simplification</span><br><span class="line">var ViewModelConstructor = requirejs(&#x27;Magento_Customer/js/view/customer&#x27;);</span><br><span class="line">var viewModel = new ViewModelConstructor;</span><br><span class="line">viewModelRegistry.save(&#x27;customer&#x27;, viewModel);</span><br></pre></td></tr></table></figure>

<p>如果某些组件对象有额外的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;customer&quot;: &#123;</span><br><span class="line">    &quot;component&quot;: &quot;Magento_Customer/js/view/customer&quot;,</span><br><span class="line">    &quot;extra_data&quot;:&quot;something&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Magento 会将这些数据一并放入view model</p>
<p>一旦上述代码执行完毕，view model registry 就会拥有一个名为<code>customer</code>的view model。Magento 对<code>data-bind=&quot;scope: &#39;customer&#39;&quot;</code>应用的绑定就是这个view model。</p>
<p>如果我们查看<code>scope</code>自定义绑定的实现代码的话，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/bind/scope.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;uiRegistry&#x27;,</span><br><span class="line">    &#x27;jquery&#x27;,</span><br><span class="line">    &#x27;mage/translate&#x27;</span><br><span class="line">], function (ko, registry, $) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    //...</span><br><span class="line">        update: function (el, valueAccessor, allBindings, viewModel, bindingContext) &#123;</span><br><span class="line">            var component = valueAccessor(),</span><br><span class="line">                apply = applyComponents.bind(this, el, bindingContext);</span><br><span class="line"></span><br><span class="line">            if (typeof component === &#x27;string&#x27;) &#123;</span><br><span class="line">                registry.get(component, apply);</span><br><span class="line">            &#125; else if (typeof component === &#x27;function&#x27;) &#123;</span><br><span class="line">                component(apply);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    //...</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>registry.get(component, apply);</code>行从 view model registry 处获得那个view model，之后的代码实际上是应用该 view model</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/ko/bind/scope.js</span><br><span class="line"></span><br><span class="line">//the component variable is our viewModel</span><br><span class="line">function applyComponents(el, bindingContext, component) &#123;</span><br><span class="line">    component = bindingContext.createChildContext(component);</span><br><span class="line"></span><br><span class="line">    ko.utils.extend(component, &#123;</span><br><span class="line">        $t: i18n</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ko.utils.arrayForEach(el.childNodes, ko.cleanNode);</span><br><span class="line"></span><br><span class="line">    ko.applyBindingsToDescendants(component, el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>registry</code>变量来自于<code>uiRegistry</code>模块，该模块实际上是<code>Magento_Ui/js/lib/registry/registry</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/magento/module-ui/view/base/requirejs-config.js</span><br><span class="line">17:            uiRegistry:     &#x27;Magento_Ui/js/lib/registry/registry&#x27;,</span><br></pre></td></tr></table></figure>

<p>如果感觉脑子不够用了，别担心。如果你想看看某个scope绑定中可用的数据，下面的debugging 代码会很有帮助。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;li class=&quot;greet welcome&quot; data-bind=&quot;scope: &#x27;customer&#x27;&quot;&gt;</span><br><span class="line">    &lt;pre data-bind=&quot;text: ko.toJSON($data, null, 2)&quot;&gt;&lt;/pre&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/li&gt;</span><br></pre></td></tr></table></figure>

<p>如果你对 Magento如何创建 view model 的真实实现细节感兴趣的话（上面的简化伪代码不能满足你的好奇心），你可以从<code>Magento_Ui/js/core/app</code>模块下手。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/app.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;./renderer/types&#x27;,</span><br><span class="line">    &#x27;./renderer/layout&#x27;,</span><br><span class="line">    &#x27;Magento_Ui/js/lib/ko/initialize&#x27;</span><br><span class="line">], function (types, layout) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return function (data) &#123;</span><br><span class="line">        types.set(data.types);</span><br><span class="line">        layout(data.components);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个模块依赖<code>Magento_Ui/js/core/renderer/layout</code>模块，正是这个模块创建了 view model，并将他们添加到view model registry 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/renderer/layout.js</span><br></pre></td></tr></table></figure>

<p>你可去上面的文件研究 view model 是怎么创建出来的。</p>
<h2 id="A-component-by-Any-Other-Name"><a href="#A-component-by-Any-Other-Name" class="headerlink" title="A component by Any Other Name"></a><a href="#a-component-by-any-other-name"></a>A component by Any Other Name</h2><p>One sticky wicket in all this is the word <code>component</code>. <code>scope</code>绑定加上<code>x-magento-init</code> is basically a different take on <a href="http://knockoutjs.com/documentation/component-binding.html">the native KnockoutJS component system</a>.</p>
<p>Magento 使用了和 KnockoutJS 相同的<code>component</code>这一术语，他们实际上不是一回事情，这下简直开启了一个混乱的新世界。即使是<a href="http://devdocs.magento.com/guides/v2.0/javascript-dev-guide/javascript/js_overview.html">Magento官方文档</a>，看起来也没有说清楚什么是<code>component</code>什么不是。Such is life on a large software team where the left hand doesn’t know what the right hand is doing — and the rest of the body is freaking out about a third hand growing out of its back.(哈哈，翻不出味道，自己领会一下，挺幽默的！)</p>
<p>当你和同事讨论这些特性或者是在社区提问时，区分 KnockoutJS components 和Magento components 是很重要的哦。</p>
<h2 id="Changes-in-the-2-1-Release-Candidate"><a href="#Changes-in-the-2-1-Release-Candidate" class="headerlink" title="Changes in the 2.1 Release Candidate"></a><a href="#changes-in-the-2.1-release-candidate"></a>Changes in the 2.1 Release Candidate</h2><p>今天的总结，我们要讨论一下 Magento 2.1 版本的一些改变。从概念上讲，系统仍然是相同的，只是细节有一点变化。</p>
<p>第一，KnockoutJS 的初始化现在发生在<code>Magento_Ui/js/lib/knockout/bootstrap</code>RequireJS 模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/knockout/bootstrap.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;ko&#x27;,</span><br><span class="line">    &#x27;./template/engine&#x27;,</span><br><span class="line">    &#x27;knockoutjs/knockout-es5&#x27;,</span><br><span class="line">    &#x27;./bindings/bootstrap&#x27;,</span><br><span class="line">    &#x27;./extender/observable_array&#x27;,</span><br><span class="line">    &#x27;./extender/bound-nodes&#x27;,</span><br><span class="line">    &#x27;domReady!&#x27;</span><br><span class="line">], function (ko, templateEngine) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    ko.uid = 0;</span><br><span class="line"></span><br><span class="line">    ko.setTemplateEngine(templateEngine);</span><br><span class="line">    ko.applyBindings();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>Magento 核心开发团队将所有的 binding loading 移到<code>Magento_Ui/js/lib/knockout/bindings/bootstrap</code>模块，该模块位于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/lib/knockout/bindings/bootstrap.js</span><br></pre></td></tr></table></figure>

<p>最后，the “Magento Javascript Component” returned by <code>Magento_Ui/js/core/app</code> has a changed method signature that includes a merge parameter, and the arguments to the <code>layout</code> function make it clear <code>layout‘s</code> signature has changed as well.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/web/js/core/app.js</span><br><span class="line">define([</span><br><span class="line">    &#x27;./renderer/types&#x27;,</span><br><span class="line">    &#x27;./renderer/layout&#x27;,</span><br><span class="line">    &#x27;../lib/knockout/bootstrap&#x27;</span><br><span class="line">], function (types, layout) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return function (data, merge) &#123;</span><br><span class="line">        types.set(data.types);</span><br><span class="line">        layout(data.components, undefined, true, merge);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>超越实现细节，这些更改揭露出一个事实，Magento 的 js 模块和框架在频繁变动中，不同于PHP代码，Magento 的 RequireJS 模块没有<code>@api</code>标识来表示稳定性。</p>
<p>Unless you absolutely need to, it’s probably best to steer clear of dynamically changing the behavior of these core modules, and keep your own javascript as separate as possible。</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a href="#%E4%B8%8B%E8%BD%BD"></a>下载</h2><p><a href="https://github.com/PiscesThankIT/Magento-2-KnockoutJS-Integration">实例代码下载</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2 简介 —— 不再是 MVC （翻译）</title>
    <url>/alan-magento-2-mvvm-mvc/</url>
    <content><![CDATA[<p><em>前言：Alan Storm 的文章以其深度和专业性给博主留下了深刻的印象，而且他非常注意通过代码实例来讲解。在博主眼中 Alan 绝对是大师级的 Magento 专家，所以博主决定翻译他关于 Magento 2 的文章。本篇<a href="http://alanstorm.com/magento_2_mvvm_mvc">原文地址</a></em></p>
<p>今天我们来做个 Magento 2 的“Hello World”示例。我们会设置一个新的 URL ,并向你展示如何为这个 URL 创建 phtml 模版。在这个过程中我们要说一说<strong>设计模式</strong>以及 Magento 是怎样的设计模式。不过，这篇文章的核心部分是简单地、可以跟着做的步骤，它会帮助你入门 Magento 2 的模块开发。</p>
<p>等不及的可以去github上下载 <a href="https://github.com/astorm/magento2-hello-world">Alan 的本篇完整模块代码</a>，但是我们强烈建议你自己完成创建的过程。</p>
<p>对 Magento 1 的开发者来说，一个大的惊喜是 Magento 2 不是一个 Model，View，Controller 的系统。Magento 2 是近似 Model,View,ViewModel(MVVM)的系统，然而他的架构师们还没有给它起一个特定的称呼。</p>
<p>Magento 2 中，当你请求一个URL</p>
<p><code>http://magento.example.com/hello_mvc/hello/world</code></p>
<p>系统会将请求路由到 Controller 类的 execute method，类似于 MVC 系统将请求路由到 Controller 类的 action method。但是，和传统的 MVC 系统不一样的是，这个 Controller 类只负责如下事情：</p>
<ul>
<li>决定使用哪个 page layout</li>
<li>Handling saving data from <code>POST</code> requests</li>
<li>下面两件事情之一：<ul>
<li>让系统 render HTTP response</li>
<li>将用户重定向到下一页或上一页</li>
</ul>
</li>
</ul>
<p>你会发现我们都没提在 View 中设置变量。这是因为每个 View 要自己负责从 model layer, request object,或其他外部系统中取得自己的信息。Magento 将 HTML 页面分解成许多片段，称之为 containers 。每个 container 包含嵌套的对象树，叫做 blocks。每个 block 对象拥有一个 phtml 模板文件，用来指定该 block 对象要展现的 HTML 。按照 MVVC 的说法，Magento 的 block 对象就是 View Model。block 对象将会完成所有对 CRUD models, request object, 外部系统等的数据读入。phtml 模板文件是 View （MVVM 中的 View），他只和 ViewModel 交互（block 对象）</p>
<p>作为模块开发者，如果你想在 Magento 中创建一个新的 URL ，你需要做如下事情：</p>
<ul>
<li>Configure a module to tell Magento which controller it should use for a URL</li>
<li>Configure a module to tell Magento which Block objects should be added to the system</li>
</ul>
<p>看到这里有点招架不住了吧，不要担心。本篇介绍文章的剩余部分会带领你完成建立一个 Magento 2 “Hello World” 模块的所有必要步骤。多练习几次，你就会开始掌握新的术语，以及什么代码应该放在哪里。</p>
<h2 id="关于“Cache-Clearing”的注意点"><a href="#关于“Cache-Clearing”的注意点" class="headerlink" title="关于“Cache Clearing”的注意点"></a><a href="#%E5%85%B3%E4%BA%8E%E2%80%9Ccache-clearing%E2%80%9D%E7%9A%84%E6%B3%A8%E6%84%8F%E7%82%B9"></a>关于“Cache Clearing”的注意点</h2><p>像大多数现代框架一样，Magento 2 使用了很多不同的缓存文件来加快会拖慢速度的操作。这些缓存目的是使系统在生产环境中跑地更快 —— 但是这经常会导致 Magento 没有用最新的配置或源文件，所以看不到变化。</p>
<p>当你在 Magento 2 系统中创建新功能的时候，常常是很有必要清空你的缓存的。你可以通过<code>bin/magento</code>的 CLI 命令(<code>cache:clean</code>)，后台的<code>System -&gt; Cache Management</code>，或者通过删除缓存文件(一般在<code>var/cache</code>文件下，如果你用了缓存引擎则另当别论)来清空缓存。</p>
<p>为让速度飞起来，除了缓存文件，Magneto 2 还生成很多 boilerplate classes。这些文件放在<code>var/generation</code>路径下。当你修改了某些配置或代码文件后，通常有必要重新生成这些文件。目前，没有任何方法(CLI或者后台)可以帮你重新生成。唯一的方法是手动删除<code>var/generation</code>下的文件。</p>
<p>我们会尽量在需要清空缓存和重新生成代码文件的时候给你提个醒的，不过要是你遇到应该起作用却没有起作用的情况时，试试看这样做：先清除缓存和生成的代码文件，然后重新载入页面或是重新运行命令。</p>
<p>这些命令可以帮助你快速地回到正确的道路上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm -rf /path/to/magento/var/generation/*</span><br><span class="line">rm -rf /path/to/magento/var/cache/*</span><br></pre></td></tr></table></figure>

<h2 id="Magento-2-Hello-World-Module"><a href="#Magento-2-Hello-World-Module" class="headerlink" title="Magento 2 Hello World Module"></a><a href="#magento-2-hello-world-module"></a>Magento 2 Hello World Module</h2><p>今天我们的目标是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">访问这个URL http://magento.example.com/hello_mvc/hello/world 返回 Magento2 默认主题下的 “Hello World” 信息。</span><br></pre></td></tr></table></figure>

<p>从更高的角度来说，我们要完成这个目标的步骤如下：</p>
<ul>
<li>创建一个 Magento 2 的 Module</li>
<li>Configure this module with a route for a URL</li>
<li>Create a class for our controller object</li>
<li>Create a full action name layout handle XML file</li>
<li>Use the full action name layout handle XML file to add a new block to the content container</li>
<li>Create a template for our block</li>
</ul>
<p>上面一些术语我们有的已经提到过了，有的还没有。对熟悉 Magento 1的人来说，有些看起很熟悉，但是改变又很多，你可能想忘记 Magento 1 是怎么工作的了呢。虽然Magento 1 的许多知识在 Magento 2 的许多地方依然是非常宝贵的，但是设想 Magento 2 像 Magneto 1 一样的工作是不能帮助你寻找结果。</p>
<h2 id="创建一个-Magento-2-的-Module"><a href="#创建一个-Magento-2-的-Module" class="headerlink" title="创建一个 Magento 2 的 Module"></a><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-magento-2-%E7%9A%84-module"></a>创建一个 Magento 2 的 Module</h2><p>Magento 2 中，Module 让程序员可以以模块化地方式向系统中增加新的代码。当你通过 Module 向系统增加代码时，系统才会知道去哪里找你的代码。Module 还定义了使用PHP 命名空间的规则，这样可以避免和其他开发者的代码冲突。Module 是Magento 2 系统的“头等公民”——核心团队也是使用 Module 来实现前后端功能的哦。</p>
<p>Module 需要被放在<code>app/code</code>文件夹下。Magento 2中所有的 module 都有唯一的名字，这个名字由两部分组成。第一部分是描述创建者（公司、个人或者小组）的单词。有时候称之为 vendor namespace。第二部分，是描述该模块功能的单词。</p>
<p>举例来说，Magento 2 自带的一个模块叫 <code>Magento_Contact</code>。这个第一部分 Magento 描述的是该模块的创建者（Magneto 核心团队）。第二部分 Contact 说的是这个模块干什么事情（给 Magento 增加 Contact form）</p>
<p>我们这个入门教程，就来创建一个叫<code>Pulsestorm_HelloWorldMVVM</code>的 module 吧。要创建这个模块，请你创建相应的文件，把内容复制进去。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/etc/module.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../lib/internal/Magento/Framework/Module/etc/module.xsd&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;Pulsestorm_HelloWorldMVVM&quot; setup_version=&quot;0.0.1&quot; /&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>module 一般放在<code>app/code</code>文件夹下，根据 module 的名字我们给他创建文件结构。（Pulsestorm_HelloWorldMVVM 对应 Pulsestorm&#x2F;HelloWorldMVVM）</p>
<p>Magento 2 的 module 将包含许多 XML 配置文件，这些配置文件放在 <code>etc</code> 文件夹下。刚刚创建的<code>module.xml</code>是 module 的主要配置文件。这个文件正是 Magento 核心代码搜索系统的模块时要找的文件。</p>
<p><code>&lt;config/&gt;</code> 根节点就是样板，不用管他，照抄就行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/etc/module.xml --&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../lib/internal/Magento/Framework/Module/etc/module.xsd&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>Magento 2 使用 XSD schema 文件来验证所有 module 配置文件的内容。拷贝就行了，不会有变化。</p>
<p>这个配置文件我们感兴趣的部分是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/etc/module.xml --&gt;</span><br><span class="line">&lt;module name=&quot;Pulsestorm_HelloWorldMVVM&quot; setup_version=&quot;0.0.1&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;module/&gt;</code> 节点告诉 Magento 我们想要给系统添加一个 module。<code>name</code>属性告诉 Magneto module 的名字是什么。<code>setup_version</code>告诉 Magento 我们 module 的版本是什么。这个 version 节点对 Magento 的 setup-resource&#x2F;migration 系统很重要，不过今天我们不展开说。</p>
<p>上面的事情做好后，下面我们向<code>app/etc/config.php</code>文件的全局 module 列表中添加我们的 module。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/etc/config.php</span><br><span class="line">&lt;?php</span><br><span class="line">return array (</span><br><span class="line">  &#x27;modules&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;Magento_Store&#x27; =&gt; 1,</span><br><span class="line">    &#x27;Magento_AdvancedPricingImportExport&#x27; =&gt; 1,</span><br><span class="line">    &#x27;Magento_Directory&#x27; =&gt; 1,</span><br><span class="line">    //...</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>你看这是一个长长的 module 列表。这个文件是为了让核心代码不用每次请求时都去逐个扫描<code>app/code/*</code>文件。把我们的模块也加入到数组的最后。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/etc/config.php</span><br><span class="line">&lt;?php</span><br><span class="line">return array (</span><br><span class="line">  &#x27;modules&#x27; =&gt;</span><br><span class="line">  array (</span><br><span class="line">    &#x27;Magento_Store&#x27; =&gt; 1,</span><br><span class="line">    &#x27;Magento_AdvancedPricingImportExport&#x27; =&gt; 1,</span><br><span class="line">    &#x27;Magento_Directory&#x27; =&gt; 1,</span><br><span class="line">    //...</span><br><span class="line">    &#x27;Pulsestorm_HelloWorldMVVM&#x27;=&gt; 1</span><br><span class="line">  ),</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>Magento Merchant Beta 版本后的更新：beta 版本后核心团队增加了 <code>registration.php</code> 文件，现在每个 module 都需要他。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/registration.php</span><br><span class="line">&lt;?php</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::MODULE,</span><br><span class="line">    &#x27;Pulsestorm_HelloWorldMVVM&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>上面的文件，除了<code>Pulsestorm_HelloWorldMVVM</code>不同，其他所有的 module 内容都是一样的。第二个参数是你的 module 的全名。</p>
<p>Why is this here here? It’s part of how Magento identifies which modules are installed into a system. This replaces the old Magento 1 app&#x2F;etc&#x2F;module files, and takes the ultimate source of truth for module presence away from app&#x2F;etc&#x2F;config.php.</p>
<h2 id="安装疑难解答"><a href="#安装疑难解答" class="headerlink" title="安装疑难解答"></a><a href="#%E5%AE%89%E8%A3%85%E7%96%91%E9%9A%BE%E8%A7%A3%E7%AD%94"></a>安装疑难解答</h2><p>有几种不同的方法来检查 module 是否正确安装好了。其中一种是使用 CLI 命令<code>module:status</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:status</span><br><span class="line">List of enabled modules:</span><br><span class="line">Magento_Store</span><br><span class="line">Magento_AdvancedPricingImportExport</span><br><span class="line">//...</span><br><span class="line">Pulsestorm_HelloWorldMVVM</span><br><span class="line"></span><br><span class="line">List of disabled modules:</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>这个命令会列出系统中所有安装了的和没有安装的 module</p>
<p>另一种方式是进入后台，在_Stores -&gt; Configuration -&gt; Advanced -&gt; Advanced -&gt; Disable Modules Output_ 查看。</p>
<p>关于module 的创建最后要提醒的是，安装一个新的 module 可能会看到如下错误提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please upgrade your database: Run &quot;bin/magento setup:upgrade&quot; </span><br><span class="line">from the Magento root directory. </span><br><span class="line">The following modules are outdated:</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>这里不去深究错误原因，这是 Magento setup resource migration system 发出的警告。他告诉你模块的版本和上次setup resource migration scripts 执行的 module 版本不相符。</p>
<p>别管他，从 CMD 运行如下命令，警告就会消失了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<h2 id="添加-controller-action"><a href="#添加-controller-action" class="headerlink" title="添加 controller action"></a><a href="#%E6%B7%BB%E5%8A%A0-controller-action"></a>添加 controller action</h2><p>我们已经创建了 module，接下来为我们的 URL 配置好路由，并创建一个控制器类。在这之前，我们来做个事情。</p>
<p>Magneto 2 社区版本吸收了许多原来企业版才有的特性。其中就包括 full page caching。这对生产环境来说是非常棒的，然而要是你开着全页缓存，开发一个新的 URL 的话，会有点痛苦。你可以登录后台，到_System -&gt; Cache Management_ 中关了它。如果你让他开着，那么每次请求都要删除缓存，缓存文件在<code>var/page_cache</code>目录下。</p>
<p>之前提到的两个缓存文件夹是<code>var/cache</code> 和<code>var/generation</code></p>
<p>关闭全页缓存后，我们就可以继续前进了。</p>
<h2 id="Magnento-2-的路由"><a href="#Magnento-2-的路由" class="headerlink" title="Magnento 2 的路由"></a><a href="#magnento-2-%E7%9A%84%E8%B7%AF%E7%94%B1"></a>Magnento 2 的路由</h2><p>我们要让 Magento 2 响应如下 URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/index.php/hello_mvvm/hello/world</span><br></pre></td></tr></table></figure>

<p><code>index.php</code>部分是可以不要的。如果你启用了<code>mod_rewrite</code>（或者是web 服务器其他对应的组建），那么上面的 URL 等价于下面的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/hello_mvvm/hello/world</span><br></pre></td></tr></table></figure>

<p>在Magento 2 系统中，每个独立的 module 都可以声明一个 <strong>front name</strong>，这个<strong>front name</strong>就是URL 中的第一段，对应我们的URL，就是<code>hello_mvvm</code>。如果一个 module 申明了一个 front name，那么相当于他告诉系统：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Magneto system code 你好，如果你看见任何以 /hello_mvvm 开头的URL，我有他们的控制器。</span><br></pre></td></tr></table></figure>

<p>要让我们的模块声明<code>hello_mvvm</code>的front name，请增加如下配置文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/etc/frontend/routes.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../lib/internal/Magento/Framework/App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;standard&quot;&gt;</span><br><span class="line">        &lt;route id=&quot;hello_mvvm&quot; frontName=&quot;hello_mvvm&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;Pulsestorm_HelloWorldMVVM&quot; /&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>这个新创建的<code>routes.xml</code>文件告诉 Magento 我们要声明一个 front name。注意这个文件放在子目录<code>frontend</code>下面。Magnento 2 系统允许开发者创建多个<strong>application areas</strong>。 areas 控制的事情有载入哪个session，检查哪个 access control rule，以及载入那个配置文件。<code>frontend</code> area 就是前台购物应用。如果这里没有看明白也不用担心，乖乖放在指定位置就没事了。</p>
<p><code>&lt;router/&gt;</code>节点包含了我们所有的routes</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router id=&quot;standard&quot;&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/router&gt;</span><br></pre></td></tr></table></figure>

<p>这里<code>id=&quot;standard&quot;</code> 有点让人困惑。如果你为frontend area 设置 URL ，你就得用<code>standard</code>。如果你是为后台应用设置 URL 的话，你就得用<code>id=&quot;admin&quot;</code>。这个原因是历史遗留问题，如果有机会的话，后续的文章会讲到原因。</p>
<p>在<code>&lt;router/&gt;</code>内，我们会看到<code>&lt;route/&gt;</code>标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;route id=&quot;hello_mvvm&quot; frontName=&quot;hello_mvvm&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;Pulsestorm_HelloWorldMVVM&quot; /&gt;</span><br><span class="line">&lt;/route&gt;</span><br></pre></td></tr></table></figure>

<p>每个单独的<code>&lt;route/&gt;</code>节点告诉 Magento 我们想要声明一个特定的 front name。<code>frontName</code>的属性值是 URL 第一部分的文本值。比方说<code>frontName=&quot;hello_mvvm&quot;</code>告诉 Magento 我们想要声明的 URL 长下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/hello_mvvm/*</span><br></pre></td></tr></table></figure>

<p><code>node</code>节点的<code>id</code>属性唯一确定该节点。该<code>id</code>有时候也称为 route 的名称。按照惯例，99.9%的时候，该<code>id</code>的值应该都是和<code>frontName</code>一样的。如果你不知道为什么是这样的——你其实不需要知道。只要让他们一样就好了。</p>
<p>在<code>route</code>节点内，你会看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;module name=&quot;Pulsestorm_HelloWorldMVVM&quot; /&gt;</span><br></pre></td></tr></table></figure>

<p><code>name</code>属性节点应该是你 module 的名称。上面这些都弄好了以后，我们可以继续去创建控制器文件了。</p>
<h2 id="新建控制器文件"><a href="#新建控制器文件" class="headerlink" title="新建控制器文件"></a><a href="#%E6%96%B0%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%99%A8%E6%96%87%E4%BB%B6"></a>新建控制器文件</h2><p>Magento 2 使用传统的PHP“将 URL 转化为控制器类名”的方法。让我们再来看看我们的URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/hello_mvvm/hello/world</span><br></pre></td></tr></table></figure>

<p>要找出控制器的类名，Magento 2 将会查看 URL 第二和第三部分（<code>hello</code>和<code>world</code>）</p>
<ol>
<li>因为我们声明了<code>Pulsestorm_HelloWorldMVVM</code>的 front name 为<code>hello_mvvm</code>，所以控制器的名称以<code>Pulsestorm\HelloWorldMVVM</code>为开头。</li>
<li>因为我要定义一个控制器，所以接下来增加一个<code>Controller</code>（<code>Pulsestorm\HelloWorldMVVM\Controller</code>）</li>
<li>接下来 Magento 把 URL 的第二部分(hello)添加进去，首字母大写。（<code>Pulsestorm\HelloWorldMVVM\Controller\Hello</code>）</li>
<li>然后 Magento 把 URL 的第三部分（world）添上去，首字母大写。（Pulsestorm\HelloWorldMVVM\Controller\Hello\World）</li>
</ol>
<p>现在我们有控制器的全名了<code>Pulsestorm\HelloWorldMVVM\Controller\Hello\World</code>。现在创建这个文件吧。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Controller/Hello/World.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\HelloWorldMVVM\Controller\Hello;</span><br><span class="line">class World extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &#x27;&lt;p&gt;You Did It!&lt;/p&gt;&#x27;;</span><br><span class="line">        var_dump(__METHOD__);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>控制器文件的位置和他的全名是对应的（PSR-0标准）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class Name: Pulsestorm\HelloWorldMVVM\Controller\Hello\World;</span><br><span class="line">   app/code/Pulsestorm/HelloWorldMVVM/Controller/Hello/World.php</span><br></pre></td></tr></table></figure>

<p><code>Magento\Framework\App\Action\Action</code>是前端控制器的基类。(Action 这个名字源于历史名称”action controller”)</p>
<p>在 Magnento 2 系统中，每个控制器有且仅有一个入口，就是<code>execute</code>方法。Magento 2 的设计师这样设计是为了帮助避免冲突，在一个大的开发团队中很多人都修改同一个控制器文件实现不同的功能，如果入口还不同是很容易冲突的。</p>
<p>上面的工作都完成后，载入这个 URL 试试看吧。（当然记得先清空生成的缓存）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento.example.com/hello_mvvm/hello/world</span><br></pre></td></tr></table></figure>

<p>假如你正确地跟着上面的步骤做了，那你应该看到如下输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">You Did It</span><br><span class="line">string &#x27;Pulsestorm\HelloWorldMVVM\Controller\Hello\World::execute&#x27; (length=57)</span><br></pre></td></tr></table></figure>

<p>恭喜你！你已经创建了自己的第一个 Magneto 2 controller</p>
<h2 id="passing-off-to-the-view"><a href="#passing-off-to-the-view" class="headerlink" title="passing off to the view"></a><a href="#passing-off-to-the-view"></a>passing off to the view</h2><p>前面我们说到控制器的任务有：</p>
<ul>
<li>决定使用哪个 page layout</li>
<li>Handling saving data from <code>POST</code> requests</li>
<li>下面两件事情之一：<ul>
<li>让系统 render HTTP response</li>
<li>将用户重定向到下一页或上一页</li>
</ul>
</li>
</ul>
<p>今天我们只示范控制器让系统 render HTTP response。Magento 2 系统中，如果你想让控制器渲染（render）一个 HTML　Page，你得让控制器返回一个”page” objec。这是一个三步的过程：</p>
<ol>
<li>You need to inject a “page factory” object via automatic constructor dependency injection</li>
<li>使用上面的 page factory 对象来创建一个 page 对象</li>
<li>返回上面创建的 page 对象。</li>
</ol>
<p>实际上没有听起来这么复杂。修改你的控制器文件让他像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\HelloWorldMVVM\Controller\Hello;</span><br><span class="line">use Magento\Framework\View\Result\PageFactory;</span><br><span class="line">use Magento\Framework\App\Action\Context;</span><br><span class="line"></span><br><span class="line">class World extends \Magento\Framework\App\Action\Action</span><br><span class="line">&#123;</span><br><span class="line">    protected $pageFactory;</span><br><span class="line">    public function __construct(Context $context, PageFactory $pageFactory)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;pageFactory = $pageFactory;</span><br><span class="line">        return parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        var_dump(__METHOD__);</span><br><span class="line">        $page_object = $this-&gt;pageFactory-&gt;create();;</span><br><span class="line">        return $page_object;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>清空缓存以及<code>var/generation</code>里的内容，然后重新载入你的页面。你可能会困惑，因为你只看到<code>var_dump</code>输出的方法名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">string &#x27;Pulsestorm\HelloWorldMVVM\Controller\Hello\World::execute&#x27; (length=57)</span><br></pre></td></tr></table></figure>

<p>但是，如果你查看网页的源代码，你应该看到类似下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html &gt;</span><br><span class="line">&lt;head &gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;/&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;description&quot; content=&quot;Default Description&quot;/&gt;</span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;Magento, Varien, E-commerce&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>这里的问题并不是代码有误——这是因为我们还没有告诉layout system 它需要给<code>http://magento.example.com/hello_mvvm/hello/world</code>页面做点什么。正因为如此，Magento 渲染了 HTML 的结构，但是没有填入内容。接下来我们会了解怎么告诉 layout system 做事，但是首先我们得解释一下上面我们做了什么。</p>
<p>下面两行改变</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use Magento\Framework\View\Result\PageFactory;</span><br><span class="line">use Magento\Framework\App\Action\Context;</span><br></pre></td></tr></table></figure>

<p>严格来说并非必须的，但他让我们下面可以使用<code>PageFactory</code>和<code>Context</code>短的类名，如果你对PHP的命名空间不是很熟悉，可以参考<a href="http://alanstorm.com/php_namespace_primer/">short primer is a great place to start</a></p>
<p>接着是我们的constructor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected $pageFactory;</span><br><span class="line">public function __construct(Context $context, PageFactory $pageFactory)</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;pageFactory = $pageFactory;</span><br><span class="line">    return parent::__construct($context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是 Magento 2 的依赖注入（automatic constructor dependency injection）起作用——如果你对这个不是很熟悉，你可以参考<a href="http://alanstorm.com/category/magento/#magento_2_object_system">our object manager series</a>。简单说来，Magento 有一些神奇的代码，当你在构造函数参数中写下某个类后，它就会自动帮你构造这个类的对象。所以，就这样我们创建了<code>PageFactory</code>的对象，并且把他赋给<code>pageFactory</code>属性。</p>
<p>即使你对依赖注入很熟悉，上面的<code>$context</code>变量可能也会使你很困惑。 This is here because it’s also in the parent object’s (<code>Magento\Framework\App\Action\Action</code>) constructor, and we need to call <code>parent::__construct</code> to make sure any work in the parent constructor still happens.</p>
<p>最后，一切都到了<code>execute</code>方法中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function execute()</span><br><span class="line">&#123;</span><br><span class="line">    var_dump(__METHOD__);</span><br><span class="line">    $page_object = $this-&gt;pageFactory-&gt;create();;</span><br><span class="line">    return $page_object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这里我们使用<code>PageFactory</code>对象创建一个page 对象，并且把他返回出去。</p>
<h2 id="creating-the-view"><a href="#creating-the-view" class="headerlink" title="creating the view"></a><a href="#creating-the-view"></a>creating the view</h2><p>对最终程序员用户（我们），Magento 的 Page Layout 系统是通过 XML based domain specific language 来控制的。直白一点，这意味着我们可以通过创建包含指令的 XML 文件来告诉layout system 干什么。完整讲解 layout 系统已经超出本文的范围了（另开一篇也讲不完），如果你有问题，请在 Alan 的博客下评论，或者去 Stack Exchange 提问。</p>
<p>先做下面的事情，创建下面的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; layout=&quot;1column&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;referenceBlock name=&quot;content&quot;&gt;</span><br><span class="line">        &lt;block</span><br><span class="line">            template=&quot;content.phtml&quot;</span><br><span class="line">            class=&quot;Pulsestorm\HelloWorldMVVM\Block\Main&quot;</span><br><span class="line">            name=&quot;pulsestorm_helloworld_mvvm&quot;/&gt;</span><br><span class="line">    &lt;/referenceBlock&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>之后创建下面的 php <code>Block</code> 类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Block/Main.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\HelloWorldMVVM\Block;</span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Main extends Template</span><br><span class="line">&#123;</span><br><span class="line">    protected function _prepareLayout()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后，创建如下<code>phtml</code>模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/templates/content.phtml</span><br><span class="line">&lt;h1&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>上面都做好了以后，清空缓存和生成的代码（<code>var/generation</code>）重新载入页面，你现在应该看到_Hello World_标题被 Magento 的设计包围着。</p>
<h3 id="what-just-happened"><a href="#what-just-happened" class="headerlink" title="what just happened"></a><a href="#what-just-happened"></a>what just happened</h3><p>接下来的几个小节我们会解释上面做的事情——上面一个小节可能是本篇文章中最让人困惑的部分了。我们正在引入新的术语，重新定义 Magento 1 的术语。你不需要完全理解这些部分才能继续，不过这是深入了解 Magento 核心代码的伟大起点。</p>
<p>Even if the next few sections are a little over your head, you’ll definitely want to skip ahead to the View&#x2F;View Model section near the end.</p>
<h3 id="The-Full-Action-Name-Layout-Handle-XML-File"><a href="#The-Full-Action-Name-Layout-Handle-XML-File" class="headerlink" title="The Full Action Name Layout Handle XML File"></a><a href="#the-full-action-name-layout-handle-xml-file"></a>The Full Action Name Layout Handle XML File</h3><p>让我们从创建的 XML 文件说起</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; layout=&quot;1column&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;referenceBlock name=&quot;content&quot;&gt;</span><br><span class="line">        &lt;block</span><br><span class="line">            template=&quot;content.phtml&quot;</span><br><span class="line">            class=&quot;Pulsestorm\HelloWorldMVVM\Block\Main&quot;</span><br><span class="line">            name=&quot;pulsestorm_helloworld_mvvm&quot;/&gt;</span><br><span class="line">    &lt;/referenceBlock&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>这个文件被称为<code>full action name layout handle XML file</code>。之前我们提到，开发者通过 XML 文件中的指令告诉 Magneto Page Layout 系统做什么事情。这就是那个 XML 文件。<strong>Layout handle</strong> 就像是 Page Layout 系统的事件或是消息。每个 page 会触发某些 handles，这些 handles 告诉 Magento 哪些 Layout Handle XML Files 应该被加载。</p>
<p>每个控制器页面触发一个<code>full action name</code>handle。一个 full action name 是一个组合了<code>&lt;route/&gt;</code> ID （<code>hello_mvvm</code>通常唯一确定front name）以及URL第二和第三部分（<code>hello</code> 和 <code>world</code>）的字符串。在我们的例子中，full acton name 就是<code>hello_mvvm_hello_world</code></p>
<p>所以，当我们创建名为<code>hello_mvvm_hello_world</code>的文件时，相当于告诉 Magento：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果触发了hello_mvvm_hello_world handle，请使用这个文件中的布局指令。</span><br></pre></td></tr></table></figure>

<p>至于该文件在模块文件夹中的层次位置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml</span><br></pre></td></tr></table></figure>

<p>Magento 的每个模块都有一个<code>view</code>文件夹，用来放视图相关的文件。在<code>view</code>目录下是为单独的application area 准备的子文件夹（上面的例子application area 指的是<code>frontend</code>），在<code>area</code>文件夹下是为特定的文件类型准备的文件夹（<code>layout</code>文件，<code>template</code>文件等）</p>
<p>最后，layout 文件中的指令是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml --&gt;</span><br><span class="line">&lt;referenceBlock name=&quot;content&quot;&gt;</span><br><span class="line">    &lt;block</span><br><span class="line">        template=&quot;content.phtml&quot;</span><br><span class="line">        class=&quot;Pulsestorm\HelloWorldMVVM\Block\Main&quot;</span><br><span class="line">        name=&quot;pulsestorm_helloworld_mvvm&quot;/&gt;</span><br><span class="line">&lt;/referenceBlock&gt;</span><br></pre></td></tr></table></figure>

<p>这些 XML 指令大致相当于下面的伪代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//pseudo code -- does not work</span><br><span class="line">$our_view_block = $layout-&gt;createNewBlockWithClass(&#x27;Pulsestorm\HelloWorldMVVM\Block\Main&#x27;)</span><br><span class="line">$our_view_block-&gt;setName(&#x27;pulsestorm_helloworld_mvvm&#x27;);</span><br><span class="line">$out_view_block-&gt;setTemplate(&#x27;content.phtml&#x27;);</span><br><span class="line">$layout-&gt;addBlockToContentContainer($our_view_block);</span><br></pre></td></tr></table></figure>

<p>大白话来说就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Magento，请你用Pulsestorm\HelloWorldMVVM\Block\Main 类实例化一个block 对象，这个对象要使用 content.phtml 模板进行渲染，并且给这个block 对象一个全局唯一的名字叫pulsestorm_helloworld_mvvm</span><br></pre></td></tr></table></figure>

<p>block 的名字应该是全局唯一的字符串，这样block 对象就可以被其他代码引用了。</p>
<h3 id="creating-a-block-class"><a href="#creating-a-block-class" class="headerlink" title="creating a block class"></a><a href="#creating-a-block-class"></a>creating a block class</h3><p>之前提到过，Magento 2 的 page layout 是嵌套的container 和 block 的聚集。上面，我们使用full action name handle XML 文件告诉 Magento 我们要插入一个<code>Pulsestorm\HelloWorldMVVM\Block\Main</code> block 对象。我们创建了这样的 block 类：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Block/Main.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\HelloWorldMVVM\Block;</span><br><span class="line">use Magento\Framework\View\Element\Template;</span><br><span class="line"></span><br><span class="line">class Main extends Template</span><br><span class="line">&#123;</span><br><span class="line">    protected function _prepareLayout()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Magento 的 block 类负责渲染 HTML 片段。上面 block 的基类是<code>Magento\Framework\View\Element\Template</code>，他是 Magento 的基本模板类。继承该类的block 会渲染他模板文件中的 HTML 内容。我们在layout handle XML 文件中设置了这个模板(content.phtml)</p>
<p>block 文件的路径和 Magento 系统中的所有 PHP 类一样，遵循 PSR-0 autoloader（<a href="/about-psr/">关于psr</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">app/code/Pulsestorm/HelloWorldMVVM/Block</span><br><span class="line">         Pulsestorm\HelloWorldMVVM\Block</span><br></pre></td></tr></table></figure>

<h3 id="creating-a-template-file"><a href="#creating-a-template-file" class="headerlink" title="creating a template file"></a><a href="#creating-a-template-file"></a>creating a template file</h3><p>Magento 2 系统中的大多数 block 是 template block，这意味着他们渲染<code>phtml</code>模板。当我们添加了如下属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml --&gt;</span><br><span class="line">&lt;block &lt;!-- ... --&gt;</span><br><span class="line">    template=&quot;content.phtml&quot;</span><br><span class="line">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>

<p>就相当于我们告诉 Magento 我们希望 block 使用<code>content.phtml</code>模板文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/templates/content.phtml</span><br><span class="line">&lt;h1&gt;Hello World&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>模板文件被认为是view assets，所以他们属模块的<code>view</code>文件夹。像routes 和 layout 文件一样，他们有特定的 area(这里是frontend)，他们又属于<code>template</code>子文件夹。</p>
<p>如果你想的话也可以把模板放在<code>template</code>的子目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/layout/hello_mvvm_hello_world.xml --&gt;</span><br><span class="line">&lt;block &lt;!-- ... --&gt;</span><br><span class="line">    template=&quot;some/sub/folder/content.phtml&quot;</span><br><span class="line">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>

<h2 id="view-x2F-view-model"><a href="#view-x2F-view-model" class="headerlink" title="view&#x2F;view model"></a><a href="#view/view-model"></a>view&#x2F;view model</h2><p>到目前为止，我们已经完成所有的事项了。但是，还有最后一件要说。之前我们把 Magento 描述成 Model, View, View Model 系统，Magento blocks 是 View Model，phtml 模板是 View。下面说他们是怎么工作的。</p>
<p>打开 block 类，把下面的代码添加到<code>_prepareLayout</code>方法中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Block/Main.php</span><br><span class="line">protected function _prepareLayout()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;setMessage(&#x27;Hello Again World&#x27;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再你的<code>phtml</code>文件中，添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/templates/content.phtml</span><br><span class="line">&lt;h1&gt;&lt;?php echo $this-&gt;escapeHtml($this-&gt;getMessage()); ?&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>重新载入页面，这次你应该看到的是_Hello Again World_信息。</p>
<p>作为视图开发者，你需要自己获取或计算模板需要的数据。你可以通过模式方法<code>set</code>和<code>get</code>来完成工作，或者可以通过在 block 中直接定义方法，然后在phtml 模板中调用该方法来完成工作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Block/Main.php</span><br><span class="line">public function getGoodbyeMessage()</span><br><span class="line">&#123;</span><br><span class="line">    return &#x27;Goodbye World&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/templates/content.phtml</span><br><span class="line">&lt;h2&gt;&lt;?php echo $this-&gt;escapeHtml($this-&gt;getGoodbyeMessage()); ?&gt;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>block 对象还允许你访问 request object —— 试着载入如下 URL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://magento-2-july-8.dev/hello_mvvm/hello/world/name/bill</span><br></pre></td></tr></table></figure>

<p>和其他 PHP 框架类似，URL 第三部分以后的键值对被认为是参数。添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/Block/Main.php</span><br><span class="line">protected function _prepareLayout()</span><br><span class="line">&#123;</span><br><span class="line">    $this-&gt;setMessage(&#x27;Hello&#x27;);</span><br><span class="line">    $this-&gt;setName($this-&gt;getRequest()-&gt;getParam(&#x27;name&#x27;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改 template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/HelloWorldMVVM/view/frontend/templates/content.phtml</span><br><span class="line">&lt;h1&gt;</span><br><span class="line">    &lt;?php echo $this-&gt;escapeHtml($this-&gt;getMessage()); ?&gt;</span><br><span class="line">    &lt;?php echo $this-&gt;escapeHtml($this-&gt;getName()); ?&gt;</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;&lt;?php echo $this-&gt;escapeHtml($this-&gt;getGoodbyeMessage()); ?&gt;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<p>传统的PHP MVC 系统在控制器中设置视图中的变量值，Magneto 的做法和传统的有点不一样。Magento 2 使用 Model, View, View Model 分离了业务逻辑和模板逻辑。</p>
<p>对于大型的开发团队来说，每个人的职责明确，Magento 的这一改动对他们很可能是更有利的，但对全栈工程师来说不是很好，全站工程师需要考虑更多的抽象层次了。</p>
<p>Magento 1 是可以用<code>MVVM</code>模式的，但是1的<code>Zend Framework</code>roots(and its too many chefs problem)导致了对传统的 MVC 方式的极大偏爱，使用全局注册或者在调用loadLayout 后直接设置 block 的属性值。在Magento 2 中你再也不能直接设置block 对象的属性值了，不过注册对象还是存在的，不过非官方的推荐做法是避免用这个注册对象。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>Regardless of whether Magento 2’s patterns elicit a “finally PHP gets it”, or a “WTF is this”, you’ve just successfully created a new landing page and application entry point in Magento 2. You’ve also been exposed to core Magento 2 concepts like clearing the cache, clearing generated files, and the hierarchy of configuration and view files in a Magento 2 module. You’re well on your way to unlocking the mysteries of Magento 2, and all the opportunities that will open for you in the future.</p>
<h2 id="相关源文件下载"><a href="#相关源文件下载" class="headerlink" title="相关源文件下载"></a><a href="#%E7%9B%B8%E5%85%B3%E6%BA%90%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD"></a>相关源文件下载</h2><p><a href="https://github.com/PiscesThankIT/HelloWorldMVVM">https://github.com/PiscesThankIT/HelloWorldMVVM</a></p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
  </entry>
  <entry>
    <title>Magento 2: Simplest UI Knockout Component</title>
    <url>/alan-magento-2-simplest-ui-knockout-component/</url>
    <content><![CDATA[<p>在上篇文章中，我们通过 <code>&lt;preference&gt;</code> 的方式创建了一个最简单的 Magento 2 UI Component。如果你阅读完了整篇内容，我打赌你会对没有介绍 javascript 感到失望。今天我们将弥补上次的缺憾。 像之前一样，确保系统运行在 developer 模式，还有我们是在 Magento 2.1.1 上做的实验，不过其中涉及到的概念是所有版本都通用的。强烈建议在阅读本文前先阅读<a href="https://www.hellomagento2.com/alan_magento_simplest_ui_component/">上篇文章</a>，不过如果你想直接开动的话，我们在 GitHub 上放了<a href="https://github.com/astorm/magento2-simple-ui-component/">上篇的源代码</a>。</p>
<h2 id="An-App-for-Knockout-js-View-Models"><a href="#An-App-for-Knockout-js-View-Models" class="headerlink" title="An App for Knockout.js View Models"></a><a href="#an-app-for-knockout.js-view-models"></a>An App for Knockout.js View Models</h2><p>Alan 的 <a href="https://alanstorm.com/category/magento-2/#magento_2_mvc">Magento 2 for PHP MVC Developers</a>系列文章的第二篇 Magento 2: Serving Frontend Files 讲解了 Magento 2 中是如何使用前端文件的。在 <a href="https://alanstorm.com/category/magento-2/#magento2_advanced_javascript">Magento 2: Advanced Javascript</a>系列中讲到了 <code>x-magento-init</code> 和 Magento 2 中 Knockoug.js 实现的基础知识。2016 年 7 月份我们提到了 Magento 2 的 Knockout.js 的 template 中一些奇怪的标签（<a href="https://alanstorm.com/magentos-knockoutjs-templates-arent-knockoutjs/">Magento’s KnockoutJS Templates aren’t KnockoutJS Templates</a>）。如果你没有阅读过前面的系列文章，那么光看刚刚的这篇，你也能获益颇多。不过如果你理不清的话，这些文章可能会给你帮助。 在上篇文章结束后，我们有了一个 <code>Pulsestorm_SimpleUiComponent</code>模块。查看源代码，看到的类似下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;*&quot;:</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Magento_Ui/js/core/app&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;types&quot;:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;dataSource&quot;: [],</span><br><span class="line">                &quot;pulsestorm_simple&quot;:</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;extends&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;html_content&quot;:</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;component&quot;: &quot;Magento_Ui\/js\/form\/components\/html&quot;,</span><br><span class="line">                    &quot;extends&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;components&quot;:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;pulsestorm_simple&quot;:</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;children&quot;:</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;pulsestorm_simple&quot;:</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;type&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                            &quot;name&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        &quot;pulsestorm_simple_data_source&quot;:</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;type&quot;: &quot;dataSource&quot;,</span><br><span class="line">                            &quot;name&quot;: &quot;pulsestorm_simple_data_source&quot;,</span><br><span class="line">                            &quot;dataScope&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                            &quot;config&quot;:</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;data&quot;: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    &quot;foo&quot;: &quot;baz&quot;</span><br><span class="line">                                &#125;],</span><br><span class="line">                                &quot;params&quot;:</span><br><span class="line">                                &#123;</span><br><span class="line">                                    &quot;namespace&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><code>x-magento-init</code> 将会把这个 JSON 对象传递给 <code>Magento_Ui/js/core/app</code> 模块。我们来看看这个模块的源代码。（<a href="https://www.hellomagento2.com/alan-magento-2-and-requirejs/">Magento 2 and RequireJS (翻译)</a>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * Copyright © Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">define([</span><br><span class="line">    &#x27;./renderer/types&#x27;,</span><br><span class="line">    &#x27;./renderer/layout&#x27;,</span><br><span class="line">    &#x27;../lib/knockout/bootstrap&#x27;</span><br><span class="line">], function (types, layout) &#123;</span><br><span class="line">    &#x27;use strict&#x27;;</span><br><span class="line"></span><br><span class="line">    return function (data, merge) &#123;</span><br><span class="line">        types.set(data.types);</span><br><span class="line">        layout(data.components, undefined, true, merge);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这个看似简单的程序实际上是 Magento 的 UI 组件系统中最重要的 javascript 文件之一。这里的代码（准确地说是 <code>Magento_Ui/js/core/renderer/types</code> 和 <code>Magento_Ui/js/core/renderer/layout</code> 模块中的代码）负责创建和注册所有的 Knockout.js 的 view model 构造函数。 <code>view model</code> 的概念如果不是很熟悉的话，可以参考 <a href="http://knockoutjs.com/">Knockout.js 的官方 tutorials</a> 以及 Alan 的 <a href="https://alanstorm.com/category/magento-2/#magento2_advanced_javascript">Magento 2: Advanced Javascript</a> <code>view model</code> 构造函数的注册是我们不太熟悉的概念。本篇文章中，我们不会完整地介绍这个概念，我们现在只要知道 <code>Magento_Ui/js/core/app</code> 运行后，Magento 将向全局注册表（global registry）中加入许多 view model 的构造对象。 要理解这点，最快的办法是找个 grid 页面我们来看下 registry 是个啥。<code>Products &gt; Catalog</code> 到产品列表页，然后打开 debug 工具（chrome 中在 <code>View -&gt; Developer -&gt; Javascript Console</code>）</p>
<h2 id="The-uiRegistry"><a href="#The-uiRegistry" class="headerlink" title="The uiRegistry"></a><a href="#the-uiregistry"></a>The uiRegistry</h2><p>Magento 将所有的 Knockout.js 的 view model constructor 注册到 <code>uiRegistry</code> 模块返回的对象中。我对 javascript 的AMD 规范没有深入了解，所以我不确定这种注册到全局的做法是不是最佳实践，不过既然 Magento 这么做了，那么我们最好接受这点，然后继续我们的教程。 在 RequireJS map 中，<code>uiRegistry</code> 是一个 key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// File: vendor/magento/module-ui/view/base/requirejs-config.js</span><br><span class="line">var config = &#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        &#x27;ui/template&#x27;: &#x27;Magento_Ui/templates&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    map: &#123;</span><br><span class="line">        &#x27;*&#x27;: &#123;</span><br><span class="line">            uiElement:      &#x27;Magento_Ui/js/lib/core/element/element&#x27;,</span><br><span class="line">            uiCollection:   &#x27;Magento_Ui/js/lib/core/collection&#x27;,</span><br><span class="line">            uiComponent:    &#x27;Magento_Ui/js/lib/core/collection&#x27;,</span><br><span class="line">            uiClass:        &#x27;Magento_Ui/js/lib/core/class&#x27;,</span><br><span class="line">            uiEvents:       &#x27;Magento_Ui/js/lib/core/events&#x27;,</span><br><span class="line">            uiRegistry:     &#x27;Magento_Ui/js/lib/registry/registry&#x27;,</span><br><span class="line">            uiLayout:       &#x27;Magento_Ui/js/core/renderer/layout&#x27;,</span><br><span class="line">            buttonAdapter:  &#x27;Magento_Ui/js/form/button-adapter&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>uiRegistry</code> 对应的模块是 <code>Magento_Ui/js/lib/registry/registry</code>，实际位置在 <code>vendor/magento/module-ui/view/base/web/js/lib/registry/registry.js</code> 。这个 registry 对象类似于字典或 hash map。你可以通过 registry 的 set 方法设置一个值，使用 get 方法去取得值。让我们来实验下。在浏览器的 debugger 中加载 <code>uiRegistry</code> 模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">Registry &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在 debugger 中看不到 uiRegistry 中的属性值。Magento 核心团队让它的属性是司有的。只能通过 <code>get</code> 方法来取得已注册的值。让我们来实验下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg.get(&#x27;product_listing.product_listing&#x27;);</span><br><span class="line">UiClass &#123;_super: undefined, ignoreTmpls: Object, _requesetd: Object,</span><br><span class="line">    containers: Array[0], exports: Object…&#125;</span><br></pre></td></tr></table></figure>

<p>这里我们取得了一个名为 <code>product_listing.product_listing</code> 的 Knockout.js view model 。 <code>uiRegistry</code> 和普通的字典或 hash map 不同的地方在于 <code>get</code> 方法是支持查询语法的。你可以在他的定义文件 <code>vendor/magento/module-ui/view/base/web/js/lib/registry/registry.js</code> 中看到该查询语言的简要说明。我们将跳过这里，你只要知道他支持回调，这样我们可以取得 registry 中的所有对象。下面试一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg.get(function(item)&#123;</span><br><span class="line">    console.log(item.name);</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">//long list of view model constructor and names snipped</span><br></pre></td></tr></table></figure>

<p>回调查询让我们可以变相地查看司有属性，一窥注册地所有 view models</p>
<h2 id="Configuring-a-View-Model-Constructor"><a href="#Configuring-a-View-Model-Constructor" class="headerlink" title="Configuring a View Model Constructor"></a><a href="#configuring-a-view-model-constructor"></a>Configuring a View Model Constructor</h2><p>产品列表页包含了大量地 view models ，不过我们还是回到较简单的 model 中吧。进入 <code>System -&gt; Other Settings -&gt; Hello Simple UI Component</code> 然后再次尝试下面的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">reg.get(function(item)&#123;</span><br><span class="line">    console.log(item.name);</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

<p>我们啥也没拿到。UI Component system 并没有自动地创建 view models 。我们需要通过一个 RequireJS module 来配置我们的 UI component ，让该 RequireJS module 返回一个 view model constructor 。 首先，我们在 <code>definition.xml</code> 中加入配置节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;!-- ... --&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/pulsestorm_simple&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>清空缓存后重新载入页面，然后我们查看源代码，会看到下面这样的 JSON</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;components&quot;: &#123;</span><br><span class="line">    &quot;pulsestorm_simple&quot;: &#123;</span><br><span class="line">        &quot;children&quot;: &#123;</span><br><span class="line">            &quot;pulsestorm_simple&quot;: &#123;</span><br><span class="line">                &quot;type&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                &quot;name&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                &quot;config&quot;: &#123;</span><br><span class="line">                    &quot;component&quot;: &quot;Pulsestorm_SimpleUiComponent\/js\/pulsestorm_simple_component&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>下面我们创建下面的文件，清空缓存后刷新页面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/web/js/pulsestorm_simple_component.js</span><br><span class="line">define([], function()&#123;</span><br><span class="line">    console.log(&quot;Called&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后我们会在 console 中看到如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Called</span><br><span class="line">Uncaught TypeError: Constr is not a constructor</span><br></pre></td></tr></table></figure>

<p>有进展哦。<code>Called</code> 表明我们的模块被加载了。但是我们的模块没有返回一个 view model constructor 。下面我们来修复他。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/web/js/pulsestorm_simple_component.js</span><br><span class="line">define([&#x27;uiElement&#x27;], function(Element)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        defaults: &#123;</span><br><span class="line">            template: &#x27;Pulsestorm_SimpleUiComponent/pulsestorm_simple_template&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return viewModelConstructor;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里我们导入 <code>uiElement</code> 模块，用它的 <code>extend</code> 方法创建一个新的对象，这个对象就是我们的 view model constructor ，然后我们返回这个对象。 <code>uiElement</code> 模块（<code>Magento_Ui/js/lib/core/element/element</code>）是为 UI Component 系统建造的自定义类的一部分。本文不能展开来讲了，不过他是基于 underscore JS 的，如果你好奇的话，可以看这里 <a href="https://alanstorm.com/magento-2s-base-javascript-class/">Magento 2’s Base Javascript Class</a> 上面 <code>defaults</code> 对象的 <code>template</code> 属性定义了我们的 view model 要用的 remote template （<a href="https://www.hellomagento2.com/alan_magento_2_knockoutjs_integration/">Magento 2: KnockoutJS Integration</a>）</p>
<h2 id="Hooking-up-the-View-Model"><a href="#Hooking-up-the-View-Model" class="headerlink" title="Hooking up the View Model"></a><a href="#hooking-up-the-view-model"></a>Hooking up the View Model</h2><p>下面咱们清空缓存刷新页面后，在浏览器 debugger 中输入下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">//hold your questions on pulsestorm_simple.pulsestorm_simple</span><br><span class="line">//we&#x27;ll get there in a second</span><br><span class="line">viewModelConstructor = reg.get(&#x27;pulsestorm_simple.pulsestorm_simple&#x27;)</span><br></pre></td></tr></table></figure>

<p>然后我们会看到一条返回的 veiw model</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UiClass &#123;_super: undefined, ignoreTmpls: Object, _requesetd: Object, containers: Array[0], exports: Object…&#125;</span><br></pre></td></tr></table></figure>

<p>下一步我们将把这个 view model 和我们的 HTML 页面的 DOM 节点联系起来。这里 Magento 自定义的 Knockout.js <code>scope</code> 绑定就要隆重登场了。修改你的 UI Component 的 XHTML 模板像下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/templates/different.xhtml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello Brave New World&lt;/h1&gt;</span><br><span class="line">    &lt;div data-bind=&quot;scope: &#x27;pulsestorm_simple.pulsestorm_simple&#x27;&quot; class=&quot;entry-edit form-inline&quot;&gt;</span><br><span class="line">        &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们做了两件事情。第一件，我们加了 <code>data-bind=&quot;scope: &#39;pulsestorm_simple.pulsestorm_simple&#39;&quot;</code> 这个属性，这个属性会调用 Magento Knockout.js <code>scope</code> 绑定。<code>scope</code> 绑定需要一个参数 （<code>pulsestorm_simple.pulsestorm_simple</code>）。Magento 会用这个参数去查找 uiRegistry 中的 view model ，然后使得这个 view model 成为所有内部节点的当前 Knockout.js veiw model。<code>scope</code> 数据绑定允许你在同一个页面的不同部分使用不同的 Knockout.js view model 第二件事情是我们放了一个类似于 Knockout.js 绑定标签的东东：<code>&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</code>这个东东将加载当前 view model 的 template 。<code>getTemplate</code> 方法来自于我们继承的类 <code>uiElement</code> 下面清空缓存并刷新页面，我们将看到下面的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Unable to resolve the source file for ‘adminhtml/Magento/backend/enUS/PulsestormSimpleUiComponent/template/pulsestormsimpletemplate.html’ #0 /path/to/magento/vendor/magento/framework/App/StaticResource.php(97): Magento\Framework\View\Asset\File-&gt;getSourceFile() #1 /path/to/magento/vendor/magento/framework/App/Bootstrap.php(258): Magento\Framework\App\StaticResource-&gt;launch() #2 /path/to/magento/pub/static.php(13): Magento\Framework\App\Bootstrap-&gt;run(Object(Magento\Framework\App\StaticResource)) #3 &#123;main&#125;</span><br></pre></td></tr></table></figure>

<p>因为我们刚刚配置了 template 但却没有创建他呀。下面咱们创建一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/web/template/pulsestorm_simple_template.html --&gt;</span><br><span class="line">&lt;h1&gt;Rendered with Knockout.js&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>然后清空缓存刷新页面，你应该看到下面这样的： <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-1.png"> 恭喜你，你刚刚创建了一个基于 Knockout.js 的 Magento UI Component.</p>
<h2 id="Using-Knockout"><a href="#Using-Knockout" class="headerlink" title="Using Knockout"></a><a href="#using-knockout"></a>Using Knockout</h2><p>当然了，花这么大力气就为了加载一个静态 HTML 也太小题大做了。要充分利用 Knockout.js 的优势，你需要在 RequireJS 模块中导入它。 举例说来，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/web/template/pulsestorm_simple_template.html --&gt;</span><br><span class="line">&lt;h1&gt;Rendered with Knockout.js&lt;/h1&gt;</span><br><span class="line">&lt;strong data-bind=&quot;text: message&quot;&gt;&lt;/strong&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: vendor/magento//module-ui/view/base/web/js/core/app.js</span><br><span class="line">define([&#x27;uiElement&#x27;,&#x27;ko&#x27;], function(Element, ko)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        defaults: &#123;</span><br><span class="line">            template: &#x27;Pulsestorm_SimpleUiComponent/pulsestorm_simple_template&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        message: ko.observable(&quot;Hello Knockout.js!&quot;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return viewModelConstructor;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这里，我们导入了 <code>ko</code> 模块。这个 <code>ko</code> 模块就相当于 Knockout.js 提供的全局 <code>ko</code> （<a href="https://www.hellomagento2.com/alan_magento_2_knockoutjs_integration/">Magento 2 KnockoutJS 集成</a>）。我们还加了一个 <code>message</code> 属性，把这个属性设成 <code>ko.observable</code> 对象。这个就是 Knockout.js 的用法。然后刷新页面，你应该看到： <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-2.png"> 下面在浏览器 debugger 中，输入下面的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; reg.get(&#x27;pulsestorm_simple.pulsestorm_simple&#x27;).message(&quot;Change Me&quot;);</span><br></pre></td></tr></table></figure>

<p>然后立刻，我们的页面变成下面这样了： <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-3.png"></p>
<h2 id="Modern-Javascript-and-the-Browser-Debugger"><a href="#Modern-Javascript-and-the-Browser-Debugger" class="headerlink" title="Modern Javascript and the Browser Debugger"></a><a href="#modern-javascript-and-the-browser-debugger"></a>Modern Javascript and the Browser Debugger</h2><p>Magento 2 javascript（以及许多其他现代 javascript）调试的挑战之一就是跟踪哪些加载了哪些没有。再也不像以前那样，查看源代码查找 <code>&lt;script&gt;</code> 标签。 Google Chrome 的 debugger ，如果你要查找 RequireJS 的模块。那么可以去 <code>Source</code> tab <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-4.png"> 如果你要看 Knockout.js 的 remote template ，<code>Network -&gt; XHR</code> 正是你要找的。 <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-5.png"> 需要特别注意浏览器中使用的文件是不是最新的。Magento 有自己的缓存机制，还有 Magento 对前端文件设置了一些强势的 header （<a href="https://alanstorm.com/magento-2-frontend-files-serving/">Magento 2: Serving Frontend Files</a>）所以除了清空 Magento 缓存，有时候也有必要清理浏览器的缓存。</p>
<h2 id="Why-the-Double-Name"><a href="#Why-the-Double-Name" class="headerlink" title="Why the Double Name"></a><a href="#why-the-double-name"></a>Why the Double Name</h2><p>view model constructor 重复的名称可能会让你觉得困惑。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">product_listing.product_listing</span><br><span class="line">pulsestorm_simple.pulsestorm_simple</span><br></pre></td></tr></table></figure>

<p>名称来自于 <code>/ui_component/*.xml</code> 文件名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;uiComponent name=&quot;pulsestorm_simple&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p>但是，通过上面的例子，我们依然不清楚为什么要用两次名称，这种格式意味着某种层次。这正是 UI Component 系统的特性，通过他我们将理解 Magento 自带的 listing 和 form components 是怎么回事。 首先，回到 <code>definition.xml</code> 文件，修改成下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;!-- &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component&lt;/item&gt; --&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;uiComponent&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/pulsestorm_simple&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们将 <code>Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component</code> 替换成了 <code>uiComponent</code> ，这个模块就是 <code>Magento_Ui/js/lib/core/collection</code> 下面我们清除缓存刷新页面，这次我们的模板不会被加载咯。这说明，不同的 view model 不同的模板。 下面在浏览器 debugger 中输入下面的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; viewModelConstructor = reg.get(&#x27;pulsestorm_simple.pulsestorm_simple&#x27;)</span><br><span class="line">&gt; viewModelConstructor.getTemplate()</span><br><span class="line">ui/collection</span><br></pre></td></tr></table></figure>

<p>这个 <code>ui/collection</code> 对应的就是下面这个文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: vendor/magento//module-ui/view/base/web/templates/collection.html --&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line"> * Copyright © 2016 Magento. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;each args=&quot;data: elems, as: &#x27;element&#x27;&quot;&gt;</span><br><span class="line">    &lt;render if=&quot;hasTemplate()&quot;/&gt;</span><br><span class="line">&lt;/each&gt;</span><br></pre></td></tr></table></figure>

<p>如果你对 Magento 2 的前端代码不熟悉，那么肯定会对这些标签感到困惑。这些标签是 Magento 2 扩展了 Knockout.js rendering engine 后的结果（<a href="https://alanstorm.com/magentos-knockoutjs-templates-arent-knockoutjs/">Magento’s KnockoutJS Templates aren’t KnockoutJS Templates</a>）。用 Knockout.js 的写法，就是下面这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ko foreach: &#123;data: elems, as: &#x27;element&#x27;&#125; --&gt;</span><br><span class="line">    &lt;!-- ko if: hasTemplate() --&gt;&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">&lt;!-- /ko --&gt;</span><br></pre></td></tr></table></figure>

<p>然后在浏览器中输入下面的代码，我们看看 <code>elems</code> 是什么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; viewModelConstructor = reg.get(&#x27;pulsestorm_simple.pulsestorm_simple&#x27;)</span><br><span class="line">&gt; viewModelConstructor.elems()</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>是个空数组。那么我们怎么往里面加东西呢？通过 UI Component 配置。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;!--  ... --&gt;</span><br><span class="line">    &lt;htmlContent name=&quot;first_ever_child&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;block&quot; xsi:type=&quot;object&quot;&gt;Magento\Framework\View\Element\Text&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/htmlContent&gt;</span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们给 <code>pulsestorm_simple.xml</code> 加了一个 <code>&lt;htmlContent/&gt;</code> 子节点。这个 <code>&lt;htmlContent/&gt;</code> 是 Magento 提供的，不过这不重要，重要的是我们给这个节点配置了 <code>Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component</code> 组件。 清空缓存然后刷新页面，你又看到 <code>Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component</code> 组件加载的模板了。 <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-2.png"> 有意思的是 <code>uiRegistry</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; reg.get(function(item)&#123;</span><br><span class="line">    console.log(item.name);</span><br><span class="line">&#125;)</span><br><span class="line">undefined</span><br><span class="line">pulsestorm_simple.pulsestorm_simple</span><br><span class="line">pulsestorm_simple.pulsestorm_simple.first_ever_child</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>

<p>这里我们看到了组件定义的层次结构。下面我们再到 UI Component XML 中加上另一个节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;!--  ... --&gt;</span><br><span class="line">    &lt;htmlContent name=&quot;first_ever_child&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;block&quot; xsi:type=&quot;object&quot;&gt;Magento\Framework\View\Element\Text&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/htmlContent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;htmlContent name=&quot;second_ever_child&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;block&quot; xsi:type=&quot;object&quot;&gt;Magento\Framework\View\Element\Text&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleUiComponent/js/pulsestorm_simple_component&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/htmlContent&gt;</span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>然后清空缓存刷新页面，我们会看到那个模板被加载了两次。 <img src="/wp-content/uploads/2018/05/simple-ui-ko-component-6.png"> 然后咱们到浏览器 debugger 中看下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; reg.get(function(item)&#123;</span><br><span class="line">    console.log(item.name);</span><br><span class="line">&#125;)</span><br><span class="line">pulsestorm_simple.pulsestorm_simple</span><br><span class="line">pulsestorm_simple.pulsestorm_simple.first_ever_child</span><br><span class="line">pulsestorm_simple.pulsestorm_simple.second_ever_child</span><br></pre></td></tr></table></figure>

<p>你有很多方法可以用 UI Component system 去完成前端代码，不过最终 Magento 2 中的主要用法就是这样的。<code>uiComponent/Magento_Ui/js/lib/core/collection</code> 模块 <strong>collects and renders a series of Knockout.js view models</strong> 顶层的 UI Component 负责加载 XHTML 模板，但是如果他的 configuration 中设置了 <code>uiComponent</code> 的属性，并且他的 XHTML 中通过 <code>scope</code> 绑定调用该模块，那么他的子节点会被命名成这种树形的结构。 这一点有点难理解，的 configuration 中设置了 <code>uiComponent</code> 的属性，指的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;!-- uiComponent 属性 --&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;uiComponent&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/pulsestorm_simple&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>XHTML 中通过 <code>scope</code> 绑定调用该模块,指的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/templates/different.xhtml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello Brave New World&lt;/h1&gt;</span><br><span class="line">    &lt;div data-bind=&quot;scope: &#x27;pulsestorm_simple.pulsestorm_simple&#x27;&quot; class=&quot;entry-edit form-inline&quot;&gt;</span><br><span class="line">        &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>子节点会被命名成树形结构，指的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pulsestorm_simple.pulsestorm_simple</span><br><span class="line">pulsestorm_simple.pulsestorm_simple.first_ever_child</span><br><span class="line">pulsestorm_simple.pulsestorm_simple.second_ever_child</span><br></pre></td></tr></table></figure>

<p>让人困惑的是，根节点也被注册成一个 view model constructor 了，这就是 <code>pulsestorm_simple.pulsestorm_simple</code> 的由来。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>经过这么一番捣鼓，你现在应该更深入了解 Magento 2 的神秘新系统 UI Component 了。不过，还有很多等着我们去探索。再下一篇文章中，我们将更深入地挖掘一下，看看 UI Components 怎么获得 <code>&lt;dataProvider&gt;</code> 中地数据，然后修订我们这次地模块，看看能不能不用 <code>&lt;preference/&gt;</code> 使用这个系统。</p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2: Simplest XSD Valid UI Component</title>
    <url>/alan-magento-2-simplest-xsd-valid-ui-component/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento_2_simplest_xsd_valid_ui_component/">原文地址</a> 上期的两篇文章中，我们从头创建了一个新的 UI Component 模块。虽然我们成功了，但是是以 <code>&lt;preference&gt;</code> 重写的方式做到的，这种方式禁用了 Magento 2 的 XSD 验证的，作为学习练习还好，但不能用在生产环境中。 使用 <code>&lt;preference&gt;</code> 的方式禁用 XSD 验证是以牺牲系统的稳定性为代价的。这次我们不会再禁用 XSD 的验证，用可以在生产环境中使用的方式来创建 UI Component</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a><a href="#%E5%89%8D%E6%8F%90"></a>前提</h2><p>如果上次你已经使用了 <code>Pulsestorm_SimpleUiComponent</code> 那么现在请禁用该模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php bin/magento module:disable Pulsestorm_SimpleUiComponent</span><br><span class="line">The following modules have been disabled:</span><br><span class="line">- Pulsestorm_SimpleUiComponent</span><br><span class="line"></span><br><span class="line">Cache cleared successfully.</span><br><span class="line">Generated classes cleared successfully. Please run the &#x27;setup:di:compile&#x27; command to generate classes.</span><br><span class="line">Info: Some modules might require static view files to be cleared. To do this, run &#x27;module:disable&#x27; with the --clear-static-content option to clear them.</span><br></pre></td></tr></table></figure>

<p>下面我们使用 <a href="https://github.com/astorm/pestle">pestle</a> 创建一个 Admin 模块</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php pestle.phar generate_module Pulsestorm SimpleValidUiComponent 0.0.1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_acl Pulsestorm_SimpleValidUiComponent Pulsestorm_SimpleValidUiComponent::top,Pulsestorm_SimpleValidUiComponent::menu_1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_menu Pulsestorm_SimpleValidUiComponent Magento_Backend::system_other_settings Pulsestorm_SimpleValidUiComponent::a_menu_item Pulsestorm_SimpleValidUiComponent::menu_1 &quot;Hello Simple Valid Ui Component&quot; pulsestorm_simplevaliduicomponent/index/index 1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_route Pulsestorm_SimpleValidUiComponent adminhtml pulsestorm_simplevaliduicomponent</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_view Pulsestorm_SimpleValidUiComponent adminhtml pulsestorm_simplevaliduicomponent_index_index Main content.phtml 1column</span><br><span class="line"></span><br><span class="line">php bin/magento module:enable Pulsestorm_SimpleValidUiComponent</span><br><span class="line"></span><br><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>这样，我们登陆管理后台，进入 <code>System -&gt; Other Settings -&gt; Hello Simple Valid Ui Component</code> OK ，我们的模板已经生成了，下面开始进入正题。</p>
<h2 id="A-New-UI-Component"><a href="#A-New-UI-Component" class="headerlink" title="A New UI Component"></a><a href="#a-new-ui-component"></a>A New UI Component</h2><p>我们在 layout handle XML 文件中加入新的 <code>&lt;uiComponent&gt;</code> 节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/layout/pulsestorm_simplevaliduicomponent_index_index.xml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;referenceBlock name=&quot;content&quot;&gt;</span><br><span class="line">        &lt;block template=&quot;content.phtml&quot; class=&quot;Pulsestorm\SimpleValidUiComponent\Block\Adminhtml\Main&quot; name=&quot;pulsestorm_simplevaliduicomponent_block_main&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;uiComponent name=&quot;pulsestorm_simple_valid&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/referenceBlock&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>然后我们创建这个名为 <code>pulsestorm_simple_valid</code> 的 UI Component 的 XML 文件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;pulsestorm_simple_valid xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;/pulsestorm_simple_valid&gt;</span><br></pre></td></tr></table></figure>

<p>清空缓存刷新页面，我们会看到如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Element</span><br><span class="line">&#x27;pulsestorm_simple_valid&#x27;: No matching global declaration</span><br><span class="line">available for thevalidation root.</span><br></pre></td></tr></table></figure>

<p>就像我们之前的文章中说的那样，这个错误是因为 <code>vendor/magento/module-ui/view/base/ui_component/etc/definition.xml</code> 中没有定义 <code>pulsestorm_simple_valid</code> ，而且我们没有办法增加这个节点进去，因为 Magento 的 XSD 验证不能通过名为 <code>&lt;pulsestorm_simple_valid/&gt;</code> 的 root 节点。 在 2.1 版本的 Magento 中，我们是没有好办法不动系统方法去做到的增加 root 节点的，但是我们可以变通一下。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;container xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;/container&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;container&gt;</code> 节点是一个有效的 root 节点，清空缓存刷新页面，我们这次会看到如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fatal error: Method Magento\Ui\TemplateEngine\Xhtml\Result::__toString()</span><br><span class="line">must not throw an exception, caught Error: Call to a member function</span><br><span class="line">getConfigData() on null in</span><br><span class="line">/path/to/magento/vendor/magento/module-ui/</span><br><span class="line">Component/Wrapper/UiComponent.php on line 0</span><br></pre></td></tr></table></figure>

<p>换句话说，schema validation 错误已经没有了，这次只是因为缺少 <code>dataSource</code> 节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;container xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;dataSource name=&quot;pulsestorm_simple_valid_data_source&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;dataProvider&quot; xsi:type=&quot;configurableObject&quot;&gt;</span><br><span class="line">            &lt;!-- the PHP class that implements a data provider --&gt;</span><br><span class="line">            &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm\SimpleValidUiComponent\Model\DataProvider&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- redundant with the `dataSource` name --&gt;</span><br><span class="line">            &lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;pulsestorm_simple_valid_data_source&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- required: means ui components are meant to work with models --&gt;</span><br><span class="line">            &lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;entity_id&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- required: means ui components are meant to work with URL passing --&gt;</span><br><span class="line">            &lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;id&lt;/argument&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">&lt;/container&gt;</span><br></pre></td></tr></table></figure>

<p>data provider class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/Model/DataProvider.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleValidUiComponent\Model;</span><br><span class="line">class DataProvider extends \Magento\Ui\DataProvider\AbstractDataProvider</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>刷新页面，这次我们应该没有错误，加载了页面了。</p>
<h2 id="What-Did-We-Render"><a href="#What-Did-We-Render" class="headerlink" title="What Did We Render?"></a><a href="#what-did-we-render?"></a>What Did We Render?</h2><p>如果我们查看源代码的话，不是通过 DOM Inspector ，我们会看到下面的加载内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div data-bind=&quot;scope: &#x27;pulsestorm_simple_valid.areas&#x27;&quot; class=&quot;entry-edit form-inline&quot;&gt;</span><br><span class="line">        &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script type=&quot;text/x-magento-init&quot;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;: &#123;</span><br><span class="line">            &quot;Magento_Ui/js/core/app&quot;: &#123;</span><br><span class="line">                &quot;types&quot;: &#123;</span><br><span class="line">                    &quot;dataSource&quot;: [],</span><br><span class="line">                    &quot;container&quot;: &#123;</span><br><span class="line">                        &quot;extends&quot;: &quot;pulsestorm_simple_valid&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;html_content&quot;: &#123;</span><br><span class="line">                        &quot;component&quot;: &quot;Magento_Ui\/js\/form\/components\/html&quot;,</span><br><span class="line">                        &quot;extends&quot;: &quot;pulsestorm_simple_valid&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;components&quot;: &#123;</span><br><span class="line">                    &quot;pulsestorm_simple_valid&quot;: &#123;</span><br><span class="line">                        &quot;children&quot;: &#123;</span><br><span class="line">                            &quot;pulsestorm_simple_valid&quot;: &#123;</span><br><span class="line">                                &quot;type&quot;: &quot;pulsestorm_simple_valid&quot;,</span><br><span class="line">                                &quot;name&quot;: &quot;pulsestorm_simple_valid&quot;,</span><br><span class="line">                                &quot;config&quot;: &#123;</span><br><span class="line">                                    &quot;component&quot;: &quot;uiComponent&quot;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;pulsestorm_simple_valid_data_source&quot;: &#123;</span><br><span class="line">                                &quot;type&quot;: &quot;dataSource&quot;,</span><br><span class="line">                                &quot;name&quot;: &quot;pulsestorm_simple_valid_data_source&quot;,</span><br><span class="line">                                &quot;dataScope&quot;: &quot;pulsestorm_simple_valid&quot;,</span><br><span class="line">                                &quot;config&quot;: &#123;</span><br><span class="line">                                    &quot;params&quot;: &#123;</span><br><span class="line">                                        &quot;namespace&quot;: &quot;pulsestorm_simple_valid&quot;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>我们看下 <code>&lt;container&gt;</code> 在 <code>definition.xml</code> 配置中的定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: vendor/magento//module-ui/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- ... --&gt;</span><br><span class="line">&lt;container class=&quot;Magento\Ui\Component\Container&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;uiComponent&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/container/default&lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">&lt;/container&gt;</span><br><span class="line">&lt;!-- ... --&gt;</span><br></pre></td></tr></table></figure>

<p>他的 XHTML template 是 <code>templates/container/default</code> ，他的 component 是 <code>uiComponent</code> (<code>Magento_Ui/js/lib/core/collection</code>) 我们选择用 <code>container</code> component 的原因有两点：第一，他是少数几个能用的不会有 XSD 验证错误的 root 节点。第二，<code>uiComponent</code> 正是我们需要的组件。上次（<a href="https://www.hellomagento2.com/alan_magento_2_simplest_ui_knockout_component/#why-the-double-name">Magento 2: Simplest UI Knockout Component</a>）我们讲到 <code>ui/collection</code> 模块会遍历子元素，并加载子元素的模板，类似于 layout update XML 的 <code>&lt;container&gt;</code> 节点，或者 Magento 1 中的 <code>core/text_list</code> block 但是 <code>templates/container/default</code> XHTML 模板并不是我们需要的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/view/base/ui_component/templates/container/default.xhtml</span><br><span class="line">&lt;div xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../Ui/etc/ui_template.xsd&quot;&gt;</span><br><span class="line">    &lt;div data-bind=&quot;scope: &#x27;&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.areas&#x27;&quot; class=&quot;entry-edit form-inline&quot;&gt;</span><br><span class="line">        &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>这个模板是干吗用的目前还不是很清楚。Magento 的 <code>ui_component</code> files 只用 <code>&lt;container&gt;</code> 作为子节点，就是说它的 XHTML template 从来没有被加载过。很有可能是早期 Magento 使用 <code>&lt;container&gt;</code> 作为 root 根节点的遗留产物，也可能是某种为将来做的准备。管他原因是什么，这就是为什么我们可以用 <code>&lt;container&gt;</code> 作为 root 节点。很难说这个“功能”以后还会不会存在，但目前这是最好的方式了。</p>
<h2 id="Changing-the-Template"><a href="#Changing-the-Template" class="headerlink" title="Changing the Template"></a><a href="#changing-the-template"></a>Changing the Template</h2><p>XHTML 模板不是我们想要的，那么我们是不是就卡住了呢？当然不是了，我们可以在 <code>ulsestorm_simple_valid.xml</code> 文件中配置一个新的模板。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;container xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/pulsestorm_simple_valid/default&lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line"></span><br><span class="line">&lt;/container&gt;</span><br></pre></td></tr></table></figure>

<p>记住，<code>definition.xml</code> 文件中设置的是默认值，<code>ui_component</code> 文件夹中的文件可以覆盖默认值。 然后我们还要创建 <code>xhtml</code> template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/templates/pulsestorm_simple_valid/default.xhtml</span><br><span class="line">&lt;div data-bind=&quot;scope: &#x27;&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;&#x27;&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:noNamespaceSchemaLocation=&quot;../../../../../../Ui/etc/ui_template.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码基本上参照的是 listing grid (vendor&#x2F;magento&#x2F;module-ui&#x2F;view&#x2F;base&#x2F;ui_component&#x2F;templates&#x2F;listing&#x2F;default.xhtml) 的默认 XHTML 。它和我们上篇中用的模板一样，通过 <code>scope</code> 绑定将整个系统运行起来。 这里有几点值得注意。 首先，我们看到 Knockout tag-less 模板绑定：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- ko template: getTemplate() --&gt;&lt;!-- /ko --&gt;</span><br></pre></td></tr></table></figure>

<p>我们已经知道了 Knockout 的 view model 是通过我们的 <code>scope</code> 绑定来实现的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-bind=&quot;scope: &#x27;&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;&#x27;&quot; ...&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们看到了一个不熟悉的地方。我么用了 <code>&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;.&amp;#123;&amp;#123;getName()&amp;#125;&amp;#125;</code> 来替代了硬编码的 scope 绑定。<code>&amp;#123;&amp;#123;...&amp;#125;&amp;#125;</code> 花括号中的内容是 XHTML template 语言的一部分，他将调用该 UI Component 对象的 <code>getName()</code> 方法。这里的 name 是我们用在 layout handle XML 文件中的 <code>&lt;uiComponent name=&quot;pulsestorm_simple_valid&quot;/&gt;</code> 。就是说他等同于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div data-bind=&quot;scope: &#x27;pulsestorm_simple_valid.pulsestorm_simple_valid&#x27;&quot; ...&gt;</span><br></pre></td></tr></table></figure>

<p>下一处让人困惑的地方是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">xsi:noNamespaceSchemaLocation=&quot;../../../../../../Ui/etc/ui_template.xsd&quot;</span><br></pre></td></tr></table></figure>

<p>We have an XML namespace declaration in the root level</p>
<p>, as well as a schema validation file (xsi:noNamespaceSchemaLocation).记住，这是 XHTML 不是 HTML 模板。他们像 XML 文件那样，这意味着 XHTML 模板中只能由一个 top level node . 虽然这些属性（namespace 等）不是严格要求的，但是 Magento 核心文件中都是有的，所以为了保持一致，我们最好也加上。 如果你很好奇，为什么这些属性最终没有进入到 HTML 中去的话，这是因为在加载前 Magento 移除了他们：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/TemplateEngine/Xhtml/Result.php</span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        //...</span><br><span class="line">        foreach ($templateRootElement-&gt;attributes as $name =&gt; $attribute) &#123;</span><br><span class="line">            if (&#x27;noNamespaceSchemaLocation&#x27; === $name) &#123;</span><br><span class="line">                $this-&gt;getDocumentElement()-&gt;removeAttributeNode($attribute);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        $templateRootElement-&gt;removeAttributeNS(&#x27;http://www.w3.org/2001/XMLSchema-instance&#x27;, &#x27;xsi&#x27;);</span><br><span class="line">        //...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>最后，<code>ui_template.xsd</code> 值得一看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: vendor/magento/module-ui/etc/ui_template.xsd</span><br><span class="line">&lt;xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; elementFormDefault=&quot;qualified&quot;&gt;</span><br><span class="line">    &lt;xs:element name=&quot;form&quot;&gt;</span><br><span class="line">        &lt;xs:complexType &gt;</span><br><span class="line">            &lt;xs:sequence&gt;</span><br><span class="line">                &lt;xs:any minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot; processContents=&quot;lax&quot; /&gt;</span><br><span class="line">            &lt;/xs:sequence&gt;</span><br><span class="line">        &lt;/xs:complexType&gt;</span><br><span class="line">    &lt;/xs:element&gt;</span><br><span class="line">    &lt;xs:element name=&quot;div&quot; &gt;</span><br><span class="line">        &lt;xs:complexType &gt;</span><br><span class="line">            &lt;xs:sequence&gt;</span><br><span class="line">                &lt;xs:any minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot; processContents=&quot;lax&quot; /&gt;</span><br><span class="line">            &lt;/xs:sequence&gt;</span><br><span class="line">            &lt;xs:anyAttribute processContents=&quot;lax&quot; /&gt;</span><br><span class="line">        &lt;/xs:complexType&gt;</span><br><span class="line">    &lt;/xs:element&gt;</span><br><span class="line">&lt;/xs:schema&gt;</span><br></pre></td></tr></table></figure>

<p>完整地讲 <code>xs:schema</code> 语言超出了本篇的范围，但是上面地代码表示 <code>xhtml</code> 文件必须有一个 root 节点，<code>div</code> 或是 <code>form</code> 。另外，我们地文件中不写 <code>si:noNamespaceSchemaLocation</code> 并不能跳过验证，因为这些 <code>.xhtml</code> 文件最终会被合并成 XML 树，带 schema 验证的。</p>
<h2 id="Adding-to-the-Collection"><a href="#Adding-to-the-Collection" class="headerlink" title="Adding to the Collection"></a><a href="#adding-to-the-collection"></a>Adding to the Collection</h2><p>下面我们清空缓存刷新页面，我们什么变化也没有看到。但是，如果我们用 Chrome 的 debugger 工具查看 <code>Sources</code> tab ，我们会发现 Magento 已经加载了 <code>collection.js</code> (<code>Magento_Ui/js/lib/core/collectio</code>) <img src="/wp-content/uploads/2018/06/debug-sources.png"> 通过 XHR debugging 我们还会发现 magento 已经加载了 <code>collection.html</code> Knockout.js template <img src="/wp-content/uploads/2018/06/debug-xhr.png"> 我们切换到 console 中，我们会看到名为 <code>pulsestorm_simple_valid.pulsestorm_simple_valid</code> 的 view model constructor</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; reg = requirejs(&#x27;uiRegistry&#x27;);</span><br><span class="line">&gt; reg.get(function(item)&#123;</span><br><span class="line">    console.log(item.name);</span><br><span class="line">    console.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">pulsestorm_simple_valid.pulsestorm_simple_valid</span><br><span class="line">UiClass &#123;_super: undefined, ignoreTmpls: Object, _requesetd: Object, containers: Array[0], exports: Object…&#125;</span><br></pre></td></tr></table></figure>

<p>如果你不确定这里在做什么，请参考 <a href="https://www.hellomagento2.com/alan_magento_simplest_ui_component/">Magento 2: Simplest UI Component</a> 我们下一步要做的是加一些子组件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;container&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">    &lt;htmlContent name=&quot;our_first_content&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;block&quot; xsi:type=&quot;object&quot;&gt;Pulsestorm\SimpleValidUiComponent\Block\Example&lt;/argument&gt;</span><br><span class="line">    &lt;/htmlContent&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/container&gt;</span><br></pre></td></tr></table></figure>

<p>The <code>htmlContent</code> node allows you to render the contents of a Magento block object into our <code>x-magento-init</code> script, and then have those contents rendered onto the page via Knockout.js.上面的例子我们将 render 名为 <code>Pulsestorm\SimpleValidUiComponent\Block\Example</code> 的 block 。我们来看 <code>definition.xml</code> 中是怎么定义 <code>&lt;htmlContent/&gt;</code> 的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;htmlContent class=&quot;Magento\Ui\Component\HtmlContent&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/components/html&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">&lt;/htmlContent&gt;</span><br></pre></td></tr></table></figure>

<p>我们发现 rendering 是通过 <code>Magento_Ui/js/form/components/html</code> 模块进行的。完整地说，<code>Magento_Ui/js/form/components/html</code> 模块返回一个 Knockout.js view model constructor ，它有一个 Knockout.js “Magento remote” 模板 <code>ui/content/content</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//File: vendor/magento/module-ui/view/base/web/js/form/components/html.js</span><br><span class="line">//...</span><br><span class="line">return Component.extend(&#123;</span><br><span class="line">    defaults: &#123;</span><br><span class="line">        content:        &#x27;&#x27;,</span><br><span class="line">        showSpinner:    false,</span><br><span class="line">        loading:        false,</span><br><span class="line">        visible:        true,</span><br><span class="line">        template:       &#x27;ui/content/content&#x27;,</span><br><span class="line">        additionalClasses: &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">//...</span><br></pre></td></tr></table></figure>

<p>render 的实现细节作为高级练习六个读者。 下面我们清空缓存刷新页面，然后我们就会看到下面的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exception #0 (ReflectionException): Class Pulsestorm\SimpleValidUiComponent\Block\Example does not exist</span><br></pre></td></tr></table></figure>

<p>哈，我们忘记创建这个对象了 <code>Pulsestorm\SimpleValidUiComponent\Block\Example</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/Block/Example.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleValidUiComponent\Block;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\View\Element\BlockInterface;</span><br><span class="line"></span><br><span class="line">class Example extends \Magento\Framework\View\Element\AbstractBlock</span><br><span class="line">&#123;</span><br><span class="line">    public function toHtml()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;&lt;h1&gt;Hello PHP Block Rendered in JS&lt;/h1&gt;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它就是 Magento 的标准 block 类，是可以通过 layout 配置的，它必须继承 <code>Magento\Framework\View\Element\AbstractBlock</code> 类。通常这些是 <code>phtml</code> template block ，但是这里为了简化我们用了 <code>toHtml</code> 方法直接返回了。 刷新页面，我们应该看到下面的样子： <img src="/wp-content/uploads/2018/06/html-content.png"></p>
<h2 id="Hijacking-htmlContent-劫持-htmlContent"><a href="#Hijacking-htmlContent-劫持-htmlContent" class="headerlink" title="Hijacking htmlContent(劫持 htmlContent)"></a><a href="#hijacking-htmlcontent(%E5%8A%AB%E6%8C%81-htmlcontent)"></a>Hijacking htmlContent(劫持 htmlContent)</h2><p><code>htmlContent</code> 节点很有意思，if only for their amusing “render some server side code that renders some front-end code that renders some more server side code” pattern, we’re not interested in them today for their core functionality.我们使用 <code>htmlContent</code> 节点是因为：</p>
<ol>
<li>XSD 允许它作为 <code>&lt;container&gt;</code> 节点的子节点</li>
<li>它的基本功能相对简单</li>
<li>它是通用的，不太可能是特定功能的片段（比如 <code>&lt;listingToolbar/&gt;</code>）</li>
</ol>
<p>这些特点使得它是很适合劫持的。劫持，这里的意思是我们将利用 UI Component 的 xml 合并，使得我们的 <code>htmlContent</code> blocks 可以做如下事情：</p>
<ol>
<li>使用不同的 component class</li>
<li>使用不同的 RequireJS view model constructor factory</li>
<li>使得上面的 RequireJS view model constructor factory 指向一个新的 Knockout.js template</li>
</ol>
<p>对于第一点，我们要做的只是在 <code>htmlContent</code> XML 节点上加上新的 class 属性：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/ui_component/pulsestorm_simple_valid.xml</span><br><span class="line">&lt;htmlContent class=&quot;Pulsestorm\SimpleValidUiComponent\Component\Simple&quot; name=&quot;our_first_content&quot;&gt;</span><br><span class="line">&lt;/htmlContent&gt;</span><br></pre></td></tr></table></figure>

<p>我们也移除了 block argument 。因为 <code>Magento\Ui\Component\HtmlContent</code> 必须要 block argument ，但是我们的 <code>Pulsestorm\SimpleValidUiComponent\Component\Simple</code> 代替了它。 下面创建 <code>Pulsestorm\SimpleValidUiComponent\Component\Simple</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/Component/Simple.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleValidUiComponent\Component;</span><br><span class="line">class Simple extends \Magento\Ui\Component\AbstractComponent</span><br><span class="line">&#123;</span><br><span class="line">    const NAME = &#x27;html_content_pulsestorm_simple&#x27;;</span><br><span class="line">    public function getComponentName()</span><br><span class="line">    &#123;</span><br><span class="line">        return self::getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于第二点使用不同的 RequireJS view model constructor factory 我们要这样做：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;htmlContent class=&quot;Pulsestorm\SimpleValidUiComponent\Component\Simple&quot;  name=&quot;our_first_content&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm_SimpleValidUiComponent/js/pulsestorm_simple_component&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">&lt;/htmlContent&gt;</span><br></pre></td></tr></table></figure>

<p>对于第三点使得 RequireJS view model constructor factory 指向一个新的 Knockout.js template</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleValidUiComponent/view/adminhtml/web/js/pulsestorm_simple_component.js</span><br><span class="line">define([&#x27;uiElement&#x27;,&#x27;ko&#x27;], function(Element, ko)&#123;</span><br><span class="line">    viewModelConstructor = Element.extend(&#123;</span><br><span class="line">        defaults: &#123;</span><br><span class="line">            template: &#x27;Pulsestorm_SimpleValidUiComponent/pulsestorm_simple_template&#x27;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return viewModelConstructor;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>下面创建 <code>Pulsestorm_SimpleValidUiComponent/pulsestorm_simple_template</code> 模板</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleValidUiComponent//view/adminhtml/web/template/pulsestorm_simple_template.html --&gt;</span><br><span class="line">&lt;h1&gt;Our Remote Knockout Template!&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<p>下面清空缓存，刷新页面 <img src="/wp-content/uploads/2018/06/hijack.png"> 恭喜你，我们没有违反 Magento 的 XSD schema 验证，成功创建了一个 UI Component</p>
<h2 id="Wrap-Up"><a href="#Wrap-Up" class="headerlink" title="Wrap Up"></a><a href="#wrap-up"></a>Wrap Up</h2><p>这是不是个好主意，有待后续验证。反正这次每个步骤都在我们的掌控中（自定义的 PHP Component ，自定义的 ReuqireJS Component，自定义的 Knockout.js 模板）理论上来说，将来 Magento 核心团队可能会做些修改，到时候我们今天的方法就没有用了。现在，UI Component 的基本问题是，很多证据都表明 UI Component 是 Magento 核心团队专用的，只有时间能告诉我们，第三方开发者是否能够将 UI Component 稳定地用在插件中。</p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
      </tags>
  </entry>
  <entry>
    <title>Magento 2: Simplest UI Component</title>
    <url>/alan-magento-simplest-ui-component/</url>
    <content><![CDATA[<p><a href="https://alanstorm.com/magento_simplest_ui_component/">原文地址</a> 今天我们将深入 Magento 2 的 ui components ，并尝试从头创建一个。现阶段的 Maggento 2 创建一个 ui component ，需要用一些不同寻常的，对生产环境来说不安全的方法，但是要想真正了解一个系统，有时候就是要从“地基”开始。 和这个系列的其他教程一样，请确保 Magento 2 是 developer 模式。为了防止下面的步骤不管用，我们在 <a href="https://github.com/astorm/magento2-simple-ui-component">github 上放了完整的模块代码</a>。还有，以下基于 Magento 2.1.1 ，但是文中涉及的概念是适用所有版本的。</p>
<h2 id="用-Pestle-创建基本的模块"><a href="#用-Pestle-创建基本的模块" class="headerlink" title="用 Pestle 创建基本的模块"></a><a href="#%E7%94%A8-pestle-%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%9A%84%E6%A8%A1%E5%9D%97"></a>用 Pestle 创建基本的模块</h2><p>首先，我们用 <a href="https://github.com/astorm/pestle">pestle</a>来创建一个带后台 menu 的模块。如果你不清楚下面的命令在干啥，那你可能要看看 <a href="https://alanstorm.com/category/magento-2/#magento_2_mvc">Magento 2 for PHP MVC Developers</a> 系列文章 首先取得 pestle.phar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -LO http://pestle.pulsestorm.net/pestle.phar</span><br></pre></td></tr></table></figure>

<p>然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php pestle.phar generate_module Pulsestorm SimpleUiComponent 0.0.1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_acl Pulsestorm_SimpleUiComponent Pulsestorm_SimpleUiComponent::top,Pulsestorm_SimpleUiComponent::menu_1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_menu Pulsestorm_SimpleUiComponent Magento_Backend::system_other_settings Pulsestorm_SimpleUiComponent::a_menu_item Pulsestorm_SimpleUiComponent::menu_1 &quot;Hello Simple Ui Component&quot; pulsestorm_simpleuicomponent/index/index 1</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_route Pulsestorm_SimpleUiComponent adminhtml pulsestorm_simpleuicomponent</span><br><span class="line"></span><br><span class="line">php pestle.phar generate_view Pulsestorm_SimpleUiComponent adminhtml pulsestorm_simpleuicomponent_index_index Main content.phtml 1column</span><br><span class="line"></span><br><span class="line">php bin/magento module:enable Pulsestorm_SimpleUiComponent</span><br><span class="line"></span><br><span class="line">php bin/magento setup:upgrade</span><br></pre></td></tr></table></figure>

<p>运行上述命令后，登陆后台，应该就能通过 <strong>System -&gt; Other Settings -&gt; Hello Simple Ui Component</strong> 进入到刚刚创建的页面中了。</p>
<h2 id="配置-UI-component"><a href="#配置-UI-component" class="headerlink" title="配置 UI component"></a><a href="#%E9%85%8D%E7%BD%AE-ui-component"></a>配置 UI component</h2><p>点击 <strong>System -&gt; Other Settings -&gt; Hello Simple Ui Component</strong> 进入到刚刚创建的页面，你看到的是这样子的： <img src="/wp-content/uploads/2018/05/simple-ui-component-first.png" alt="simple-ui-component"> 首先我们要做的是给我们的 layout handle xml 文件加 <code>&lt;uiComponent&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/layout/pulsestorm_simpleuicomponent_index_index.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;referenceBlock name=&quot;content&quot;&gt;</span><br><span class="line">        &lt;block template=&quot;content.phtml&quot; class=&quot;Pulsestorm\SimpleUiComponent\Block\Adminhtml\Main&quot; name=&quot;pulsestorm_simpleuicomponent_block_main&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- START: our new ui component --&gt;</span><br><span class="line">        &lt;uiComponent name=&quot;pulsestorm_simple&quot;/&gt;</span><br><span class="line">        &lt;!-- END:   our new ui component --&gt;</span><br><span class="line">    &lt;/referenceBlock&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码，我们告诉 Magento 我们要加一个 <code>pulsestorm_simple</code> UI component 到页面的 content block 中。然后没咱们清空缓存，刷新页面，我们会看到如下的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 exception(s):</span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Object </span><br><span class="line">DOMDocument should be created.</span><br><span class="line"></span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Object </span><br><span class="line">DOMDocument should be created.</span><br><span class="line">#0 /path/to/magento/</span><br><span class="line">vendor/magento/framework/View/Element/UiComponent/Config/Reader.php(95):</span><br><span class="line">Magento\Framework\View\Element\UiComponent\Config\DomMerger-&gt;getDom()</span><br></pre></td></tr></table></figure>

<p>错误原因是我们配置一个叫 <code>pulsestorm_simple</code> 的 ui component ，但是 Magento 又找不到它的定义文件。<code>Object DOMDocument should be created</code> 错误来自于 php 代码尝试载入一个不存在的 xml object。 任何 ui component 都需要一个 <code>ui_component/[...].xml</code> 定义文件。下面我们修复这个问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>ui component 的名字（pulsestorm_simple）和它的 xml 文件名（pulsestorm_simple.xml）需要一致。所有 ui component 的文件都在 <a href="frontend/adminhtml">area</a>&#x2F;view&#x2F;ui_component 目录下。尽管不限制使用 ui component 在 <code>frontend</code> area 中，但是前台不一定会像预期的那样管用，因为 Magento 核心团队大多数情况下（只在？）后台 layout 中使用 ui components 。 清除缓存，刷新页面后，我们会得到一个新的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 exception(s):</span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Element</span><br><span class="line">&#x27;pulsestorm_simple&#x27;: No matching global declaration available for the</span><br><span class="line">validation root.</span><br><span class="line">Line: 1</span><br></pre></td></tr></table></figure>

<p>这里，我们的顶层节点名字叫 <code>pulsestorm_simple</code> 。回顾上篇 <a href="https://www.hellomagento2.com/alan_magento_2_introducing_ui_components/">Magento 2 的 UI Components 介绍（翻译）</a>， ui component 文件是 domain specific language (DSL)，由它控制嵌套的 php 对象的实例化。<code>ui_component</code> 文件中的每个节点对应着下面这个文件中的节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/magento/module-ui/view/base/ui_component/etc/definition.xml</span><br></pre></td></tr></table></figure>

<p>所以，问题是我们的节点 <code>pulsestorm_simple</code> 不在 <code>definition.xml</code> 中，Magento 的 UI component DSL 当然也就不知道遇到这个节点的时候，用哪个 php 类去实例化。多亏了 Magento 会合并配置文件再载入，我们就可以通过添加下面的文件来改变合并后的 <code>definition.xml</code> （<strong>必须搁在 <code>base</code> 下面才管用</strong>）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;/&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>通过上面的配置，我们等于告诉 Magento <em>遇到 <code>pulsestorm_simple</code> ui component 节点，请实例化 <code>Pulsestorm\SimpleUiComponent\Component\Simple</code></em> 命名要注意，因为我们的文件会和核心 <code>definition.xml</code> 进行合并，如果你的命名和核心中的重名了，那么可能就改变系统原来的行为了。推荐加上 vendor namespace 作为前缀（pulsestorm_ ） 清空缓存，刷新页面，我们会得到一个新的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 exception(s):</span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Element</span><br><span class="line">&#x27;pulsestorm_simple&#x27;: This element is not expected. Expected is one of</span><br><span class="line">( range, tab, dataSource, paging, massaction, listing, form, fieldset,</span><br><span class="line">field, filters ).</span><br></pre></td></tr></table></figure>

<p>Magento 正在合并我们的 <code>definition.xml</code>，但必须通过 schema validation 。具体来说，Magento 要求最终的 <code>definition.xml</code> 要符合下面这个文件中定义结构要求：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vendor/magento/module-ui/etc/ui_definition.xsd</span><br></pre></td></tr></table></figure>

<p>很不幸的是，Magento 2 没有提供方法让我们加入规则。如果你知道查看哪里（Magento\Framework\Config\Dom::validateDomDocument），可以使用 object manager 的 preference 来注入一些自定义的行为，这样我们是可以让 Magento 跳过 XSD 验证的。但是，很不幸，这么做可能跟其他也这么做的插件冲突。所以如果你打算发布代码的话，这么做可不太合适。使用 Magento 的 plugin 方式（更安全稳定些）也是不行的，因为 <code>validateDomDocument</code> 虽然是 public 但它是 static 方法，Magento 的 plugin system 不支持 static 方法。 到这里，我们想创建一个全新的、顶层的 ui_component 节点是行不通的。这预示着，Magento 的 UI component 系统是为官方核心开发保留的，也可能说是 UI component 还不是功能齐全的。</p>
<h2 id="跳过验证"><a href="#跳过验证" class="headerlink" title="跳过验证"></a><a href="#%E8%B7%B3%E8%BF%87%E9%AA%8C%E8%AF%81"></a>跳过验证</h2><p>当然咯，上面我们说行不通，是说，用安全稳定的方法做不到，但是我们还是可以通过可能不那么稳定的 class preference 来做到嘛。 Magento 的开发者通过 calss preference 定义 interfaces 对应的具体类，object manager 遇到这个 interface 的时候，就会去实例化对应的具体类。 Class preference 还可以用来替换具体的类，和 Magento 1 中 class rewrites 有非常相似的功能（缺点也是一样的）。 下面我们将用 class preference 方式来跳过 XML 的 XSD 验证。在生产环境中，或是要发布的系统中，这么做是不合适的，但是这里只是为了让教程继续下去。 创建 di.xml 文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/etc/di.xml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:ObjectManager/etc/config.xsd&quot;&gt;                                                                --&gt;</span><br><span class="line">    &lt;preference for=&quot;Magento\Framework\App\Arguments\ValidationState&quot; type=&quot;Pulsestorm\SimpleUiComponent\Model\ValidationState&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>然后添加下面的文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Model/ValidationState.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Model;</span><br><span class="line">class ValidationState extends \Magento\Framework\App\Arguments\ValidationState</span><br><span class="line">&#123;</span><br><span class="line">    public function isValidationRequired()</span><br><span class="line">    &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于为什么这么做就可以跳过 XSD 验证，本篇不介绍，有兴趣的读者可以自己研究下，不过<a href="https://alanstorm.com/magento-2-more-plugin-edge-cases/">这篇</a>可能对你有帮助。 清理缓存后刷新页面，这次看到一个新的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 exception(s):</span><br><span class="line">Exception #0 (ReflectionException): Class</span><br><span class="line">Pulsestorm\SimpleUiComponent\Component\Simple does not exist</span><br></pre></td></tr></table></figure>

<p>XSD 验证跳过了，我们可以继续探索了。 <strong>UPDTE:</strong> Hello, from late 2017! When Magento release version 2.2, they broke this tutorial. If you’re using Magento 2.2, in addition to disabling XSD validation, you’ll also need to add a <a href="https://github.com/astorm/magento2-simple-ui-component/blob/master/first-pass-unstable/app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.map.xml">definition.map.xml</a> file with a name&#x3D;”puslestorm_simple” node. Why? We have no idea and Magento haven’t really explained what this file is for. Open source doesn’t always mean open intent. If you’re using Magento 2.2 just copy <a href="https://github.com/astorm/magento2-simple-ui-component/blob/master/first-pass-unstable/app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.map.xml">the file from GitHub</a> to your module and you should take take of any errors about undefined <code>children</code> keys.</p>
<h2 id="UI-Component-Rendering-Class"><a href="#UI-Component-Rendering-Class" class="headerlink" title="UI Component Rendering Class"></a><a href="#ui-component-rendering-class"></a>UI Component Rendering Class</h2><p>在我们遇到 schema validation 的坑之前，我们在 <code>definition.xml</code> 中添加了以下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;/&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p><code>etc/definition.xml</code> 定义了<strong>默认的</strong>属性和节点，当 Magento 在 <code>ui_component/[somefile].xml</code> 遇到特定的节点的时候，就会用 <code>definition.xml</code> 中的值。以本例来说，当 Magento 遇到 <code>pulsestorm_simple</code> 时，就会使用 <code>Pulsestorm\SimpleUiComponent\Component\Simple</code> 类。就是说，下面我们使用 <code>pulsestorm_simple</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;</span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>Magento 会尝试用 <code>Pulsestorm\SimpleUiComponent\Component\Simple</code> 实例化对象，用这个对象去 render UI component。所以错误就是 <code>Pulsestorm\SimpleUiComponent\Component\Simple</code> 不存在。下面创建它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Component/Simple.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Component;</span><br><span class="line">class Simple extends \Magento\Ui\Component\AbstractComponent</span><br><span class="line">&#123;</span><br><span class="line">    const NAME = &#x27;pulsestorm_simple&#x27;;</span><br><span class="line">    public function getComponentName()</span><br><span class="line">    &#123;</span><br><span class="line">        return static::NAME;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Magento 2 的 UI component 类必须继承 <code>Magento\Ui\Component\AbstractComponent</code> 类，必须定义一个 <code>getComponentName</code> 方法。ui component 的 name 是否必须和 UI component node 的 name 一样，还是要和 <code>ui_componont/[filename].xml</code> (pulsestorm_simple) 一样不太清楚。但是最好是跟 Magento 的核心代码的做法保持一致。所以，我们也给我们的 component 一个 NAME constant 。 清空缓存，刷新页面后我们得到了一个新的错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 exception(s):</span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Object</span><br><span class="line">DOMDocument should be created.</span><br><span class="line"></span><br><span class="line">Exception #0 (Magento\Framework\Exception\LocalizedException): Object</span><br><span class="line">DOMDocument should be created.</span><br></pre></td></tr></table></figure>

<p>这次 Magento 又报错说 XML 文件缺少了。ui component object （继承自 <code>Magento\Ui\Component\AbstractComponent</code>）负责 render XHML templates 。 我们告诉 Magento ，我需要 render <code>Pulsestorm\SimpleUiComponent\Component\Simple</code> 对象，但是我们没告诉它 <code>Pulsestorm\SimpleUiComponent\Component\Simple</code> 这个对象应该用哪个 template 。下面我们修改 <code>definition.xml</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/our-template&lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/pulsestorm_simple&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>下面创建模板文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/templates/our-template.xhtml</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>UI component 将会在模块的 <code>view/[area]/ui_component</code> 目录下找 template。<code>definition.xml</code> 文件中的值会加上 <code>.xhtml</code> 后缀转成文件路径。请注意，虽然文件看起来很像 HTML ，但是他们是有 XML 头的。他们是 XHTML 文件，是需要格式良好的 XML 。 下面清楚缓存，刷新页面，这次我们又看到一个新的错误，不过这次已经接近目标了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">( ! ) Fatal error: Method Magento\Ui\TemplateEngine\Xhtml\Result::__toString() must not throw an</span><br><span class="line"> exception, caught Error: Call to a member function getConfigData() on null</span><br><span class="line"> in /path/to/magento/</span><br><span class="line"> vendor/magento/module-ui/Component/Wrapper/UiComponent.php on line 0</span><br></pre></td></tr></table></figure>

<p>UI components 系统除了 render XHTML templates 外，还需要将特定的 XHTML template 与 data provider class 匹配起来。UI component 设计本意是从服务端获取数据，data provider 是 component 获得数据的正式方法。 这意味着，创建一个最简单的 UI component 的最后一步就是配置一个 data provider class 。这个改动放在 <code>pulsestorm_simple.xml</code> 中，因为理论上每个 component 实例都 render 不同的 UI Component 。下面我们给 <code>pulsestorm_simple.xml</code> 添加 <code>dataSource</code> 节点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dataSource name=&quot;pulsestorm_simple_data_source&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;dataProvider&quot; xsi:type=&quot;configurableObject&quot;&gt;</span><br><span class="line">            &lt;!-- the PHP class that implements a data provider --&gt;</span><br><span class="line">            &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm\SimpleUiComponent\Model\DataProvider&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- redundant with the `dataSource` name --&gt;</span><br><span class="line">            &lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;pulsestorm_simple_data_source&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- required: means ui components are meant to work with models --&gt;</span><br><span class="line">            &lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;entity_id&lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- required: means ui components are meant to work with URL passing --&gt;</span><br><span class="line">            &lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;id&lt;/argument&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line"></span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>在 <code>&lt;dataSource/&gt;</code> 树中有一些冗余的样板命名约定需要注意。首先是 name 属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dataSource name=&quot;pulsestorm_simple_data_source&quot;&gt;...&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure>

<p>它是 UI component 名称（pulsestorm_simple）加上 <code>_data_source</code>，同样的还有下面的参数节点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;pulsestorm_simple_data_source&lt;/argument&gt;</span><br></pre></td></tr></table></figure>

<p>这个参数节点是必要的，虽然它是冗余的。 下面两个节点也是必要的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;entity_id&lt;/argument&gt;</span><br><span class="line">&lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;id&lt;/argument&gt;</span><br></pre></td></tr></table></figure>

<p>最后是 class</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Pulsestorm\SimpleUiComponent\Model\DataProvider&lt;/argument&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们告诉我们的 component 使用哪个 PHP data provider class 去进行实例化。所以我们下面创建它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Model/DataProvider.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Model;</span><br><span class="line">class DataProvider extends \Magento\Ui\DataProvider\AbstractDataProvider</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DataProvider 类必须继承自 <code>Magento\Ui\DataProvider\AbstractDataProvider</code> —— 尽管这个类没有 abstract methods 需要定义。 下面清空缓存，刷新页面。 <img src="/wp-content/uploads/2018/05/simple-ui-component-second.png"> 我们终于把 XHTML 模板给 render 出来啦。</p>
<h2 id="幕后发生的事情"><a href="#幕后发生的事情" class="headerlink" title="幕后发生的事情"></a><a href="#%E5%B9%95%E5%90%8E%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B%E6%83%85"></a>幕后发生的事情</h2><p>在我们讨论可以用这个渲染的 XHTML 模板来做点什么事情之前，让我们先来谈谈幕后发生了什么。当 Magento 的 layout rendering code 遇到 UI component 标签的时候，一堆等同于下面的伪代码的代码就会执行。 配置 ui_component 的整个过程是选择实例化的类，并在该类上设置数据属性。在本例中实例化过程就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data = functionThatLoadsArgumentNodesFromXmlFiles();</span><br><span class="line">$ui_component = new Pulsestorm\SimpleUiComponent\Component\Simple(</span><br><span class="line">    //...</span><br><span class="line">    [</span><br><span class="line">        &#x27;template&#x27;=&gt;&#x27;templates/our-template&#x27;</span><br><span class="line">    ],</span><br><span class="line">);</span><br><span class="line">echo $ui_component-&gt;render();</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$data = functionThatLoadsArgumentNodesFromXmlFiles();</span><br><span class="line">$ui_component = new Pulsestorm\SimpleUiComponent\Component\Simple(</span><br><span class="line">    //...</span><br><span class="line">    $data,</span><br><span class="line">);</span><br><span class="line">echo $ui_component-&gt;render();</span><br></pre></td></tr></table></figure>

<p>好的 DSL 通常会让你忘记像这样的实现细节——但是如果你从来没有遇到过 dsl， 这种事情看起来很奇怪， 也很陌生。每当你被一些 UI 组件的配置缠住时, 请记住您正在为 Magento 准备转换为 PHP 代码的值。这些值并不是简单的数据属性。</p>
<h2 id="Raw-Template-Source"><a href="#Raw-Template-Source" class="headerlink" title="Raw Template Source"></a><a href="#raw-template-source"></a>Raw Template Source</h2><p><img src="/wp-content/uploads/2018/05/simple-ui-component-second.png"> 这是我们从浏览器中看到的样子，但是加载的源代码是什么样子的呢。我们查看网页源代码，不是 browser debugger 中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt; div &gt;</span><br><span class="line">    &lt;h1 &gt; Hello World &lt; /h1&gt;</span><br><span class="line">    &lt;script type = &quot;text/x-magento-init&quot; &gt;</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;*&quot;:</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;Magento_Ui/js/core/app&quot;:</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;types&quot;:</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;dataSource&quot;: [],</span><br><span class="line">                    &quot;pulsestorm_simple&quot;:</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;extends&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &quot;html_content&quot;:</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;component&quot;: &quot;Magento_Ui\/js\/form\/components\/html&quot;,</span><br><span class="line">                        &quot;extends&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;components&quot;:</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;pulsestorm_simple&quot;:</span><br><span class="line">                    &#123;</span><br><span class="line">                        &quot;children&quot;:</span><br><span class="line">                        &#123;</span><br><span class="line">                            &quot;pulsestorm_simple&quot;:</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;type&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                                &quot;name&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                            &#125;,</span><br><span class="line">                            &quot;pulsestorm_simple_data_source&quot;:</span><br><span class="line">                            &#123;</span><br><span class="line">                                &quot;type&quot;: &quot;dataSource&quot;,</span><br><span class="line">                                &quot;name&quot;: &quot;pulsestorm_simple_data_source&quot;,</span><br><span class="line">                                &quot;dataScope&quot;: &quot;pulsestorm_simple&quot;,</span><br><span class="line">                                &quot;config&quot;:</span><br><span class="line">                                &#123;</span><br><span class="line">                                    &quot;params&quot;:</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        &quot;namespace&quot;: &quot;pulsestorm_simple&quot;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt; /script&gt;</span><br><span class="line">&lt;/div &gt;</span><br></pre></td></tr></table></figure>

<p>Magento 从 XHTML template 中不仅仅是加载了 <code>&lt;div&gt;</code> 和 <code>&lt;h1&gt;</code> 标签，他还载入了一个 <code>text/x-magento-init</code> script 。这是我们今天要讨论的关于 UI component system 的最后一个方面。UI component 不仅加载 XHTML template，也不仅仅是将 template 和 data provider 对象绑定起来，他还加载一个 JSON 对象，通过 <code>x-magento-init</code> 的方式，用这个 JSON 对象来实例化 <code>Magento_Ui/js/core/app</code> RequireJS app&#x2F;module。 现在，我们知道 UI component 做的大致事情了，下面我们来看看这个 template&#x2F;rendering engine 的一些功能。</p>
<h2 id="XHTML-Template-Tags"><a href="#XHTML-Template-Tags" class="headerlink" title="XHTML Template Tags"></a><a href="#xhtml-template-tags"></a>XHTML Template Tags</h2><p>和 <code>phtml</code> 模板类似 —— 你可以在 XHTML 模板中对底层的 UI Component 类进行 “调用”。你可以使用特殊的模板指令 <code>&amp;#123;&amp;#123;...&amp;#125;&amp;#125;</code>。下面我们看个例子，我们给 component 类添加一个 <code>getEvenMoreData</code> 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Component/Simple.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Component;</span><br><span class="line">class Simple extends \Magento\Ui\Component\AbstractComponent</span><br><span class="line">&#123;</span><br><span class="line">    const NAME = &#x27;pulsestorm_simple&#x27;;</span><br><span class="line">    public function getComponentName()</span><br><span class="line">    &#123;</span><br><span class="line">        return static::NAME;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //added this method</span><br><span class="line">    public function getEvenMoreData()</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;Even More Data!&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以在 <code>xhtml</code> template 中调用 <code>&amp;#123;&amp;#123;...&amp;#125;&amp;#125;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/templates/our-template.xhtml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello World&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &amp;#123;&amp;#123;getComponentName()&amp;#125;&amp;#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &amp;#123;&amp;#123;getEvenMoreData()&amp;#125;&amp;#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>上面的代码保存后，清空缓存刷新页面。你就会看到类的方法&#x2F;属性中的数据传递到模板上来了。 <img src="/wp-content/uploads/2018/05/simple-ui-component-third.png"> 除了调用对象中的方法，我们应该还能通过 data 配置节点来获得 data 属性值，就像下面这样。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line">&lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">    &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/our-template&lt;/item&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- NEW NODE HERE --&gt;</span><br><span class="line">    &lt;item name=&quot;message&quot; xsi:type=&quot;string&quot;&gt;Hello World&lt;/item&gt;</span><br><span class="line">&lt;/argument&gt;</span><br></pre></td></tr></table></figure>

<p>然后再 xhtml 中调用它。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">    &amp;#123;&amp;#123;message&amp;#125;&amp;#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>但是，这里有个 <a href="https://github.com/magento/magento2/issues/6532">bug</a>，除非这个 data variable 在 tag 的属性中，否则加载的还是 <code>&amp;#123;&amp;#123;message&amp;#125;&amp;#125;</code> 而不是它的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div class=&quot;&amp;#123;&amp;#123;message&amp;#125;&amp;#125;&quot;&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">    &amp;#123;&amp;#123;message&amp;#125;&amp;#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>上面这一段 render 出来的是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div class=&quot;Hello World&quot;&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">    &amp;#123;&amp;#123;message&amp;#125;&amp;#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>真是很烦人，再次表明 UI Component system 还不成熟。</p>
<h2 id="理解-UI-Component-继承"><a href="#理解-UI-Component-继承" class="headerlink" title="理解 UI Component 继承"></a><a href="#%E7%90%86%E8%A7%A3-ui-component-%E7%BB%A7%E6%89%BF"></a>理解 UI Component 继承</h2><p>在<code>definition.xml</code> 中放置顶级节点，意味着你创建了一个可重用的 UI 组件标签。其他程序员可以在 XML 文件中使用 <code>&lt;uiComponent&gt;</code> 使用你的组件。 <code>definition.xml</code> 文件还可以设置组件的默认值，不过这些值是可以被覆盖的。 举例来说，我们设置了默认的模板：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/base/ui_component/etc/definition.xml --&gt;</span><br><span class="line">&lt;components xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_definition.xsd&quot;&gt;</span><br><span class="line">    &lt;pulsestorm_simple class=&quot;Pulsestorm\SimpleUiComponent\Component\Simple&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/our-template&lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/pulsestorm_simple&gt;</span><br><span class="line">&lt;/components&gt;</span><br></pre></td></tr></table></figure>

<p>假设我们需要一个 <code>pulsestorm_simple</code> 组件，但是我们要换一个 template。那么我们可以按照相同的结构重写一下要用的 template。 比如，我们需要下面的模板：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/templates/different.xhtml --&gt;</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Hello Brave New World&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>我们需要做的就是增加下面 template 部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- File: app/code/Pulsestorm/SimpleUiComponent/view/adminhtml/ui_component/pulsestorm_simple.xml --&gt;</span><br><span class="line">&lt;pulsestorm_simple xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;templates/different&lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">&lt;/pulsestorm_simple&gt;</span><br></pre></td></tr></table></figure>

<p>这个功能通常不作用于 template，它常用在配置参数的重写上，并且对于使用至关重要。在实际开发中，你不会向 <code>definition.xml</code> 中加东西，但是 debug grid listing 的参数时，还是需要参考 <code>definition.xml</code> 的。</p>
<h2 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a><a href="#%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE"></a>添加数据</h2><p>今天我们要说的最后一件时 UI Component 的 data 。UI Component 的 data 类似于 grid listing 的行，或是 form 的默认值。Behind the scenes, the UI Component system can render this backend data for you in the frontend as a javascript array&#x2F;object. 我们需要做的就是在 component 类中定义 <code>getDataSourceData</code> 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Component/Simple.php    </span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Component;</span><br><span class="line">class Simple extends \Magento\Ui\Component\AbstractComponent</span><br><span class="line">&#123;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">    public function getDataSourceData()</span><br><span class="line">    &#123;</span><br><span class="line">        return [&#x27;data&#x27; =&gt; [&#x27;foo&#x27;=&gt;&#x27;bar&#x27;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>清除缓存并刷新页面后，查看源代码，我们会发现刚刚的 <code>foo =&gt; bar</code> 已经在 JSON 中了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;pulsestorm_simple_data_source&quot;: &#123;</span><br><span class="line">    //...</span><br><span class="line">    &quot;config&quot;: &#123;</span><br><span class="line">        &quot;data&quot;: &#123;</span><br><span class="line">            &quot;foo&quot;: &quot;bar&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    //...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能会感到很困惑，如果 data 来自于 component 类的 <code>getDataSourceData</code> 方法，那么为什么还要配置 <code>Pulsestorm\SimpleUiComponent\Model\DataProvider</code> 呢？ Alan 也没有好的答案。基于核心代码，看起来正确的使用方式是，在 component 类中获得 data provider 对象，然后调用它的 <code>getData</code> 方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Component/Simple.php</span><br><span class="line">public function getDataSourceData()</span><br><span class="line">&#123;</span><br><span class="line">    return [&#x27;data&#x27; =&gt; $this-&gt;getContext()-&gt;getDataProvider()-&gt;getData()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>data provider 的 <code>getData</code> 方法返回实际的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: app/code/Pulsestorm/SimpleUiComponent/Model/DataProvider.php</span><br><span class="line">&lt;?php</span><br><span class="line">namespace Pulsestorm\SimpleUiComponent\Model;</span><br><span class="line">class DataProvider extends \Magento\Ui\DataProvider\AbstractDataProvider</span><br><span class="line">&#123;</span><br><span class="line">    public function getData()</span><br><span class="line">    &#123;</span><br><span class="line">        return [[&#x27;foo&#x27;=&gt;&#x27;baz&#x27;]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>乍一看，UI Component 系统似乎是一个面向对象的领域专用语言（domain specific language），用来创建用户界面的组件，可能已经朝着这个目的去做了，但是，深入了解后发现，他还没有完成，里面有各种边缘清空，bugs, 奇怪的遗漏。</p>
<h2 id="后续步骤"><a href="#后续步骤" class="headerlink" title="后续步骤"></a><a href="#%E5%90%8E%E7%BB%AD%E6%AD%A5%E9%AA%A4"></a>后续步骤</h2><p>简而言之, 这是 UI Component system 的 PHP 部分。在一天结束时, 所有这些复杂性可以归结为渲染一个 xhtml 模板并将其绑定到数据源上。 在我们的后续文章中，我们将更深入地了解 Magento 的 js 系统（RequireJS 和 knockout.js）是如何与 UI component 系统交互的。这些交互正是 Magento 的 grid listings 和后端 forms 渲染的主要工作，理解这些系统对于自定义后端 UI 是至关重要的。</p>
]]></content>
      <categories>
        <category>alan storm</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
      </tags>
  </entry>
  <entry>
    <title>How to Create Admin Grid in Magento 2</title>
    <url>/how-to-create-admin-grid-in-magento-2/</url>
    <content><![CDATA[<p>Admin Grid 是一种表格，用来展示数据库表中的记录，附带一些额外的特性：排序、筛选、删除更新等。Admin Grid 的创建有两种方式：使用 layout 和使用 component 。本篇是利用 component 创建的 Admin Grid 。 文章中涉及的内容太多了，还有很多地方可以分解和完善，先发出来，作为初探，或者是索引以供后续研究。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a><a href="#%E5%89%8D%E6%8F%90"></a>前提</h2><p>以 <code>ThankIT_HelloWorld</code> 模块为基础，已经通过 InstallSchema 添加了数据表，创建了 Admin Menu 和 ACL 如果没有，参考以下文章： <a href="/crud-models-in-magento-2">CRUD Models in Magento 2</a> <a href="/magento-2-create-admin-menu">Magento 2 Create Admin Menu</a> <a href="/magento-2-admin-acl-access-control-lists">Magento 2 Admin ACL Access Control Lists</a> 我们的 admin menu 创建了一个后台 path</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thankit_helloworld/post/index</span><br></pre></td></tr></table></figure>

<h2 id="创建-routes-xml"><a href="#创建-routes-xml" class="headerlink" title="创建 routes.xml"></a><a href="#%E5%88%9B%E5%BB%BA-routes.xml"></a>创建 routes.xml</h2><p>File: app\code\ThankIT\HelloWorld\etc\adminhtml\routes.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../lib/internal/Magento/Framework/App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;admin&quot;&gt;</span><br><span class="line">        &lt;route id=&quot;thankit_helloworld&quot; frontName=&quot;thankit_helloworld&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;ThankIT_HelloWorld&quot; after=&quot;Magento_Backend&quot;/&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h2 id="创建-controller"><a href="#创建-controller" class="headerlink" title="创建 controller"></a><a href="#%E5%88%9B%E5%BB%BA-controller"></a>创建 controller</h2><p>File:app\code\ThankIT\HelloWorld\Controller\Adminhtml\Post\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_HelloWorld::post&#x27;;</span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $page = $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">        // var_dump(get_class($page));</span><br><span class="line">        // &#x27;Magento\Backend\Model\View\Result\Page\Interceptor&#x27; (length=50)</span><br><span class="line">        // 如果没有下面这句，title 是 Magento Admin ，active menu 正常</span><br><span class="line">        // 如果下面这句的 id 不存在，则 active menu 不正常 title 还是 Magento Admin</span><br><span class="line">        $page-&gt;setActiveMenu(&#x27;ThankIT_HelloWorld::post&#x27;);</span><br><span class="line">        // title 替换成 Posts</span><br><span class="line">        $page-&gt;getConfig()-&gt;getTitle()-&gt;prepend((__(&#x27;Posts&#x27;)));</span><br><span class="line"></span><br><span class="line">        // class: Magento\Backend\Model\View\Result\Page</span><br><span class="line">        // addBreadcrumb($label, $title, $link = null)</span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;ThankIT&#x27;), __(&#x27;ThankIT&#x27;));</span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;Hello World&#x27;), __(&#x27;Manage Blogs&#x27;));</span><br><span class="line">        return $page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建-layout"><a href="#创建-layout" class="headerlink" title="创建 layout"></a><a href="#%E5%88%9B%E5%BB%BA-layout"></a>创建 layout</h2><p>File: app\code\ThankIT\HelloWorld\view\adminhtml\layout\thankit_helloworld_post_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;update handle=&quot;styles&quot;/&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;uiComponent name=&quot;thankit_helloworld_post_listing&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>注意我们这里声明的 <code>uiComponent name=&quot;thankit_helloworld_post_listing&quot;</code></p>
<h2 id="创建-component-layout-file"><a href="#创建-component-layout-file" class="headerlink" title="创建 component layout file"></a><a href="#%E5%88%9B%E5%BB%BA-component-layout-file"></a>创建 component layout file</h2><p>File:app&#x2F;code&#x2F;ThankIT&#x2F;HelloWorld&#x2F;view&#x2F;adminhtml&#x2F;ui_component&#x2F;thankit_helloworld_post_listing.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing_data_source&lt;/item&gt;</span><br><span class="line">            &lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing_data_source&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;spinner&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_columns&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Post&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;*/*/new&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;dataSource name=&quot;thankit_helloworld_post_listing_data_source&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;dataProvider&quot; xsi:type=&quot;configurableObject&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;ThankITHelloWorldPostGridDataProvider&lt;/argument&gt; --&gt;</span><br><span class="line">            &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Magento\Framework\View\Element\UiComponent\DataProvider\DataProvider&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing_data_source&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;update_url&quot; xsi:type=&quot;url&quot; path=&quot;mui/index/render&quot;/&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/provider&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">    &lt;container name=&quot;listing_top&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;ui/grid/toolbar&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;stickyTmpl&quot; xsi:type=&quot;string&quot;&gt;ui/grid/sticky/toolbar&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;bookmark name=&quot;bookmarks&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/bookmark&gt;</span><br><span class="line">        &lt;component name=&quot;columns_controls&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;columnsData&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/controls/columns&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;displayArea&quot; xsi:type=&quot;string&quot;&gt;dataGridActions&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/component&gt;</span><br><span class="line">        &lt;exportButton name=&quot;export_button&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns.ids&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/exportButton&gt;</span><br><span class="line">        &lt;filterSearch name=&quot;fulltext&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing_data_source&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;chipsProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.listing_filters_chips&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.search&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/filterSearch&gt;</span><br><span class="line">        &lt;filters name=&quot;listing_filters&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;columnsProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.filters&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;templates&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;filters&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;select&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/element/ui-select&lt;/item&gt;</span><br><span class="line">                                &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;ui/grid/filters/elements/ui-select&lt;/item&gt;</span><br><span class="line">                            &lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;childDefaults&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.listing_filters&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;imports&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;visible&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns.$&#123; $.index &#125;:visible&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;observers&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;column&quot; xsi:type=&quot;string&quot;&gt;column&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/filters&gt;</span><br><span class="line">        &lt;massaction name=&quot;listing_massaction&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns.ids&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;action name=&quot;delete&quot;&gt;</span><br><span class="line">                &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;url&quot; xsi:type=&quot;url&quot; path=&quot;thankit_helloworld/post/massDelete&quot;/&gt;</span><br><span class="line">                        &lt;item name=&quot;confirm&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;title&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete Posts&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;message&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Are you sure you wan&#x27;t to delete selected Posts?&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/action&gt;</span><br><span class="line">            &lt;action name=&quot;edit&quot;&gt;</span><br><span class="line">                &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;edit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Edit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;callback&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns_editor&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;editSelected&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/action&gt;</span><br><span class="line">        &lt;/massaction&gt;</span><br><span class="line">        &lt;paging name=&quot;listing_paging&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.paging&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns.ids&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/paging&gt;</span><br><span class="line">    &lt;/container&gt;</span><br><span class="line">    &lt;columns name=&quot;thankit_helloworld_post_columns&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;editorConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns.ids&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;enabled&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;clientConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;saveUrl&quot; xsi:type=&quot;url&quot; path=&quot;thankit_helloworld/post/inlineEdit&quot;/&gt;</span><br><span class="line">                        &lt;item name=&quot;validateBeforeSave&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;childDefaults&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;fieldAction&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns_editor&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;startEdit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;params&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;0&quot; xsi:type=&quot;string&quot;&gt;$&#123; $.$data.rowIndex &#125;&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;1&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;root&quot; xsi:type=&quot;string&quot;&gt;columns.$&#123; $.index &#125;&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.$&#123; $.storageConfig.root&#125;&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;selectionsColumn name=&quot;ids&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeEnabled&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeDefaultWidth&quot; xsi:type=&quot;string&quot;&gt;55&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/selectionsColumn&gt;</span><br><span class="line">        &lt;column name=&quot;post_id&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;textRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;sorting&quot; xsi:type=&quot;string&quot;&gt;asc&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;ID&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;name&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;editor&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;editorType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;validation&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;required-entry&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Name&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;url_key&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;URL Key&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;tags&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Tags&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;status&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;options&quot; xsi:type=&quot;object&quot;&gt;Magento\Config\Model\Config\Source\Yesno&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Status&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;sample_country_selection&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;options&quot; xsi:type=&quot;object&quot;&gt;Magento\Config\Model\Config\Source\Locale\Country&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Sample Country Selection&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;created_at&quot; class=&quot;Magento\Ui\Component\Listing\Columns\Date&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;dateRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Created&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;updated_at&quot; class=&quot;Magento\Ui\Component\Listing\Columns\Date&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;dateRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Modified&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;actionsColumn name=&quot;actions&quot; class=&quot;ThankIT\HelloWorld\Ui\Component\Listing\Column\PostActions&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeEnabled&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeDefaultWidth&quot; xsi:type=&quot;string&quot;&gt;107&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/actionsColumn&gt;</span><br><span class="line">    &lt;/columns&gt;</span><br><span class="line">    &lt;container name=&quot;sticky&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/sticky/sticky&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;toolbarProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.listing_top&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;listingProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_listing.thankit_helloworld_post_listing.thankit_helloworld_post_columns&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/container&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>代码比较长，一段一段来分析。 我们在 layout 中声明的 listing name 是 <code>thankit_helloworld_post_listing</code> <img src="/wp-content/uploads/2017/09/thankit-helloworld-post-listing.png" alt="thankit-helloworld-post-listing.png"> 这里面经常用到的有四个元素，<code>&lt;argument&gt;</code>,<code>&lt;dataSource&gt;</code>,<code>&lt;columns&gt;</code>,<code>&lt;container&gt;</code>,这几个元素间的粗略关系见上图。 这个里面声明了一个 dataSource <code>thankit_helloworld_post_listing_data_source</code></p>
<h2 id="di-xml"><a href="#di-xml" class="headerlink" title="di.xml"></a><a href="#di.xml"></a>di.xml</h2><p>File: app\code\ThankIT\HelloWorld\etc\di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../lib/internal/Magento/Framework/ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Framework\View\Element\UiComponent\DataProvider\CollectionFactory&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;collections&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;thankit_helloworld_post_listing_data_source&quot; xsi:type=&quot;string&quot;&gt;ThankIT\HelloWorld\Model\ResourceModel\Post\Grid\Collection&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">    &lt;type name=&quot;ThankIT\HelloWorld\Model\ResourceModel\Post\Grid\Collection&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;mainTable&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;eventPrefix&quot; xsi:type=&quot;string&quot;&gt;thankit_helloworld_post_grid_collection&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;eventObject&quot; xsi:type=&quot;string&quot;&gt;post_grid_collection&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;resourceModel&quot; xsi:type=&quot;string&quot;&gt;ThankIT\HelloWorld\Model\ResourceModel\Post&lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">    &lt;!-- start 这一段可以不要 --&gt;</span><br><span class="line">    &lt;!-- &lt;virtualType name=&quot;ThankITHelloWorldPostGridDataProvider&quot; type=&quot;Magento\Framework\View\Element\UiComponent\DataProvider\DataProvider&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;collection&quot; xsi:type=&quot;object&quot; shared=&quot;false&quot;&gt;ThankIT\HelloWorld\Model\ResourceModel\Post\Collection&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;filterPool&quot; xsi:type=&quot;object&quot; shared=&quot;false&quot;&gt;ThankITHelloWorldGirdFilterPool&lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/virtualType&gt;</span><br><span class="line">    &lt;virtualType name=&quot;ThankITHelloWorldGirdFilterPool&quot; type=&quot;Magento\Framework\View\Element\UiComponent\DataProvider\FilterPool&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;appliers&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;regular&quot; xsi:type=&quot;object&quot;&gt;Magento\Framework\View\Element\UiComponent\DataProvider\RegularFilter&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;fulltext&quot; xsi:type=&quot;object&quot;&gt;Magento\Framework\View\Element\UiComponent\DataProvider\FulltextFilter&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/virtualType&gt; --&gt;</span><br><span class="line">    &lt;!-- end 这一段可以不要 --&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>其中重要部分如下图： <img src="/wp-content/uploads/2017/09/di.xml_.png" alt="di.xml"></p>
<h2 id="Grid-Collection"><a href="#Grid-Collection" class="headerlink" title="Grid Collection"></a><a href="#grid-collection"></a>Grid Collection</h2><p>File: ThankIT\HelloWorld\Model\ResourceModel\Post\Grid\Collection;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\HelloWorld\Model\ResourceModel\Post\Grid;</span><br><span class="line"></span><br><span class="line">class Collection extends \ThankIT\HelloWorld\Model\ResourceModel\Post\Collection implements \Magento\Framework\Api\Search\SearchResultInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Aggregations</span><br><span class="line">     *</span><br><span class="line">     * @var \Magento\Framework\Search\AggregationInterface</span><br><span class="line">     */</span><br><span class="line">    protected $_aggregations;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Data\Collection\EntityFactoryInterface $entityFactory</span><br><span class="line">     * @param \Psr\Log\LoggerInterface $logger</span><br><span class="line">     * @param \Magento\Framework\Data\Collection\Db\FetchStrategyInterface $fetchStrategy</span><br><span class="line">     * @param \Magento\Framework\Event\ManagerInterface $eventManager</span><br><span class="line">     * @param $mainTable</span><br><span class="line">     * @param $eventPrefix</span><br><span class="line">     * @param $eventObject</span><br><span class="line">     * @param $resourceModel</span><br><span class="line">     * @param $model</span><br><span class="line">     * @param $connection</span><br><span class="line">     * @param \Magento\Framework\Model\ResourceModel\Db\AbstractDb $resource</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\Data\Collection\EntityFactoryInterface $entityFactory,</span><br><span class="line">        \Psr\Log\LoggerInterface $logger,</span><br><span class="line">        \Magento\Framework\Data\Collection\Db\FetchStrategyInterface $fetchStrategy,</span><br><span class="line">        \Magento\Framework\Event\ManagerInterface $eventManager,</span><br><span class="line">        $mainTable,</span><br><span class="line">        $eventPrefix,</span><br><span class="line">        $eventObject,</span><br><span class="line">        $resourceModel,</span><br><span class="line">        $model = &#x27;Magento\Framework\View\Element\UiComponent\DataProvider\Document&#x27;,</span><br><span class="line">        $connection = null,</span><br><span class="line">        \Magento\Framework\Model\ResourceModel\Db\AbstractDb $resource = null</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($entityFactory, $logger, $fetchStrategy, $eventManager, $connection, $resource);</span><br><span class="line">        $this-&gt;_eventPrefix = $eventPrefix;</span><br><span class="line">        $this-&gt;_eventObject = $eventObject;</span><br><span class="line">        $this-&gt;_init($model, $resourceModel);</span><br><span class="line">        $this-&gt;setMainTable($mainTable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @return \Magento\Framework\Search\AggregationInterface</span><br><span class="line">     */</span><br><span class="line">    public function getAggregations()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_aggregations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param \Magento\Framework\Search\AggregationInterface $aggregations</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    public function setAggregations($aggregations)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_aggregations = $aggregations;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Retrieve all ids for collection</span><br><span class="line">     * Backward compatibility with EAV collection</span><br><span class="line">     *</span><br><span class="line">     * @param int $limit</span><br><span class="line">     * @param int $offset</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function getAllIds($limit = null, $offset = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getConnection()-&gt;fetchCol($this-&gt;_getAllIdsSelect($limit, $offset), $this-&gt;_bindParams);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get search criteria.</span><br><span class="line">     *</span><br><span class="line">     * @return \Magento\Framework\Api\SearchCriteriaInterfacenull</span><br><span class="line">     */</span><br><span class="line">    public function getSearchCriteria()</span><br><span class="line">    &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Set search criteria.</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Api\SearchCriteriaInterface $searchCriteria</span><br><span class="line">     * @return $this</span><br><span class="line">     * @SuppressWarnings(PHPMD.UnusedFormalParameter)</span><br><span class="line">     */</span><br><span class="line">    public function setSearchCriteria(\Magento\Framework\Api\SearchCriteriaInterface $searchCriteria = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get total count.</span><br><span class="line">     *</span><br><span class="line">     * @return int</span><br><span class="line">     */</span><br><span class="line">    public function getTotalCount()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;getSize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Set total count.</span><br><span class="line">     *</span><br><span class="line">     * @param int $totalCount</span><br><span class="line">     * @return $this</span><br><span class="line">     * @SuppressWarnings(PHPMD.UnusedFormalParameter)</span><br><span class="line">     */</span><br><span class="line">    public function setTotalCount($totalCount)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Set items list.</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Api\ExtensibleDataInterface[] $items</span><br><span class="line">     * @return $this</span><br><span class="line">     * @SuppressWarnings(PHPMD.UnusedFormalParameter)</span><br><span class="line">     */</span><br><span class="line">    public function setItems(array $items = null)</span><br><span class="line">    &#123;</span><br><span class="line">        return $this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这部分参考的是 <code>Magento\Cms\Model\ResourceModel\Page\Grid\Collection.php</code> 还可以参考 Magento_Customer, Magento_Sales, Magento_CMS 这些模块。</p>
<h2 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a><a href="#%E9%AA%8C%E8%AF%81%E7%BB%93%E6%9E%9C"></a>验证结果</h2><p>刷新缓存后，后台访问 <code>Posts</code> 链接 <img src="/wp-content/uploads/2017/09/posts.png" alt="posts"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a><a href="#%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>参考文档</h2><p><a href="https://www.mageplaza.com/magento-2-module-development/create-admin-grid-magento-2.html">How to Create Admin Grid in Magento 2</a></p>
]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>magento 2 admin grid</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel 5.5 Beginner Task List</title>
    <url>/laravel-5-5-beginner-task-list/</url>
    <content><![CDATA[<p>博主认为，最好的教程一定是官方文档。而要快速建立关于某个语言或框架的知识结构，一定是直接上手做一个小项目。 Laravel 5.5 于今年 8 月份发布，是下一个 LTS 版本，从这个版本发布开始会停止对 Laravel 5.1 的 bug 修复，而对 5.1 的安全修复直到 2018 年 7 月份。 LTS 是指长期支持版本，是 Laravel 能提供的最长时间维护的版本，一般发行版只提供 6 个月的 Bug 修复支持，一年的安全修复支持。所以商业用途最好使用 LTS 版本。 关于 LTS 可参考 <a href="https://laravel-china.org/articles/2594/laravel-release-roadmap">Laravel 的发布路线图</a> 网上关于 Laravel 的教程很多，但是教程的基本内容无非是了解 laravel 的 MVC ，然后做数据的增删改查。 官方文档其实就很好，该 tutorials 中包括两个部分，一个是 Beginner Task List 另一个是 Intermediate Task List 。可惜的是 5.5 目前还没有这部分的内容。 但是差异也不是很大，原文地址 <a href="https://laravel.com/docs/5.1/quickstart">Beginner Task List</a> 本文是以上面的 5.1 文档为参考，以 5.5 为开发框架，进行了实践后，记录下来的。 本文中使用的环境是 ubuntu + apache + mysql + php ，使用的 hyper-v 虚拟机，关于这部分，对读者可能没有价值，可跳过。但对博主个人有记录以备后查的作用，所以会写下来。</p>
<h2 id="安装-Laravel"><a href="#安装-Laravel" class="headerlink" title="安装 Laravel"></a><a href="#%E5%AE%89%E8%A3%85-laravel"></a>安装 Laravel</h2><p>我同时安装了 Laravel 5.1 和 Laravel 5.5 ，一个给到 51 端口，一个给到 55 端口。</p>
<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a><a href="#%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82"></a>环境要求</h3><p>Laravel 5.5 系统要求</p>
<p>Laravel 5.1 系统要求</p>
<p>PHP &gt;&#x3D; 7.0.0 OpenSSL PHP Extension PDO PHP Extension Mbstring PHP Extension Tokenizer PHP Extension XML PHP Extension</p>
<p>PHP &gt;&#x3D; 5.5.9 OpenSSL PHP Extension PDO PHP Extension Mbstring PHP Extension Tokenizer PHP Extension</p>
<h3 id="通过-Laravel-installer-安装-5-5-最新的"><a href="#通过-Laravel-installer-安装-5-5-最新的" class="headerlink" title="通过 Laravel installer 安装 5.5 (最新的)"></a><a href="#%E9%80%9A%E8%BF%87-laravel-installer-%E5%AE%89%E8%A3%85-5.5-(%E6%9C%80%E6%96%B0%E7%9A%84)"></a>通过 Laravel installer 安装 5.5 (最新的)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer global require &quot;laravel/installer&quot;</span><br></pre></td></tr></table></figure>

<p>如果此时输入 <code>laravel</code> 一定会提示 <code>laravel: command not found</code> 这是因为该命令不在环境变量中 查看环境变量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ echo $PATH</span><br><span class="line">/home/thankit/bin:/home/thankit/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br></pre></td></tr></table></figure>

<p>一般情况下的 composer vendor bin 目录在：</p>
<ul>
<li>MacOS: $HOME&#x2F;.composer&#x2F;vendor&#x2F;bin</li>
<li>GNU &#x2F; Linux Distributions: $HOME&#x2F;.config&#x2F;composer&#x2F;vendor&#x2F;bin</li>
</ul>
<p>下面我们要将该变量添加到 $PATH 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;~/.config/composer/vendor/bin:$PATH&quot;</span><br></pre></td></tr></table></figure>

<p>下面可以用 <code>laravel</code> 命令了。 切换到工作目录下，比如 <code>todo55</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">laravel new</span><br></pre></td></tr></table></figure>

<p>这样就会在当前目录下安装 laravel 下面我们查看下 laravel 的版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php artisan --version</span><br><span class="line">Laravel Framework 5.5.20</span><br></pre></td></tr></table></figure>

<h3 id="通过-composer-安装-5-1"><a href="#通过-composer-安装-5-1" class="headerlink" title="通过 composer 安装 5.1"></a><a href="#%E9%80%9A%E8%BF%87-composer-%E5%AE%89%E8%A3%85-5.1"></a>通过 composer 安装 5.1</h3><p>将 5.1 版本的放在目录 <code>todo51</code> 下 在 <code>todo51</code> 目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">composer create-project laravel/laravel  ./ &quot;5.1.*&quot;</span><br></pre></td></tr></table></figure>

<p>同样看下版本号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ php artisan --version</span><br><span class="line">Laravel Framework version 5.1.46 (LTS)</span><br></pre></td></tr></table></figure>

<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a><a href="#%E8%AE%BE%E7%BD%AE%E6%9D%83%E9%99%90"></a>设置权限</h3><p><code>storage</code> 和 <code>bootstrap/cache</code> 目录， web 服务器必须具有可写权限。 对我来说，我需要给组 www-data 写权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod g+w -R storage bootstrap/cache</span><br></pre></td></tr></table></figure>

<h3 id="设置虚拟目录-（可跳过）"><a href="#设置虚拟目录-（可跳过）" class="headerlink" title="设置虚拟目录 （可跳过）"></a><a href="#%E8%AE%BE%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%9B%AE%E5%BD%95-%EF%BC%88%E5%8F%AF%E8%B7%B3%E8%BF%87%EF%BC%89"></a>设置虚拟目录 （可跳过）</h3><p>确保 <code>mod_rewrite</code> 开启了，这样 <code>public/.htaccess</code> 就有作用了。 以下是针对 Apache 的 启用 Apache rewrite 模块 <code>a2enmod rewrite</code> 我将让 <code>todo51</code> 监听 51 端口，而 <code>todo55</code> 监听 55 端口 首先将 varnish 监听端口从 80 上改到 6082 其次修改 <code>/etc/apache2/ports.conf</code> 增加监听的端口 然后修改 <code>/etc/apache2/sites-available/000-default.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:51&gt;</span><br><span class="line"></span><br><span class="line">        DocumentRoot /home/thankit/www/laravel/todo51/public</span><br><span class="line">        &lt;Directory /home/thankit/www/laravel/todo51/public&gt;</span><br><span class="line">                AllowOverride all</span><br><span class="line">        #       Options +FollowSymLinks</span><br><span class="line">        #       RewriteEngine On</span><br><span class="line">        #       RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">        #       RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">        #       RewriteRule ^ index.php [L]</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line">&lt;VirtualHost *:55&gt;</span><br><span class="line"></span><br><span class="line">        DocumentRoot /home/thankit/www/laravel/todo55/public</span><br><span class="line">        &lt;Directory /home/thankit/www/laravel/todo55/public&gt;</span><br><span class="line">                AllowOverride all</span><br><span class="line">        #       Options +FollowSymLinks</span><br><span class="line">        #       RewriteEngine On</span><br><span class="line">        #       RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">        #       RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">        #       RewriteRule ^ index.php [L]</span><br><span class="line">        &lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>

<p>看看是否监听了端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -lntp</span><br></pre></td></tr></table></figure>

<p>一切正常， 将通过 <code>http://192.168.0.251:51/</code> 访问 5.1 的 todo <img src="/wp-content/uploads/2017/11/laravel5.1-install-successfully.png" alt="laravel 5.1 安装成功"> 将通过 <code>http://192.168.0.251:55/</code> 访问 5.5 的 todo <img src="/wp-content/uploads/2017/11/laravel5.5-install-somethingwrong.png" alt="laravel 5.5 安装报错"> 下面我们得看看 5.5 为什么报错了。 我们进入 todo5.5 的目录，修改 <code>config/app.php</code> 将 debug 打开</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;debug&#x27;  =&gt; env(&#x27;APP_DEBUG&#x27;, true),</span><br></pre></td></tr></table></figure>

<p>下面我们再刷新，看看错误是什么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RuntimeException</span><br><span class="line">No application encryption key has been specified.</span><br></pre></td></tr></table></figure>

<p>下面直接将 <code>.env.example</code> 拷贝一份重命名为 <code>.env</code> 然后运行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5$ php artisan key:generate</span><br><span class="line">Application key [base64:aJqES8WcAQJJ0jjoMKeQojV0TWnae5ALs8JQnm/uW5w=] set successfully.</span><br></pre></td></tr></table></figure>

<p>下面再打开网站看看，这次正常了： <img src="/wp-content/uploads/2017/11/laravel5.5-install-successfully.png"></p>
<h2 id="Task-List-创建"><a href="#Task-List-创建" class="headerlink" title="Task List 创建"></a><a href="#task-list-%E5%88%9B%E5%BB%BA"></a>Task List 创建</h2><h3 id="数据库迁移"><a href="#数据库迁移" class="headerlink" title="数据库迁移"></a><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%81%E7%A7%BB"></a>数据库迁移</h3><p>首先对数据库帐密进行设置，有两处 <code>config\database.php</code> 和 <code>.env</code> <code>.env</code> 是主配置文件，会覆盖 <code>database.php</code> 中的参数 我们设置好 <code>.env</code> 中关于 db 的部分 执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan make:migration create_tasks_table --create=tasks</span><br></pre></td></tr></table></figure>

<p>他将在 <code>database/migrations/</code> 目录下创建类似 <code>YYYY_M_DD_HHMMSS_create_tableName_table.php</code> 的文件，就像<code>2017_11_08_064436_create_tasks_table.php</code> 其中的内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use Illuminate\Support\Facades\Schema;</span><br><span class="line">use Illuminate\Database\Schema\Blueprint;</span><br><span class="line">use Illuminate\Database\Migrations\Migration;</span><br><span class="line"></span><br><span class="line">class CreateTasksTable extends Migration</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function up()</span><br><span class="line">    &#123;</span><br><span class="line">        Schema::create(&#x27;tasks&#x27;, function (Blueprint $table) &#123;</span><br><span class="line">            $table-&gt;increments(&#x27;id&#x27;);</span><br><span class="line">            $table-&gt;timestamps();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Reverse the migrations.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function down()</span><br><span class="line">    &#123;</span><br><span class="line">        Schema::dropIfExists(&#x27;tasks&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该类包含了两个方法，<code>up()</code> （执行迁移命令时创建表结构）和 <code>down()</code> （执行回滚时删除表结构） <em>更多的参考 <a href="https://laravel.com/docs/5.5/migrations#creating-tables">Database: Migrations</a></em> 下面我们给他添加一个字段 name</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function up()</span><br><span class="line">&#123;</span><br><span class="line">    Schema::create(&#x27;tasks&#x27;, function (Blueprint $table) &#123;</span><br><span class="line">        $table-&gt;increments(&#x27;id&#x27;);</span><br><span class="line">        $table-&gt;string(&#x27;name&#x27;);</span><br><span class="line">        $table-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面执行数据迁移：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan migrate</span><br></pre></td></tr></table></figure>

<p>然后我们进入数据库中看看，<code>tasks</code> 表被创建出来了 下面试一下回滚：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan migrate:rollback</span><br></pre></td></tr></table></figure>

<p>在看看数据库中的表都被删除了。 <code>php artisan migrate:refresh</code> 全部回滚重建</p>
<h3 id="数据库填充"><a href="#数据库填充" class="headerlink" title="数据库填充"></a><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A1%AB%E5%85%85"></a>数据库填充</h3><p>我们将创建一个 Task model 对应我们的表 tasks 默认规则是模型类名的复数作为与其对应的表名，除非在模型类中明确指定了其它名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan make:model Task</span><br></pre></td></tr></table></figure>

<p>他在 app 目录下创建了 <code>Task.php</code> 内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace App;</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Eloquent\Model;</span><br><span class="line"></span><br><span class="line">class Task extends Model</span><br><span class="line">&#123;</span><br><span class="line">    //</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面我们创建自动填充文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan make:seeder TasksTableSeeder</span><br></pre></td></tr></table></figure>

<p>他将在 <code>database/seeds</code> 目录下创建 <code>TasksTableSeeder.php</code> ，这个文件就是数据库填充文件了，他的命名规则是数据库表名加上 TableSeeder 并且首字母大写，表名一般是复数，所以我们有了 TasksTableSeeder</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#File: database/seeds/TasksTableSeeder.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use App\Task;</span><br><span class="line">use Illuminate\Database\Seeder;</span><br><span class="line"></span><br><span class="line">class TasksTableSeeder extends Seeder</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function run()</span><br><span class="line">    &#123;</span><br><span class="line">        DB::table(&#x27;tasks&#x27;)-&gt;insert([&#x27;name&#x27; =&gt; str_random(10)]);</span><br><span class="line">        Task::create([&#x27;name&#x27; =&gt; &#x27;thankit&#x27;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后将 DatabaseSeeder.php 添加内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">use Illuminate\Database\Seeder;</span><br><span class="line"></span><br><span class="line">class DatabaseSeeder extends Seeder</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Run the database seeds.</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    public function run()</span><br><span class="line">    &#123;</span><br><span class="line">        // $this-&gt;call(UsersTableSeeder::class);</span><br><span class="line">        $this-&gt;call(TasksTableSeeder::class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后我们来运行命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php artisan db:seed</span><br></pre></td></tr></table></figure>

<p>之后我们就可以在数据库中看看表中数据了： <img src="/wp-content/uploads/2017/11/tasks.png"></p>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a><a href="#%E8%B7%AF%E7%94%B1"></a>路由</h3><p><code>routes/web.php</code> 文件用于定义 web 界面的路由。这里面的路由都会被分配给 web 中间件组，它提供了会话状态和 CSRF 保护等功能。定义在 <code>routes/api.php</code> 中的路由都是无状态的，并且被分配了 api 中间件组。 所以我们在 web.php 中添加以下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">Route::get(&#x27;/&#x27;, function () &#123;</span><br><span class="line">    return view(&#x27;tasks&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add A New Task</span><br><span class="line"> */</span><br><span class="line">Route::post(&#x27;/task&#x27;, function (Request $request) &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Delete An Existing Task</span><br><span class="line"> */</span><br><span class="line">Route::delete(&#x27;/task/&#123;id&#125;&#x27;, function ($id) &#123;</span><br><span class="line">    //</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="创建父-blade-模版"><a href="#创建父-blade-模版" class="headerlink" title="创建父 blade 模版"></a><a href="#%E5%88%9B%E5%BB%BA%E7%88%B6-blade-%E6%A8%A1%E7%89%88"></a>创建父 blade 模版</h3><p>File:resources&#x2F;views&#x2F;layouts&#x2F;app.blade.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Laravel Quickstart - Basic&lt;/title&gt;</span><br><span class="line">        &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot; crossorigin=&quot;anonymous&quot;&gt;</span><br><span class="line">        &lt;!-- CSS And JavaScript --&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">            &lt;nav class=&quot;navbar navbar-default&quot;&gt;</span><br><span class="line">                &lt;!-- Navbar Contents --&gt;</span><br><span class="line">            &lt;/nav&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        @yield(&#x27;content&#x27;)</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="子-blade-模版"><a href="#子-blade-模版" class="headerlink" title="子 blade 模版"></a><a href="#%E5%AD%90-blade-%E6%A8%A1%E7%89%88"></a>子 blade 模版</h3><p>File：resources&#x2F;views&#x2F;tasks.blade.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@extends(&#x27;layouts.app&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line"></span><br><span class="line">    &lt;!-- Bootstrap Boilerplate... --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;!-- Display Validation Errors --&gt;</span><br><span class="line">        &lt;?php // @include(&#x27;common.errors&#x27;) ;?&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- New Task Form --&gt;</span><br><span class="line">        &lt;form action=&quot;/task&quot; method=&quot;POST&quot; class=&quot;form-horizontal&quot;&gt;</span><br><span class="line">            &amp;#123;&amp;#123; csrf_field() &amp;#125;&amp;#125;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Task Name --&gt;</span><br><span class="line">            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;label for=&quot;task&quot; class=&quot;col-sm-3 control-label&quot;&gt;Task&lt;/label&gt;</span><br><span class="line"></span><br><span class="line">                &lt;div class=&quot;col-sm-6&quot;&gt;</span><br><span class="line">                    &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;task-name&quot; class=&quot;form-control&quot;&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Add Task Button --&gt;</span><br><span class="line">            &lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;col-sm-offset-3 col-sm-6&quot;&gt;</span><br><span class="line">                    &lt;button type=&quot;submit&quot; class=&quot;btn btn-default&quot;&gt;</span><br><span class="line">                        &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; Add Task</span><br><span class="line">                    &lt;/button&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- TODO: Current Tasks --&gt;</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<p>解释，还是英文的说的好理解，所以附上： the <code>@extends</code> directive informs Blade that we are using the layout we defined at <code>resources/views/layouts/app.blade.php</code>. All of the content between <code>@section(&#39;content&#39;)</code> and <code>@endsection</code> will be injected into the location of the <code>@yield(&#39;content&#39;)</code> directive within the <code>app.blade.php</code> layout 起码看起来有点样子了 <img src="/wp-content/uploads/2017/11/laravel5.5-layout-blade.png" alt="Laravel 5.5"></p>
<h3 id="验证输入并增加-tasks"><a href="#验证输入并增加-tasks" class="headerlink" title="验证输入并增加 tasks"></a><a href="#%E9%AA%8C%E8%AF%81%E8%BE%93%E5%85%A5%E5%B9%B6%E5%A2%9E%E5%8A%A0-tasks"></a>验证输入并增加 tasks</h3><p>修改 <code>web.php</code> 中的路由：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 这里不能少</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line"></span><br><span class="line">Route::post(&#x27;/task&#x27;, function (Request $request) &#123;</span><br><span class="line"></span><br><span class="line">    $validator = Validator::make($request-&gt;all(), [</span><br><span class="line">        &#x27;name&#x27; =&gt; &#x27;requiredmax:255&#x27;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    if ($validator-&gt;fails()) &#123;</span><br><span class="line">        return redirect(&#x27;/&#x27;)</span><br><span class="line">            -&gt;withInput()</span><br><span class="line">            -&gt;withErrors($validator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create The Task...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样去掉 resources&#x2F;views&#x2F;tasks.blade.php 中的注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@include(&#x27;common.errors&#x27;)</span><br></pre></td></tr></table></figure>

<p>补上模版： resources&#x2F;views&#x2F;common&#x2F;errors.blade.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@if (count($errors) &gt; 0)</span><br><span class="line">    &lt;!-- Form Error List --&gt;</span><br><span class="line">    &lt;div class=&quot;alert alert-danger&quot;&gt;</span><br><span class="line">        &lt;strong&gt;Whoops! Something went wrong!&lt;/strong&gt;</span><br><span class="line"></span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            @foreach ($errors-&gt;all() as $error)</span><br><span class="line">                &lt;li&gt;&amp;#123;&amp;#123; $error &amp;#125;&amp;#125;&lt;/li&gt;</span><br><span class="line">            @endforeach</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">@endif</span><br></pre></td></tr></table></figure>

<p>现在如果我们提交空值，就会有错误提示了。 <img src="/wp-content/uploads/2017/11/laravel5.5-error-reminder.png" alt="Laravel 5.5"> 下面我们要增加 tasks 所以修改 <code>web.php</code> 的内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use App\Task;</span><br><span class="line">use Illuminate\Http\Request;</span><br><span class="line">/**</span><br><span class="line"> * Display All Tasks</span><br><span class="line"> */</span><br><span class="line">Route::get(&#x27;/&#x27;, function () &#123;</span><br><span class="line">    return view(&#x27;tasks&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Add A New Task</span><br><span class="line"> */</span><br><span class="line">Route::post(&#x27;/task&#x27;, function (Request $request) &#123;</span><br><span class="line"></span><br><span class="line">    $validator = Validator::make($request-&gt;all(), [</span><br><span class="line">        &#x27;name&#x27; =&gt; &#x27;requiredmax:255&#x27;,</span><br><span class="line">    ]);</span><br><span class="line"></span><br><span class="line">    if ($validator-&gt;fails()) &#123;</span><br><span class="line">        return redirect(&#x27;/&#x27;)</span><br><span class="line">            -&gt;withInput([&#x27;name&#x27; =&gt; &#x27;reminder&#x27;])</span><br><span class="line">            -&gt;withErrors($validator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create The Task...</span><br><span class="line">    $task       = new Task;</span><br><span class="line">    $task-&gt;name = $request-&gt;name;</span><br><span class="line">    $task-&gt;save();</span><br><span class="line"></span><br><span class="line">    return redirect(&#x27;/&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>所以接下来我们测试提交一个 task ，发现已经添加到数据库表中了。</p>
<h3 id="展示已经有的-tasks"><a href="#展示已经有的-tasks" class="headerlink" title="展示已经有的 tasks"></a><a href="#%E5%B1%95%E7%A4%BA%E5%B7%B2%E7%BB%8F%E6%9C%89%E7%9A%84-tasks"></a>展示已经有的 tasks</h3><p>File:routes&#x2F;web.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::get(&#x27;/&#x27;, function () &#123;</span><br><span class="line">    $tasks = Task::orderBy(&#x27;created_at&#x27;, &#x27;asc&#x27;)-&gt;get();</span><br><span class="line">    return view(&#x27;tasks&#x27;, [</span><br><span class="line">        &#x27;tasks&#x27; =&gt; $tasks,</span><br><span class="line">    ]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>File:resoures&#x2F;views&#x2F;tasks.blade.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@extends(&#x27;layouts.app&#x27;)</span><br><span class="line"></span><br><span class="line">@section(&#x27;content&#x27;)</span><br><span class="line">    &lt;!-- Create Task Form...这里有省略 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Current Tasks --&gt;</span><br><span class="line">    @if (count($tasks) &gt; 0)</span><br><span class="line">        &lt;div class=&quot;panel panel-default&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">                Current Tasks</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">                &lt;table class=&quot;table table-striped task-table&quot;&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- Table Headings --&gt;</span><br><span class="line">                    &lt;thead&gt;</span><br><span class="line">                        &lt;th&gt;Task&lt;/th&gt;</span><br><span class="line">                        &lt;th&gt;&amp;nbsp;&lt;/th&gt;</span><br><span class="line">                    &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">                    &lt;!-- Table Body --&gt;</span><br><span class="line">                    &lt;tbody&gt;</span><br><span class="line">                        @foreach ($tasks as $task)</span><br><span class="line">                            &lt;tr&gt;</span><br><span class="line">                                &lt;!-- Task Name --&gt;</span><br><span class="line">                                &lt;td class=&quot;table-text&quot;&gt;</span><br><span class="line">                                    &lt;div&gt;&amp;#123;&amp;#123; $task-&gt;name &amp;#125;&amp;#125;&lt;/div&gt;</span><br><span class="line">                                &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">                                &lt;td&gt;</span><br><span class="line">                                    &lt;!-- TODO: Delete Button --&gt;</span><br><span class="line">                                &lt;/td&gt;</span><br><span class="line">                            &lt;/tr&gt;</span><br><span class="line">                        @endforeach</span><br><span class="line">                    &lt;/tbody&gt;</span><br><span class="line">                &lt;/table&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    @endif</span><br><span class="line">@endsection</span><br></pre></td></tr></table></figure>

<p>效果如下： <img src="/wp-content/uploads/2017/11/laravel5.5-tasks-list.png" alt="Laravel 5.5"></p>
<h3 id="删除-tasks"><a href="#删除-tasks" class="headerlink" title="删除 tasks"></a><a href="#%E5%88%A0%E9%99%A4-tasks"></a>删除 tasks</h3><p>上面的文件中我们留了一个删除按钮没有写 下面补上：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tr&gt;</span><br><span class="line">    &lt;!-- Task Name --&gt;</span><br><span class="line">    &lt;td class=&quot;table-text&quot;&gt;</span><br><span class="line">        &lt;div&gt;&amp;#123;&amp;#123; $task-&gt;name &amp;#125;&amp;#125;&lt;/div&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line"></span><br><span class="line">    &lt;td&gt;</span><br><span class="line">        &lt;form action=&quot;/task/&amp;#123;&amp;#123; $task-&gt;id &amp;#125;&amp;#125;&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">            &amp;#123;&amp;#123; csrf_field() &amp;#125;&amp;#125;</span><br><span class="line">            &amp;#123;&amp;#123; method_field(&#x27;DELETE&#x27;) &amp;#125;&amp;#125;</span><br><span class="line"></span><br><span class="line">            &lt;button type=&quot;submit&quot; class=&quot;btn btn-danger&quot;&gt;Delete Task&lt;/button&gt;</span><br><span class="line">        &lt;/form&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure>

<p>注意这里的 <code>&amp;#123;&amp;#123; method_field(&#39;DELETE&#39;) &amp;#125;&amp;#125;</code> 等同于</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;DELETE&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>File:routes&#x2F;web.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Route::delete(&#x27;/task/&#123;id&#125;&#x27;, function ($id) &#123;</span><br><span class="line">    Task::findOrFail($id)-&gt;delete();</span><br><span class="line">    return redirect(&#x27;/&#x27;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>最后的效果如下： <img src="/wp-content/uploads/2017/11/todolist.gif" alt="Task List 最终效果"></p>
]]></content>
      <categories>
        <category>Laravel</category>
      </categories>
      <tags>
        <tag>Laravel</tag>
        <tag>Laravel Task List</tag>
        <tag>Laravel 入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Pratices Tests Collections</title>
    <url>/pratices-tests-collections/</url>
    <content><![CDATA[<p>You are building an tool that imports products from an ERP. There are 20 columns of additional information that are associated with each product. This extra information must also be associated with an update time to know when to refresh the data. Keeping maintainability in mind, how do you build this into Magento? A. Override the Product model and add the fields. B. Create a separate model and build code to associate the two record types. C. Create 20 EAV attributes and check their updated_at column. D. Utilize an extension attribute Answer: D</p>
<hr>
<p>You are adding an extension attribute to the CustomerInterface class. You have specified data for the extension attribute, but when you check the database, nothing has been saved. Why is that? A. The appropriate columns in customer_entity have not been created. B. You need to ensure that the extension attribute getter and setter exists in CustomerExtensionInterface. C. You need to add a node to the extension attribute XML details. D. Extension attribute data is not automatically persisted to the database. Answer: D</p>
<hr>
<p>You need to create a custom price calculator for simple products. You have already created the new price model. Keeping simplicity in mind, what additional steps do you take to implement this? (Multiple Choice) A. Make your new price model extend \Magento\Catalog\Model\Product\Type\Price. B. Update the frontend templates to use the new price methods. C. Create a plugin for the getPriceModel() method and return your price model. D. In your product_types.xml module, reference the simple product type, and set a value for the priceModel attribute Answer: A D</p>
<hr>
<p>Which native Magento products are also composite products? (Multiple Choice) A. Bundle B. Grouped C. Kit D. Simple Answer: A B</p>
<hr>
<p>What interface should a frontend controllers action implement? A. \Magento\Framework\App\ControllerInterface B. \Magento\Frontend\Controller\ControllerInterface C. \Magento\Frontend\Controller\ControllerInterface D. \Magento\Framework\App\ActionInterface Answer: D</p>
<hr>
<p>You are building a new module to add extra functionality to the Magento application. What files are required? (Multiple Choice) A. registration.php B. Setup&#x2F;InstallSchema.php C. etc&#x2F;config.xml D. composer.json E. etc&#x2F;module.xml Answer: A (D) E</p>
<hr>
<p>What files are required for a new theme? (Multiple Choice) A. etc&#x2F;view.xml B. registration.php C. theme.xml D. composer.json Answer: B C (D) etc&#x2F;view.xml is required for Magento 2 theme but it is optional if exists in parent theme</p>
<hr>
<p>What files are required for a new language package? (Multiple Choice) A. etc&#x2F;view.xml B. registration.php C. language.xml D. composer.json Answer: B C (D)</p>
<hr>
<p>Magento’s JavaScript application has a means to instantiate a object through RequireJS. What is the correct node to do this? A. <code>&lt;script type=&quot;text/x-magento-init&quot;&gt;</code> B. <code>&lt;script type=&quot;text/javascript&quot;&gt;</code> C. <code>&lt;script type=&quot;text/require-js&quot; module=&quot;path/to/module&quot;&gt;</code> D. <code>&lt;script type=&quot;application/magento&quot; src=&quot;path/to/script.js&quot;&gt;</code> Answer: A</p>
<hr>
<p>What Magento layout XML instructions instruct Magento to render HTML output? (Multiple Choice) A. referenceBlock B. action C. container D. block Answer: C D</p>
<hr>
<p>What ways are possible to wrap a block with an HTML tag? A. Listen to the core_block_html_output_after event. B. Add the tag to the template. C. Add a plugin for the afterHtml method. D. Layout XML container Answer: B D</p>
<hr>
<p>You are building a new module that needs to utilize a custom URL path like: &#x2F;maps&#x2F;{MAP_ID} What steps do you take to accomplish this? (Multiple Choice) A. Create an interface that extends RouterInterface details additional methods added. B. Create a plugin for the RouterList class to insert your router into the selection criteria. C. Create a class that extends RouterInterface and configure in di.xml. D. In di.xml, add your router to the RouterList class’ routerList parameter. Answer: C D</p>
<hr>
<p>You see this code in etc&#x2F;adminhtml&#x2F;routes.xml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;route id=&quot;mymodule&quot; frontName=&quot;user-subscriptions&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;MyCompany_MyModule&quot; /&gt;</span><br><span class="line">&lt;/route&gt;</span><br></pre></td></tr></table></figure>

<p>You have placed a controller in Controller&#x2F;Index&#x2F;Subscribe.php. If you want to create layout XML instructions for this controller, what would be the layout XML’s filename? A. <code>user_subscriptions_subscribe_[ACTION NAME].xml</code> B. <code>user_subscriptions_index_subscribe.xml</code> C. <code>mymodule_index_subscribe.xml</code> D. <code>mymodule_subscribe_[ACTION NAME].xml</code> Answer: C</p>
<hr>
<p>You see this code in etc&#x2F;frontend&#x2F;routes.xml:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;route id=&quot;mymodule&quot; frontName=&quot;user-subscriptions&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;MyCompany_MyModule&quot;/&gt;</span><br><span class="line">&lt;/route&gt;</span><br></pre></td></tr></table></figure>

<p>You have placed a controller in Controller&#x2F;Index&#x2F;Subscribe.php. At what URL would you visit the controller listed above? A. &#x2F;mymodule&#x2F;index&#x2F;subscribe B. &#x2F;mymodule&#x2F;subscribe C. &#x2F;user-subscriptions&#x2F;subscribe D. &#x2F;user-subscriptions&#x2F;index&#x2F;subscribe Answer: D</p>
<hr>
<p>As you create a controller in Magento’s adminhtml area, you must configure it to respond appropriately to the ACL. Keeping simplicity in mind, what steps do you take to implement this? A. Create a plugin to ensure that the ACL resource is accessible. B. Override _isAllowed and check the authorization class’ isAllowed method for the ACL resource. C. Check the authorization class’ isAllowed method as the first check in the execute function. D. Set the value of the ADMIN_RESOURCE constant to be the ACL resource. Answer: D</p>
<hr>
<p>You have created a custom theme and need to customize the view&#x2F;frontend&#x2F;templates&#x2F;product&#x2F;list.phtml file in the Magento_Catalog module. Where do you place this file inside your theme? A. templates&#x2F;product&#x2F;list.phtml B. Magento_Catalog&#x2F;templates&#x2F;override&#x2F;product&#x2F;list.phtml C. templates&#x2F;Magento_Catalog&#x2F;product&#x2F;list.phtml D. Magento_Catalog&#x2F;templates&#x2F;product&#x2F;list.phtml Answer: D</p>
<hr>
<p>You are tasked with building a new module to show product promotions to a customer. What two steps do you take to make the module active? A. php bin&#x2F;magento deploy:mode:set developer B. php bin&#x2F;magento sampledata:deploy C. php bin&#x2F;magento module:enable MyCompany_MyModule D. php bin&#x2F;magento setup:upgrade Answer: C D</p>
<hr>
<p>You are inspecting an existing Magento installation. Where do modules that affect the functionality of the Magento application reside? (Multiple Choice) A. app&#x2F;code B. modules C. vendor D. code Answer: A C</p>
<hr>
<p>Where are admin uiComponents located? A. <code>view/adminhtml/layout/[COMPONENT NAME].xml</code> B. <code>view/adminhtml/ui_component/[COMPONENT NAME].xml</code> C. <code>view/components/[COMPONENT NAME].xml</code> D. <code>view/components/adminhtml/[COMPONENT NAME].xml</code> Answer: B</p>
<hr>
<p>You are making some major adjustments to a core Magento class (ClassA). These adjustments are only necessary when utilized from a specific Magento class (ClassB). You have created MyClass that contains the needed customizations. Keeping upgradeability in mind, how do you configure di.xml to make the substitution happen? A. Ensure that MyClass extends ModuleA and set the <code>&lt;argument/&gt;</code>, for ModuleB to point to your new class in di.xml. B. Set a <code>&lt;preference/&gt;</code> for ModuleA to be replaced by MyClass C. Create a virtual type that extends ModuleB, specifying an <code>&lt;argument/&gt;</code> for MyClass. D. Create a rewrite node that injects MyClass into ClassB. Answer: A</p>
<hr>
<p>You need to make some modifications to an entity before it is saved to the database. Your tool of choice is a plugin. What are requirements for a plugin? (Multiple Choice) A. The targeted method or class must not be marked final. B. The plugin method must begin with the type of the plugin. C. The plugin class must not inherit the targeted class. D. The plugin class must not be marked abstract. E. The plugin class must be specified in di.xml. Answer: A B E</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Plugins can not be used on following:</span><br><span class="line">Final methods</span><br><span class="line">Final classes</span><br><span class="line">Non-public methods</span><br><span class="line">Class methods (such as static methods)</span><br><span class="line">__construct</span><br><span class="line">Virtual types</span><br><span class="line">Objects that are instantiated before Magento\Framework\Interception is bootstrapped</span><br></pre></td></tr></table></figure>

<p><a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/plugins.html">https://devdocs.magento.com/guides/v2.3/extension-dev-guide/plugins.html</a></p>
<hr>
<p>What are valid plugin types: A. around B. instead C. post D. before E. after Answer: A D E</p>
<hr>
<p>Keeping maintainability in mind, how do you add a new link to the customer account sidebar? A. Create customer_account.xml and add a block to the customer_account_navigation. B. Create a plugin for the customer Navigation class. C. Create customer_account_index.xml and add a block to the sidebar container. D. Create customer_account_index.xml and add the link to the uiComponent configuration in jsLayout Answer: A for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;block class=&quot;Magento\Customer\Block\Account\SortLinkInterface&quot; name=&quot;customer-account-navigation-account-edit-link&quot;&gt;</span><br><span class="line">    &lt;arguments&gt;</span><br><span class="line">        &lt;argument name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Account Information&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;path&quot; xsi:type=&quot;string&quot;&gt;customer/account/edit&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;sortOrder&quot; xsi:type=&quot;number&quot;&gt;180&lt;/argument&gt;</span><br><span class="line">    &lt;/arguments&gt;</span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure>

<hr>
<p>What only happens in the Production deploy mode? A. Performance is faster because symlinks are established in the pub&#x2F;static folder. B. Errors are only logged, not shown to the user. C. Automatic code file compilation &#x2F; generation happens as needed. D. Static assets are created when the user downloads them. Answer: B</p>
<hr>
<p>You need to add a fee (additional to tax and shipping) to every order placed. In what file do you specify the new total? A. etc&#x2F;sales.xml B. etc&#x2F;di.xml C. etc&#x2F;totals.xml D. etc&#x2F;extension_attributes.xml Answer: A etc&#x2F;totals.xml 根本不存在 <a href="http://www.blogtreat.com/magento-2-add-extra-fee-to-order-totals/">http://www.blogtreat.com/magento-2-add-extra-fee-to-order-totals/</a></p>
<hr>
<p>UpgradeSchema.php only provides one method: upgrade. What method do you use to determine what code to execute for what method? A. Use PHP’s version_compare method to compare the $context-&gt;getVersion() with the required version. B. Use the $setup-&gt;compareVersion method. C. Put the updates into a method named containing the version number that the module is being upgraded to. D. Check the etc&#x2F;module.xml XML file for the version number. Answer: A</p>
<hr>
<p>Keeping maintability in mind, how do you customize the format of addresses in emails? A. Stores &gt; Configuration &gt; Customers &gt; Customer Configuration &gt; Address Templates B. Use di.xml to add a new address formatter to \Magento\Sales\Model\Order\Address\FormatterList C. Set the new template in etc&#x2F;order_addresses.xml D. Create a plugin for the \Magento\Sales\Order\Address::getFormatted method. Answer: A</p>
<hr>
<p>How do you create a new cache type? A. Use a plugin to append to the method arguments for the \Magento\Framework\App\CacheList::collect method. B. Create etc&#x2F;cache.xml and specify a . C. Inject a new caching class into \Magento\Framework\App\CacheList. D. Add an event observer for the cache_type_collector observer. Answer: B</p>
<hr>
<p>What is the purpose of the getFlatColumns method in an EAV’s Source model? A. It returns a list of columns in the entity’s _text table. B. It converts option values into row values for the attribute value tables. C. It flattens an array attribute value into a JSON string. D. It returns columns that will be added to the EAV model’s flat table. Answer: D</p>
<hr>
<p>You are customizing a third-party module and need to prevent an event handler from triggering. Keeping upgradeability in mind, how do you do this? A. Comment the observer from the 3rd-party’s module. B. Create an observer in events.xml with the same name and specify the disabled&#x3D;”true” attribute. C. Create a plugin that will disable the 3rd-party’s event observer method. D. Override the event observer’s class. Answer: B</p>
<hr>
<p>What is the difference between setting cacheable&#x3D;”false” on a block in layout XML attribute and the block’s getCacheLifetime() &#x3D;&#x3D;&#x3D; null? A. cacheable&#x3D;”false” and the effect of getCacheLifetime &#x3D;&#x3D;&#x3D; null are the same. B. cacheable&#x3D;”false” affects the parent block or container. getCacheLifetime() &#x3D;&#x3D;&#x3D; null prevents the current block from being cached. C. cacheable&#x3D;”false” prevents the entire page from caching. getCacheLifetime() &#x3D;&#x3D;&#x3D; null prevents the block from being cached, but it would still be cached by the full page caching mechanism. D. cacheable&#x3D;”false” prevents a block from being cached. getCacheLifetime() has been deprecated. Answer: C</p>
<hr>
<p>You are evaluating a 3rd-party module and you see some custom functionality that is executed in an observer of the checkout_cart_add_product_complete. This functionality is expected to run every time a product is added to the cart. Is there a problem? A. Yes. This only is only triggered when the cart is added to the cart on the frontend and in no other case. B. Yes. This event is used only triggered in the admin Sales &gt; Order &gt; Create process. C. No: <code>checkout_cart_add_product_complete</code> is triggered as expected. D. Yes. This event doesn’t exist. Answer: A use <code>sales_quote_add_item</code> instead</p>
<hr>
<p>Magento’s Product repository uses the getList($filter)method retrieve a list of products. As you are preparing to retrieve a list of products, you need to specify what products to retrieve. Which of the following classes will help you formulate the filter? A. \Magento\Framework\Api\AppSearchBuilder B. \Magento\Framework\Api\SearchFilterBuilder C. \Magento\Framework\Api\RepositorySearchBuilder D. \Magento\Framework\Api\SearchCriteriaBuilder Answer: D for example:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$searchCriteriaBuilder = $this-&gt;objectManager-&gt;get(SearchCriteriaBuilder::class);</span><br><span class="line">$searchCriteria = $searchCriteriaBuilder-&gt;addFilter(OrderInterface::INCREMENT_ID, &#x27;100000001&#x27;)-&gt;create();</span><br><span class="line"></span><br><span class="line">$orderRepository = $this-&gt;objectManager-&gt;get(OrderRepositoryInterface::class);</span><br><span class="line">$orders = $orderRepository-&gt;getList($searchCriteria)-&gt;getItems();</span><br><span class="line"></span><br><span class="line">/** @var OrderInterface $order */</span><br><span class="line">return array_pop($orders);</span><br></pre></td></tr></table></figure>

<hr>
<p>How do you make a new category attribute available to be edited in the admin panel? A. This is done automatically. B. Create a plugin for the <code>Form</code> class that renders the category form and add the extra field. C. Add the new attribute to the category_form.xml uiComponent. D. In the data setup script, add the attribute to the category’s default attribute set Answer: C</p>
<hr>
<p>You are troubleshooting a product with a price of $25. The special price is $20 and is active through 2017. The tiered pricing has a discount for 2 or more products at $22.00. Additionally, a catalog price url applies a 10% off discount. What is the final price that is shown on the product page? A. $22.00 B. $18.00 C. $20.00 D. $22.50 Answer: D</p>
<hr>
<p>You are configuring a new entry in etc&#x2F;adminhtml&#x2F;system.xml that is a select &#x2F; dropdown type. What must the class for the source model extend or implement? A. \Magento\Framework\Data\OptionSourceInterface B. \Magento\Backend\Model\AbstractSource C. \Magento\Framework\Source\OptionInterface D. \Magento\Eav\Model\Entity\Attribute\Source\AbstractSource Answer: A</p>
<hr>
<p>You need to add a residential &#x2F; commercial destination selector to the shipping address on the checkout. What are the steps needed to add this selector? (Multiple Choice) A. Create a <code>checkout_index_index.xml</code> file and add the uiComponent details. B. Override \Magento\Block\Checkout\ShippingAddress and add a getter for the selector value. C. Add a Javascript mixin to render the selector. D. Add new column to the sales_order_address table. Answer: A D</p>
<hr>
<p>You need to create a variation of the 2columns-left page layout. This new layout is named text. How do you instruct Magento regarding the new layout type? A. Create view&#x2F;frontend&#x2F;layouts.xml with a node. B. Insert text in to the layouts table. C. Create a new page_layout.xml in the applied theme with . D. Create view&#x2F;frontend&#x2F;layout&#x2F;text.xml, with Answer: A create view&#x2F;frontend&#x2F;page_layout&#x2F;text.xml, with <code>&lt;update handle=&quot;2columns-left&quot;/&gt;</code></p>
<hr>
<p>You performing a code review on an existing module. You see some interesting files in the Setup&#x2F;folder. What files in the Setup&#x2F; does Magento understand? (Multiple Choice) A. Setup&#x2F;InstallSchema.php B. Setup&#x2F;Migrations&#x2F;…php C. Setup&#x2F;RecurringData.php D. Setup&#x2F;UpgradeSchema.php E. Setup&#x2F;InstallDetails.php Answer: A C D</p>
<hr>
<p>A module contains the following files:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ModuleA/</span><br><span class="line">    -- etc/</span><br><span class="line">        -- di.xml</span><br><span class="line">        -- frontend/</span><br><span class="line">            -- di.xml</span><br></pre></td></tr></table></figure>

<p>When a visitor is browsing the frontend of the website, what happens if a similar XML directive is specified in both di.xmlfiles above? A. etc&#x2F;di.xml is used instead of etc&#x2F;frontend&#x2F;di.xml. B. etc&#x2F;frontend&#x2F;di.xml replaces etc&#x2F;di.xml. C. An error is thrown: Conflicting values are found in etc&#x2F;di.xml and etc&#x2F;frontend&#x2F;di.xml D. The two di.xml files are merged with etc&#x2F;frontend&#x2F;di.xml taking precedence. Answer: D</p>
<hr>
<p>Magento uses the concept of service contracts to create a blueprint for modules to communicate with each other. Where are these service contracts stored in a module? A. Api&#x2F;ServiceContracts&#x2F; B. Model&#x2F; C. Api&#x2F; D. Services&#x2F; Answer: C</p>
<hr>
<p>You have created a new product type, “sample”, and need to customize how it renders on the shopping cart page.Keeping maintainability in mind, how do you add a new renderer? A. Create the layout file, checkout_cart_index.xml, and update the cart page’s uiComponent to appropriately render the sample product type. B. Override the cart&#x2F;form.phtml template and add logic for the sample product type. C. Create the layout file, checkout_cart_item_renderers.xml, reference the checkout.cart.item.renderers block and add a new block with an as&#x3D;”sample”attribute. D. Create the layout file, checkout_cart_index.xml, and reference the checkout.cart.renderers block and add a block with the as&#x3D;”sample” attribute. Answer: C</p>
<hr>
<p>You are creating an admin uiComponent form. You have written this code for an email field:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- … --&gt;</span><br><span class="line">    &lt;input name=&quot;email&quot;&gt;</span><br><span class="line">        &lt;settings&gt;</span><br><span class="line">            &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;label translate=&quot;true&quot;&gt;Email&lt;/label&gt;</span><br><span class="line">        &lt;/settings&gt;</span><br><span class="line">    &lt;/input&gt;</span><br><span class="line">&lt;!-- … --&gt;</span><br></pre></td></tr></table></figure>

<p>However, no data is loading into the email field. What is the solution? A. Add a <code>&lt;dataScope&gt;email&lt;/dataScope&gt;</code> element into the tag. B. Utilize the textEntry type instead of input. C. Change the contents to email. D. Configure the data source class to load the email data Answer: A</p>
<hr>
<p>What category path is the category that is the closest to the top of the tree, but still is visible? A. 1&#x2F;2&#x2F;8 B. 1&#x2F;2 C. 1 D. 0 Answer: A (if frontend) (choose B if backend) <img src="/wp-content/uploads/2019/06/cat_path.png"></p>
<hr>
<p>What qualifiers are available for configuring a product’s pricing tiers? (Multiple Choice) A. Store View B. Customer Group C. Website D. Quantity E. Customer Answer: B C D</p>
<hr>
<p>What additional tools are available in the backend and not in frontend? (Multiple Choice) A. Global records search B. URL secret keys C. uiComponents D. Redis cache storage E. ACL Answer: A B E</p>
<hr>
<p>You are writing a new admin form uiComponent. The table that you are loading data from has an id column. However, you need to send the data back to the controller with the save_id key and NOT the id key. How do you do this? (Multiple Choice) A. In the dataSource node, set the save. B. Create a custom data provider class that extends \Magento\Framework…\DataProvider. C. Create a plugin for \Magento\Framework…UiComponent\Context.php and change the requestId parameter. D. In your admin controller that loads the uiComponent’s page, add a requestIdVariablevalue to the registry. Answer: A B</p>
<hr>
<p>You need to programmatically create a new customer attribute What steps are required to do this? (Multiple Choice) A. Save the attribute. B. Specify the used_in_forms data for the attribute. C. Create the attribute with \Magento\Eav\Setup\EavSetup::addAttribute D. Set the source_model value for the attribute. E. Add the attribute to the customer_eav_attribute table. Answer: A B C</p>
<hr>
<p>A merchant asks you to create a module that is able to process URLs with a custom structure that can contain any combination of a product type code, a partial name, and a 4-digit year in any order. The request path will look like this: &#x2F;product&#x2F;:type-code&#x2F;:name-part&#x2F;:year Which layer in the Magento request processing flow is suited for this kind of customization? A. Front controller B. Router C. Action controller D. HTTP Response Answer B</p>
<hr>
<p>You are facing a bug, which is supposedly caused by the customization of \Magento\Catalog\Api\ProductRepositoryInterface::save(). To resolve the issue, you decide to find all logic which customizes this method. Which two places do you search for customization declarations? (Choose 2) A. <code>*/di.xml</code> B. <code>*/config.xml</code> C. <code>*/events.xml</code> D. <code>*/plugins.xml</code> Answer A C</p>
<hr>
<p>You are implementing a customization of the sales management within a module MyCompany_MySalesProcess. You have created several event observers to add the custom functionality. Each observer is a separate class, but they require some common functionality. How do you implement the common functionality in the event observers, keeping maintainability and testability in mind? A. You create a trait with the common methods and use the trait in the observer classes. B. You create an abstract class AbstractObserver with the common methods and extend the observer classes from it. C. You create a regular class implementing the common functionality as public static methods and call those from the observers. D. You create a regular class implementing the common functionality as public methods and use constructor injection to make them available to the observers. Answer D</p>
<hr>
<p>A custom module is performing an optimized custom query for quote items. The class applies the query customizations on the select object of a quote item collection instance.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __construct(</span><br><span class="line">    \Magento\Quote\Model\ResourceModel\Quote\Item\Collection $collection</span><br><span class="line">) &#123;</span><br><span class="line">    $this-&gt;collection = $collection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public function fetchData()</span><br><span class="line">&#123;</span><br><span class="line">    $select = $this-&gt;collection-&gt;getSelect();</span><br><span class="line">    ... code modifying $select...</span><br><span class="line">    return $this-&gt;collection-&gt;getData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>You are tasked to resolve an issue where the query sometimes does not deliver the expected results. You have debugged the problem and found another class is also using a quote item collection and is loading the collection before the custom module. How do you resolve the issue, keeping maintainability in mind? A. You change the argument type to \Magento\Quote\Model\ResourceModel\Quote\Item\CollectionFactory and instantiate the collection using $collectionFactory-&gt;create(); B. You remove the constructor argument and use <code>ObjectManager::getInstance()-&gt;create(\Magento\Quote\Model\ResourceModel\Quote\Item\Collection::class)</code> to instantiate the collection instead. C. You inject \Magento\Framework\DB\Select instead of the collection and perform the desired query independently of the collection. D. You inject \Magento\Quote\Api\CartItemRepositoryInterface because low level query customizations are not allowed. Answer A</p>
<hr>
<p>In a custom module you implement the interface \Magento\Framework\App\Config\DataInterface.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line">* Configuration data storage</span><br><span class="line">*</span><br><span class="line">* @api</span><br><span class="line">*/</span><br><span class="line">interface DataInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function getValue($path);</span><br><span class="line">    public function setValue($path, $value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>What version constraint for magento&#x2F;framework do you add to your module’s composer.json file? A. major B. minor C. patch D. stable Answer B <a href="https://devdocs.magento.com/guides/v2.3/extension-dev-guide/versioning/dependencies.html">https://devdocs.magento.com/guides/v2.3/extension-dev-guide/versioning/dependencies.html</a></p>
]]></content>
      <categories>
        <category>M2 Certified Professional Developer</category>
      </categories>
  </entry>
  <entry>
    <title>UI components 完整案例</title>
    <url>/ui-components-%E5%AE%8C%E6%95%B4%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a><a href="#%E9%A2%98%E5%A4%96%E8%AF%9D"></a>题外话</h2><p>目前 <a href="https://devdocs.magento.com/guides/v2.2/ui_comp_guide/bk-ui_comps.html">Magento 2 官网上关于 UI components 的介绍文档</a> 依然不够实用，如果要实践还是要依靠社区内容，以及自己参考 Magento 2 自带的模块。 之前发布了两篇关于 UI components 的文章，一篇是 Alan Storm 的 <a href="/alan_magento_2_introducing_ui_components/">Magento 2 的 UI Components 介绍（翻译）</a>，另一篇是 <a href="/how-to-create-admin-grid-in-magento-2/">How to Create Admin Grid in Magento 2</a>，但这篇文章只用到了 Listing component ，没有继续下去，完成完整的增删改查。此外，该文章末尾的参考文档，其实是很有参考价值的，博主深挖到了文档对应 github 地址。 文档：<a href="https://www.mageplaza.com/magento-2-module-development/create-admin-grid-magento-2.html">How to Create Admin Grid in Magento 2</a> 代码：<a href="https://github.com/mageplaza/magento-2-sample-module">mageplaza&#x2F;magento-2-sample-module</a> 上面的模块基于 Magento 2.1 ，使用了 ui component 的 listng component ，但是 form 部分是用的是 layout 方式而不是 component 方式。ui components 的 xml 写法 2.1 和 2.2 有一些差别，但是 2.2 兼容 2.1 的写法。 比如 2.1.7 中 <code>vendor\magento\module-customer\view\base\ui_component\customer_form.xml</code> 中的写法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dataSource name=&quot;customer_form_data_source&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;dataProvider&quot; xsi:type=&quot;configurableObject&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Magento\Customer\Model\Customer\DataProvider&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;customer_form_data_source&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;entity_id&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;id&lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;submit_url&quot; xsi:type=&quot;url&quot; path=&quot;customer/index/save&quot;/&gt;</span><br><span class="line">                &lt;item name=&quot;validate_url&quot; xsi:type=&quot;url&quot; path=&quot;customer/index/validate&quot;/&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/provider&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure>

<p>在 2.2.0 版本中是这样的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dataSource name=&quot;customer_form_data_source&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/provider&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;settings&gt;</span><br><span class="line">        &lt;validateUrl path=&quot;customer/index/validate&quot;/&gt;</span><br><span class="line">        &lt;submitUrl path=&quot;customer/index/save&quot;/&gt;</span><br><span class="line">    &lt;/settings&gt;</span><br><span class="line">    &lt;dataProvider class=&quot;Magento\Customer\Model\Customer\DataProvider&quot; name=&quot;customer_form_data_source&quot;&gt;</span><br><span class="line">        &lt;settings&gt;</span><br><span class="line">            &lt;requestFieldName&gt;id&lt;/requestFieldName&gt;</span><br><span class="line">            &lt;primaryFieldName&gt;entity_id&lt;/primaryFieldName&gt;</span><br><span class="line">        &lt;/settings&gt;</span><br><span class="line">    &lt;/dataProvider&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure>

<p>该模块在 2.2.0 版本上 di：compile 的时候会报错，主要是因为 2.2.0 中类的变动，后面还会提到，但不影响执行和研究。总的来说，是一个很好的例子，有兴趣的童鞋可以继续研究。 本文中项目的出发点是使用 UI components 完成一个完整的增删改查。和参考文档不同的是，form 部分用的是 form component 。 具体的功能点如下：</p>
<ul>
<li>ui listing 的展示、筛选</li>
<li>单个记录的增加（form component）</li>
<li>单个记录的修改（form component）</li>
<li>单个记录的删除</li>
<li>批量删除</li>
<li>ui listing 的行内批量修改</li>
</ul>
<p><code>Magento_Ui</code> 模块中的 <code>readme.md</code> 是这样介绍的： The Magento\Ui module introduces a set of common UI components, which could be used and configured via layout XML files. 他是为了统一 UI ，希望可以通过 layout xml 来进行配置和使用。但目前看来模块还够不稳定。</p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a><a href="#%E5%AE%9E%E8%B7%B5"></a>实践</h2><h3 id="创建一个模块"><a href="#创建一个模块" class="headerlink" title="创建一个模块"></a><a href="#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E6%A8%A1%E5%9D%97"></a>创建一个模块</h3><p>创建模块 <code>ThankIT_UIcomponents</code> ThankIT\UIcomponents\registration.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">\Magento\Framework\Component\ComponentRegistrar::register(</span><br><span class="line">    \Magento\Framework\Component\ComponentRegistrar::MODULE,</span><br><span class="line">    &#x27;ThankIT_UIcomponents&#x27;,</span><br><span class="line">    __DIR__</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\etc\module.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Module/etc/module.xsd&quot;&gt;</span><br><span class="line">    &lt;module name=&quot;ThankIT_UIcomponents&quot; setup_version=&quot;1.0.0&quot; /&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h3 id="创建数据表和-model-等"><a href="#创建数据表和-model-等" class="headerlink" title="创建数据表和 model 等"></a><a href="#%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E8%A1%A8%E5%92%8C-model-%E7%AD%89"></a>创建数据表和 model 等</h3><p>ThankIT\UIcomponents\Setup\InstallSchema.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Setup;</span><br><span class="line"></span><br><span class="line">class InstallSchema implements \Magento\Framework\Setup\InstallSchemaInterface</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * install tables</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Setup\SchemaSetupInterface $setup</span><br><span class="line">     * @param \Magento\Framework\Setup\ModuleContextInterface $context</span><br><span class="line">     * @return void</span><br><span class="line">     * @SuppressWarnings(PHPMD.ExcessiveMethodLength)</span><br><span class="line">     */</span><br><span class="line">    public function install(</span><br><span class="line">        \Magento\Framework\Setup\SchemaSetupInterface $setup,</span><br><span class="line">        \Magento\Framework\Setup\ModuleContextInterface $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $installer = $setup;</span><br><span class="line">        $installer-&gt;startSetup();</span><br><span class="line">        if (!$installer-&gt;tableExists(&#x27;thankit_uicomponents_post&#x27;)) &#123;</span><br><span class="line">            $table = $installer-&gt;getConnection()-&gt;newTable(</span><br><span class="line">                $installer-&gt;getTable(&#x27;thankit_uicomponents_post&#x27;)</span><br><span class="line">            )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;post_id&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_INTEGER,</span><br><span class="line">                    null,</span><br><span class="line">                    [</span><br><span class="line">                        &#x27;identity&#x27; =&gt; true,</span><br><span class="line">                        &#x27;nullable&#x27; =&gt; false,</span><br><span class="line">                        &#x27;primary&#x27;  =&gt; true,</span><br><span class="line">                        &#x27;unsigned&#x27; =&gt; true,</span><br><span class="line">                    ],</span><br><span class="line">                    &#x27;Post ID&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;name&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    255,</span><br><span class="line">                    [&#x27;nullable =&gt; false&#x27;],</span><br><span class="line">                    &#x27;Post Name&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;url_key&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    255,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post URL Key&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;post_content&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    &#x27;64k&#x27;,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Post Content&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;tags&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    255,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Tags&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;status&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_INTEGER,</span><br><span class="line">                    1,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Status&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;featured_image&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    255,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Featured Image&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;sample_country_selection&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    3,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Sample Country Selection&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;sample_upload_file&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    255,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Sample File&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;sample_multiselect&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TEXT,</span><br><span class="line">                    &#x27;64k&#x27;,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Sample Multiselect&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;created_at&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TIMESTAMP,</span><br><span class="line">                    null,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Created At&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;addColumn(</span><br><span class="line">                    &#x27;updated_at&#x27;,</span><br><span class="line">                    \Magento\Framework\DB\Ddl\Table::TYPE_TIMESTAMP,</span><br><span class="line">                    null,</span><br><span class="line">                    [],</span><br><span class="line">                    &#x27;Post Updated At&#x27;</span><br><span class="line">                )</span><br><span class="line">                -&gt;setComment(&#x27;Post Table&#x27;);</span><br><span class="line">            $installer-&gt;getConnection()-&gt;createTable($table);</span><br><span class="line">            $installer-&gt;getConnection()-&gt;addIndex(</span><br><span class="line">                $installer-&gt;getTable(&#x27;thankit_uicomponents_post&#x27;),</span><br><span class="line">                $setup-&gt;getIdxName(</span><br><span class="line">                    $installer-&gt;getTable(&#x27;thankit_uicomponents_post&#x27;),</span><br><span class="line">                    [&#x27;name&#x27;, &#x27;url_key&#x27;, &#x27;post_content&#x27;, &#x27;tags&#x27;, &#x27;featured_image&#x27;, &#x27;sample_upload_file&#x27;],</span><br><span class="line">                    \Magento\Framework\DB\Adapter\AdapterInterface::INDEX_TYPE_FULLTEXT</span><br><span class="line">                ),</span><br><span class="line">                [&#x27;name&#x27;, &#x27;url_key&#x27;, &#x27;post_content&#x27;, &#x27;tags&#x27;, &#x27;featured_image&#x27;, &#x27;sample_upload_file&#x27;],</span><br><span class="line">                \Magento\Framework\DB\Adapter\AdapterInterface::INDEX_TYPE_FULLTEXT</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        $installer-&gt;endSetup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Model\Post.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Model;</span><br><span class="line">class Post extends \Magento\Framework\Model\AbstractModel</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize resource model</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;ThankIT\UIcomponents\Model\ResourceModel\Post&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Model\ResourceModel\Post.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Model\ResourceModel;</span><br><span class="line"></span><br><span class="line">class Post extends \Magento\Framework\Model\ResourceModel\Db\AbstractDb</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Date model</span><br><span class="line">     *</span><br><span class="line">     * @var \Magento\Framework\Stdlib\DateTime\DateTime</span><br><span class="line">     */</span><br><span class="line">    protected $_date;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Stdlib\DateTime\DateTime $date</span><br><span class="line">     * @param \Magento\Framework\Model\ResourceModel\Db\Context $context</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\Stdlib\DateTime\DateTime $date,</span><br><span class="line">        \Magento\Framework\Model\ResourceModel\Db\Context $context</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;_date = $date;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Initialize resource model</span><br><span class="line">     *</span><br><span class="line">     * @return void</span><br><span class="line">     */</span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;thankit_uicomponents_post&#x27;, &#x27;post_id&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * before save callback</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\Model\AbstractModel\Mageplaza\HelloWorld\Model\Post $object</span><br><span class="line">     * @return $this</span><br><span class="line">     */</span><br><span class="line">    protected function _beforeSave(\Magento\Framework\Model\AbstractModel $object)</span><br><span class="line">    &#123;</span><br><span class="line">        $object-&gt;setUpdatedAt($this-&gt;_date-&gt;date());</span><br><span class="line">        if ($object-&gt;isObjectNew()) &#123;</span><br><span class="line">            $object-&gt;setCreatedAt($this-&gt;_date-&gt;date());</span><br><span class="line">        &#125;</span><br><span class="line">        return parent::_beforeSave($object);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Model\ResourceModel\Post\Collection.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Model\ResourceModel\Post;</span><br><span class="line"></span><br><span class="line">class Collection extends \Magento\Framework\Model\ResourceModel\Db\Collection\AbstractCollection</span><br><span class="line">&#123;</span><br><span class="line">    // 这个很有意思，本来应该取到 Model\ResourceModel\Post 中设置的值</span><br><span class="line">    // 如果这里不设置，那么 massDelete 中 filter 中 getIdFieldName 为空</span><br><span class="line">    // 所以这里加上了，但是为啥呢？</span><br><span class="line">    protected $_idFieldName = &#x27;post_id&#x27;;</span><br><span class="line"></span><br><span class="line">    protected function _construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_init(&#x27;ThankIT\UIcomponents\Model\Post&#x27;, &#x27;ThankIT\UIcomponents\Model\ResourceModel\Post&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="后台入口"><a href="#后台入口" class="headerlink" title="后台入口"></a><a href="#%E5%90%8E%E5%8F%B0%E5%85%A5%E5%8F%A3"></a>后台入口</h3><p>ThankIT\UIcomponents\etc\adminhtml\menu.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Backend:etc/menu.xsd&quot;&gt;</span><br><span class="line">    &lt;menu&gt;</span><br><span class="line">       &lt;add id=&quot;ThankIT_UIcomponents::posts&quot; title=&quot;ThankIT&quot; module=&quot;ThankIT_UIcomponents&quot; sortOrder=&quot;51&quot; resource=&quot;ThankIT_UIcomponents::posts&quot;/&gt;</span><br><span class="line">       &lt;add id=&quot;ThankIT_UIcomponents::post&quot; title=&quot;Posts&quot; module=&quot;ThankIT_UIcomponents&quot; sortOrder=&quot;10&quot; action=&quot;thankit_uicomponent/post/index&quot; resource=&quot;ThankIT_UIcomponents::post&quot; parent=&quot;ThankIT_UIcomponents::posts&quot;/&gt;</span><br><span class="line">    &lt;/menu&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\etc\adminntml\routes.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../lib/internal/Magento/Framework/App/etc/routes.xsd&quot;&gt;</span><br><span class="line">    &lt;router id=&quot;admin&quot;&gt;</span><br><span class="line">        &lt;route id=&quot;thankit_uicomponent&quot; frontName=&quot;thankit_uicomponent&quot;&gt;</span><br><span class="line">            &lt;module name=&quot;ThankIT_UIcomponents&quot; after=&quot;Magento_Ui&quot;/&gt;</span><br><span class="line">        &lt;/route&gt;</span><br><span class="line">    &lt;/router&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\etc\acl.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:framework:Acl/etc/acl.xsd&quot;&gt;</span><br><span class="line">     &lt;acl&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;resource id=&quot;Magento_Backend::admin&quot;&gt;</span><br><span class="line">                &lt;resource id=&quot;ThankIT_UIcomponents::posts&quot; title=&quot;ThankIT&quot; sortOrder=&quot;51&quot;&gt;</span><br><span class="line">                    &lt;resource id=&quot;ThankIT_UIcomponents::post&quot; title=&quot;Posts&quot; sortOrder=&quot;10&quot;/&gt;</span><br><span class="line">                &lt;/resource&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/acl&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<h3 id="grid-的实现"><a href="#grid-的实现" class="headerlink" title="grid 的实现"></a><a href="#grid-%E7%9A%84%E5%AE%9E%E7%8E%B0"></a>grid 的实现</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-grid.gif" alt="admin grid 效果"> ThankIT\UIcomponents\Controller\Adminhtml\Post\Index.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class Index extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $page = $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">        // 如果没有下面这句，title 是 Magento Admin ，active menu 正常</span><br><span class="line">        // 如果下面这句的 id 不存在，则 active menu 不正常 title 还是 Magento Admin</span><br><span class="line">        $page-&gt;setActiveMenu(&#x27;ThankIT_UIcomponents::post&#x27;);</span><br><span class="line">        // title 替换成 Posts</span><br><span class="line">        $page-&gt;getConfig()-&gt;getTitle()-&gt;prepend((__(&#x27;Posts&#x27;)));</span><br><span class="line"></span><br><span class="line">        // class: Magento\Backend\Model\View\Result\Page</span><br><span class="line">        // addBreadcrumb($label, $title, $link = null)</span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;ThankIT&#x27;), __(&#x27;ThankIT&#x27;));</span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;Hello World&#x27;), __(&#x27;Manage Blogs&#x27;));</span><br><span class="line">        return $page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function _isAllowed()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_authorization-&gt;isAllowed(static::ADMIN_RESOURCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;layout&#x2F;thankit_uicomponent_post_index.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;uiComponent name=&quot;thankit_uicomponents_post_listing&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;ui_component&#x2F;thankit_uicomponents_post_listing.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing_data_source&lt;/item&gt;</span><br><span class="line">            &lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing_data_source&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;spinner&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_columns&lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Post&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponent/post/new&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;dataSource name=&quot;thankit_uicomponents_post_listing_data_source&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;dataProvider&quot; xsi:type=&quot;configurableObject&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;Magento\Framework\View\Element\UiComponent\DataProvider\DataProvider&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing_data_source&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;primaryFieldName&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;requestFieldName&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;update_url&quot; xsi:type=&quot;url&quot; path=&quot;mui/index/render&quot;/&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/provider&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">    &lt;container name=&quot;listing_top&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;ui/grid/toolbar&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;stickyTmpl&quot; xsi:type=&quot;string&quot;&gt;ui/grid/sticky/toolbar&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;bookmark name=&quot;bookmarks&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/bookmark&gt;</span><br><span class="line">        &lt;component name=&quot;columns_controls&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;columnsData&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/controls/columns&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;displayArea&quot; xsi:type=&quot;string&quot;&gt;dataGridActions&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/component&gt;</span><br><span class="line">        &lt;exportButton name=&quot;export_button&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/exportButton&gt;</span><br><span class="line">        &lt;filterSearch name=&quot;fulltext&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing_data_source&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;chipsProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top.listing_filters_chips&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.search&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/filterSearch&gt;</span><br><span class="line">        &lt;filters name=&quot;listing_filters&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;columnsProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.filters&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;templates&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;filters&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;select&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/element/ui-select&lt;/item&gt;</span><br><span class="line">                                &lt;item name=&quot;template&quot; xsi:type=&quot;string&quot;&gt;ui/grid/filters/elements/ui-select&lt;/item&gt;</span><br><span class="line">                            &lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;childDefaults&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top.listing_filters&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;imports&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;visible&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.$&#123; $.index &#125;:visible&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;observers&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;column&quot; xsi:type=&quot;string&quot;&gt;column&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/filters&gt;</span><br><span class="line">        &lt;massaction name=&quot;listing_massaction&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;action name=&quot;delete&quot;&gt;</span><br><span class="line">                &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;url&quot; xsi:type=&quot;url&quot; path=&quot;thankit_uicomponent/post/massDelete&quot;/&gt;</span><br><span class="line">                        &lt;item name=&quot;confirm&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;title&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete Posts&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;message&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Are you sure you wan&#x27;t to delete selected Posts?&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/action&gt;</span><br><span class="line">            &lt;action name=&quot;edit&quot;&gt;</span><br><span class="line">                &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;edit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Edit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;callback&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns_editor&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;editSelected&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/action&gt;</span><br><span class="line">        &lt;/massaction&gt;</span><br><span class="line">        &lt;paging name=&quot;listing_paging&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;storageConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top.bookmarks&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;namespace&quot; xsi:type=&quot;string&quot;&gt;current.paging&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/paging&gt;</span><br><span class="line">    &lt;/container&gt;</span><br><span class="line"></span><br><span class="line">    &lt;columns name=&quot;thankit_uicomponents_post_columns&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;editorConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;enabled&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;clientConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;saveUrl&quot; xsi:type=&quot;url&quot; path=&quot;thankit_uicomponent/post/inlineEdit&quot;/&gt;</span><br><span class="line">                        &lt;item name=&quot;validateBeforeSave&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;!-- column clickable --&gt;</span><br><span class="line">                &lt;item name=&quot;childDefaults&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;fieldAction&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns_editor&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;startEdit&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;params&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;0&quot; xsi:type=&quot;string&quot;&gt;$&#123; $.$data.rowIndex &#125;&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;1&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;selectionsColumn name=&quot;ids&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeEnabled&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeDefaultWidth&quot; xsi:type=&quot;string&quot;&gt;55&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/selectionsColumn&gt;</span><br><span class="line">        &lt;column name=&quot;post_id&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;textRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;sorting&quot; xsi:type=&quot;string&quot;&gt;asc&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;ID&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;name&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;editor&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;editorType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;validation&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;required-entry&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Name&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;url_key&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;URL Key&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;tags&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Tags&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;status&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;options&quot; xsi:type=&quot;object&quot;&gt;Magento\Config\Model\Config\Source\Yesno&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Status&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;sample_country_selection&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;options&quot; xsi:type=&quot;object&quot;&gt;Magento\Config\Model\Config\Source\Locale\Country&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;visible&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Sample Country Selection&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/select&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;select&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;created_at&quot; class=&quot;Magento\Ui\Component\Listing\Columns\Date&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;dateRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Created&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;column name=&quot;updated_at&quot; class=&quot;Magento\Ui\Component\Listing\Columns\Date&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;dateRange&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/columns/date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;dataType&quot; xsi:type=&quot;string&quot;&gt;date&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Modified&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/column&gt;</span><br><span class="line">        &lt;actionsColumn name=&quot;actions&quot; class=&quot;ThankIT\UIcomponents\Ui\Component\Listing\Column\PostActions&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeEnabled&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeDefaultWidth&quot; xsi:type=&quot;string&quot;&gt;107&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/actionsColumn&gt;</span><br><span class="line">    &lt;/columns&gt;</span><br><span class="line"></span><br><span class="line">    &lt;container name=&quot;sticky&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/grid/sticky/sticky&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;toolbarProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.listing_top&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;listingProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/container&gt;</span><br><span class="line">&lt;/listing&gt;</span><br></pre></td></tr></table></figure>

<p>这个文件是关键。 这里用的 2.1 的写法，和 <a href="https://www.hellomagento2.com/how-to-create-admin-grid-in-magento-2/#%E5%88%9B%E5%BB%BA-component-layout-file">How to Create Admin Grid in Magento 2</a> 是一样的。 这里声明了一个 dataSource <code>thankit_uicomponents_post_listing_data_source</code> 我们需要在 di.xml 创建它 ThankIT\UIcomponents\etc\di.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;config xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../lib/internal/Magento/Framework/ObjectManager/etc/config.xsd&quot;&gt;</span><br><span class="line">    &lt;type name=&quot;Magento\Framework\View\Element\UiComponent\DataProvider\CollectionFactory&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;collections&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;thankit_uicomponents_post_listing_data_source&quot; xsi:type=&quot;string&quot;&gt;ThankIT\UIcomponents\Model\ResourceModel\Post\Grid\Collection&lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">    &lt;type name=&quot;ThankIT\UIcomponents\Model\ResourceModel\Post\Grid\Collection&quot;&gt;</span><br><span class="line">        &lt;arguments&gt;</span><br><span class="line">            &lt;argument name=&quot;mainTable&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post&lt;/argument&gt;</span><br><span class="line">            &lt;argument name=&quot;resourceModel&quot; xsi:type=&quot;string&quot;&gt;ThankIT\UIcomponents\Model\ResourceModel\Post&lt;/argument&gt;</span><br><span class="line">        &lt;/arguments&gt;</span><br><span class="line">    &lt;/type&gt;</span><br><span class="line">&lt;/config&gt;</span><br></pre></td></tr></table></figure>

<p>这里和之前文章中的相比，有一些简化。 ThankIT\UIcomponents\Model\ResourceModel\Post\Grid\Collection.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Model\ResourceModel\Post\Grid;</span><br><span class="line"></span><br><span class="line">use Magento\Framework\Data\Collection\Db\FetchStrategyInterface as FetchStrategy;</span><br><span class="line">use Magento\Framework\Data\Collection\EntityFactoryInterface as EntityFactory;</span><br><span class="line">use Magento\Framework\Event\ManagerInterface as EventManager;</span><br><span class="line">use Psr\Log\LoggerInterface as Logger;</span><br><span class="line"></span><br><span class="line">class Collection extends \Magento\Framework\View\Element\UiComponent\DataProvider\SearchResult</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(</span><br><span class="line">        EntityFactory $entityFactory,</span><br><span class="line">        Logger $logger,</span><br><span class="line">        FetchStrategy $fetchStrategy,</span><br><span class="line">        EventManager $eventManager,</span><br><span class="line">        $mainTable,</span><br><span class="line">        $resourceModel</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($entityFactory, $logger, $fetchStrategy, $eventManager, $mainTable, $resourceModel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 collection 和之前不一样，继承的是不同的父类，这也是之前代码在 2.2 上 di：compile 会报错的原因。</p>
<h3 id="add-new"><a href="#add-new" class="headerlink" title="add new"></a><a href="#add-new"></a>add new</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-add.gif" alt="新增"> 在 ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;layout&#x2F;thankit_uicomponent_post_index.xml 中，关键代码如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;listing xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;add&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;add&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Add New Post&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponent/post/new&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br></pre></td></tr></table></figure>

<p>这里我们给了 url <code>thankit_uicomponent/post/new</code> 下面创建它的 controller 和对应的 layout ThankIT\UIcomponents\Controller\Adminhtml\Post\NewAction.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class NewAction extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $resultPageFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $page = $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line"></span><br><span class="line">        $page-&gt;setActiveMenu(&#x27;ThankIT_UIcomponents::post&#x27;);</span><br><span class="line"></span><br><span class="line">        $page-&gt;getConfig()-&gt;getTitle()-&gt;prepend((__(&#x27;New Post&#x27;)));</span><br><span class="line"></span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;ThankIT&#x27;), __(&#x27;ThankIT&#x27;));</span><br><span class="line">        $page-&gt;addBreadcrumb(__(&#x27;Hello World&#x27;), __(&#x27;Manage Blogs&#x27;));</span><br><span class="line">        return $page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要用 <code>NewAction.php</code> 作为名字。 ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;layout&#x2F;thankit_uicomponent_post_new.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;uiComponent name=&quot;thankit_uicomponents_post_form&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>关键的地方来了，这里用的是 2.2 的写法，参考了 <code>vendor\magento\module-catalog\view\adminhtml\ui_component\category_form.xml</code> 的用法。 ThankIT\UIcomponents\view\adminhtml\ui_component\thankit_uicomponents_post_form.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--</span><br><span class="line">/**</span><br><span class="line"> * Copyright © Magento, Inc. All rights reserved.</span><br><span class="line"> * See COPYING.txt for license details.</span><br><span class="line"> */</span><br><span class="line">--&gt;</span><br><span class="line">&lt;form xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;urn:magento:module:Magento_Ui:etc/ui_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_form.post_form_data_source&lt;/item&gt;</span><br><span class="line">            &lt;item name=&quot;deps&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_form.post_form_data_source&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;layout&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;tabs&lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">        &lt;item name=&quot;buttons&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;save&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;save&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Save Post&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;primary&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponent/post/save&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">            &lt;item name=&quot;back&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;name&quot; xsi:type=&quot;string&quot;&gt;back&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Back&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;class&quot; xsi:type=&quot;string&quot;&gt;back&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;url&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponent/post/index&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    &lt;dataSource name=&quot;post_form_data_source&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;js_config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;component&quot; xsi:type=&quot;string&quot;&gt;Magento_Ui/js/form/provider&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">        &lt;settings&gt;</span><br><span class="line">            &lt;submitUrl path=&quot;thankit_uicomponent/post/save&quot;/&gt;</span><br><span class="line">        &lt;/settings&gt;</span><br><span class="line">        &lt;dataProvider class=&quot;ThankIT\UIcomponents\Model\Post\DataProvider&quot; name=&quot;post_form_data_source&quot;&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;requestFieldName&gt;post_id&lt;/requestFieldName&gt;</span><br><span class="line">                &lt;primaryFieldName&gt;post_id&lt;/primaryFieldName&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/dataProvider&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">    &lt;fieldset name=&quot;post_form&quot;&gt;</span><br><span class="line">        &lt;settings&gt;</span><br><span class="line">            &lt;label translate=&quot;true&quot;&gt;Post Information&lt;/label&gt;</span><br><span class="line">            &lt;collapsible&gt;false&lt;/collapsible&gt;</span><br><span class="line">        &lt;/settings&gt;</span><br><span class="line">        &lt;field name=&quot;post_id&quot; formElement=&quot;hidden&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Post ID&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;name&quot; formElement=&quot;input&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Name&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;validation&gt;</span><br><span class="line">                    &lt;rule name=&quot;required-entry&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/rule&gt;</span><br><span class="line">                &lt;/validation&gt;</span><br><span class="line">                &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;url_key&quot; formElement=&quot;input&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;url key&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;post_content&quot; formElement=&quot;wysiwyg&quot; template=&quot;ui/form/field&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;post content&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;formElements&gt;</span><br><span class="line">                &lt;wysiwyg&gt;</span><br><span class="line">                    &lt;settings&gt;</span><br><span class="line">                        &lt;rows&gt;8&lt;/rows&gt;</span><br><span class="line">                        &lt;wysiwyg&gt;true&lt;/wysiwyg&gt;</span><br><span class="line">                    &lt;/settings&gt;</span><br><span class="line">                &lt;/wysiwyg&gt;</span><br><span class="line">            &lt;/formElements&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;featured_image&quot; formElement=&quot;fileUploader&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;elementTmpl&gt;ui/form/element/uploader/uploader&lt;/elementTmpl&gt;</span><br><span class="line">                &lt;dataType&gt;string&lt;/dataType&gt;</span><br><span class="line">                &lt;label translate=&quot;true&quot;&gt;Featured Image&lt;/label&gt;</span><br><span class="line">                &lt;visible&gt;true&lt;/visible&gt;</span><br><span class="line">                &lt;required&gt;false&lt;/required&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">            &lt;formElements&gt;</span><br><span class="line">                &lt;fileUploader&gt;</span><br><span class="line">                    &lt;settings&gt;</span><br><span class="line">                        &lt;required&gt;false&lt;/required&gt;</span><br><span class="line">                        &lt;uploaderConfig&gt;</span><br><span class="line">                            &lt;param xsi:type=&quot;url&quot; name=&quot;url&quot; path=&quot;catalog/category_image/upload&quot;/&gt;</span><br><span class="line">                        &lt;/uploaderConfig&gt;</span><br><span class="line">                        &lt;previewTmpl&gt;Magento_Catalog/image-preview&lt;/previewTmpl&gt;</span><br><span class="line">                    &lt;/settings&gt;</span><br><span class="line">                &lt;/fileUploader&gt;</span><br><span class="line">            &lt;/formElements&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;tags&quot; formElement=&quot;input&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;tags&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;status&quot; formElement=&quot;select&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;status&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;dataType&gt;number&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">            &lt;formElements&gt;</span><br><span class="line">                &lt;select&gt;</span><br><span class="line">                    &lt;settings&gt;</span><br><span class="line">                        &lt;options class=&quot;Magento\Config\Model\Config\Source\Yesno&quot;/&gt;</span><br><span class="line">                    &lt;/settings&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">            &lt;/formElements&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">        &lt;field name=&quot;sample_country_selection&quot; component=&quot;Magento_Ui/js/form/element/country&quot; formElement=&quot;select&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;source&quot; xsi:type=&quot;string&quot;&gt;post&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;sample country selection&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;dataType&gt;text&lt;/dataType&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">            &lt;formElements&gt;</span><br><span class="line">                &lt;select&gt;</span><br><span class="line">                    &lt;settings&gt;</span><br><span class="line">                        &lt;options class=&quot;\Magento\Config\Model\Config\Source\Locale\Country&quot;/&gt;</span><br><span class="line">                    &lt;/settings&gt;</span><br><span class="line">                &lt;/select&gt;</span><br><span class="line">            &lt;/formElements&gt;</span><br><span class="line">        &lt;/field&gt;</span><br><span class="line">    &lt;/fieldset&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure>

<p>这里面声明了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dataProvider class=&quot;ThankIT\UIcomponents\Model\Post\DataProvider&quot; name=&quot;post_form_data_source&quot;&gt;</span><br><span class="line">            &lt;settings&gt;</span><br><span class="line">                &lt;requestFieldName&gt;post_id&lt;/requestFieldName&gt;</span><br><span class="line">                &lt;primaryFieldName&gt;post_id&lt;/primaryFieldName&gt;</span><br><span class="line">            &lt;/settings&gt;</span><br><span class="line">&lt;/dataProvider&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Model\Post\DataProvider.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Model\Post;</span><br><span class="line"></span><br><span class="line">use ThankIT\UIcomponents\Model\ResourceModel\Post\CollectionFactory as postCollectionFactory;</span><br><span class="line"></span><br><span class="line">class DataProvider extends \Magento\Ui\DataProvider\AbstractDataProvider</span><br><span class="line">&#123;</span><br><span class="line">    protected $request;</span><br><span class="line"></span><br><span class="line">    protected $loadedData;</span><br><span class="line"></span><br><span class="line">    public function __construct(</span><br><span class="line">        postCollectionFactory $postCollectionFactory,</span><br><span class="line">        \Magento\Framework\App\RequestInterface $request,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory,</span><br><span class="line">        $name,</span><br><span class="line">        $primaryFieldName,</span><br><span class="line">        $requestFieldName,</span><br><span class="line">        array $meta = [],</span><br><span class="line">        array $data = []</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;collection  = $postCollectionFactory-&gt;create();</span><br><span class="line">        $this-&gt;postFactory = $postFactory;</span><br><span class="line">        $this-&gt;request     = $request;</span><br><span class="line">        parent::__construct($name, $primaryFieldName, $requestFieldName, $meta, $data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getData()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        $requestId = $this-&gt;request-&gt;getParam($this-&gt;requestFieldName);</span><br><span class="line"></span><br><span class="line">        if (isset($this-&gt;loadedData)) &#123;</span><br><span class="line">            return $this-&gt;loadedData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $post = $this-&gt;postFactory-&gt;create();</span><br><span class="line">        // 如果是 update 操作</span><br><span class="line">        if ($requestId) &#123;</span><br><span class="line">            $post-&gt;load($requestId);</span><br><span class="line">            if (!$post-&gt;getId()) &#123;</span><br><span class="line">                throw NoSuchEntityException::singleField(&#x27;id&#x27;, $requestId);</span><br><span class="line">            &#125;</span><br><span class="line">            $postData = $post-&gt;getData();</span><br><span class="line"></span><br><span class="line">            $this-&gt;loadedData[$requestId][&#x27;post_form&#x27;] = $postData;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            // new 操作</span><br><span class="line">            $this-&gt;loadedData = [];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $this-&gt;loadedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里遇到过的错误类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP Fatal error: Method Magento\Ui\TemplateEngine\Xhtml\Result::__toString() must not throw an exception, caught Error: Call to a member function addFieldToFilter() on null in /data/sites/project_name/vendor/magento/module-ui/Component/Wrapper/UiComponent.php on line 0</span><br></pre></td></tr></table></figure>

<p>通过：<code>$this-&gt;collection = $postCollectionFactory-&gt;create();</code> 解决。 <code>getData()</code> 可以先不要管，返回 <code>[]</code> 也行。</p>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a><a href="#%E4%BF%9D%E5%AD%98"></a>保存</h3><p>ThankIT\UIcomponents\view\adminhtml\ui_component\thankit_uicomponents_post_form.xml 中的保存按钮路径是 <code>thankit_uicomponent/post/save</code> ThankIT\UIcomponents\Controller\Adminhtml\Post\Save.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class Save extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;postFactory = $postFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $data = $this-&gt;getRequest()-&gt;getParam(&#x27;post_form&#x27;);</span><br><span class="line"></span><br><span class="line">        // var_dump($data);</span><br><span class="line">        // return;</span><br><span class="line"></span><br><span class="line">        $post = $this-&gt;postFactory-&gt;create();</span><br><span class="line"></span><br><span class="line">        $postId = $data[&#x27;post_id&#x27;];</span><br><span class="line">        unset($data[&#x27;post_id&#x27;]);</span><br><span class="line"></span><br><span class="line">        // 如果是 update</span><br><span class="line">        if ($postId) &#123;</span><br><span class="line">            $post-&gt;load($postId);</span><br><span class="line"></span><br><span class="line">            // setData 的用法有点怪 在他前面的都被 overwrite 了</span><br><span class="line">            // 如果没有 post_id 则会新增</span><br><span class="line">            $post-&gt;setData($data);</span><br><span class="line">            $post-&gt;setData(&#x27;post_id&#x27;, $postId);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            $post-&gt;setData($data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // todo 处理图片</span><br><span class="line">        if (array_key_exists(&#x27;featured_image&#x27;, $data)) &#123;</span><br><span class="line">            $featuredImage = $data[&#x27;featured_image&#x27;];</span><br><span class="line">            unset($data[&#x27;featured_image&#x27;]);</span><br><span class="line"></span><br><span class="line">            // $post-&gt;setFeaturedImage($featuredImage[0][&#x27;url&#x27;]);</span><br><span class="line">        &#125;</span><br><span class="line">        $post-&gt;save();</span><br><span class="line"></span><br><span class="line">        $this-&gt;_redirect(&#x27;*/*/index&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个仅是参考，所写的考虑也不周全，尤其是图片处理部分，根本就没有处理。</p>
<h3 id="update"><a href="#update" class="headerlink" title="update"></a><a href="#update"></a>update</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-update.gif" alt="修改"> 其实 update 和新增使用的是相同的 form ,相同的 save ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;ui_component&#x2F;thankit_uicomponents_post_listing.xml 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;actionsColumn name=&quot;actions&quot; class=&quot;ThankIT\UIcomponents\Ui\Component\Listing\Column\PostActions&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeEnabled&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;resizeDefaultWidth&quot; xsi:type=&quot;string&quot;&gt;107&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">&lt;/actionsColumn&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Ui\Component\Listing\Column\PostActions.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Ui\Component\Listing\Column;</span><br><span class="line"></span><br><span class="line">class PostActions extends \Magento\Ui\Component\Listing\Columns\Column</span><br><span class="line">&#123;</span><br><span class="line">    /**</span><br><span class="line">     * Url path  to edit</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    const URL_PATH_EDIT = &#x27;thankit_uicomponent/post/edit&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Url path  to delete</span><br><span class="line">     *</span><br><span class="line">     * @var string</span><br><span class="line">     */</span><br><span class="line">    const URL_PATH_DELETE = &#x27;thankit_uicomponent/post/delete&#x27;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * URL builder</span><br><span class="line">     *</span><br><span class="line">     * @var \Magento\Framework\UrlInterface</span><br><span class="line">     */</span><br><span class="line">    protected $_urlBuilder;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * constructor</span><br><span class="line">     *</span><br><span class="line">     * @param \Magento\Framework\UrlInterface $urlBuilder</span><br><span class="line">     * @param \Magento\Framework\View\Element\UiComponent\ContextInterface $context</span><br><span class="line">     * @param \Magento\Framework\View\Element\UiComponentFactory $uiComponentFactory</span><br><span class="line">     * @param array $components</span><br><span class="line">     * @param array $data</span><br><span class="line">     */</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Framework\UrlInterface $urlBuilder,</span><br><span class="line">        \Magento\Framework\View\Element\UiComponent\ContextInterface $context,</span><br><span class="line">        \Magento\Framework\View\Element\UiComponentFactory $uiComponentFactory,</span><br><span class="line">        array $components = [],</span><br><span class="line">        array $data = []</span><br><span class="line">    ) &#123;</span><br><span class="line">        $this-&gt;_urlBuilder = $urlBuilder;</span><br><span class="line">        parent::__construct($context, $uiComponentFactory, $components, $data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Prepare Data Source</span><br><span class="line">     *</span><br><span class="line">     * @param array $dataSource</span><br><span class="line">     * @return array</span><br><span class="line">     */</span><br><span class="line">    public function prepareDataSource(array $dataSource)</span><br><span class="line">    &#123;</span><br><span class="line">        if (isset($dataSource[&#x27;data&#x27;][&#x27;items&#x27;])) &#123;</span><br><span class="line">            foreach ($dataSource[&#x27;data&#x27;][&#x27;items&#x27;] as &amp;$item) &#123;</span><br><span class="line">                if (isset($item[&#x27;post_id&#x27;])) &#123;</span><br><span class="line">                    $item[$this-&gt;getData(&#x27;name&#x27;)] = [</span><br><span class="line">                        &#x27;edit&#x27;   =&gt; [</span><br><span class="line">                            &#x27;href&#x27;  =&gt; $this-&gt;_urlBuilder-&gt;getUrl(</span><br><span class="line">                                static::URL_PATH_EDIT,</span><br><span class="line">                                [</span><br><span class="line">                                    &#x27;post_id&#x27; =&gt; $item[&#x27;post_id&#x27;],</span><br><span class="line">                                ]</span><br><span class="line">                            ),</span><br><span class="line">                            &#x27;label&#x27; =&gt; __(&#x27;Edit&#x27;),</span><br><span class="line">                        ],</span><br><span class="line">                        &#x27;delete&#x27; =&gt; [</span><br><span class="line">                            &#x27;href&#x27;    =&gt; $this-&gt;_urlBuilder-&gt;getUrl(</span><br><span class="line">                                static::URL_PATH_DELETE,</span><br><span class="line">                                [</span><br><span class="line">                                    &#x27;post_id&#x27; =&gt; $item[&#x27;post_id&#x27;],</span><br><span class="line">                                ]</span><br><span class="line">                            ),</span><br><span class="line">                            &#x27;label&#x27;   =&gt; __(&#x27;Delete&#x27;),</span><br><span class="line">                            &#x27;confirm&#x27; =&gt; [</span><br><span class="line">                                &#x27;title&#x27;   =&gt; __(&#x27;Delete &quot;$&#123; $.$data.name &#125;&quot;&#x27;),</span><br><span class="line">                                &#x27;message&#x27; =&gt; __(&#x27;Are you sure you wan\&#x27;t to delete the Post &quot;$&#123; $.$data.name &#125;&quot; ?&#x27;),</span><br><span class="line">                            ],</span><br><span class="line">                        ],</span><br><span class="line">                    ];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以我们的 edit 对应的 url 是 <code>thankit_uicomponent/post/edit</code> delete 对应的 url 是 <code>thankit_uicomponent/post/delete</code> 并且他们都会将 <code>post_id</code> 传递过去。 ThankIT\UIcomponents\Controller\Adminhtml\Post\Edit.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class Edit extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;postFactory       = $postFactory;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        // $data = $this-&gt;getRequest()-&gt;getParams();</span><br><span class="line">        $page = $this-&gt;resultPageFactory-&gt;create();</span><br><span class="line">        $page-&gt;setActiveMenu(&#x27;ThankIT_UIcomponents::post&#x27;);</span><br><span class="line">        // title 替换成 Posts</span><br><span class="line">        $page-&gt;getConfig()-&gt;getTitle()-&gt;prepend((__(&#x27;Edit Post&#x27;)));</span><br><span class="line">        return $page;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;layout&#x2F;thankit_uicomponent_post_edit.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;page xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:noNamespaceSchemaLocation=&quot;../../../../../../../lib/internal/Magento/Framework/View/Layout/etc/page_configuration.xsd&quot;&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;referenceContainer name=&quot;content&quot;&gt;</span><br><span class="line">            &lt;uiComponent name=&quot;thankit_uicomponents_post_form&quot;/&gt;</span><br><span class="line">        &lt;/referenceContainer&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/page&gt;</span><br></pre></td></tr></table></figure>

<p>而 <code>thankit_uicomponents_post_form</code> 我们之前已经声明过了。</p>
<h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a><a href="#delete"></a>delete</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-delete.gif" alt="删除"> ThankIT\UIcomponents\Controller\Adminhtml\Post\Delete.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class Delete extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;postFactory       = $postFactory;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        $id = $this-&gt;getRequest()-&gt;getParam(&#x27;post_id&#x27;);</span><br><span class="line">        if ($id) &#123;</span><br><span class="line">            $post = $this-&gt;postFactory-&gt;create();</span><br><span class="line">            $post-&gt;load($id);</span><br><span class="line">            $post-&gt;delete();</span><br><span class="line">            $this-&gt;messageManager-&gt;addSuccess(__(&#x27;The Post has been deleted.&#x27;));</span><br><span class="line">        &#125;</span><br><span class="line">        $this-&gt;_redirect(&#x27;*/*/index&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a><a href="#%E6%89%B9%E9%87%8F%E5%88%A0%E9%99%A4"></a>批量删除</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-massDelete.gif" alt="批量删除"> ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;ui_component&#x2F;thankit_uicomponents_post_listing.xml 中定义批量删除对应的 url 为 <code>thankit_uicomponent/post/massDelete</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;massaction name=&quot;listing_massaction&quot;&gt;</span><br><span class="line">            &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/argument&gt;</span><br><span class="line">            &lt;action name=&quot;delete&quot;&gt;</span><br><span class="line">                &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;url&quot; xsi:type=&quot;url&quot; path=&quot;thankit_uicomponent/post/massDelete&quot;/&gt;</span><br><span class="line">                        &lt;item name=&quot;confirm&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                            &lt;item name=&quot;title&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Delete Posts&lt;/item&gt;</span><br><span class="line">                            &lt;item name=&quot;message&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Are you sure you wan&#x27;t to delete selected Posts?&lt;/item&gt;</span><br><span class="line">                        &lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/argument&gt;</span><br><span class="line">            &lt;/action&gt;</span><br><span class="line">             ...</span><br><span class="line">&lt;/massaction&gt;</span><br></pre></td></tr></table></figure>

<p>ThankIT\UIcomponents\Controller\Adminhtml\Post\MassDelete.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class MassDelete extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory,</span><br><span class="line">        \Magento\Ui\Component\MassAction\Filter $filter,</span><br><span class="line">        \ThankIT\UIcomponents\Model\ResourceModel\Post\CollectionFactory $collectionFactory,</span><br><span class="line">        \Magento\Framework\View\Result\PageFactory $resultPageFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;postFactory       = $postFactory;</span><br><span class="line">        $this-&gt;resultPageFactory = $resultPageFactory;</span><br><span class="line">        $this-&gt;collectionFactory = $collectionFactory;</span><br><span class="line">        $this-&gt;filter            = $filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        // $data = $this-&gt;getRequest()-&gt;getParam(&#x27;selected&#x27;);</span><br><span class="line">        // var_dump($data);</span><br><span class="line"></span><br><span class="line">        $collection     = $this-&gt;filter-&gt;getCollection($this-&gt;collectionFactory-&gt;create());</span><br><span class="line">        $collectionSize = $collection-&gt;getSize();</span><br><span class="line"></span><br><span class="line">        foreach ($collection as $page) &#123;</span><br><span class="line">            $page-&gt;delete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $this-&gt;messageManager-&gt;addSuccess(__(&#x27;A total of %1 record(s) have been deleted.&#x27;, $collectionSize));</span><br><span class="line"></span><br><span class="line">        $this-&gt;_redirect(&#x27;*/*/index&#x27;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="批量修改"><a href="#批量修改" class="headerlink" title="批量修改"></a><a href="#%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9"></a>批量修改</h3><p><img src="/wp-content/uploads/2017/11/uicomponents-edit-inline.gif" alt="批量行内修改"> ThankIT&#x2F;UIcomponents&#x2F;view&#x2F;adminhtml&#x2F;ui_component&#x2F;thankit_uicomponents_post_listing.xml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;container name=&quot;listing_top&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;massaction name=&quot;listing_massaction&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;action name=&quot;edit&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;type&quot; xsi:type=&quot;string&quot;&gt;edit&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Edit&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;callback&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns_editor&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;editSelected&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">    &lt;/action&gt;</span><br><span class="line">&lt;/massaction&gt;</span><br><span class="line">&lt;/container&gt;</span><br><span class="line">&lt;columns name=&quot;thankit_uicomponents_post_columns&quot;&gt;</span><br><span class="line">    &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">        &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;editorConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;selectProvider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns.ids&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;enabled&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;indexField&quot; xsi:type=&quot;string&quot;&gt;post_id&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;clientConfig&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;saveUrl&quot; xsi:type=&quot;url&quot; path=&quot;thankit_uicomponent/post/inlineEdit&quot;/&gt;</span><br><span class="line">                    &lt;item name=&quot;validateBeforeSave&quot; xsi:type=&quot;boolean&quot;&gt;false&lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">            &lt;!-- column clickable --&gt;</span><br><span class="line">            &lt;item name=&quot;childDefaults&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;fieldAction&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;provider&quot; xsi:type=&quot;string&quot;&gt;thankit_uicomponents_post_listing.thankit_uicomponents_post_listing.thankit_uicomponents_post_columns_editor&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;target&quot; xsi:type=&quot;string&quot;&gt;startEdit&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;params&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;0&quot; xsi:type=&quot;string&quot;&gt;$&#123; $.$data.rowIndex &#125;&lt;/item&gt;</span><br><span class="line">                        &lt;item name=&quot;1&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/item&gt;</span><br><span class="line">    &lt;/argument&gt;</span><br><span class="line">    ....</span><br><span class="line">    &lt;column name=&quot;name&quot;&gt;</span><br><span class="line">        &lt;argument name=&quot;data&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">            &lt;item name=&quot;config&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                &lt;item name=&quot;filter&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;editor&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                    &lt;item name=&quot;editorType&quot; xsi:type=&quot;string&quot;&gt;text&lt;/item&gt;</span><br><span class="line">                    &lt;item name=&quot;validation&quot; xsi:type=&quot;array&quot;&gt;</span><br><span class="line">                        &lt;item name=&quot;required-entry&quot; xsi:type=&quot;boolean&quot;&gt;true&lt;/item&gt;</span><br><span class="line">                    &lt;/item&gt;</span><br><span class="line">                &lt;/item&gt;</span><br><span class="line">                &lt;item name=&quot;label&quot; xsi:type=&quot;string&quot; translate=&quot;true&quot;&gt;Name&lt;/item&gt;</span><br><span class="line">            &lt;/item&gt;</span><br><span class="line">        &lt;/argument&gt;</span><br><span class="line">   &lt;/column&gt;</span><br><span class="line">   ....</span><br><span class="line">&lt;/columns&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>批量修改的 url 是 <code>thankit_uicomponent/post/inlineEdit</code> 这是一个 ajax 请求。 ThankIT\UIcomponents\Controller\Adminhtml\Post\InlineEdit.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">namespace ThankIT\UIcomponents\Controller\Adminhtml\Post;</span><br><span class="line"></span><br><span class="line">class InlineEdit extends \Magento\Backend\App\Action</span><br><span class="line">&#123;</span><br><span class="line">    const ADMIN_RESOURCE = &#x27;ThankIT_UIcomponents::post&#x27;;</span><br><span class="line">    protected $postFactory;</span><br><span class="line">    public function __construct(</span><br><span class="line">        \Magento\Backend\App\Action\Context $context,</span><br><span class="line">        \ThankIT\UIcomponents\Model\PostFactory $postFactory,</span><br><span class="line">        \Magento\Framework\Controller\Result\JsonFactory $jsonFactory</span><br><span class="line">    ) &#123;</span><br><span class="line">        parent::__construct($context);</span><br><span class="line">        $this-&gt;postFactory = $postFactory;</span><br><span class="line">        $this-&gt;jsonFactory = $jsonFactory;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function execute()</span><br><span class="line">    &#123;</span><br><span class="line">        // 请求类似 http://192.168.0.251/M220/admin/thankit_uicomponent/post/inlineEdit/key/5fae8c36c82d28ec5e605d8787782dce781512bb4f1f7f14520f00c5cfb5ab53/?isAjax=true</span><br><span class="line">        $resultJson = $this-&gt;jsonFactory-&gt;create();</span><br><span class="line">        $error      = false;</span><br><span class="line">        $messages   = [];</span><br><span class="line">        $postItems  = $this-&gt;getRequest()-&gt;getParam(&#x27;items&#x27;, []);</span><br><span class="line">        if (!($this-&gt;getRequest()-&gt;getParam(&#x27;isAjax&#x27;) &amp;&amp; count($postItems))) &#123;</span><br><span class="line">            return $resultJson-&gt;setData([</span><br><span class="line">                &#x27;messages&#x27; =&gt; [__(&#x27;Please correct the data sent.&#x27;)],</span><br><span class="line">                &#x27;error&#x27;    =&gt; true,</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">        foreach (array_keys($postItems) as $postId) &#123;</span><br><span class="line"></span><br><span class="line">            $post = $this-&gt;postFactory-&gt;create()-&gt;load($postId);</span><br><span class="line">            try &#123;</span><br><span class="line">                $postData = $postItems[$postId]; //todo: handle dates</span><br><span class="line">                $post-&gt;addData($postData);</span><br><span class="line">                $post-&gt;save();</span><br><span class="line">            &#125; catch (\Magento\Framework\Exception\LocalizedException $e) &#123;</span><br><span class="line">                $messages[] = $this-&gt;getErrorWithPostId($post, $e-&gt;getMessage());</span><br><span class="line">                $error      = true;</span><br><span class="line">            &#125; catch (\RuntimeException $e) &#123;</span><br><span class="line">                $messages[] = $this-&gt;getErrorWithPostId($post, $e-&gt;getMessage());</span><br><span class="line">                $error      = true;</span><br><span class="line">            &#125; catch (\Exception $e) &#123;</span><br><span class="line">                $messages[] = $this-&gt;getErrorWithPostId(</span><br><span class="line">                    $post,</span><br><span class="line">                    __(&#x27;Something went wrong while saving the Post.&#x27;)</span><br><span class="line">                );</span><br><span class="line">                $error = true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return $resultJson-&gt;setData([</span><br><span class="line">            &#x27;messages&#x27; =&gt; $messages,</span><br><span class="line">            &#x27;error&#x27;    =&gt; $error,</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected function getErrorWithPostId(\ThankIT\UIcomponents\Model\Post $post, $errorText)</span><br><span class="line">    &#123;</span><br><span class="line">        return &#x27;[Post ID: &#x27; . $post-&gt;getId() . &#x27;] &#x27; . $errorText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>插件开发系列教程</category>
      </categories>
      <tags>
        <tag>magento 2 ui components</tag>
        <tag>推荐</tag>
        <tag>CRUD</tag>
      </tags>
  </entry>
  <entry>
    <title>A puma at large</title>
    <url>/a-puma-at-large/</url>
    <content><![CDATA[<h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a><a href="#new-words-and-expressions"></a>New words and expressions</h2><h3 id="spot"><a href="#spot" class="headerlink" title="spot"></a><a href="#spot"></a>spot</h3><p>a big red spot 斑点</p>
<p>a spot on one’s reputation 污点</p>
<p>A leopard won’t change its spots. 本性难移</p>
<p>spot of sth 有一点</p>
<p>a spot of bother 有点小麻烦</p>
<p>You seem to be having a spot of bother with your car, can I help?</p>
<p>a scenic spot 旅游景点</p>
<p>A great many of scenic spots are being spoilt by the ill-behaved tourists.</p>
<blockquote>
<p>spoil spoiled spoilt 破坏</p>
<p>ill-behaved 品行不端的</p>
</blockquote>
<p>The Middle East is a hot spot. 热点地区</p>
<p>on the spot 在现场 到现场</p>
<p>Four days after setting out, while the Titanic was sailing across the icy waters of the North Atlantic, a huge iceberg was suddenly spotted by a look-out.</p>
<p><strong>看过的再写，听过的再说</strong></p>
<p>Ten minutes after calling 911, a police car arrived on the spot.</p>
<p>Dr. Marcy and Dr. Butler also spotted the first “family” of three planets. 发现</p>
<p>Chick Webb spotted her in an amateur competition when she was sixteen. 发现 看到</p>
<p>He had spotted a tiny bottle at the bottom of my case and he pounced on it with delight. 发现</p>
<h3 id="see-x2F-find-x2F-observe"><a href="#see-x2F-find-x2F-observe" class="headerlink" title="see &#x2F; find &#x2F; observe"></a><a href="#see-/-find-/-observe"></a>see &#x2F; find &#x2F; observe</h3><p>recognize sb. as … 认出某人是某某某</p>
<p>In the torchlight, he caught sight of a figure whom he immediately recognized as Bill Wilkins, our local grocer.</p>
<blockquote>
<p>figure 模糊的人影</p>
</blockquote>
<p>identify 识别身份</p>
<p>ID card &gt; identity card</p>
<p>UFO &gt; unidentified flying object</p>
<h3 id="evidence"><a href="#evidence" class="headerlink" title="evidence"></a><a href="#evidence"></a>evidence</h3><p>n. 证据 不可数</p>
<p>a piece of evidence</p>
<p>evident 清晰的</p>
<p>self-evident 不言自明的</p>
<p>All truth passes through three stages. First, it is ridiculed. Second, it is violently opposed. Third, it is accepted as being self-evident.</p>
<p>— Arthur Schopenhauer</p>
<blockquote>
<p>ridicule 嘲笑</p>
<p>be violently opposed 被激烈反对</p>
</blockquote>
<p>Declaration of Independence</p>
<p>We hold these truths to be self-evident, that all men are created equal, that they are endowed by the Creator with certain unalienable rights, that among these are life, liberty, and the pursuit of happiness.</p>
<p>― Thomas Jefferson</p>
<blockquote>
<p>declaration</p>
<p>endow 天生具有</p>
<p>unalienable 不可剥夺的</p>
</blockquote>
<h3 id="court"><a href="#court" class="headerlink" title="court"></a><a href="#court"></a>court</h3><p>go to court 打官司</p>
<p>go to the court (去法庭，未必打官司)</p>
<p>settle sth. out of court 私了</p>
<h3 id="accuse-sb-of-doing-sth"><a href="#accuse-sb-of-doing-sth" class="headerlink" title="accuse sb. of (doing) sth."></a><a href="#accuse-sb.-of-(doing)-sth."></a>accuse sb. of (doing) sth.</h3><p>I accused him of stealing my sheep. 气愤地指责&#x2F;指控</p>
<p>charge sb. with (doing) sth. 同义 气愤地指责&#x2F;指控</p>
<p>I charged him with stealing my sheep.</p>
<p>judge 法官</p>
<p>jury 陪审团</p>
<p>testimony 证言证词</p>
<p>witness 目击者 （注意发音 t 憋住不发出来）</p>
<h3 id="loaf-on-the-job"><a href="#loaf-on-the-job" class="headerlink" title="loaf on the job"></a><a href="#loaf-on-the-job"></a>loaf on the job</h3><p>磨洋工</p>
<h3 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a><a href="#accumulate"></a>accumulate</h3><p>v. 积累，积聚</p>
<p>accumulate knowledge &#x2F; possessions</p>
<p>I accumulated a large vocabulary.</p>
<p>amass 比 accumulate 还正式些 含义相同</p>
<p>amass a fortune</p>
<p>People tend to amass possessions.</p>
<p>pile up</p>
<p>Meanwhile, the traffic piled up behind.</p>
<p>从不同的地方收集相似的东西</p>
<p>collect collect stamps</p>
<p>gather gather crops</p>
<p>hoard 囤积 略带贬义色彩</p>
<p>Shenzhen real estate developers hoard large amounts of land.</p>
<blockquote>
<p>a large（great,good）amount of ＋不可数名词,谓语动词一般用单数；<br>但（huge,great,good）amounts of ＋ 不可数名词,作主语时,谓语动词要用复数</p>
</blockquote>
<h3 id="oblige"><a href="#oblige" class="headerlink" title="oblige"></a><a href="#oblige"></a>oblige</h3><p>obligation 责任 义务</p>
<p>be &#x2F; feel obliged to do （处于责任义务）感到必须做某事</p>
<p>Dear Mr. Wang,</p>
<p>Thank you very much for having offered me such a golden opportunity to work as an editor for Designs &amp; Fashions, a best-selling magazine renowned for its extraordinary quality and taste. I was thrilled by the news and have tried my utmost, but after two months’ work I feel obliged to resign, which is truly a tough decision for me.</p>
<blockquote>
<p>renowned 享有声誉的<br>try my utmost utmost adj 最远的；极度的&#x2F; n 最大可能；极限</p>
</blockquote>
<p>be &#x2F; feel compelled to do 外部压力不得不做某事</p>
<p>President Nixon felt compelled to resign.</p>
<p>be &#x2F; feel impelled to do 迫于内心的压力（比如良知责任）不得不做某事</p>
<p>He felt impelled to point out that they were making a dangerous mistake.</p>
<h3 id="human-being"><a href="#human-being" class="headerlink" title="human being"></a><a href="#human-being"></a>human being</h3><p>可数 a human being &#x2F; human beings</p>
<p>man 表示人类 不可数</p>
<p>mankind 书面语 不可数</p>
<p>humankind 书面语 不可数</p>
<p>human race 文学 不可数</p>
<p>humanity 表示人类、人性 不可数 humanities 表示人文学科</p>
<p>a crime against humanity 反人类罪 （注意发音）</p>
<p>alien being 外星人</p>
<p>intelligent being 智慧生物</p>
<p>To be, or not to be: that is the question. — Hamlet</p>
<p>I think therefore I am. — René Descartes</p>
<h3 id="corner"><a href="#corner" class="headerlink" title="corner"></a><a href="#corner"></a>corner</h3><p>使走投无路，使陷入困境</p>
<p>Don’t corner me! 别逼我！</p>
<p>A cornered beast will do something desperate. 穷寇莫追&#x2F;狗急跳墙</p>
<p>on &#x2F; in &#x2F; at &#x2F; around the corner</p>
<p>上方&#x2F;里面&#x2F;拐角 路口拐角&#x2F;本意指在角落附近，多用于表示某个重要的时间快到了</p>
<p>My birthday is just around the corner.</p>
<h3 id="convince"><a href="#convince" class="headerlink" title="convince"></a><a href="#convince"></a>convince</h3><p>convince sb. of sth. 使……信服 (be convinced of)</p>
<p>He failed to convince the jury of his innocence.</p>
<p>cure sb. of sth. 治愈疾病</p>
<p>The doctor cured him of his lung cancer.</p>
<p>inform sb. of sth. 通知 sb. sth.</p>
<p>My ex-wife informed me of her marriage</p>
<p>remind sb. of sth. 使 sb. 回忆起 sth.</p>
<p>You remind me of one of my classmates.</p>
<p>rob sb. of sth. 抢劫 sb. 的 sth.</p>
<p>The robber robbed me of my wallet.</p>
<p>deprive sb. of sth. 剥夺 sb 的什么权力</p>
<p>Some criminals were deprived of political rights.</p>
<p>assure sb. of sth. 使某人对某事放心</p>
<p>The dealer assured me of its quality.</p>
<h3 id="somehow"><a href="#somehow" class="headerlink" title="somehow"></a><a href="#somehow"></a>somehow</h3><p>不知怎么搞地</p>
<p>And I couldn’t remember what it felt like when I could not walk down the street without holding her hand.</p>
<p>I mean she was the same woman I fell in love with, she hadn’t changed. But somehow everything’s different. We’ve lost something along the way.</p>
<p>somewhat 有一些</p>
<p>He was somewhat hungry.</p>
<p>He was somewhat embarrassed.</p>
<p>somewhere 某个地方</p>
<p>I’ve lost my wallet somewhere around here.</p>
<h3 id="disturb"><a href="#disturb" class="headerlink" title="disturb"></a><a href="#disturb"></a>disturb</h3><p>v. 打扰，令人不安</p>
<p>Do not disturb.</p>
<p>I hope I’m not disturbing you.</p>
<p>Sorry to disturb you, but …</p>
<p>Sorry to disturb you, but I really need your help.</p>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a><a href="#text"></a>Text</h2><h3 id="at-large"><a href="#at-large" class="headerlink" title="at large"></a><a href="#at-large"></a>at large</h3><p>在逃的，未被捕获的</p>
<p>a puma (which was)at large</p>
<p>关系代词 which 做主语，其后紧跟 be 动词，可以省略</p>
<p>Pumas are large, cat-like animals found in America (正确)</p>
<p>a prisoner &#x2F; suspect at large</p>
<blockquote>
<p>suspect 注意动词念 &#x2F;ə&#x2F; 名词念 &#x2F;ʌ&#x2F;</p>
</blockquote>
<p>The disease is still at large.</p>
<h3 id="cat-like"><a href="#cat-like" class="headerlink" title="cat-like"></a><a href="#cat-like"></a>cat-like</h3><p>bear-like animals</p>
<p>lady-like behavior</p>
<p>child-like simplicity</p>
<p>an angel-like girl</p>
<p>crystal-like eyes</p>
<p>flu-like symptoms</p>
<p>As is shown in the picture, there is a cobweb-like structure with separate compartments packed in it.</p>
<p>Foxes and farmers have never got on well. These small dog-like animals have long been accused of killing farm animals. (CET-4)</p>
<h3 id="be-found-in-…"><a href="#be-found-in-…" class="headerlink" title="be found in …"></a><a href="#be-found-in-%E2%80%A6"></a>be found in …</h3><p>产于 存在于某处</p>
<p>Many plant and animal species are found only in the rainforests. 翻译为产于，不要翻成发现于某处，时态不正确</p>
<p>Vitamin C is found in citrus fruit.</p>
<h3 id="造句"><a href="#造句" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>Pumas are large, cat-like animals which are found in America.</p>
<p>造句: 大熊猫 (giant panda) 是一种大型的，类似于熊的动物，产于中国四川省。</p>
<p>Giant pandas are large, bear-like animals which are found in Sichuan province, China.</p>
<h3 id="reports-came-into-…"><a href="#reports-came-into-…" class="headerlink" title="reports came into …"></a><a href="#reports-came-into-..."></a>reports came into …</h3><p>He came into the classroom.</p>
<p>However, a new type of humor, which stems largely from the US, has recently come into fashion.</p>
<p>The dealer told him that it had just come in, but that he could not be bothered to open it.</p>
<p>无灵主语 &#x2F; 物称主语 (inanimate subject)</p>
<p>都用人做主语，会导致句子结构单一</p>
<p>I thought of a good idea.</p>
<p>A good idea came into my mind.</p>
<p>A good idea flashed into my mind.</p>
<p>He went to the town on business</p>
<p>Business took him to the town.</p>
<p>A warm and sunny Sunday found my whole family going for an outing at the beach.</p>
<h3 id="同位语从句和定于从句的区别"><a href="#同位语从句和定于从句的区别" class="headerlink" title="同位语从句和定于从句的区别"></a><a href="#%E5%90%8C%E4%BD%8D%E8%AF%AD%E4%BB%8E%E5%8F%A5%E5%92%8C%E5%AE%9A%E4%BA%8E%E4%BB%8E%E5%8F%A5%E7%9A%84%E5%8C%BA%E5%88%AB"></a>同位语从句和定于从句的区别</h3><p>定义</p>
<p>形式</p>
<p>例句</p>
<p>同位语从句</p>
<p>解释前面名词的具体内容</p>
<p>同位语从句中的“that”仅起到连接符号的作用，不充当语法成分；</p>
<p>The proposal that John should be dismissed is unacceptable.</p>
<p>定语从句</p>
<p>起到后置定语的作用， 常译为“……的”</p>
<p>而定语从 句中的“that”是关系代词，在从句中充当主语、宾语或表语。</p>
<p>The proposal that John put forward is unacceptable.</p>
<h3 id="句式平衡"><a href="#句式平衡" class="headerlink" title="句式平衡"></a><a href="#%E5%8F%A5%E5%BC%8F%E5%B9%B3%E8%A1%A1"></a>句式平衡</h3><p>孔雀型 头小尾巴长</p>
<p>We hold these truths to be self-evident, that all men are created equal, that they are endowed by the Creator with certain unalienable rights, that among these are life, liberty, and the pursuit of happiness.</p>
<p>― Thomas Jefferson</p>
<h3 id="同义词替换"><a href="#同义词替换" class="headerlink" title="同义词替换"></a><a href="#%E5%90%8C%E4%B9%89%E8%AF%8D%E6%9B%BF%E6%8D%A2"></a>同义词替换</h3><p>写作中除非写排比句，否则减少重复</p>
<p>had been seen &#x2F; found &#x2F; observed …</p>
<h3 id="in-x2F-on-x2F-to-the-south-of-…"><a href="#in-x2F-on-x2F-to-the-south-of-…" class="headerlink" title="in &#x2F; on &#x2F; to the south of …"></a><a href="#in-/-on-/-to-the-south-of-%E2%80%A6"></a>in &#x2F; on &#x2F; to the south of …</h3><p>Shanghai is in the south of China. 在内部</p>
<p>Vietnam is on the south of China. 在外面且挨着</p>
<p>Indonesia is to the south of China. 在外面且隔着一些距离</p>
<p>100 kilometers south of Xi’an 只有 to 可以省略</p>
<h3 id="take-…-seriously"><a href="#take-…-seriously" class="headerlink" title="take … seriously"></a><a href="#take-%E2%80%A6-seriously"></a>take … seriously</h3><p>take … seriously 重视</p>
<p>take … lightly 轻视</p>
<h3 id="造句-1"><a href="#造句-1" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>When reports came into London Zoo that a wild puma had been spotted forty-five miles south of London, they were not taken seriously.</p>
<p>造句：当消息 (news) 传到了国家博物馆 (the national museum)，说是在西安以南 100 公里 处发现了一座古墓 (an ancient tomb) 的时候，这则消息(不可数)受到了重视。</p>
<p>When news came into the national museum that an acient tomb had been found 100 kilometers south of Xi’an, it was taken sericously.</p>
<h3 id="investigate"><a href="#investigate" class="headerlink" title="investigate"></a><a href="#investigate"></a>investigate</h3><p>调查</p>
<p>investigate the market</p>
<p>investigate the case</p>
<p>the FBI: the Federal Bureau of Investigation</p>
<h3 id="引导原因状语从句"><a href="#引导原因状语从句" class="headerlink" title="引导原因状语从句"></a><a href="#%E5%BC%95%E5%AF%BC%E5%8E%9F%E5%9B%A0%E7%8A%B6%E8%AF%AD%E4%BB%8E%E5%8F%A5"></a>引导原因状语从句</h3><p>because 表示强烈的因果，回答 why ，语气强烈</p>
<p>since &#x2F; as 语气略弱 位置随意</p>
<p>for &#x2F; in that 补充说明，一般不放句首</p>
<p>now (that) 跟现在时，不可以用过去时，位置随意</p>
<p>Now that a tunnel has been built through the mountains, the Pass is less dangerous, but each year, the dogs are still sent out into the snow whenever a traveller is in difficulty.</p>
<h3 id="非谓语动词作后置定语修饰中心名词"><a href="#非谓语动词作后置定语修饰中心名词" class="headerlink" title="非谓语动词作后置定语修饰中心名词"></a><a href="#%E9%9D%9E%E8%B0%93%E8%AF%AD%E5%8A%A8%E8%AF%8D%E4%BD%9C%E5%90%8E%E7%BD%AE%E5%AE%9A%E8%AF%AD%E4%BF%AE%E9%A5%B0%E4%B8%AD%E5%BF%83%E5%90%8D%E8%AF%8D"></a>非谓语动词作后置定语修饰中心名词</h3><p>… descriptions given by people …</p>
<p>非谓语动词 doing &#x2F; done &#x2F; to to</p>
<p>make descriptions</p>
<p>descriptions made by people</p>
<p>The hunt for the puma began in a small village where a woman picking blackberries saw a large cat only five yards away from her.</p>
<p>John had a very good day and put his wallet containing ₤3,000 into the microwave oven for safekeeping.</p>
<p>For hundreds of years, St. Bernard dogs have saved the lives of travellers crossing the dangerous Pass.</p>
<p>novels written by Lu Xun</p>
<p>movies directed by Zhang Yimou</p>
<p>The man leaning against the wall named George is my brother</p>
<h3 id="claim-to-have-done-…"><a href="#claim-to-have-done-…" class="headerlink" title="claim to have done …"></a><a href="#claim-to-have-done-%E2%80%A6"></a>claim to have done …</h3><p>动词不定式的完成时，在声称前先发生了看到美洲狮的动作</p>
<p>claim to do …</p>
<p>So far, no organization has claimed to be responsible for the accident.</p>
<p>Everyone went to the funeral, for the ‘ghost’ was none other than Eric Cox, a third brother who was supposed to have died as a young man.</p>
<p>When I was a boy, my grandfather told me how a German taxi driver, Franz Bussman, found a brother who was thought to have been killed twenty years before.</p>
<h3 id="extraordinarily"><a href="#extraordinarily" class="headerlink" title="extraordinarily"></a><a href="#extraordinarily"></a>extraordinarily</h3><p>多音节副词 重音后移</p>
<p>primarily</p>
<p>absolutely</p>
<p>necessarily</p>
<p>temporarily</p>
<p>were extraordinarily similar</p>
<p>were particularly alike</p>
<p>had a lot in common</p>
<p>had considerable commonalities 正式 相当多地共同之处</p>
<p>—well, I saw the ad on the back of the bus stop today. And, uh… though it was not exactly like looking in the mirror, you can’t deny that there is a certain commonality in our visages.</p>
<p>—I guess we do look a little bit alike.</p>
<h3 id="造句-2"><a href="#造句-2" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>However, as the evidence began to accumulate, experts from the Zoo felt obliged to investigate, for the descriptions given by people who claimed to have seen the puma were extraordinarily similar.</p>
<p>造句: 随着病例 (case) 开始慢慢增多, 医学专家们 (specialist) 觉得必须要调查了,因为得了这种病的人的症状 (symptom) 特别地相似。</p>
<p>As the cases began to accumulate, specialists felt obliged to investigate, for the symptoms of people who had caught the disease were extraordinarily similar.</p>
<h3 id="hunt-for-…"><a href="#hunt-for-…" class="headerlink" title="hunt for …"></a><a href="#hunt-for-..."></a>hunt for …</h3><p>搜寻 打猎</p>
<p>I’m hunting for a job now.</p>
<p>The hunt for a job will begin tomorrow.</p>
<p>关于“的”</p>
<p>the winter in America</p>
<p>the entrance to the parking lot</p>
<p>a witness to the accident</p>
<p>a longing for love</p>
<p>the reason for the disaster</p>
<h3 id="only"><a href="#only" class="headerlink" title="only"></a><a href="#only"></a>only</h3><p>just …</p>
<p>merely …</p>
<p>no more than … 只有</p>
<h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm"></a><a href="#confirm"></a>confirm</h3><p>证实说</p>
<p>President Hu Jintao confirmed that he would visit the United States next month.</p>
<h3 id="prove-to-be-adj-x2F-n"><a href="#prove-to-be-adj-x2F-n" class="headerlink" title="prove (to be) + adj. &#x2F; n."></a><a href="#prove-(to-be)-+-adj.-/-n."></a>prove (to be) + adj. &#x2F; n.</h3><p>被证明是……</p>
<p>His injury proved (to be) fatal.</p>
<p>The operation proved (to be) a success.</p>
<p>turn out to be + adj. &#x2F; n. 原来是……</p>
<p>When the archaeologists reconstructed the fragments, they were amazed to find that the goddess turned out to be a very modern-looking woman.</p>
<h3 id="疑问词-ever-whenever-wherever-whoever-whichever-whatever-…"><a href="#疑问词-ever-whenever-wherever-whoever-whichever-whatever-…" class="headerlink" title="疑问词 + ever (whenever, wherever, whoever, whichever, whatever …)"></a><a href="#%E7%96%91%E9%97%AE%E8%AF%8D-+-ever-(whenever,-wherever,-whoever,-whichever,-whatever-...)"></a>疑问词 + ever (whenever, wherever, whoever, whichever, whatever …)</h3><p>1.表示“无论……” 引导让步状语从句。</p>
<p>= no matter + 疑问词</p>
<p>No matter where it went, …</p>
<p>No matter where you live, you would find it difficult not to laugh at, say, Charlie Chaplin’s early films.</p>
<p>2.表示 “到底……” 用于疑问句中。</p>
<p>‘Whatever are you doing up here Bill?’ asked the vicar in surprise.</p>
<p>Wherever did you go yesterday?</p>
<p>When ever am I going to see you again? 可以分开</p>
<p>When will you ever learn? 你什么时候才能学会？</p>
<p>等价于 Why do you keep on making the same mistakes?</p>
<h3 id="a-trail-of"><a href="#a-trail-of" class="headerlink" title="a trail of"></a><a href="#a-trail-of"></a>a trail of</h3><p>Wherever he went, he left a trail of … behind him.</p>
<p>Wherever he went, he left a trail of unpaid bills behind him.</p>
<p>Wherever he went, he left a trail of broken hearts behind him.</p>
<h3 id="造句-3"><a href="#造句-3" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>人们对下岗工人的生活状况越来越关注了。</p>
<p>People have paid more and more attention to the condition of the laid-off workers.</p>
<p>Increasing attention has been paid to the condition of the laid-off workers.</p>
<p>重点突出 主次分明 简洁明了</p>
<h3 id="fur"><a href="#fur" class="headerlink" title="fur"></a><a href="#fur"></a>fur</h3><p>a fur coat</p>
<p>fur and feather 飞禽走兽 （借代修辞 用特征来指代拥有特征的东西）</p>
<p>fin, fur and feather 各种动物 （头韵）</p>
<p>The crown should not yield to the cross. 王权不应屈服于神权</p>
<p>巾帼不让须眉</p>
<p>过尽千帆皆不是 斜晖脉脉水悠悠</p>
<h3 id="关于说"><a href="#关于说" class="headerlink" title="关于说"></a><a href="#%E5%85%B3%E4%BA%8E%E8%AF%B4"></a>关于说</h3><p>complain of &#x2F; about sth. 抱怨说</p>
<p>claim 声称说</p>
<p>confirm 证实说</p>
<p>Then I added with a smile, ‘It’s a strange mixture I make myself.’… 微笑着补充说</p>
<p>as one of them put it ‘ate like kings’. 措辞说</p>
<p>The writer stated that Rastus was in safe hands … 申明说</p>
<h3 id="在-…-途中"><a href="#在-…-途中" class="headerlink" title="在 … 途中"></a><a href="#%E5%9C%A8-...-%E9%80%94%E4%B8%AD"></a>在 … 途中</h3><p>on a business trip 在出差途中</p>
<p>on a honeymoon trip 在度蜜月的途中</p>
<p>on a journey 在旅途中</p>
<p>on a voyage 在航行途中</p>
<p>on an expedition 远征&#x2F;考察&#x2F;探险等有目的的途中</p>
<p>on a tour 周游途中</p>
<p>都是用 on 哦</p>
<p>President Xi Jinping is on a five-nation tour.</p>
<h3 id="be-convinced-that-…"><a href="#be-convinced-that-…" class="headerlink" title="be convinced that …"></a><a href="#be-convinced-that-%E2%80%A6"></a>be convinced that …</h3><p>完全相信</p>
<p>convince sb. of sth.</p>
<p>… that 引导的从句不用在介词后面，所以这里去掉了 of</p>
<p>例外的情况：</p>
<p>in that…</p>
<p>except &#x2F; but that …</p>
<p>After telling several of his friends about the theft, Dimitri found out that his neighbour, Aleko, had suddenly acquired a new lamb.</p>
<p>介词后面要跟宾语，该句中的 out 是副词（find it out），不是介词</p>
<h3 id="印刷字体变化-斜体-x2F-大写"><a href="#印刷字体变化-斜体-x2F-大写" class="headerlink" title="印刷字体变化 斜体&#x2F;大写"></a><a href="#%E5%8D%B0%E5%88%B7%E5%AD%97%E4%BD%93%E5%8F%98%E5%8C%96-%E6%96%9C%E4%BD%93/%E5%A4%A7%E5%86%99"></a>印刷字体变化 斜体&#x2F;大写</h3><p>重（四声）读 就行</p>
<p>He was a WOMAN!</p>
<h3 id="must-have-done"><a href="#must-have-done" class="headerlink" title="must have done"></a><a href="#must-have-done"></a>must have done</h3><p>对过去发生的事的肯定的推测</p>
<p>You must have been ill yesterday. You looked so pale.</p>
<p>must do</p>
<p>推测说话时正在发生的事</p>
<p>She knew that it must be the baker.</p>
<p>may &#x2F; might have done 可能是 …</p>
<p>can not &#x2F; could not have done 不可能是 …</p>
<p>You can’t have been ill yesterday. I saw you going shopping with your wife.</p>
<p>The girl asked to see a timetable, feeling sure that her father could not have made such a mistake.</p>
<p>should &#x2F; ought to have done</p>
<p>should not &#x2F; ought not to have done</p>
<p>You should have finished your work yesterday.</p>
<p>I shouldn’t have shouted at you yesterday.</p>
<p>the other day 那天 过去的那天 固定习语</p>
<p>I’ m sorry. I shouldn’t have shout at you the other day.</p>
<h3 id="in-the-possession-of-sb-x2F-in-one’s-possession"><a href="#in-the-possession-of-sb-x2F-in-one’s-possession" class="headerlink" title="in the possession of sb. &#x2F; in one’s possession"></a><a href="#in-the-possession-of-sb.-/-in-one%E2%80%99s-possession"></a>in the possession of sb. &#x2F; in one’s possession</h3><p>归某人所有</p>
<p>sb. be in possession of sth. 某人拥有某物</p>
<p>The book is in my possession.</p>
<p>The book is in the possession of Sam</p>
<p>I’m in possession of the book.</p>
<p>in the charge of sb. &#x2F; in one’s charge</p>
<p>in charge of …</p>
<p>The bookstore is in my charge .</p>
<p>The bookstore is in the charge of Mr Li</p>
<p>I’m in charge of the bookstore.</p>
<h3 id="manage-to-do"><a href="#manage-to-do" class="headerlink" title="manage to do"></a><a href="#manage-to-do"></a>manage to do</h3><p>设法完成了某事</p>
<p>Our vicar is always raising money for one cause or another, but he has never managed to get enough money to have the church clock repaired.</p>
<p>fail to do 没能完成某事</p>
<p>When the journalist again failed to reply, the editor reluctantly published the article as it had originally been written.</p>
<h3 id="It-is-…-to-think-that-…"><a href="#It-is-…-to-think-that-…" class="headerlink" title="It is … to think that …"></a><a href="#it-is-%E2%80%A6-to-think-that-%E2%80%A6"></a>It is … to think that …</h3><p>一想到某事，就 …</p>
<p>It is disturbing to think that a dangerous wild animal is still at large in the quiet countryside.</p>
<p>It is worrying to think that …</p>
<p>It is exciting to think that …</p>
<p>It is comforting to think that …</p>
<p>It is amusing to think that …</p>
<p>It is irritating to think that …</p>
]]></content>
      <categories>
        <category>新概念英语三</category>
      </categories>
  </entry>
  <entry>
    <title>An unknown Goddess</title>
    <url>/an-unknown-goddess/</url>
    <content><![CDATA[<h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a><a href="#new-words-and-expressions"></a>New words and expressions</h2><h3 id="archaeologist-英-x2F-archeologist-美"><a href="#archaeologist-英-x2F-archeologist-美" class="headerlink" title="archaeologist(英) &#x2F; archeologist (美)"></a><a href="#archaeologist(%E8%8B%B1)-/-archeologist-(%E7%BE%8E)"></a>archaeologist(英) &#x2F; archeologist (美)</h3><p>n. 考古学家</p>
<p>archaeology &#x2F; archeology 考古学</p>
<p>“arch(a)” &#x3D; ancient<br>archaic 古代的<br>archaic words<br>archaic civilizations</p>
<p>“(o)logy” &#x3D; to study -ist“人”<br>archaeology archaeologist<br>biology biologist 生物学<br>geology geologist 地质学<br>psychology psychologist 心理学<br>physiology physiologist 生理学<br>anthropology anthropologist 人类学</p>
<h3 id="prosperous"><a href="#prosperous" class="headerlink" title="prosperous"></a><a href="#prosperous"></a>prosperous</h3><p>[‘prɒspərəs] adj.（经济上）繁荣的<br>a prosperous country &#x2F; businessman</p>
<p>prosperity 经济繁荣 不可数<br>economic prosperity</p>
<p>We’ll keep the prosperity and stability of Hong Kong at any cost.</p>
<p>One hundred years later, the Negro lives on a lonely island of poverty in the midst of a vast ocean of material prosperity.</p>
<p>prosper 兴旺 不及物<br>A company can’t prosper without investment.<br>thrive &#x2F; flourish<br>A company can’t thrive &#x2F; flourish without investment.<br>plants that thrive &#x2F; flourish in tropical rainforests 植物枝繁叶茂</p>
<p>a thriving &#x2F; flourishing tourist industry</p>
<h3 id="storey-英-x2F-story-美"><a href="#storey-英-x2F-story-美" class="headerlink" title="storey(英)&#x2F; story(美)"></a><a href="#storey(%E8%8B%B1)/-story(%E7%BE%8E)"></a>storey(英)&#x2F; story(美)</h3><p>n. 楼层<br>storey -&gt; storeys<br>story -&gt; stories</p>
<p>a two-story house 名词作定语 用单数<br>The house is two stories high. 作表语<br>a multi-story parking lot</p>
<p>英式</p>
<p>美式</p>
<p>阁楼</p>
<p>attic</p>
<p>顶层</p>
<p>the top floor</p>
<p>…</p>
<p>…</p>
<p>…</p>
<p>二层</p>
<p>the first floor</p>
<p>the second floor</p>
<p>一层</p>
<p>the ground floor</p>
<p>the first floor</p>
<p>地下室</p>
<p>basement</p>
<h3 id="sacred"><a href="#sacred" class="headerlink" title="sacred"></a><a href="#sacred"></a>sacred</h3><p>adj. 宗教的；神圣的<br>a sacred holiday 宗教节日<br>sacred music 圣乐<br>Mecca is a sacred place. 圣地</p>
<p>Holy<br>Holy Bible<br>holy water<br>a holy war</p>
<p>blessed 神圣的 有福的<br>the Blessed Virgin Mary<br>It is more blessed to give than to receive</p>
<p>divine 上帝的 神的<br>To err is human,to forgive divine. — Alexander Pope 凡人多舛误 唯神能见宥</p>
<h3 id="remains"><a href="#remains" class="headerlink" title="remains"></a><a href="#remains"></a>remains</h3><p>[rɪ’meɪnz] n. 遗物，遗迹，废墟</p>
<p>the remains of a meal<br>the remains of ancient Rome</p>
<p>His remains are buried in the churchyard. 遗体 注意用的复数</p>
<p>the rest of sth.<br>the remainder of sth.<br>the rest of the semester<br>= the remainder of the semester</p>
<p>what is left of sth. 被动<br>what remains of sth. 主动</p>
<p>Only two stray dogs benefited from all this confusion, for they greedily devoured what was left of the cake.</p>
<p>It is recounted of Thomas Carlyle that when he heard of the illness of his friend, Henry Taylor, he went off immediately to visit him, carrying with him in his pocket what remained of a bottle of medicine formerly prescribed for an indisposition of Mrs. Carlyle’s.</p>
<h3 id="classical"><a href="#classical" class="headerlink" title="classical"></a><a href="#classical"></a>classical</h3><p>adj. 古代（希腊和罗马）文化的<br>classical studies 对古代文化的研究</p>
<p>classical music 古典音乐</p>
<p>classic 经典的<br>a classic novel</p>
<p>electric an electric light &#x2F; razor<br>electrical electrical failure 停电</p>
<p>historic a historic moment 有历史意义的时刻<br>historical historical records 历史记录</p>
<p>economic economic policy 经济政策<br>economical an economical car 节约的，节省的，节油车</p>
<p>politic a politic decision 一个有策略的决定<br>political political asylum 政治避难</p>
<h3 id="rest"><a href="#rest" class="headerlink" title="rest"></a><a href="#rest"></a>rest</h3><p>v. 倚放，放置<br>Her elbows rested on the table.<br>She rested her head against a cushion.</p>
<p>rest on &#x2F; upon 建立在 … 的基础上<br>Columbus’ decision to sail west rests on his belief that the world is round.</p>
<p>be based &#x2F; founded on &#x2F; upon<br>depend on &#x2F; upon<br>rely on &#x2F; upon</p>
<p>Don’t always depend on others. You should learn to rely on yourself.</p>
<p>While the quality of legal journalism varies greatly, there is an undue reliance amongst many journalists on interpretations supplied to them by lawyers. While comment and reaction from lawyers may enhance stories, it is preferable for journalists to rely on their own notions of significance and make their own judgments.</p>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a><a href="#text"></a>Text</h2><h3 id="make-a-discovery-of…"><a href="#make-a-discovery-of…" class="headerlink" title="make a discovery (of…)"></a><a href="#make-a-discovery-(of%E2%80%A6)"></a>make a discovery (of…)</h3><p>discover</p>
<p>在英语中，名词占优势地位，更正式、更灵活<br>make an interesting discovery (of …)</p>
<p>use<br>make use of …<br>make the best use of…<br>He made the best use of his talent.</p>
<p>describe<br>make a vivid description of …</p>
<p>investigate<br>make a thorough investigation of …</p>
<p>summarize<br>make a comprehensive summary of …</p>
<p>analyze<br>make a detailed analysis of …</p>
<p>Some time ago, archaeologists made an interesting discovery on the Aegean island of Kea.<br>语句正确，但是这个句子重心变成了 archaeologists 。让重要的内容做主语，突出重点。</p>
<p>A radio message from the mainland had been received by the ship’s captain instructing him to give up the search.</p>
<h3 id="the-city-of-Beijing"><a href="#the-city-of-Beijing" class="headerlink" title="the city of Beijing"></a><a href="#the-city-of-beijing"></a>the city of Beijing</h3><p>of 引出地点的名字<br>the promontory of Ayia Irini<br>the tiny village of Perachora<br>the famous monastery of St. Bernard</p>
<p>the novel of Three Kingdoms<br>the novel entitled Three Kingdoms<br>the movie entitled Da Vinci Code</p>
<p>the man named &#x2F; called Vincent</p>
<h3 id="an-American-team-of-archaeologists"><a href="#an-American-team-of-archaeologists" class="headerlink" title="an American team of archaeologists"></a><a href="#an-american-team-of-archaeologists"></a>an American team of archaeologists</h3><h3 id="位于"><a href="#位于" class="headerlink" title="位于"></a><a href="#%E4%BD%8D%E4%BA%8E"></a>位于</h3><p>be located&#x2F;situated&#x2F;sited</p>
<p>Strange forms stand in gardens, and outside buildings and shops.<br>The Monument to the People’s Heroes stands in the center of Tian’anmen Square.</p>
<p>The house sits&#x2F;stands on top of a hill overlooking the town.（立体感，矗立）</p>
<p>The famous monastery of St. Bernard, which was founded in the 11th century, lies about a mile away. （建筑群，平面感）</p>
<h3 id="promontory"><a href="#promontory" class="headerlink" title="promontory"></a><a href="#promontory"></a>promontory</h3><p>promontory (headland): a long narrow area of high land that sticks out into the sea</p>
<p>cape: a very large piece of land sticking out into the sea</p>
<p>the Cape of Good Hope 好望角</p>
<h3 id="at-one-time"><a href="#at-one-time" class="headerlink" title="at one time"></a><a href="#at-one-time"></a>at one time</h3><p>= once</p>
<p>take two pills at a time 一次吃两片药</p>
<p>The city at one time must have seen &#x2F; known prosperity. 经历</p>
<h3 id="enjoy-享有（好的东西）"><a href="#enjoy-享有（好的东西）" class="headerlink" title="enjoy 享有（好的东西）"></a><a href="#enjoy-%E4%BA%AB%E6%9C%89%EF%BC%88%E5%A5%BD%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%89"></a>enjoy 享有（好的东西）</h3><p>enjoy good health<br>enjoy a high standard of living<br>The garments are magnificent and tasteful and have long enjoyed great fame both at home and abroad.</p>
<p>be blessed with … 享有<br>They were blessed with two children, a boy and a girl.</p>
<p>be endowed with … 天生就有<br>She is endowed with both brains and beauty. 才貌双全</p>
<p>We hold（我们认为） these truths to be self-evident, that all men are created equal, that they are endowed by the Creator with certain unalienable rights, that among these are life, liberty, and the pursuit of happiness. ― Thomas Jefferson</p>
<p>boast 事物有 …<br>There is a lot of beautiful scenery in China.<br>China boasts a lot of beautiful scenery.</p>
<h3 id="a-girl-with-blue-eyes"><a href="#a-girl-with-blue-eyes" class="headerlink" title="a girl with blue eyes"></a><a href="#a-girl-with-blue-eyes"></a>a girl with blue eyes</h3><p>a mug with a broken handle<br>a vastly improved method<br>a much acclaimed novel 备受称赞的小说</p>
<h3 id="equip-A-with-B"><a href="#equip-A-with-B" class="headerlink" title="equip A with B"></a><a href="#equip-a-with-b"></a>equip A with B</h3><p>be equipped with …<br>equipment 设备 不可数<br>The classrooms are equipped with modern multimedia teaching equipment.</p>
<p>a great many (of ) + 可数名词<br>a great number of … + 可数名词</p>
<p>a great amount &#x2F; deal of … + 不可数名词</p>
<h3 id="beneath"><a href="#beneath" class="headerlink" title="beneath"></a><a href="#beneath"></a>beneath</h3><p>beneath &#x2F; underneath -&gt; on 贴着<br>under -&gt; over 隔着点距离<br>below -&gt; above 未必正下正上方</p>
<h3 id="be-used-as-…"><a href="#be-used-as-…" class="headerlink" title="be used as …"></a><a href="#be-used-as-%E2%80%A6"></a>be used as …</h3><p>The wooden box is used as a seat.</p>
<p>act &#x2F; serve &#x2F; function as …<br>The wooden box acts &#x2F; serves &#x2F; functions as a seat.</p>
<h3 id="BC-x2F-AD"><a href="#BC-x2F-AD" class="headerlink" title="BC &#x2F; AD"></a><a href="#bc-/-ad"></a>BC &#x2F; AD</h3><p>B.C. (BC): Before Christ<br>A.D. (AD): Anno Domini</p>
<h3 id="times-x2F-age"><a href="#times-x2F-age" class="headerlink" title="times&#x2F;age"></a><a href="#times/age"></a>times&#x2F;age</h3><p>in modern &#x2F; recent &#x2F; ancient &#x2F; prehistoric times</p>
<p>in times of … in times of peace &#x2F; war 在和平时期&#x2F;在战争时期</p>
<p>In times of peace, when business was bad, Hawkwood and his men would march into a city-state …</p>
<p>age the Ice Age 冰川时代 注意大写 固定用法<br>the Stone Age 石器时代 注意大写 固定用法<br>the modern age<br>the computer age</p>
<p>era &#x2F; epoch 时代时期</p>
<p>the steam-engine era &#x2F; epoch<br>the end of an era &#x2F; epoch<br>His death marked the end of an era.<br>the beginning of a new era &#x2F; epoch</p>
<p>It marked the end of the great tradition of ships with sails and the beginning of a new era.</p>
<p>The foundation of the People’s Republic of China marked the beginning of a new era.</p>
<h3 id="represent"><a href="#represent" class="headerlink" title="represent"></a><a href="#represent"></a>represent</h3><p>= stand for<br>Honey, this gold ring stands for &#x2F; represents my love for you.</p>
<p>on behalf of …</p>
<p>Premier Li Keqiang delivered a speech on behalf of the Chinese government during the meeting</p>
<blockquote>
<p>deliver a speech</p>
</blockquote>
<p>Premier Li Keqiang delivered a speech representing &#x2F; standing for the Chinese government during the meeting.</p>
<h3 id="date-from-…-可以追溯到"><a href="#date-from-…-可以追溯到" class="headerlink" title="date from … 可以追溯到"></a><a href="#date-from-%E2%80%A6-%E5%8F%AF%E4%BB%A5%E8%BF%BD%E6%BA%AF%E5%88%B0"></a>date from … 可以追溯到</h3><p>date back to …<br>can be traced back to …</p>
<h3 id="造句"><a href="#造句" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>丝绸之路 (the Silk Road) 的繁荣可以追溯到遥远的汉朝。<br>The prosperity of the Silk Road dates from &#x2F; dates back to &#x2F; can be traced back to the distant Han Dynasty.</p>
<h3 id="happen-to-do"><a href="#happen-to-do" class="headerlink" title="happen to do"></a><a href="#happen-to-do"></a>happen to do</h3><p>碰巧，千万不要翻译成发生<br>= it happen that …</p>
<p>sth. happen to sb.<br>A car accident happened to him. 他发生了一起车祸</p>
<p>We happened to take the same train.<br>It happened that we took the same train.</p>
<p>chance to do<br>it chance that …</p>
<p>We chanced to take the same train.<br>It chanced that we took the same train.</p>
<p>by chance by accident<br>accidentally<br>We took the same train by chance &#x2F; by accident &#x2F; accidentally.</p>
<p>as it happen 碰巧<br>As it happened, we took the same train.</p>
<p>W: I don’t imagine you would have time to help me with this. 我想你没有时间帮我<br>M: As it happens, I would.<br>Q: What does the man mean? Answer: (B) He can help the woman.</p>
<p>as luck would have it 碰巧，但是不带感情色彩<br>As luck would have it, we took the same train.</p>
<p>W: You do look cold. What happened?<br>M: I’ve been standing outside in Arctic temperature for over an hour waiting for a bus.<br>W: Over an hour, but I thought your apartment was only a ten-minute bus ride to campus.<br>M: Under normal conditions, but the bus was delayed because of the weather and when I stepped into a drugstore to call home for a ride, the bus went by. As luck would have it, there was no one at home, so I had to wait another forty five minutes for the next bus.<br>W: That’s Murphy’s law, isn’t it. What was it said “If anything can go wrong, it will.” Well, we still get twenty minutes to gather our wits together.</p>
<blockquote>
<p>drugstore 杂货铺<br>gather our wits 冷静下 不是收集智慧</p>
</blockquote>
<h3 id="preserve"><a href="#preserve" class="headerlink" title="preserve"></a><a href="#preserve"></a>preserve</h3><p>preserve keep sth. in good condition 保持质量<br>preserve one’s eyesight &#x2F; food</p>
<p>conserve 保持数量不下降<br>conserve wildlife &#x2F; resources</p>
<p>reserve 保留以备后续使用<br>Reserve your energy for the climb tomorrow.</p>
<p>All Rights Reserved<br>I reserve the right to disagree.<br>reserve a table for 2</p>
<h3 id="nervous"><a href="#nervous" class="headerlink" title="nervous"></a><a href="#nervous"></a>nervous</h3><p>anxious 发音不要勾舌头</p>
<h3 id="使惊讶"><a href="#使惊讶" class="headerlink" title="使惊讶"></a><a href="#%E4%BD%BF%E6%83%8A%E8%AE%B6"></a>使惊讶</h3><p>surprise</p>
<p>astonish 不敢相信眼睛，不敢相信耳朵<br>He was astonished at what he found.A man was lying in the box on top of a pile of woolen goods.</p>
<p>amaze 迷惑地惊讶</p>
<p>astound 惊呆了，像石头一样<br>The police were astounded when Mrs. Ramsay told them what she had done.</p>
<h3 id="turn-out-to-be"><a href="#turn-out-to-be" class="headerlink" title="turn out to be"></a><a href="#turn-out-to-be"></a>turn out to be</h3><p>turn out to be 出乎意料地原来是<br>prove (to be) 被证明是</p>
<p>Eric’s girlfriend turned out to be his half-sister.</p>
<h3 id="mordern-looking"><a href="#mordern-looking" class="headerlink" title="mordern-looking"></a><a href="#mordern-looking"></a>mordern-looking</h3><p>an interesting-looking carved dagger<br>hard-working<br>easy-going</p>
<h3 id="stand"><a href="#stand" class="headerlink" title="stand"></a><a href="#stand"></a>stand</h3><p>The tower stands 15 meters (high). 书面语，相当于 be 动词</p>
<p>weigh<br>The boy weighs 50 kilos.</p>
<p>measure<br>The carpet measures 5 meters long.<br>The carpet measures 3 meters across.</p>
<h3 id="rest-on"><a href="#rest-on" class="headerlink" title="rest on"></a><a href="#rest-on"></a>rest on</h3><p>Her hands rested on her hips. 叉腰站立<br>Her face rested on her hands. 手托香腮</p>
<h3 id="尽管"><a href="#尽管" class="headerlink" title="尽管"></a><a href="#%E5%B0%BD%E7%AE%A1"></a>尽管</h3><p>介词<br>despite<br>in spite of<br>notwithstanding</p>
<p>连词<br>though<br>although<br>even though<br>while</p>
<p>以下结构仅用于书面语中<br>in spite of the fact that …<br>despite the fact that …<br>Despite the fact that the bottle is tinted a delicate shade of green, an observant visitor would soon notice that it is filled with what looks like a thick, grayish substance.</p>
]]></content>
      <categories>
        <category>新概念英语三</category>
      </categories>
  </entry>
  <entry>
    <title>关于健康</title>
    <url>/health-info/</url>
    <content><![CDATA[<p><a href="https://labtestsonline.org.cn/">Lab Tests Online</a> 旨在帮助病人或家庭护理员更好地了解众多的临床检验项目，这是作为日常护理及诊断和治疗各种疾病的一部分。如果您是一位医学专业人士，通过这个网站可以快速获取相关知识，及时了解实验室最新进展。 <a href="https://www.msdmanuals.com/zh/">默沙东诊疗手册</a>是一个涵盖了医学所有领域成千上万主题的广泛医学信息来源。它们作为免费的公众服务提供给医疗专业人士和普罗大众。</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>用 git revert 撤回 merge 了的 commit</title>
    <url>/git-revert-m/</url>
    <content><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a><a href="#%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF"></a>应用场景</h2><p>当我们开发完某项功能，合并到 develop 分支后，其他人又提交了他们的代码。本来准备要上线了，这时由于某些原因，项目经理表示要撤回我们提交的代码，这个功能这次不上线了。这时候 git revert 就派上用场啦。</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a><a href="#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C"></a>准备工作</h2><p>我们来创建一个提交历史做实验。 首先创建一个 repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir git-revert-merge-commit</span><br><span class="line">cd git-revert-merge-commit</span><br><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>在 master 分支新建两个文件 file1, file2，提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;file1&#x27; &gt; file1</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;commit file 1 on master&#x27;</span><br><span class="line">echo &#x27;file2&#x27; &gt; file2</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;commit file 2 on master&#x27;</span><br></pre></td></tr></table></figure>

<p>现在我们要做一个新的 feature,我们从 master 分支切出 feature 分支来。然后新建两个文件 file3, file4，并提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch feature</span><br><span class="line">git checkout feature # 或者使用 git checkout -b feature 一键完成上述两步</span><br><span class="line">echo &#x27;file3&#x27; &gt; file3</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;file3 on feature&#x27;</span><br><span class="line">echo &#x27;file4&#x27; &gt; file4</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;file4 on feature&#x27;</span><br></pre></td></tr></table></figure>

<p>在我们开发 feature 的过程中，master 上通常还有别人的提交。这时候我们回到 master 分支上，创建文件 file5, file6 ，提交。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">echo &#x27;file5&#x27; &gt; file5</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;file 5 on master&#x27;</span><br><span class="line">echo &#x27;file6&#x27; &gt; file6</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;file 6 on master&#x27;</span><br></pre></td></tr></table></figure>

<p>OK，这个时候，我们把 feature 合并到 master 上去。先给他打个标签。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git checkout feature</span><br><span class="line">git tag thumbup-feature</span><br><span class="line">git checkout master</span><br><span class="line">git pull origin master # 拉取远程 master 合并到本地 master 没有远程就跳过。</span><br><span class="line">git merge thumbup-feature --no-ff # --no-ff 是为了避免 fast-forward</span><br></pre></td></tr></table></figure>

<p>好了，其他人也没闲着，又在 master 分支上新建了 file7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;file7&#x27; &gt; file7</span><br><span class="line">git add . &amp;&amp; git commit -m &#x27;file 7 on master&#x27;</span><br></pre></td></tr></table></figure>

<p>好了，咱们来看一眼 source tree 中的提交记录。 <img src="/wp-content/uploads/2021/01/git_history.png"></p>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a><a href="#%E5%AE%9E%E9%AA%8C"></a>实验</h2><p>这时候，项目经理要求撤回你的 feature ,就是撤回 file3, file 4 on feature。 我们 merge 的 commit id 是 4ff73d0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert 4ff73d0</span><br></pre></td></tr></table></figure>

<p>会报错： <img src="/wp-content/uploads/2021/01/git_revert_failed.png"> 看下<a href="https://git-scm.com/docs/git-revert#git-revert--mparent-number">官方文档</a>的说法：</p>
<blockquote>
<p>-m parent-number —mainline parent-number Usually you cannot revert a merge because you do not know which side of the merge should be considered the mainline. This option specifies the parent number (starting from 1) of the mainline and allows revert to reverse the change relative to the specified parent. Reverting a merge commit declares that you will never want the tree changes brought in by the merge. As a result, later merges will only bring in tree changes introduced by commits that are not ancestors of the previously reverted merge. This may or may not be what you want.</p>
</blockquote>
<p>我们看到 merge 的 commit 有两个 parents <img src="/wp-content/uploads/2021/01/git_commit_parents.png"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert 4ff73d0 -m 1</span><br></pre></td></tr></table></figure>

<p>将以 file 6 on master 那次提交作为 base, 那么撤回的是 file 3, file 4。 结果如下： <img src="/wp-content/uploads/2021/01/git_revert_m1.png"> 这时候我们恢复到上面一次提交，撤销这次的 revert 操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard df521a0</span><br></pre></td></tr></table></figure>

<p><img src="/wp-content/uploads/2021/01/git_history.png"> 然后尝试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert 4ff73d0 -m 2</span><br></pre></td></tr></table></figure>

<p>将以 file 4 on feature 那次提交作为 base, 撤回 file 5, file 6. <img src="/wp-content/uploads/2021/01/git_revert_m2.png"> 如果我们继续</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git revert 4ff73d0 -m 1</span><br></pre></td></tr></table></figure>

<p>那么跟之前一样，将以 file 6 on master 那次提交作为 base, 撤回 file 3, file 4。 至此 file3,file4,file5,file6 全部撤销。 <img src="/wp-content/uploads/2021/01/git_revert_all.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><a href="#%E6%80%BB%E7%BB%93"></a>总结</h2><p>git revert -m {n} 可以用来撤销 merge 了的 commit 。</p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/p/35606214">当你决定去 revert 一个merge commit</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Octave 教程</title>
    <url>/octave-%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>参考这个总结 <a href="https://www.jianshu.com/p/02d81dda33ae">Octave 教程</a> octave 中取矩阵内容的符号 矩阵A为 1   2   3 4   5   6 7   8   9 A(1, 3) 取第一行，第三列的数值，ans&#x3D;3 A(1:2,1:2) 取第一第二行，第一第二列 ans &#x3D; 1   2 4  5 A(1:4) 按顺序，取第一个到第四个的数值 [1, 4, 7, 2] A(2) ans &#x3D; 4 A(:) A的全部内容，[1 4 7 2 5 8 3 6 9]</p>
]]></content>
      <categories>
        <category>uncategorized</category>
      </categories>
  </entry>
  <entry>
    <title>Bash Shell 学习笔记</title>
    <url>/bash-shell-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="查看系统支持的-shell-与默认的-shell"><a href="#查看系统支持的-shell-与默认的-shell" class="headerlink" title="查看系统支持的 shell 与默认的 shell"></a><a href="#%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%94%AF%E6%8C%81%E7%9A%84-shell-%E4%B8%8E%E9%BB%98%E8%AE%A4%E7%9A%84-shell"></a>查看系统支持的 shell 与默认的 shell</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it centos bash</span><br><span class="line">docker ps -a</span><br><span class="line">docker start b4809e7f9e71</span><br><span class="line">docker exec -it b4809e7f9e71 bash</span><br></pre></td></tr></table></figure>

<p>查看当前系统支持的 shell <code>cat /etc/shells</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/usr/bin/sh</span><br><span class="line">/usr/bin/bash</span><br></pre></td></tr></table></figure>

<p>Mac 系统上 <code>cat /etc/shells</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># List of acceptable shells for chpass(1).</span><br><span class="line"># Ftpd will not allow users to connect who are not using</span><br><span class="line"># one of these shells.</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>

<p>&#x2F;bin&#x2F;sh (已经被 &#x2F;bin&#x2F;bash 所取代) &#x2F;bin&#x2F;bash (就是 Linux 默认的 shell) &#x2F;bin&#x2F;ksh (Kornshell 由 AT&amp;T Bell lab. 发展出来的，兼容于 bash) &#x2F;bin&#x2F;tcsh (整合 C Shell ，提供更多的功能) &#x2F;bin&#x2F;csh (已经被 &#x2F;bin&#x2F;tcsh 所取代) &#x2F;bin&#x2F;zsh (基于 ksh 发展出来的，功能更强大的 shell) 查看当前系统的默认 shell <code>echo $SHELL</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure>

<p>&#x2F;bin&#x2F;bash 是二进制文件 <a href="https://www.gnu.org/software/bash/">下载 bash 源码</a> <a href="https://www.baeldung.com/linux/read-source-code-shell-commands">Read the Source Code of Shell Commands</a> <a href="https://my.oschina.net/sukai/blog/295866">写一个简单的 shell</a></p>
<h3 id="I-x2F-O-重定向"><a href="#I-x2F-O-重定向" class="headerlink" title="I&#x2F;O 重定向"></a><a href="#i/o-%E9%87%8D%E5%AE%9A%E5%90%91"></a>I&#x2F;O 重定向</h3><h4 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a><a href="#%E8%BE%93%E5%87%BA%E9%87%8D%E5%AE%9A%E5%90%91"></a>输出重定向</h4><p>我们使用 “&gt;” 重定向符，其后跟着文件名，来重定向标准输出到一个文件而不是屏幕。 为什么我们要这样做呢？因为有时候把一个命令的运行结果存储到一个文件很有用处。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /usr/bin &gt; ls-output.txt</span><br></pre></td></tr></table></figure>

<p>“&gt;” 总是从头开始写文件。所以如果我们需要删除一个文件内容（或者创建一个新的空文件） 就可以用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ls-output.txt</span><br></pre></td></tr></table></figure>

<p>使用 “&gt;&gt;” 操作符，可以将输出结果添加到文件内容之后。如果文件不存在，文件会被创建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /usr/bin &gt;&gt; ls-output.txt</span><br></pre></td></tr></table></figure>

<p>下面这个命令发生错误时，将会导致 ls-output.txt 被清空，因为标准错误并没有被重定向</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /bin/usr &gt; ls-output.txt</span><br></pre></td></tr></table></figure>

<p>重定向标准错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /bin/usr 2&gt; ls-error.txt</span><br></pre></td></tr></table></figure>

<p>文件描述符 “2”，紧挨着放在重定向操作符之前。 文件描述符 0，1 和 2 分别对应标准输入，输出和错误。 一般情况下，每个Linux程序运行时都会创建三个文件流（三个文件）： 标准输入流(stdin)：stdin的文件描述符为0，Linux程序默认从stdin读取数据。 标准输出流(stdout)：stdout 的文件描述符为1，Linux程序默认向stdout输出数据。 标准错误流(stderr)：stderr的文件描述符为2，Linux程序会向stderr流中写入错误信息。 重定向标准输出和错误到同一个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>使用这种方法，我们完成两个重定向。首先重定向标准输出到文件 ls-output.txt，然后重定 向文件描述符 2（标准错误）到文件描述符 1（标准输出）使用表示法 2&gt;&amp;1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /bin/usr &amp;&gt; ls-output.txt</span><br></pre></td></tr></table></figure>

<p>处理不需要的输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l /bin/usr 2&gt; /dev/null</span><br></pre></td></tr></table></figure>

<p>“&#x2F;dev&#x2F;null” 这个文件是系统设备，叫做位存储桶，它可以接受输入，并且对输入不做任何处理。</p>
<h4 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a><a href="#%E8%BE%93%E5%85%A5%E9%87%8D%E5%AE%9A%E5%90%91"></a>输入重定向</h4><p><code>wc -l &lt; users</code> 计算 users 文件中的行数，等同于 <code>wc -l users</code></p>
<h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a><a href="#%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87"></a>移动光标</h3><h4 id="命令行中移动光标"><a href="#命令行中移动光标" class="headerlink" title="命令行中移动光标"></a><a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%AD%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87"></a>命令行中移动光标</h4><p>Ctrl + a</p>
<p>光标移动到行首（Ahead of line）</p>
<p>Ctrl + e</p>
<p>光标移动到行尾（End of line）</p>
<p>Ctrl + f</p>
<p>光标向前(Forward)移动一个字符位置</p>
<p>Ctrl + b</p>
<p>光标往回(Backward)移动一个字符位置</p>
<p>Alt + f (Mac Fn+option &#x3D; Alt)</p>
<p>光标向前（Forward）移动到下一个单词</p>
<p>Alt + b (Mac Fn+option &#x3D; Alt)</p>
<p>光标往回（Backward）移动到前一个单词</p>
<p>Ctrl + d</p>
<p>删除光标所在的一个字符</p>
<p>Ctrl + h</p>
<p>退格删除一个字符，相当于通常的Backspace键 H is the ASCII BS (Backspace) character</p>
<p>Ctrl + l</p>
<p>清屏，相当于执行clear命令</p>
<p>Ctrl + U</p>
<p>剪切光标之前的所有文本。</p>
<p>Ctrl + K</p>
<p>剪切光标之后的所有文本。</p>
<p>Ctrl + W</p>
<p>剪切光标之前的一个单词。</p>
<p>Ctrl + Y</p>
<p>粘贴剪切的内容，与 Ctrl + W和 Ctrl + U配合使用。</p>
<p><a href="https://ss64.com/bash/syntax-keyboard.html">Bash Keyboard Shortcuts</a> <a href="https://fungleo.blog.csdn.net/article/details/78055808">mac 下使用 iTerm 终端工具无法使用 alt+b 和 alt+f 快捷键的解决方法</a></p>
<h4 id="vi-移动光标"><a href="#vi-移动光标" class="headerlink" title="vi 移动光标"></a><a href="#vi-%E7%A7%BB%E5%8A%A8%E5%85%89%E6%A0%87"></a>vi 移动光标</h4><p>l or 右箭头 向右移动一个字符 h or 左箭头 向左移动一个字符 j or 下箭头 向下移动一行 k or 上箭头 向上移动一行 0 (零按键) 移动到当前行的行首。 ˆ 移动到当前行的第一个非空字符。 $ 移动到当前行的末尾。 w 移动到下一个单词或标点符号的开头。 W 移动到下一个单词的开头，忽略标点符号。 b 移动到上一个单词或标点符号的开头。 B 移动到上一个单词的开头，忽略标点符号。 Ctrl-f or Page Down 向下翻一页 Ctrl-b or Page Up 向上翻一页 numberG 移动到第 number 行。例如，1G 移动到文件的第一行。 G 移动到文件末尾。 vi 中的许多命令都可以在前面加上一个数字，比方说上面提到的 “G” 命令。在命令之前加 上一个数字，我们就可以指定命令执行的次数。例如，命令 “5j” 导致 vi 向下移动 5 行。</p>
<h3 id="管道线"><a href="#管道线" class="headerlink" title="管道线"></a><a href="#%E7%AE%A1%E9%81%93%E7%BA%BF"></a>管道线</h3><p>有时候，我们可以把两个命令连起来使用，一个命令的输出作为另一个命令的输入，这就叫做管道。为了建立管道，需要在两个命令之间使用竖线()连接。 管道是Linux进程之间一种重要的通信机制；除了管道，还有共享内存、消息队列、信号、套接字(socket) 等进程通信机制。 管道使用竖线()将两个命令隔开，竖线左边命令的输出就会作为竖线右边命令的输入。连续使用竖线表示第一个命令的输出会作为第二个命令的输入，第二个命令的输出又会作为第三个命令的输入，依此类推。</p>
<h3 id="常用的命令"><a href="#常用的命令" class="headerlink" title="常用的命令"></a><a href="#%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4"></a>常用的命令</h3><h4 id="type"><a href="#type" class="headerlink" title="type"></a><a href="#type"></a>type</h4><p>type - 显示命令的类型 alias：别名。 keyword：关键字，Shell保留字。 function：函数，Shell函数。 builtin：内建命令，Shell内建命令。 file：文件，磁盘文件，外部命令。 unfound：没有找到 <a href="https://man.linuxde.net/type">https://man.linuxde.net/type</a></p>
<h4 id="help-amp-man-amp-info-amp-—help"><a href="#help-amp-man-amp-info-amp-—help" class="headerlink" title="help &amp; man &amp; info &amp; —help"></a><a href="#help-&-man-&-info-&---help"></a>help &amp; man &amp; info &amp; —help</h4><p>help - 得到 shell 内部命令的帮助文档 man –显示命令手册页 许多希望被命令行使用的可执行程序，提供了一个正式的文档，叫做手册或手册页 (man page)。一个特殊的叫做 man 的分页程序，可用来浏览他们。 info – 显示程序 Info 条目 同 man 的应用场景一致，但 info 查询所显示的信息比 man 更为完整，它将说明文件数据拆成了一个个段落的形式，每个段落都有自己的页面来撰写，还有超链接可以跳转到各个页面中去，每个页面成为一个 node。这要求目标数据的说明文件必须是以info格式写成的才可以使用info来查询。 许多可执行程序支持一个 “—help” 选项，可以试一试来获得用法信息。</p>
<h4 id="which-amp-apropos-amp-whatis"><a href="#which-amp-apropos-amp-whatis" class="headerlink" title="which &amp; apropos &amp; whatis"></a><a href="#which-&-apropos-&-whatis"></a>which &amp; apropos &amp; whatis</h4><p>which – 显示一个可执行程序的位置 这个命令只对可执行程序有效，不包括内部命令和命令别名， apropos –显示一系列适合的命令 等同于 man -k whatis –他是一个可执行程序，用来显示一个命令的简洁描述 等同于 man -f</p>
<h4 id="alias"><a href="#alias" class="headerlink" title="alias"></a><a href="#alias"></a>alias</h4><p>alias –创建命令别名 alias name&#x3D;’command1; command2; command3…’ 删除别名，使用 unalias 命令 unalias name 要查看所有定义在系统环境中的别名，使用不带参数的 alias 命令</p>
<h4 id="history-amp-Ctrl-r"><a href="#history-amp-Ctrl-r" class="headerlink" title="history &amp; Ctrl + r"></a><a href="#history-&-ctrl-+-r"></a>history &amp; Ctrl + r</h4><p>history 显示历史列表 history less history grep &#x2F;usr&#x2F;bin <code>!88</code> bash 会把 “!88” 展开成为历史列表中 88 行的内容 Ctrl + r 调用历史命令 在 bash 界面，Ctrl + r 后输入你要搜索的字符，然后 Ctrl + r 可以向上翻，如果你想改动的话，可以用 Ctrl + b 等操作来移动(参考命令行中移动光标)，修改，最后按回车 <a href="https://www.cnblogs.com/bkylee/p/5567679.html">ctrl+r 调用bash曾经的历史命令</a></p>
<h4 id="less"><a href="#less" class="headerlink" title="less"></a><a href="#less"></a>less</h4><p>less 的用法 less &#x2F;etc&#x2F;passwd history less Page UP or b 向后翻滚一页 Page Down or space 向前翻动一页 UP Arrow 向前移动一行 Down Arrow 向后移动一行 G 移动到最后一行 1G or g 移动到开头一行 &#x2F;charaters 向下查找指定的字符串 ?字符串：向上搜索”字符串”的功能 n 向下查找下一个出现的字符串，这个字符串是之前所指定查找的 N：向上重复前一个搜索（与 &#x2F; 或 ? 有关） h 显示帮助屏幕 q 退出 less 程序</p>
<h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a><a href="#cat"></a>cat</h4><p>cat 的用法 cat 命令读取一个或多个文件，然后复制它们到标准输出，就像这样: <code>cat ls-output.txt</code>将会显示文件 ls-output.txt 的内容。 cat 经常被用来显示简短的文本文件。因为 cat 可以接受不止一个文件作为参数，所以它也可以用来把文件连接在一起。比方说我们下载了一个大型文件，这个文件被分离成多个部分（USENET 中的多媒体文件经常以这种方式分离），我们想把它们连起来。 <code>cat movie.mpeg.0* &gt; movie.mpeg</code> 如果 cat 没有给出任何参数，它会从标准输入读入数据，因为标准输入，默认情况下，连接到键盘。它正在等待我们输入数据！ 下一步，输入 Ctrl-d（按住 Ctrl 键同时按下 “d”），来告诉 cat，在标准输入中，它已经到达文件末尾（EOF）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat &gt; a.txt</span><br></pre></td></tr></table></figure>

<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a><a href="#grep"></a>grep</h4><p>grep －打印匹配行 “global regular expression print” grep [options] regex [file…]</p>
<p>选项</p>
<p>描述</p>
<p>-i</p>
<p>忽略大小写。不会区分大小写字符。也可用 —ignore-case 来指定。</p>
<p>-v</p>
<p>不匹配。通常，grep 程序会打印包含匹配项的文本行。这个选项导致 grep 程序只会不包含匹配项的文本行。也可用 —invert-match 来指定。</p>
<p>-c</p>
<p>打印匹配的数量（或者是不匹配的数目，若指定了 -v 选项），而不是文本行本身。也可用 —count 选项来指定。</p>
<p>-l</p>
<p>打印包含匹配项的文件名，而不是文本行本身，也可用 —files-with-matches 选项来指定。</p>
<p>-L</p>
<p>相似于 -l 选项，但是只是打印不包含匹配项的文件名。也可用 —files-without-match 来指定。</p>
<p>-n</p>
<p>在每个匹配行之前打印出其位于文件中的相应行号。也可用 —line-number 选项来指定。</p>
<p>-h</p>
<p>应用于多文件搜索，不输出文件名。也可用 —no-filename 选项来指定。</p>
<p>-r</p>
<p>表示递归查找</p>
<p>以递归的方式查找符合条件的文件。例如，查找指定目录&#x2F;etc&#x2F;acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep -r update /etc/acpi</span><br></pre></td></tr></table></figure>

<p>查找 mcom-connector.log 中包含 ‘CTW21’ 字符的行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grep &#x27;CTW21&#x27; mcom-connector.log</span><br></pre></td></tr></table></figure>

<p>grep 和 find 的区别 grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式进行匹配查找。 find是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间。</p>
<h4 id="find"><a href="#find" class="headerlink" title="find"></a><a href="#find"></a>find</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -type f -name &quot;xdebug.so&quot;</span><br></pre></td></tr></table></figure>

<p>查找名称为 xdebug.so 的普通文件</p>
<h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a><a href="#sort"></a>sort</h4><p>sort 的用法 sort testfile 这个 sort 程序对标准输入的内容，或命令行中指定的一个或多个文件进行排序，然后把排序结果发送到标准输出。不改变原文件的内容。 与 cat 类似， sort &gt; foo.txt c b a cat foo.txt a b c 因为 sort 程序能接受命令行中的多个文件作为参数，所以有可能把多个文件合并成一个有序的文件。 例如，如果我们有三个文本文件，想要把它们合并为一个有序的文件，我们可以这 样做： sort file1.txt file2.txt file3.txt &gt; final_sorted_list.txt</p>
<h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a><a href="#xargs"></a>xargs</h4><p><a href="https://www.runoob.com/linux/linux-comm-xargs.html">https://www.runoob.com/linux/linux-comm-xargs.html</a></p>
<h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a><a href="#wc"></a>wc</h4><p>wc 计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据。 $ wc testfile # testfile文件的统计信息 3 92 598 testfile # testfile文件的行数为3、单词数92、字节数598</p>
<h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a><a href="#touch"></a>touch</h4><p>touch playground&#x2F;timestamp 这个创建了一个空文件，名为 timestamp，并且把它的修改时间设置为当前时间。 我们能够通过使用命令，stat 来验证它，stat 是一款加大马力的 ls 命令版本。这个 stat 命令会展示系统对某个文件及其属性所知道的所有信息</p>
<h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a><a href="#mv"></a>mv</h4><p>mv 移动和重命名文件 mv 操作文件时是移动并且重命名。 目标目录与原目录一致，指定了新文件名，效果就是仅仅重命名。 mv &#x2F;home&#x2F;ffxhd&#x2F;a.txt &#x2F;home&#x2F;ffxhd&#x2F;b.txt 目标目录与原目录不一致，没有指定新文件名，效果就是仅仅移动。 mv &#x2F;home&#x2F;ffxhd&#x2F;a.txt &#x2F;home&#x2F;ffxhd&#x2F;test&#x2F; 或者 mv &#x2F;home&#x2F;ffxhd&#x2F;a.txt &#x2F;home&#x2F;ffxhd&#x2F;test 目标目录与原目录一致, 指定了新文件名，效果就是：移动 + 重命名。 mv &#x2F;home&#x2F;ffxhd&#x2F;a.txt &#x2F;home&#x2F;ffxhd&#x2F;test&#x2F;c.txt</p>
<h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a><a href="#cp"></a>cp</h4><p>cp 命令使用 -r 参数可以将 packageA 下的所有文件拷贝到 packageB 中： <code>cp -r /home/packageA/* /home/cp/packageB/</code> 将一个文件夹复制到另一个文件夹下，以下实例 packageA 文件会拷贝到 packageB 中： <code>cp -r /home/packageA /home/packageB</code> 运行命令之后 packageB 文件夹下就有 packageA 文件夹了。</p>
<h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><a href="#rm"></a>rm</h4><p>rm [options] name… 参数： -i 删除前逐一询问确认。 -f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。 -r 将目录及以下之档案亦逐一删除。</p>
<h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a><a href="#mkdir"></a>mkdir</h4><p>mkdir [-p] dirName 在工作目录下，建立一个名为 runoob 的子目录 : mkdir runoob 在工作目录下的 runoob2 目录中，建立一个名为 test 的子目录。 若 runoob2 目录原本不存在，则建立一个。（注：本例若不加 -p 参数，且原本 runoob2 目录不存在，则产生错误。）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -p runoob2/test</span><br></pre></td></tr></table></figure>

<h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a><a href="#ln"></a>ln</h4><p>ln 软链接： 1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式 2.软链接可以跨文件系统 ，硬链接不可以 3.软链接可以对一个不存在的文件名进行链接 4.软链接可以对目录进行链接 硬链接： 1.硬链接，以文件副本的形式存在。但不占用实际空间。 2.不允许给目录创建硬链接 3.硬链接只有在同一个文件系统中才能创建 ln [参数][源文件或目录][目标文件或目录]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ln fun fun-hard</span><br><span class="line">ln -s fun fun-sym</span><br></pre></td></tr></table></figure>

<h4 id="head-amp-tail-amp-seq"><a href="#head-amp-tail-amp-seq" class="headerlink" title="head &amp; tail &amp; seq"></a><a href="#head-&-tail-&-seq"></a>head &amp; tail &amp; seq</h4><p>head -n 5 nowcoder.txt 查看前 5 行 tail -n 5 nowcoder.txt 查看最后 5 行 seq 0 7 500 产生 0 到 500 之间每次增加 7 的所有整数</p>
<h4 id="scp"><a href="#scp" class="headerlink" title="scp"></a><a href="#scp"></a>scp</h4><p>从远程复制到本地 scp {xxx}@{ip}:&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;remote.nginx.conf.common &#x2F;Users&#x2F;local&#x2F;dir&#x2F; <a href="https://www.runoob.com/linux/linux-comm-scp.html">Linux scp命令</a></p>
<h3 id="压缩与打包"><a href="#压缩与打包" class="headerlink" title="压缩与打包"></a><a href="#%E5%8E%8B%E7%BC%A9%E4%B8%8E%E6%89%93%E5%8C%85"></a>压缩与打包</h3><p><em>.gz gzip 程序压缩的文件；</em> .bz2 bzip2 程序压缩的文件； <em>.tar tar 程序打包的数据，并没有压缩过；</em> .tar.gz tar 程序打包的文件，其中并且经过 gzip 的压缩 *.tar.bz2 tar 程序打包的文件，其中并且经过 bzip2 的压缩 gzip file 当你使用 gzip 进行压缩时，在默认的状态下原本的文件会被压缩成为 .gz 的档名， 原始文件就不再存在了。 cat 可以读取纯文字档，那个 zcat 则可以读取纯文字档被压缩后的压缩档 bzip2, bzcat 若说 gzip 是为了取代 compress 并提供更好的压缩比而成立的，那么 bzip2 则是为了取代 gzip 并提供更佳的压缩比而来的。 bzip2 真是很不错的东西 虽然 gzip 与 bzip2 也能够针对目录来进行压缩， 不过，这两个命令对目录的压缩指的是『将目录内的所有文件 “分别” 进行压缩』的动作 tar 压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称 查　询：tar -jtv -f filename.tar.bz2 解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录 那个 filename.tar.bz2 是我们自己取的档名，tar 并不会主动的产生创建的档名喔！我们要自订啦！ 所以扩展名就显的很重要了！ 如果不加 [-j-z] 的话，档名最好取为 <em>.tar 即可。 如果是 -j 选项，代表有 bzip2 的支持，因此档名最好就取为</em> .tar.bz2 ，因为 bzip2 会产生 .bz2 的扩展名之故！ 至於如果是加上了 -z 的 gzip 的支持，那档名最好取为 *.tar.gz 喔。 另外，由於『 -f filename 』是紧接在一起的，过去很多文章常会写成『-jcvf filename』，这样是对的， 但由於选项的顺序理论上是可以变换的，所以很多读者会误认为『-jvfc filename』也可以～事实上这样会导致产生的档名变成 c ！ 因为 -fc 嘛！所以罗，建议您在学习 tar 时，将『 -f filename 』与其他选项独立出来，会比较不容易发生问题。 『 -p 』这个选项的原因是为了保存原本文件的权限与属性 一般是拿掉根目录的 如果加上 -P 选项，那么档名内的根目录就会存在喔！不过，鸟哥个人建议，还是不要加上 -P 这个选项来备份！ 毕竟很多时候，我们备份是为了要未来追踪问题用的，倒不一定需要还原回原本的系统中！ 所以拿掉根目录后，备份数据的应用会比较有弹性！也比较安全呢！ 摘自鸟哥的 Linux 私房菜<a href="http://cn.linux.vbird.org/linux_basic/0240tarcompress_3.php">第九章、文件与文件系统的压缩与打包</a></p>
<h3 id="源文件安装"><a href="#源文件安装" class="headerlink" title="源文件安装"></a><a href="#%E6%BA%90%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85"></a>源文件安装</h3><p>大部分的 tarball 软件安装步骤：</p>
<ol>
<li><code>./configure</code> 这个步骤就是在创建 Makefile 这个文件罗！通常程序开发者会写一支 scripts 来检查你的 Linux 系统、相关的软件属性等等，这个步骤相当的重要， 因为未来你的安装资讯都是这一步骤内完成的！另外，这个步骤的相关资讯应该要参考一下该目录下的 README 或 INSTALL 相关的文件！</li>
<li><code>make clean</code> make 会读取 Makefile 中关於 clean 的工作。这个步骤不一定会有，但是希望运行一下，因为他可以去除目标文件！因为谁也不确定原始码里面到底有没有包含上次编译过的目标文件 (*.o) 存在，所以当然还是清除一下比较妥当的。 至少等一下新编译出来的运行档我们可以确定是使用自己的机器所编译完成的嘛！</li>
<li><code>make</code> make 会依据 Makefile 当中的默认工作进行编译的行为！编译的工作主要是进行 gcc 来将原始码编译成为可以被运行的 object files ，但是这些 object files 通常还需要一些函式库之类的 link 后，才能产生一个完整的运行档！使用 make 就是要将原始码编译成为可以被运行的可运行档，而这个可运行档会放置在目前所在的目录之下， 尚未被安装到预定安装的目录中；</li>
<li><code>make install</code> 通常这就是最后的安装步骤了，make 会依据 Makefile 这个文件里面关於 install 的项目，将上一个步骤所编译完成的数据给他安装到预定的目录中，就完成安装啦！</li>
</ol>
<p>通常我们会建议大家将自己安装的软件放置在 &#x2F;usr&#x2F;local 下，至於原始码 (Tarball)则建议放置在 &#x2F;usr&#x2F;local&#x2F;src (src 为 source 的缩写)底下啊。 我们晓得几乎每个软件都会提供线上说明的服务，那就是 info 与 man 的功能。 最好将 tarball 的原始数据解压缩到 &#x2F;usr&#x2F;local&#x2F;src 当中； 安装时，最好安装到 &#x2F;usr&#x2F;local 这个默认路径下； 考虑未来的反安装步骤，最好可以将每个软件单独的安装在 &#x2F;usr&#x2F;local 底下； 为安装到单独目录的软件之 man page 加入 man path 搜寻： 如果你安装的软件放置到 &#x2F;usr&#x2F;local&#x2F;software&#x2F; ，那么 man page 搜寻的配置中，可能就得要在 &#x2F;etc&#x2F;man.config 内的 40~50 行左右处，写入如下的一行： MANPATH &#x2F;usr&#x2F;local&#x2F;software&#x2F;man 这样才可以使用 man 来查询该软件的线上文件罗！ 摘自鸟哥的 Linux 私房菜<a href="http://cn.linux.vbird.org/linux_basic/0520source_code_and_tarball_4.php">第二十二章、软件安装：原始码与 Tarball</a></p>
<h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a><a href="#patch"></a>patch</h3><p>patch -p数字 &lt; patch_file 特别留意那个『 -p数字』，那是与 patch_file 里面列出的档名有关的资讯。假如在 patch_file 第一行写的是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*** /home/guest/example/expatch.old</span><br></pre></td></tr></table></figure>

<p>那么当我下达『 patch -p0 &lt; patch_file 』时，则升级的文件是『 &#x2F;home&#x2F;guest&#x2F;example&#x2F;expatch.old 』，如果『 patch -p1 &lt; patch_file』，则升级的文件为『home&#x2F;guest&#x2F;example&#x2F;expatch.old』。 如果『patch -p4 &lt; patch_file』则升级『expatch.old』。 也就是说， -pxx 那个 xx 代表『拿掉几个斜线(&#x2F;)』的意思！ 透过『 patch -R &lt; ..&#x2F;main_0.1_to_0.2.patch 』就可以还原啦！很有趣吧！</p>
<h3 id="md5sum-x2F-sha1sum"><a href="#md5sum-x2F-sha1sum" class="headerlink" title="md5sum &#x2F; sha1sum"></a><a href="#md5sum-/-sha1sum"></a>md5sum &#x2F; sha1sum</h3><p>md5sum &#x2F; sha1sum 计算文件的指纹码 md5sum&#x2F;sha1sum [-bct] filename</p>
<h3 id="rpm-amp-dpkg"><a href="#rpm-amp-dpkg" class="headerlink" title="rpm &amp; dpkg"></a><a href="#rpm-&-dpkg"></a>rpm &amp; dpkg</h3><p>distribution 代表</p>
<p>软件管理机制</p>
<p>使用命令</p>
<p>线上升级机制(命令)</p>
<p>Red Hat&#x2F;Fedora</p>
<p>RPM</p>
<p>rpm, rpmbuild</p>
<p>YUM (yum)</p>
<p>Debian&#x2F;Ubuntu</p>
<p>DPKG</p>
<p>dpkg</p>
<p>APT (apt-get)</p>
<p>使用dpkg命令进行安装。sudo dpkg -i deb文件名 使用rpm命令进行安装。sudo rpm -i 需要安装的包文件名</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>bash shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Thirteen equals one</title>
    <url>/thirteen-equals-one/</url>
    <content><![CDATA[<h2 id="New-words-and-expressions"><a href="#New-words-and-expressions" class="headerlink" title="New words and expressions"></a><a href="#new-words-and-expressions"></a>New words and expressions</h2><h3 id="equal"><a href="#equal" class="headerlink" title="equal"></a><a href="#equal"></a>equal</h3><p>He equaled the world record. 平了世界纪录</p>
<p>Nobody equals him in strength.<br>= Nobody matches him in strength. 相匹敌</p>
<p>In English she has no equal in her class 在 … 无敌</p>
<p>be &#x2F; stand head and shoulders above sb.<br>be much better than others 明显超过他人，鹤立鸡群<br>In computer programming, Susan is head and shoulders above the rest of us.</p>
<p>Women demand equal pay for equal work.</p>
<p>A is equal to B</p>
<p>equality 不可数 平等</p>
<p>racial equality<br>sexual equality</p>
<p>We wish to inform you that we specialize in garments for more than twenty years, and shall be pleased to establish business relations with you on the basis of equality and mutual benefits.</p>
<h3 id="raise"><a href="#raise" class="headerlink" title="raise"></a><a href="#raise"></a>raise</h3><p>募集，筹措</p>
<p>raise one’s hand 举起一只手<br>raise one’s voice 提高音量<br>raise one’s hat to sb. 打招呼<br>raise one’s glass to sb. 向默认祝酒<br>raise the roof 发脾气大吵大闹</p>
<p>raise pigs 饲养<br>He has a big family to raise. 养活</p>
<p>We’re raising a fund for orphans. 募集资金 及物</p>
<p>rise<br>The sun also rises 太阳照常升起</p>
<p>arise 问题，困难等抽象的东西出现 不及物动词<br>arose &#x2F; arisen<br>Problems arose.</p>
<p>arouse 激起某种情绪<br>arouse one’s pity &#x2F; anger …</p>
<p>―You look happy today.<br>―Yes. I got a raise. 作为名词，涨工资</p>
<p>We pay two thousand Yuan monthly to start. It’s our policy to hire on a trial basis. If you work out all right after three months you will be put on the permanent payroll and be given a raise.</p>
<h2 id="Text"><a href="#Text" class="headerlink" title="Text"></a><a href="#text"></a>Text</h2><h3 id="be-always-doing-sth"><a href="#be-always-doing-sth" class="headerlink" title="be always doing sth."></a><a href="#be-always-doing-sth."></a>be always doing sth.</h3><p>老是做某事 厌烦语气<br>He is always being late.<br>People are always talking about the problems of youth.</p>
<p>be forever doing sth. 同义<br>He is forever talking about the friendly people, the clean atmosphere, the closeness to nature and gentle pace of living.</p>
<p>be constantly &#x2F; continually doing sth. 同义<br>The boys are constantly &#x2F; continually arguing.</p>
<p>Your behavior reflects on me, and I can’t do my job if you’re constantly humiliating me.<br>Constantly? Aside from today, give me one example.</p>
<p>keep (on) doing sth.<br>From the moment he arrived there, he kept on pestering his doctor to tell him when he would be able to go home.</p>
<p>In the process, he enjoyed himself thoroughly and kept telling everybody how much he hated hospitals.</p>
<p>do sth. all the time</p>
<p>W: I thought the doctor said you should stay off your foot until the swelling goes down.<br>M: She did. It just makes me uncomfortable to ask my friends to wait on me all the time. What does the man mean?</p>
<blockquote>
<p>stay off one’s foot 卧床休息<br>the swelling goes down 消肿<br>uncomfortable for 中 o 不发音<br>wait on me &#x3D; serve sb 伺候</p>
</blockquote>
<p>Sam, mess up the kitchen (always)<br>Sam is always messing up the kitchen.</p>
<p>Bruce, leave his dirty dishes on the table (forever)<br>Bruce is forever leaving his dirty dishes on the table.</p>
<p>Peter, try to show me he’s smarter than me (constantly)<br>Peter is constantly trying to show me he is smarter than me.</p>
<p>Mary, borrow my clothes without asking me (continually)<br>Mary is continually borrowing my clothes without asking me.</p>
<p>Why, you, make the same mistakes (keep on doing)<br>Why do you keep on making the same mistakes?</p>
<p>Jane, forget to give me my phone messages (do sth. all the time) Jane forgets to give me my phone messages all the time.</p>
<h3 id="one-cause-or-another"><a href="#one-cause-or-another" class="headerlink" title="one cause or another"></a><a href="#one-cause-or-another"></a>one cause or another</h3><p>各种各样的理由</p>
<p>One would expect them to know their parts by heart and never have cause to falter.<br>He is always asking me for money for one cause or another</p>
<p>one … or another 各种各样的 …<br>Beginners will err at one time or another.<br>Everyone can contribute to society in one way or another.</p>
<p>one … after another 一个又一个的<br>one day after another 日复一日的</p>
<p>encounter one difficulty after another 克服了一个又一个困难<br>achieve one success after another</p>
<h3 id="manage-to-do"><a href="#manage-to-do" class="headerlink" title="manage to do"></a><a href="#manage-to-do"></a>manage to do</h3><p>设法完成了某事</p>
<p>fail to do: 没能完成某事<br>When the journalist again failed to reply, the editor reluctantly published the article as it had originally been written.</p>
<p>have sth. done 请某人做某事<br>I’m going to have my hair cut this weekend.</p>
<p>不愉快的经历或遭遇<br>… people would rather pay large sums of money than have their life work destroyed by gangsters.<br>King Charles Ⅰ had his head cut off.</p>
<p>The house had its window broken in the explosion.</p>
<p>无灵主语<br>The sea bed was scoured with powerful nets and there was tremendous excitement on board when a chest was raised from the bottom.</p>
<p>He lost his confidence.<br>Confidence deserted him.</p>
<p>I couldn’t sleep that night.<br>That night sleep eluded me.</p>
<p>We only travelled half the distance at sunset.<br>Sunset met us halfway.</p>
<p>The past few years witnessed the great influx of foreigners to China, for travelling, studies or business.</p>
<h3 id="造句"><a href="#造句" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>造句：我的小女儿总是抱怨 (complain of) 各种各样的病，但她从未成功地得到允许 (get permission) 呆在家里。<br>My little daughter is always complaining of one illness or another, but she has never managed to get permission to be at home.</p>
<h3 id="used-to-do"><a href="#used-to-do" class="headerlink" title="used to do"></a><a href="#used-to-do"></a>used to do</h3><p>过去常常 现在不了</p>
<p>I used to get up early.</p>
<p>be &#x2F; become &#x2F; get used to n.&#x2F;doing<br>I’m used to getting up early.</p>
<p>‘We’ll get used to that, Bill,’ said the vicar.</p>
<p>Life is not fair, get used to it. — Bill Gates</p>
<p>be accustomed to (doing) sth</p>
<p>For men accustomed to eating seven-course dinners and sleeping between fine linen sheets at home, the change to the Alps must have been very hard indeed.</p>
<h3 id="strike-the-hours"><a href="#strike-the-hours" class="headerlink" title="strike the hours"></a><a href="#strike-the-hours"></a>strike the hours</h3><p>钟打点报时</p>
<p>It would strike twelve in twenty minutes.</p>
<h3 id="ever-since"><a href="#ever-since" class="headerlink" title="ever since"></a><a href="#ever-since"></a>ever since</h3><p>adv. &#x2F; prep. &#x2F; conj. 从那以后，一直……(用完成时）</p>
<p>There are countless people who, ever since their early years, have learned to associate snails with food. 介词</p>
<p>You know how she feels about you. It’s been the same way ever since we were kids. 连词</p>
<h3 id="造句-1"><a href="#造句-1" class="headerlink" title="造句"></a><a href="#%E9%80%A0%E5%8F%A5"></a>造句</h3><p>造句：过去日夜辛苦工作的老王两年前下岗 (be laid off) 了，从那以后就变得懒了。</p>
<p>Lao Wang who used to work hard day and night was laid off two years ago and has been lazy ever since.</p>
<h3 id="wake"><a href="#wake" class="headerlink" title="wake"></a><a href="#wake"></a>wake</h3><p>wake (up): vi &amp; vt. 醒了; 唤醒…<br>up 的小区别是起来没</p>
<p>The doorbell rang loud enough to wake the dead.</p>
<p>go &#x2F; get to sleep fall asleep</p>
<p>toss and turn 辗转反侧 不能入眠<br>I was tossing and turning all night.</p>
<p>insomnia 失眠症<br>He suffered from insomnia.</p>
<p>sit up &#x2F; stay up 熬夜<br>He sat up all night, preparing for the exam.</p>
<p>night owl<br>He is a night owl. 爱熬夜的人</p>
<h3 id="start"><a href="#start" class="headerlink" title="start"></a><a href="#start"></a>start</h3><p>n. 激灵（由于恐惧或惊讶身体突然的一动）<br>wake (up) with a start</p>
<p>She woke from the dream with a start.</p>
<p>with + 名词 作状语修饰谓语动词</p>
<p>The officer went through the case with great care. … 非常仔细地检查了那个箱子</p>
<p>He had spotted a tiny bottle at the bottom of my case and he pounced on it with delight.</p>
<p>Then I added with a smile.</p>
<p>His few material possessions make it possible for him to move from place to place with ease</p>
<p>She faced the difficulty calmly<br>She faced the difficulty with calmness</p>
<p>I looked at her curiously<br>I looked at her with curiousity</p>
<p>She spoke to me tenderly<br>She spoke to me with tenderness</p>
<p>I greeted Philip enthusiastically<br>I greeted Philip with enthusiasm</p>
<h3 id="非谓语作状语"><a href="#非谓语作状语" class="headerlink" title="非谓语作状语"></a><a href="#%E9%9D%9E%E8%B0%93%E8%AF%AD%E4%BD%9C%E7%8A%B6%E8%AF%AD"></a>非谓语作状语</h3><p>Looking at his watch, he saw that it was one o’clock, …<br>When he looked at his watch, he saw that it was one o’clock.</p>
<p>非谓语 (doing; done; to do) 作状语时，一般情况下其隐含的主语应该与主句主语保持一致</p>
<p>Looking at his watch, it was one o’clock.</p>
<h3 id="before-的译法"><a href="#before-的译法" class="headerlink" title="before 的译法"></a><a href="#before-%E7%9A%84%E8%AF%91%E6%B3%95"></a>before 的译法</h3><p>强调主句的时间很长时,译为才<br>It will be a long time before we meet again. 要过很久，我们才能再见面</p>
<p>强调主句的时间很短时,译为就<br>I hadn’t waited long before he came. 我还没等多久，他就来了</p>
<h3 id="arm-sb-with-sth"><a href="#arm-sb-with-sth" class="headerlink" title="arm sb. with sth."></a><a href="#arm-sb.-with-sth."></a>arm sb. with sth.</h3><p>用 sth. 武装 sb.</p>
<p>Armed with a torch, the vicar went up into the clock tower …</p>
<p>sb. carry sth.<br>Carrying a torch, the vicar went up into the clock tower …</p>
<h3 id="go-on"><a href="#go-on" class="headerlink" title="go on"></a><a href="#go-on"></a>go on</h3><p>v. 发生（多用进行时表示正在发生的事）<br>What’s going on here?</p>
<p>happen &#x2F; occur &#x2F; come up &#x2F; come about 未经计划的发生</p>
<p>take place 计划发生<br>The funeral will take place on Monday.</p>
<p>strike 不幸的事突然发生<br>Most people were fast asleep when the earthquake struck 沉睡中</p>
<p>ensue 随之发生<br>I objected to his advice and a heated argument ensued.</p>
<p>coincide (with …) 两件事碰巧同时发生<br>When I came, he was just about to leave.<br>My arrival coincided with his departure.</p>
<h3 id="catch-sight-of-…"><a href="#catch-sight-of-…" class="headerlink" title="catch sight of …"></a><a href="#catch-sight-of-%E2%80%A6"></a>catch sight of …</h3><p>catch a glimpse of … 一眼瞥见<br>glimpse …</p>
<h3 id="figure"><a href="#figure" class="headerlink" title="figure"></a><a href="#figure"></a>figure</h3><p>A farm worker, who stayed up all night, claimed to have seen a figure cutting corn in the moonlight. 人影</p>
<p>a political figure 人物</p>
<p>One of the most colorful figures in boxing history was Daniel Mendoza, who was born in 1764.</p>
<h3 id="recognize-…-as-…"><a href="#recognize-…-as-…" class="headerlink" title="recognize … as …"></a><a href="#recognize-%E2%80%A6-as-%E2%80%A6"></a>recognize … as …</h3><p>I recognized her as one of my classmates</p>
<h3 id="grocer"><a href="#grocer" class="headerlink" title="grocer"></a><a href="#grocer"></a>grocer</h3><p>杂货商</p>
<p>grocery 杂货店 &#x2F; 购买的杂货</p>
<h3 id="发音变化"><a href="#发音变化" class="headerlink" title="发音变化"></a><a href="#%E5%8F%91%E9%9F%B3%E5%8F%98%E5%8C%96"></a>发音变化</h3><p>this year<br>s + j &#x3D; ʃ this year<br>Bless you. I promise you.</p>
<p>t + j &#x3D; tʃ<br>last year don’t you won’t you statue</p>
<p>d + j &#x3D; dʒ<br>did you would you graduate credulous</p>
<p>z + j &#x3D; ʒ<br>May I use your book? How’s your father?</p>
<h3 id="“疑问词-ever-”"><a href="#“疑问词-ever-”" class="headerlink" title="“疑问词+ever ”"></a><a href="#%E2%80%9C%E7%96%91%E9%97%AE%E8%AF%8D+ever-%E2%80%9D"></a>“疑问词+ever ”</h3><p>1.表示 “无论…”<br>Wherever it went, it left behind it a trail of dead deer and small animals like rabbits.</p>
<ol>
<li>表示 “到底…” whenever, wherever, whoever, whichever …<br>Wherever did you go yesterday?<br>When ever am I going to see you again?</li>
</ol>
<p>on earth 到底<br>What on earth has happened to trouble you so?</p>
<p>in the world 到底<br>What in the world are you doing here at seven in the morning?</p>
<p>in God’s &#x2F; heaven’s name 到底<br>What in God’s name was that huge bang?<br>Where in heaven’s name have you been?</p>
<p>the hell 到底 他妈的 比较粗鲁<br>What the hell was that noise?<br>How the hell are we going to do that?</p>
<h3 id="have-been-doing"><a href="#have-been-doing" class="headerlink" title="have been doing"></a><a href="#have-been-doing"></a>have been doing</h3><p>现在完成进行时 表示持续性的动作一直到现在，而且还有可能继续下去</p>
<h3 id="night-after-night"><a href="#night-after-night" class="headerlink" title="night after night"></a><a href="#night-after-night"></a>night after night</h3><p>night by night<br>every night<br>one night after another</p>
<p>day after day<br>day by day<br>every day<br>one day after another</p>
<p>Oceans apart, day after day, and I slowly go insane.</p>
<h3 id="for-weeks-好几周了"><a href="#for-weeks-好几周了" class="headerlink" title="for weeks 好几周了"></a><a href="#for-weeks-%E5%A5%BD%E5%87%A0%E5%91%A8%E4%BA%86"></a>for weeks 好几周了</h3><p>for hours 好几小时了<br>for months 好几个月了<br>for years 好几年了<br>for centuries 好几百年了</p>
<h3 id="was-x2F-were-hoping-…"><a href="#was-x2F-were-hoping-…" class="headerlink" title="was &#x2F; were hoping …"></a><a href="#was-/-were-hoping-%E2%80%A6"></a>was &#x2F; were hoping …</h3><p>表达一种试探性的，委婉的语气。<br>I was hoping you could marry me.</p>
<h3 id="You-certainly-did-give-me-a-surprise"><a href="#You-certainly-did-give-me-a-surprise" class="headerlink" title="You certainly did give me a surprise"></a><a href="#you-certainly-did-give-me-a-surprise"></a>You certainly did give me a surprise</h3><p>强调肯定式 (emphatic positive)<br>在肯定句和祈使句中，在谓语动词前加上助动词 do 以加强语气。只用于一般现在时 (do, does) 和一般过去时 (did) 中。</p>
<p>I do need a car.<br>He does speak English well.<br>So you did come after all.</p>
<p>Come in. Do come in.<br>Shut up! Do shut up!</p>
<h3 id="as-well-…也…"><a href="#as-well-…也…" class="headerlink" title="as well …也…"></a><a href="#as-well-%E2%80%A6%E4%B9%9F%E2%80%A6"></a>as well …也…</h3><p>as well as … 除了…之外, …也…<br>You’ve probably woken up everyone in the village as well (as me).</p>
<h3 id="still-尽管如此，还是-…"><a href="#still-尽管如此，还是-…" class="headerlink" title="still 尽管如此，还是 …"></a><a href="#still-%E5%B0%BD%E7%AE%A1%E5%A6%82%E6%AD%A4%EF%BC%8C%E8%BF%98%E6%98%AF-%E2%80%A6"></a>still 尽管如此，还是 …</h3><p>同义词<br>nevertheless<br>nonetheless<br>all the same<br>just the same</p>
<p>The girl is not beautiful.<br>Still, I like her very much.<br>Nevertheless &#x2F; nonetheless &#x2F; all the same &#x2F; just the same, I like her very much.</p>
<p>Still, I’m glad (that) the bell is working again.</p>
<p>形容词补足语</p>
<p>…, but I’m afraid (that) at one o’clock it will strike thirteen times and there is nothing I can do about it.</p>
<h3 id="there-is-nothing-I-can-do-about-it"><a href="#there-is-nothing-I-can-do-about-it" class="headerlink" title="there is nothing I can do about it"></a><a href="#there-is-nothing-i-can-do-about-it"></a>there is nothing I can do about it</h3><p>对此我无能为力<br>The telephone is out of order, and there is nothing I can do about it.</p>
<blockquote>
<p>be out of order 出故障了</p>
</blockquote>
<p>I know you are not satisfied, but there is nothing I can do about it.<br>We apologize for this, but there is nothing we can do about it.</p>
<h3 id="as-good-as"><a href="#as-good-as" class="headerlink" title="as good as"></a><a href="#as-good-as"></a>as good as</h3><p>Thirteen is not as good as one … 和 … 一样好</p>
<p>as good as: almost 几乎……；和……差不多<br>The injured man is as good as dead.<br>Everything is as good as settled.</p>
<p>As far as I could see, it needed only a minor adjustment: a turn of a screw here, a little tightening up there, a drop of oil and it would be as good as new.</p>
<h3 id="be-not-one’s-cup-of-tea"><a href="#be-not-one’s-cup-of-tea" class="headerlink" title="be not one’s cup of tea"></a><a href="#be-not-one%E2%80%99s-cup-of-tea"></a>be not one’s cup of tea</h3><p>某人不喜欢的东西</p>
<p>Swimming is not my cup of tea. 我不喜欢游泳<br>Mountain hiking is not my cup of tea.</p>
<p>make tea 沏杯茶<br>make water 撒尿</p>
]]></content>
      <categories>
        <category>新概念英语三</category>
      </categories>
  </entry>
</search>
